func for case 050eeedd6c285d8c42f2
crypto/arc4.c:crypto_arc4_crypt(struct crypto_lskcipher *tfm, const u8 *src, u8 *dst, unsigned nbytes, u8 *siv, u32 flags)
crypto/cbc.c:crypto_cbc_create(struct crypto_template *tmpl, struct rtattr **tb)
crypto/cbc.c:crypto_cbc_decrypt_inplace(struct crypto_lskcipher *tfm, u8 *src, unsigned nbytes, u8 *iv)
crypto/cbc.c:crypto_cbc_decrypt_segment(struct crypto_lskcipher *tfm, const u8 *src, u8 *dst, unsigned nbytes, u8 *oiv)
crypto/cbc.c:crypto_cbc_encrypt_inplace(struct crypto_lskcipher *tfm, u8 *src, unsigned nbytes, u8 *oiv)
crypto/cbc.c:crypto_cbc_encrypt_segment(struct crypto_lskcipher *tfm, const u8 *src, u8 *dst, unsigned nbytes, u8 *iv)
crypto/lskcipher.c:crypto_init_lskcipher_ops_sg(struct crypto_tfm *tfm)
crypto/lskcipher.c:crypto_lskcipher_crypt(struct crypto_lskcipher *tfm, const u8 *src, u8 *dst, unsigned len, u8 *iv, int (*crypt)(struct crypto_lskcipher *tfm, const u8 *src, u8 *dst, unsigned len, u8 *iv, u32 flags))
crypto/lskcipher.c:crypto_lskcipher_crypt_sg(struct skcipher_request *req, int (*crypt)(struct crypto_lskcipher *tfm, const u8 *src, u8 *dst, unsigned len, u8 *ivs, u32 flags))
crypto/lskcipher.c:crypto_lskcipher_crypt_unaligned(struct crypto_lskcipher *tfm, const u8 *src, u8 *dst, unsigned len, u8 *iv, int (*crypt)(struct crypto_lskcipher *tfm, const u8 *src, u8 *dst, unsigned len, u8 *iv, u32 flags))
crypto/lskcipher.c:crypto_lskcipher_decrypt(struct crypto_lskcipher *tfm, const u8 *src, u8 *dst, unsigned len, u8 *iv)
crypto/lskcipher.c:crypto_lskcipher_decrypt_sg(struct skcipher_request *req)
crypto/lskcipher.c:crypto_lskcipher_encrypt(struct crypto_lskcipher *tfm, const u8 *src, u8 *dst, unsigned len, u8 *iv)
crypto/lskcipher.c:crypto_lskcipher_encrypt_sg(struct skcipher_request *req)
crypto/lskcipher.c:crypto_lskcipher_init_tfm(struct crypto_tfm *tfm)
crypto/lskcipher.c:crypto_lskcipher_setkey(struct crypto_lskcipher *tfm, const u8 *key, unsigned int keylen)
crypto/lskcipher.c:crypto_register_lskciphers(struct lskcipher_alg *algs, int count)
crypto/lskcipher.c:lskcipher_alloc_instance_simple()
crypto/lskcipher.c:lskcipher_register_instance(struct crypto_template *tmpl, struct lskcipher_instance *inst)
crypto/lskcipher.c:lskcipher_setkey_simple(struct crypto_lskcipher *tfm, const u8 *key, unsigned int keylen)
crypto/lskcipher.c:lskcipher_setkey_unaligned(struct crypto_lskcipher *tfm, const u8 *key, unsigned int keylen)
crypto/skcipher.c:crypto_skcipher_decrypt(struct skcipher_request *req)
crypto/skcipher.c:crypto_skcipher_encrypt(struct skcipher_request *req)
crypto/skcipher.c:crypto_skcipher_setkey(struct crypto_skcipher *tfm, const u8 *key, unsigned int keylen)
crypto/skcipher.c:skcipher_prepare_alg(struct skcipher_alg *alg)
crypto/skcipher.c:skcipher_setkey_unaligned(struct crypto_skcipher *tfm, const u8 *key, unsigned int keylen)
crypto/skcipher.c:skcipher_walk_done(struct skcipher_walk *walk, int err)
crypto/skcipher.c:skcipher_walk_next(struct skcipher_walk *walk)
crypto/skcipher.c:skcipher_walk_virt(struct skcipher_walk *walk, struct skcipher_request *req, bool atomic)
crypto/algif_skcipher.c:_skcipher_recvmsg(struct socket *sock, struct msghdr *msg, size_t ignored, int flags)
crypto/algif_skcipher.c:algif_skcipher_done(void *data, int err)
crypto/algif_skcipher.c:algif_skcipher_export(struct sock *sk, struct skcipher_request *req)
crypto/algif_skcipher.c:skcipher_accept_parent_nokey(void *private, struct sock *sk)
crypto/algif_skcipher.c:skcipher_check_key(struct socket *sock)
crypto/algif_skcipher.c:skcipher_recvmsg(struct socket *sock, struct msghdr *msg, size_t ignored, int flags)
crypto/algif_skcipher.c:skcipher_sendmsg(struct socket *sock, struct msghdr *msg, size_t size)
crypto/algif_skcipher.c:skcipher_sock_destruct(struct sock *sk)
net/socket.c:___sys_recvmsg(struct socket *sock, struct user_msghdr __user *msg, struct msghdr *msg_sys, unsigned int flags, int nosec)
net/socket.c:__sys_recvfrom(int fd, void __user *ubuf, size_t size, unsigned int flags, struct sockaddr __user *addr, int __user *addr_len)
net/socket.c:sock_recvmsg_nosec(struct socket *sock, struct msghdr *msg, int flags)
func for case 8b2a08dfbd25fd933d75
kernel/bpf/verifier.c:bpf_check(struct bpf_prog **prog, union bpf_attr *attr, bpfptr_t uattr)
kernel/bpf/verifier.c:bpf_verifier_vlog(struct bpf_verifier_log *log, const char *fmt, va_list args)
kernel/bpf/verifier.c:check_btf_func(struct bpf_verifier_env *env, const union bpf_attr *attr, bpfptr_t uattr)
kernel/bpf/verifier.c:check_btf_info(struct bpf_verifier_env *env, const union bpf_attr *attr, bpfptr_t uattr)
kernel/bpf/verifier.c:check_btf_line(struct bpf_verifier_env *env, const union bpf_attr *attr, bpfptr_t uattr)
kernel/bpf/verifier.c:check_core_relo(struct bpf_verifier_env *env, const union bpf_attr *attr, bpfptr_t uattr)
kernel/bpf/verifier.c:check_func_arg(struct bpf_verifier_env *env, u32 arg, struct bpf_call_arg_meta *meta, const struct bpf_func_proto *fn)
kernel/bpf/verifier.c:check_helper_call(struct bpf_verifier_env *env, struct bpf_insn *insn, int *insn_idx_p)
kernel/bpf/verifier.c:check_kfunc_call(struct bpf_verifier_env *env, struct bpf_insn *insn, int *insn_idx_p)
kernel/bpf/verifier.c:check_map_prog_compatibility(struct bpf_verifier_env *env, struct bpf_map *map, struct bpf_prog *prog)
kernel/bpf/verifier.c:check_mem_access(struct bpf_verifier_env *env, int insn_idx, u32 regno, int off, int bpf_size, enum bpf_access_type t, int value_regno, bool strict_alignment_once)
kernel/bpf/verifier.c:check_pseudo_btf_id(struct bpf_verifier_env *env, struct bpf_insn *insn, struct bpf_insn_aux_data *aux)
kernel/bpf/verifier.c:check_reg_arg(struct bpf_verifier_env *env, u32 regno, enum reg_arg_type t)
kernel/bpf/verifier.c:check_stack_access_within_bounds(struct bpf_verifier_env *env, int regno, int off, int access_size, enum bpf_access_src src, enum bpf_access_type type)
kernel/bpf/verifier.c:find_btf_percpu_datasec(struct btf *btf)
kernel/bpf/btf.c:__btf_verifier_log_type(struct btf_verifier_env *env, const struct btf_type *t, bool log_details, const char *fmt, ...)
kernel/bpf/btf.c:btf_add_type(struct btf_verifier_env *env, struct btf_type *t)
kernel/bpf/btf.c:btf_check_all_metas(struct btf_verifier_env *env)
kernel/bpf/btf.c:btf_check_all_types(struct btf_verifier_env *env)
kernel/bpf/btf.c:btf_check_meta(struct btf_verifier_env *env, const struct btf_type *t, u32 meta_left)
kernel/bpf/btf.c:btf_func_check_meta(struct btf_verifier_env *env, const struct btf_type *t, u32 meta_left)
kernel/bpf/btf.c:btf_func_proto_check(struct btf_verifier_env *env, const struct btf_type *t)
kernel/bpf/btf.c:btf_func_proto_check_meta(struct btf_verifier_env *env, const struct btf_type *t, u32 meta_left)
kernel/bpf/btf.c:btf_new_fd(const union bpf_attr *attr, bpfptr_t uattr)
kernel/bpf/btf.c:btf_parse()
kernel/bpf/btf.c:btf_parse_type_sec(struct btf_verifier_env *env)
kernel/bpf/btf.c:btf_resolve(struct btf_verifier_env *env, const struct btf_type *t, u32 type_id)
kernel/bpf/btf.c:btf_verifier_log_hdr(struct btf_verifier_env *env, u32 btf_data_size)
kernel/bpf/btf.c:btf_verifier_log_member(struct btf_verifier_env *env, const struct btf_type *struct_type, const struct btf_member *member, const char *fmt, ...)
kernel/bpf/btf.c:btf_verifier_log_vsi(struct btf_verifier_env *env, const struct btf_type *datasec_type, const struct btf_var_secinfo *vsi, const char *fmt, ...)
kernel/bpf/syscall.c:bpf_btf_get_info_by_fd(struct file *file, struct btf *btf, const union bpf_attr *attr, union bpf_attr __user *uattr)
kernel/bpf/syscall.c:bpf_btf_load(const union bpf_attr *attr, bpfptr_t uattr)
kernel/bpf/syscall.c:bpf_link_get_info_by_fd(struct file *file, struct bpf_link *link, const union bpf_attr *attr, union bpf_attr __user *uattr)
bpf_map_create()
kernel/bpf/syscall.c:bpf_map_get_info_by_fd(struct file *file, struct bpf_map *map, const union bpf_attr *attr, union bpf_attr __user *uattr)
kernel/bpf/syscall.c:bpf_obj_get_info_by_fd(const union bpf_attr *attr, union bpf_attr __user *uattr)
kernel/bpf/syscall.c:bpf_prog_get_info_by_fd(struct file *file, struct bpf_prog *prog, const union bpf_attr *attr, union bpf_attr __user *uattr)
kernel/bpf/syscall.c:bpf_prog_load(union bpf_attr *attr, bpfptr_t uattr)
kernel/bpf/btf.c:__btf_verifier_log(struct bpf_verifier_log *log, const char *fmt, ...)
kernel/bpf/btf.c:__btf_verifier_log_type(struct btf_verifier_env *env, const struct btf_type *t, bool log_details, const char *fmt, ...)
kernel/bpf/verifier.c:bpf_verifier_vlog(struct bpf_verifier_log *log, const char *fmt, va_list args)
kernel/bpf/btf.c:btf_check_all_metas(struct btf_verifier_env *env)
kernel/bpf/btf.c:btf_check_meta(struct btf_verifier_env *env, const struct btf_type *t, u32 meta_left)
kernel/bpf/btf.c:btf_func_proto_check_meta(struct btf_verifier_env *env, const struct btf_type *t, u32 meta_left)
kernel/bpf/syscall.c:__sys_bpf(int cmd, bpfptr_t uattr, unsigned int size)
kernel/bpf/syscall.c:bpf_btf_get_info_by_fd(struct file *file, struct btf *btf, const union bpf_attr *attr, union bpf_attr __user *uattr)
kernel/bpf/syscall.c:bpf_obj_get_info_by_fd(const union bpf_attr *attr, union bpf_attr __user *uattr)
func for case 1a0a53300ce782f8b3ad
IORING_OFF_SQES()
fs/file_table.c:__fput(struct file *file)
do_exit()
do_group_exit()
exit_task_work()
fs/io_uring.c:io_do_iopoll(struct io_ring_ctx *ctx, bool force_nonspin)
fs/io_uring.c:io_iopoll_try_reap_events(struct io_ring_ctx *ctx)
fs/io_uring.c:io_ring_ctx_wait_and_kill(struct io_ring_ctx *ctx)
io_uring_enter()
fs/io_uring.c:io_uring_release(struct inode *inode, struct file *file)
fs/io_uring.c:io_uring_setup(u32 entries, struct io_uring_params __user *params)
io_uring_submit()
syz_io_uring_setup()
syz_io_uring_submit()
kernel/task_work.c:task_work_run(void)
fs/file_table.c:__alloc_file()
fs/file_table.c:__fput(struct file *file)
fs/file_table.c:alloc_empty_file()
fs/file_table.c:alloc_empty_file_noaccount()
fs/file_table.c:alloc_file()
fs/file_table.c:alloc_file_clone()
fs/file_table.c:alloc_file_pseudo()
fs/file_table.c:fput_many(struct file *file, unsigned int refs)
task_work_cancel()
kernel/task_work.c:task_work_run(void)
include/linux/fs.h:generic_write_sync(struct kiocb *iocb, ssize_t count)
include/linux/fs.h:iocb_flags(struct file *file)
include/linux/fs.h:kiocb_set_rw_flags(struct kiocb *ki, rwf_t flags)
arch/x86/entry/common.c:do_syscall_32_irqs_on(struct pt_regs *regs, int nr)
arch/x86/entry/common.c:do_syscall_64(struct pt_regs *regs, int nr)
arch/x86/entry/common.c:syscall_32_enter(struct pt_regs *regs)
func for case a168dbeaaa7778273c1b
drivers/video/fbdev/core/sysfillrect.c:bitfill_aligned(struct fb_info *p, unsigned long *dst, int dst_idx, unsigned long pat, unsigned n, int bits)
drivers/video/fbdev/core/sysfillrect.c:bitfill_aligned_rev(struct fb_info *p, unsigned long *dst, int dst_idx, unsigned long pat, unsigned n, int bits)
drivers/video/fbdev/core/sysfillrect.c:bitfill_unaligned(struct fb_info *p, unsigned long *dst, int dst_idx, unsigned long pat, int left, int right, unsigned n, int bits)
drivers/video/fbdev/core/sysfillrect.c:bitfill_unaligned_rev(struct fb_info *p, unsigned long *dst, int dst_idx, unsigned long pat, int left, int right, unsigned n, int bits)
drivers/video/fbdev/core/sysfillrect.c:sys_fillrect(struct fb_info *p, const struct fb_fillrect *rect)
drivers/tty/vt/vt_ioctl.c:change_console(struct vc_data *new_vc))
drivers/tty/vt/vt_ioctl.c:compat_kdfontop_ioctl(struct compat_console_font_op __user *fontop, int perm, struct console_font_op *op, struct vc_data *vc))
drivers/tty/vt/vt_ioctl.c:compat_unimap_ioctl(unsigned int cmd, struct compat_unimapdesc __user *user_ud, int perm, struct vc_data *vc))
drivers/tty/vt/vt_ioctl.c:complete_change_console(struct vc_data *vc))
drivers/tty/vt/vt_ioctl.c:do_unimap_ioctl(int cmd, struct unimapdesc __user *user_ud, bool perm, struct vc_data *vc))
drivers/tty/vt/vt_ioctl.c:reset_vc(struct vc_data *vc))
drivers/tty/vt/vt_ioctl.c:vt_compat_ioctl(struct tty_struct *tty, unsigned int cmd, unsigned long arg))
drivers/tty/vt/vt_ioctl.c:vt_disallocate_all(void))
drivers/tty/vt/vt_ioctl.c:vt_io_ioctl(struct vc_data *vc, unsigned int cmd, void __user *up, bool perm))
drivers/tty/vt/vt_ioctl.c:vt_ioctl(struct tty_struct *tty, unsigned int cmd, unsigned long arg))
drivers/tty/vt/vt_ioctl.c:vt_k_ioctl(struct tty_struct *tty, unsigned int cmd, unsigned long arg, bool perm)
drivers/tty/vt/vt_ioctl.c:vt_move_to_console(unsigned int vt, int alloc))
drivers/tty/vt/vt_ioctl.c:vt_reldisp(struct vc_data *vc, unsigned int swtch))
drivers/tty/vt/vt_ioctl.c:vt_resizex(struct vc_data *vc, struct vt_consize __user *cs))
drivers/tty/vt/vt_ioctl.c:vt_setactivate(struct vt_setactivate __user *sa))
drivers/video/fbdev/core/fbcon.c:fbcon_blank(struct vc_data *vc, int blank, int mode_switch)
drivers/video/fbdev/core/fbcon.c:fbcon_bmove(struct vc_data *vc, int sy, int sx, int dy, int dx, int height, int width)
drivers/video/fbdev/core/fbcon.c:fbcon_bmove_rec(struct vc_data *vc, struct fbcon_display *p, int sy, int sx, int dy, int dx, int height, int width, u_int y_break)
drivers/video/fbdev/core/fbcon.c:fbcon_clear(struct vc_data *vc, int sy, int sx, int height, int width)
drivers/video/fbdev/core/fbcon.c:fbcon_cursor(struct vc_data *vc, int mode)
drivers/video/fbdev/core/fbcon.c:fbcon_do_set_font(struct vc_data *vc, int w, int h, int charcount, const u8 * data, int userfont)
drivers/video/fbdev/core/fbcon.c:fbcon_generic_blank(struct vc_data *vc, struct fb_info *info, int blank)
drivers/video/fbdev/core/fbcon.c:fbcon_putcs(struct vc_data *vc, const unsigned short *s, int count, int ypos, int xpos)
drivers/video/fbdev/core/fbcon.c:fbcon_redraw(struct vc_data *vc, struct fbcon_display *p, int line, int count, int offset)
drivers/video/fbdev/core/fbcon.c:fbcon_redraw_blit(struct vc_data *vc, struct fb_info *info, struct fbcon_display *p, int line, int count, int ycount)
drivers/video/fbdev/core/fbcon.c:fbcon_redraw_move(struct vc_data *vc, struct fbcon_display *p, int line, int count, int dy)
drivers/video/fbdev/core/fbcon.c:fbcon_resize(struct vc_data *vc, unsigned int width, unsigned int height, unsigned int user)
drivers/video/fbdev/core/fbcon.c:fbcon_scroll(struct vc_data *vc, unsigned int t, unsigned int b, enum con_scroll dir, unsigned int count)
drivers/video/fbdev/core/fbcon.c:fbcon_set_font(struct vc_data *vc, struct console_font *font, unsigned int flags)
drivers/video/fbdev/core/fbcon.c:fbcon_switch(struct vc_data *vc)
drivers/video/fbdev/core/bitblit.c:bit_bmove(struct vc_data *vc, struct fb_info *info, int sy, int sx, int dy, int dx, int height, int width)
drivers/video/fbdev/core/bitblit.c:bit_clear(struct vc_data *vc, struct fb_info *info, int sy, int sx, int height, int width)
drivers/video/fbdev/core/bitblit.c:bit_clear_margins(struct vc_data *vc, struct fb_info *info, int color, int bottom_only)
drivers/video/fbdev/core/bitblit.c:bit_cursor(struct vc_data *vc, struct fb_info *info, int mode, int fg, int bg)
drivers/video/fbdev/core/bitblit.c:bit_putcs(struct vc_data *vc, struct fb_info *info, const unsigned short *s, int count, int yy, int xx, int fg, int bg)
drivers/video/fbdev/core/bitblit.c:bit_putcs_aligned(struct vc_data *vc, struct fb_info *info, const u16 *s, u32 attr, u32 cnt, u32 d_pitch, u32 s_pitch, u32 cellsize, struct fb_image *image, u8 *buf, u8 *dst)
drivers/video/fbdev/core/bitblit.c:bit_putcs_unaligned(struct vc_data *vc, struct fb_info *info, const u16 *s, u32 attr, u32 cnt, u32 d_pitch, u32 s_pitch, u32 cellsize, struct fb_image *image, u8 *buf, u8 *dst)
drivers/video/fbdev/core/bitblit.c:update_attr(u8 *dst, u8 *src, int attribute, struct vc_data *vc)
drivers/tty/vt/vt.c:con_font_default(struct vc_data *vc, struct console_font_op *op)
drivers/tty/vt/vt.c:con_font_get(struct vc_data *vc, struct console_font_op *op)
drivers/tty/vt/vt.c:con_font_op(struct vc_data *vc, struct console_font_op *op)
drivers/tty/vt/vt.c:con_font_set(struct vc_data *vc, struct console_font_op *op)
drivers/tty/vt/vt.c:vc_allocate(unsigned int currcons)
drivers/tty/vt/vt.c:vc_do_resize(struct tty_struct *tty, struct vc_data *vc, unsigned int cols, unsigned int lines)
drivers/tty/vt/vt.c:vc_init(struct vc_data *vc, unsigned int rows, unsigned int cols, int do_clear)
drivers/tty/vt/vt.c:vc_uniscr_alloc()
drivers/gpu/drm/drm_fb_helper.c:drm_fb_helper_check_var(struct fb_var_screeninfo *var, struct fb_info *info)
drivers/gpu/drm/drm_fb_helper.c:drm_fb_helper_fill_fix(struct fb_info *info, uint32_t pitch, uint32_t depth)
drivers/gpu/drm/drm_fb_helper.c:drm_fb_helper_fill_info(struct fb_info *info, struct drm_fb_helper *fb_helper, struct drm_fb_helper_surface_size *sizes)
drivers/gpu/drm/drm_fb_helper.c:drm_fb_helper_fill_pixel_fmt(struct fb_var_screeninfo *var, u8 depth)
drivers/gpu/drm/drm_fb_helper.c:drm_fb_helper_fill_var(struct fb_info *info, struct drm_fb_helper *fb_helper, uint32_t fb_width, uint32_t fb_height)
drivers/gpu/drm/drm_fb_helper.c:drm_fb_helper_set_par(struct fb_info *info)
drm_fb_helper_sys_fillrect()
drivers/gpu/drm/drm_fb_helper.c:drm_fbdev_fb_fillrect(struct fb_info *info, const struct fb_fillrect *rect)
drivers/video/fbdev/core/fbmem.c:fb_check_caps(struct fb_info *info, struct fb_var_screeninfo *var, u32 activate)
drivers/video/fbdev/core/fbmem.c:fb_get_buffer_offset()
drivers/video/fbdev/core/fbmem.c:fb_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
drivers/video/fbdev/core/fbmem.c:fb_mmap(struct file *file, struct vm_area_struct * vma)
drivers/video/fbdev/core/fbmem.c:fb_pan_display(struct fb_info *info, struct fb_var_screeninfo *var)
drivers/video/fbdev/core/fbmem.c:fb_read(struct file *file, char __user *buf, size_t count, loff_t *ppos)
drivers/video/fbdev/core/fbmem.c:fb_set_var(struct fb_info *info, struct fb_var_screeninfo *var)
drivers/video/fbdev/core/fbmem.c:fb_write(struct file *file, const char __user *buf, size_t count, loff_t *ppos)
include/linux/fb.h:__fb_pad_aligned_buffer(u8 *dst, u32 d_pitch, u8 *src, u32 s_pitch, u32 height)
drivers/tty/vt/vt.c:con_font_op(struct vc_data *vc, struct console_font_op *op)
drivers/tty/tty_io.c:tty_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
drivers/tty/vt/vt_ioctl.c:vt_ioctl(struct tty_struct *tty, unsigned int cmd, unsigned long arg))
func for case 10e27961f4da37c443b2
UDMABUF_CREATE()
drivers/dma-buf/udmabuf.c:begin_cpu_udmabuf(struct dma_buf *buf, enum dma_data_direction direction)
drivers/dma-buf/dma-buf.c:dma_buf_begin_cpu_access(struct dma_buf *dmabuf, enum dma_data_direction direction)
drivers/dma-buf/udmabuf.c:end_cpu_udmabuf(struct dma_buf *buf, enum dma_data_direction direction)
drivers/dma-buf/udmabuf.c:get_sg_table()
drivers/dma-buf/udmabuf.c:release_udmabuf(struct dma_buf *buf)
drivers/dma-buf/udmabuf.c:udmabuf_create(struct miscdevice *device, struct udmabuf_create_list *head, struct udmabuf_create_item *list)
drivers/dma-buf/udmabuf.c:udmabuf_ioctl_create(struct file *filp, unsigned long arg)
drivers/dma-buf/udmabuf.c:udmabuf_ioctl_create_list(struct file *filp, unsigned long arg)
drivers/dma-buf/udmabuf.c:udmabuf_vm_fault(struct vm_fault *vmf)
kernel/dma/mapping.c:__dma_map_sg_attrs(struct device *dev, struct scatterlist *sg, int nents, enum dma_data_direction dir, unsigned long attrs)
kernel/dma/mapping.c:dma_alloc_attrs()
kernel/dma/mapping.c:dma_alloc_noncontiguous()
kernel/dma/mapping.c:dma_free_attrs(struct device *dev, size_t size, void *cpu_addr, dma_addr_t dma_handle, unsigned long attrs)
kernel/dma/mapping.c:dma_free_noncontiguous(struct device *dev, size_t size, struct sg_table *sgt, enum dma_data_direction dir)
kernel/dma/mapping.c:dma_get_sgtable_attrs(struct device *dev, struct sg_table *sgt, void *cpu_addr, dma_addr_t dma_addr, size_t size, unsigned long attrs)
kernel/dma/mapping.c:dma_map_page_attrs(struct device *dev, struct page *page, size_t offset, size_t size, enum dma_data_direction dir, unsigned long attrs)
kernel/dma/mapping.c:dma_map_sgtable(struct device *dev, struct sg_table *sgt, enum dma_data_direction dir, unsigned long attrs)
kernel/dma/mapping.c:dma_mmap_attrs(struct device *dev, struct vm_area_struct *vma, void *cpu_addr, dma_addr_t dma_addr, size_t size, unsigned long attrs)
kernel/dma/mapping.c:dma_sync_sg_for_cpu(struct device *dev, struct scatterlist *sg, int nelems, enum dma_data_direction dir)
kernel/dma/mapping.c:dma_sync_sg_for_device(struct device *dev, struct scatterlist *sg, int nelems, enum dma_data_direction dir)
kernel/dma/mapping.c:dma_unmap_page_attrs(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir, unsigned long attrs)
kernel/dma/mapping.c:dma_unmap_sg_attrs(struct device *dev, struct scatterlist *sg, int nents, enum dma_data_direction dir, unsigned long attrs)
kernel/dma/mapping.c:dmam_alloc_attrs()
kernel/dma/mapping.c:dmam_free_coherent(struct device *dev, size_t size, void *vaddr, dma_addr_t dma_handle)
drivers/dma-buf/dma-buf.c:__dma_buf_begin_cpu_access(struct dma_buf *dmabuf, enum dma_data_direction direction)
kernel/dma/mapping.c:__dma_map_sg_attrs(struct device *dev, struct scatterlist *sg, int nents, enum dma_data_direction dir, unsigned long attrs)
drivers/dma-buf/dma-buf.c:__map_dma_buf()
begin_cpu_access()
drivers/dma-buf/dma-buf.c:dma_buf_begin_cpu_access(struct dma_buf *dmabuf, enum dma_data_direction direction)
drivers/dma-buf/dma-buf.c:dma_buf_detach(struct dma_buf *dmabuf, struct dma_buf_attachment *attach)
drivers/dma-buf/dma-buf.c:dma_buf_dynamic_attach()
drivers/dma-buf/dma-buf.c:dma_buf_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
drivers/dma-buf/dma-buf.c:dma_buf_map_attachment()
drivers/dma-buf/dma-buf.c:dma_buf_mmap(struct dma_buf *dmabuf, struct vm_area_struct *vma, unsigned long pgoff)
drivers/dma-buf/dma-buf.c:dma_buf_mmap_internal(struct file *file, struct vm_area_struct *vma)
drivers/dma-buf/dma-buf.c:dma_buf_move_notify(struct dma_buf *dmabuf)
drivers/dma-buf/dma-buf.c:dma_buf_release(struct dentry *dentry)
drivers/dma-buf/dma-buf.c:dma_buf_unmap_attachment(struct dma_buf_attachment *attach, struct sg_table *sg_table, enum dma_data_direction direction)
drivers/dma-buf/dma-buf.c:dma_buf_vmap(struct dma_buf *dmabuf, struct iosys_map *map)
drivers/dma-buf/dma-buf.c:dma_buf_vunmap(struct dma_buf *dmabuf, struct iosys_map *map)
drivers/dma-buf/dma-buf.c:mangle_sg_table(struct sg_table *sg_table)
kernel/dma/mapping.c:__dma_map_sg_attrs(struct device *dev, struct scatterlist *sg, int nents, enum dma_data_direction dir, unsigned long attrs)
begin_cpu_access()
dma_buf_attach()
drivers/dma-buf/dma-buf.c:dma_buf_begin_cpu_access(struct dma_buf *dmabuf, enum dma_data_direction direction)
drivers/dma-buf/dma-buf.c:dma_buf_detach(struct dma_buf *dmabuf, struct dma_buf_attachment *attach)
drivers/dma-buf/dma-buf.c:dma_buf_end_cpu_access(struct dma_buf *dmabuf, enum dma_data_direction direction)
drivers/dma-buf/dma-buf.c:dma_buf_export()
drivers/dma-buf/dma-buf.c:dma_buf_fd(struct dma_buf *dmabuf, int flags)
drivers/dma-buf/dma-buf.c:dma_buf_map_attachment()
drivers/dma-buf/dma-buf.c:dma_buf_unmap_attachment(struct dma_buf_attachment *attach, struct sg_table *sg_table, enum dma_data_direction direction)
kernel/dma/mapping.c:__dma_map_sg_attrs(struct device *dev, struct scatterlist *sg, int nents, enum dma_data_direction dir, unsigned long attrs)
include/linux/dma-mapping.h:dma_alloc_wc()
include/linux/dma-mapping.h:dma_map_single_attrs(struct device *dev, void *ptr, size_t size, enum dma_data_direction dir, unsigned long attrs)
include/linux/dma-mapping.h:dma_mapping_error(struct device *dev, dma_addr_t dma_addr)
include/linux/dma-mapping.h:dma_set_mask_and_coherent(struct device *dev, u64 mask)
include/linux/dma-mapping.h:dma_set_max_seg_size(struct device *dev, unsigned int size)
include/linux/dma-mapping.h:dma_set_min_align_mask(struct device *dev, unsigned int min_align_mask)
kernel/dma/direct.c:dma_direct_alloc()
kernel/dma/direct.c:dma_direct_free(struct device *dev, size_t size, void *cpu_addr, dma_addr_t dma_addr, unsigned long attrs)
kernel/dma/direct.c:dma_direct_get_sgtable(struct device *dev, struct sg_table *sgt, void *cpu_addr, dma_addr_t dma_addr, size_t size, unsigned long attrs)
kernel/dma/direct.c:dma_direct_map_resource(struct device *dev, phys_addr_t paddr, size_t size, enum dma_data_direction dir, unsigned long attrs)
kernel/dma/direct.c:dma_direct_map_sg(struct device *dev, struct scatterlist *sgl, int nents, enum dma_data_direction dir, unsigned long attrs)
kernel/dma/direct.c:dma_direct_mmap(struct device *dev, struct vm_area_struct *vma, void *cpu_addr, dma_addr_t dma_addr, size_t size, unsigned long attrs)
kernel/dma/direct.c:dma_direct_sync_sg_for_cpu(struct device *dev, struct scatterlist *sgl, int nents, enum dma_data_direction dir)
kernel/dma/direct.c:dma_direct_sync_sg_for_device(struct device *dev, struct scatterlist *sgl, int nents, enum dma_data_direction dir)
get_sgtable()
map_resource()
do_vfs_ioctl()
file_ioctl()
vfs_ioctl()
kernel/dma/mapping.c:__dma_map_sg_attrs(struct device *dev, struct scatterlist *sg, int nents, enum dma_data_direction dir, unsigned long attrs)
drivers/dma-buf/udmabuf.c:begin_cpu_udmabuf(struct dma_buf *buf, enum dma_data_direction direction)
kernel/dma/mapping.c:dma_map_sgtable(struct device *dev, struct sg_table *sgt, enum dma_data_direction dir, unsigned long attrs)
DMA_FROM_DEVICE()
DMA_TO_DEVICE()
kernel/dma/mapping.c:__dma_map_sg_attrs(struct device *dev, struct scatterlist *sg, int nents, enum dma_data_direction dir, unsigned long attrs)
func for case 1fa91bcd05206ff8cbb5
net/kcm/kcmsock.c:kcm_attach(struct socket *sock, struct socket *csock, struct bpf_prog *prog)
net/kcm/kcmsock.c:kcm_attach_ioctl(struct socket *sock, struct kcm_attach *info)
net/kcm/kcmsock.c:kcm_done(struct kcm_sock *kcm)
net/kcm/kcmsock.c:kcm_ioctl(struct socket *sock, unsigned int cmd, unsigned long arg)
net/kcm/kcmsock.c:kcm_queue_rcv_skb(struct sock *sk, struct sk_buff *skb)
net/kcm/kcmsock.c:kcm_rcv_ready(struct kcm_sock *kcm)
net/kcm/kcmsock.c:kcm_rcv_strparser(struct strparser *strp, struct sk_buff *skb)
net/kcm/kcmsock.c:kcm_recvmsg(struct socket *sock, struct msghdr *msg, size_t len, int flags)
net/kcm/kcmsock.c:kcm_release(struct socket *sock)
net/kcm/kcmsock.c:kcm_rfree(struct sk_buff *skb)
net/kcm/kcmsock.c:kcm_sendmsg(struct socket *sock, struct msghdr *msg, size_t len)
net/kcm/kcmsock.c:kcm_tx_work(struct work_struct *w)
net/kcm/kcmsock.c:kcm_unattach(struct kcm_psock *psock)
net/kcm/kcmsock.c:kcm_unattach_ioctl(struct socket *sock, struct kcm_unattach *info)
net/kcm/kcmsock.c:release_mux(struct kcm_mux *mux)
include/linux/skmsg.h:psock_progs_drop(struct sk_psock_progs *progs)
include/linux/skmsg.h:psock_replace_prog(struct bpf_prog **pprog, struct bpf_prog *prog, struct bpf_prog *old)
include/linux/skmsg.h:sk_msg_apply_bytes(struct sk_psock *psock, u32 bytes)
include/linux/skmsg.h:sk_msg_compute_data_pointers(struct sk_msg *msg)
include/linux/skmsg.h:sk_msg_page_add(struct sk_msg *msg, struct page *page, u32 len, u32 offset)
include/linux/skmsg.h:sk_msg_sg_copy(struct sk_msg *msg, u32 i, bool copy_state)
include/linux/skmsg.h:sk_msg_xfer(struct sk_msg *dst, struct sk_msg *src, int which, u32 size)
include/linux/skmsg.h:sk_psock_cork_free(struct sk_psock *psock)
include/linux/skmsg.h:sk_psock_dequeue_msg()
include/linux/skmsg.h:sk_psock_get()
include/linux/skmsg.h:sk_psock_next_msg()
include/linux/skmsg.h:sk_psock_queue_msg(struct sk_psock *psock, struct sk_msg *msg)
net/tls/tls_sw.c:decrypt_internal(struct sock *sk, struct sk_buff *skb, struct iov_iter *out_iov, struct scatterlist *out_sg, int *chunk, bool *zc, bool async)
net/tls/tls_sw.c:decrypt_skb_update(struct sock *sk, struct sk_buff *skb, struct iov_iter *dest, int *chunk, bool *zc, bool async)
net/tls/tls_sw.c:process_rx_list(struct tls_sw_context_rx *ctx, struct msghdr *msg, u8 *control, bool *cmsg, size_t skip, size_t len, bool zc, bool is_peek)
net/tls/tls_sw.c:tls_data_ready(struct sock *sk)
net/tls/tls_sw.c:tls_decrypt_done(struct crypto_async_request *req, int err)
net/tls/tls_sw.c:tls_do_decryption(struct sock *sk, struct sk_buff *skb, struct scatterlist *sgin, struct scatterlist *sgout, char *iv_recv, size_t data_len, struct aead_request *aead_req, bool async)
net/tls/tls_sw.c:tls_do_encryption(struct sock *sk, struct tls_context *tls_ctx, struct tls_sw_context_tx *ctx, struct aead_request *aead_req, size_t data_len, u32 start)
net/tls/tls_sw.c:tls_encrypt_done(struct crypto_async_request *req, int err)
net/tls/tls_sw.c:tls_queue(struct strparser *strp, struct sk_buff *skb)
net/tls/tls_sw.c:tls_read_size(struct strparser *strp, struct sk_buff *skb)
net/tls/tls_sw.c:tls_sw_advance_skb(struct sock *sk, struct sk_buff *skb, unsigned int len)
net/tls/tls_sw.c:tls_sw_recvmsg(struct sock *sk, struct msghdr *msg, size_t len, int nonblock, int flags, int *addr_len)
net/tls/tls_sw.c:tls_sw_release_resources_rx(struct sock *sk)
net/tls/tls_sw.c:tls_sw_release_resources_tx(struct sock *sk)
net/tls/tls_sw.c:tls_sw_splice_read(struct socket *sock, loff_t *ppos, struct pipe_inode_info *pipe, size_t len, unsigned int flags)
include/linux/refcount.h:__refcount_add(int i, refcount_t *r, int *oldp)
include/linux/refcount.h:__refcount_add_not_zero(int i, refcount_t *r, int *oldp)
include/linux/refcount.h:__refcount_sub_and_test(int i, refcount_t *r, int *oldp)
net/socket.c:____sys_recvmsg(struct socket *sock, struct msghdr *msg_sys, struct user_msghdr __user *msg, struct sockaddr __user *uaddr, unsigned int flags, int nosec)
net/socket.c:___sys_recvmsg(struct socket *sock, struct user_msghdr __user *msg, struct msghdr *msg_sys, unsigned int flags, int nosec)
net/socket.c:__sys_recvmmsg(int fd, struct mmsghdr __user *mmsg, unsigned int vlen, unsigned int flags, struct __kernel_timespec __user *timeout, struct old_timespec32 __user *timeout32)
net/socket.c:__sys_recvmsg(int fd, struct user_msghdr __user *msg, unsigned int flags, bool forbid_cmsg_compat)
net/socket.c:do_recvmmsg(int fd, struct mmsghdr __user *mmsg, unsigned int vlen, unsigned int flags, struct timespec64 *timeout)
net/socket.c:recvmsg_copy_msghdr(struct msghdr *msg, struct user_msghdr __user *umsg, unsigned flags, struct sockaddr __user **uaddr, struct iovec **iov)
net/socket.c:sock_do_ioctl(struct net *net, struct socket *sock, unsigned int cmd, unsigned long arg)
net/socket.c:sock_ioctl(struct file *file, unsigned cmd, unsigned long arg)
net/ipv6/af_inet6.c:__inet6_bind(struct sock *sk, struct sockaddr *uaddr, int addr_len, u32 flags)
net/ipv6/af_inet6.c:inet6_bind(struct socket *sock, struct sockaddr *uaddr, int addr_len)
net/ipv6/af_inet6.c:inet6_create(struct net *net, struct socket *sock, int protocol, int kern)
net/ipv6/af_inet6.c:inet6_destroy_sock(struct sock *sk)
net/ipv6/af_inet6.c:inet6_getname(struct socket *sock, struct sockaddr *uaddr, int peer)
net/ipv6/af_inet6.c:inet6_ioctl(struct socket *sock, unsigned int cmd, unsigned long arg)
net/ipv6/af_inet6.c:inet6_recvmsg(struct socket *sock, struct msghdr *msg, size_t size, int flags)
net/ipv6/af_inet6.c:inet6_sendmsg(struct socket *sock, struct msghdr *msg, size_t size)
__kasan_report()
mm/kasan/report.c:describe_object_addr(struct kmem_cache *cache, void *object, const void *addr)
mm/kasan/report.c:describe_object_stacks(struct kmem_cache *cache, void *object, const void *addr, u8 tag)
mm/kasan/report.c:kasan_report(unsigned long addr, size_t size, bool is_write, unsigned long ip)
mm/kasan/report.c:print_address_description(void *addr, u8 tag)
mm/kasan/report.c:print_error_description(struct kasan_report_info *info)
mm/kasan/report.c:print_memory_metadata(const void *addr)
print_stack()
func for case a76f6a6e524cf2080aa3
fs/fscache/volume.c:__fscache_acquire_volume()
fs/fscache/volume.c:fscache_alloc_volume()
fs/fscache/volume.c:fscache_create_volume(struct fscache_volume *volume, bool wait)
fs/fscache/volume.c:fscache_create_volume_work(struct work_struct *work)
fs/fscache/volume.c:fscache_end_volume_access(struct fscache_volume *volume, struct fscache_cookie *cookie, enum fscache_access_trace why)
fs/fscache/volume.c:fscache_free_volume(struct fscache_volume *volume)
fs/fscache/volume.c:fscache_hash_volume(struct fscache_volume *candidate)
fs/fscache/volume.c:fscache_put_volume(struct fscache_volume *volume, enum fscache_volume_trace where)
fs/fscache/volume.c:fscache_unhash_volume(struct fscache_volume *volume)
fs/fscache/volume.c:fscache_volume_same(const struct fscache_volume *a, const struct fscache_volume *b)
fs/fscache/volume.c:fscache_wait_on_volume_collision(struct fscache_volume *candidate, unsigned int collidee_debug_id)
fs/fscache/volume.c:fscache_wake_pending_volume(struct fscache_volume *volume, struct hlist_bl_head *h)
fs/fscache/volume.c:fscache_withdraw_volume(struct fscache_volume *volume)
__do_sys_mount()
fs/fscache/volume.c:__fscache_acquire_volume()
__se_sys_mount()
fs/namespace.c:do_mount(const char *dev_name, const char __user *dir_name, const char *type_page, unsigned long flags, void *data_page)
fs/namespace.c:do_new_mount(struct path *path, const char *fstype, int sb_flags, int mnt_flags, const char *name, void *data)
include/linux/fscache.h:fscache_acquire_volume()
fs/fscache/volume.c:fscache_alloc_volume()
fs/fscache/volume.c:fscache_hash_volume(struct fscache_volume *candidate)
fs/fscache/volume.c:fscache_volume_same(const struct fscache_volume *a, const struct fscache_volume *b)
fs/fs_context.c:legacy_get_tree(struct fs_context *fc)
fs/namespace.c:path_mount(const char *dev_name, struct path *path, const char *type_page, unsigned long flags, void *data_page)
fs/9p/cache.c:v9fs_cache_session_get_cookie(struct v9fs_session_info *v9ses, const char *dev_name)
fs/9p/vfs_super.c:v9fs_mount()
fs/9p/v9fs.c:v9fs_session_init()
fs/super.c:vfs_get_tree(struct fs_context *fc))
__do_sys_mount()
fs/fscache/volume.c:__fscache_acquire_volume()
__se_sys_mount()
fs/namespace.c:do_mount(const char *dev_name, const char __user *dir_name, const char *type_page, unsigned long flags, void *data_page)
fs/namespace.c:do_new_mount(struct path *path, const char *fstype, int sb_flags, int mnt_flags, const char *name, void *data)
fs/fscache/volume.c:fscache_alloc_volume()
fs/fscache/volume.c:fscache_hash_volume(struct fscache_volume *candidate)
fs/fscache/volume.c:fscache_volume_same(const struct fscache_volume *a, const struct fscache_volume *b)
fs/fs_context.c:legacy_get_tree(struct fs_context *fc)
fs/namespace.c:path_mount(const char *dev_name, struct path *path, const char *type_page, unsigned long flags, void *data_page)
fs/9p/cache.c:v9fs_cache_session_get_cookie(struct v9fs_session_info *v9ses, const char *dev_name)
fs/9p/vfs_super.c:v9fs_mount()
fs/9p/v9fs.c:v9fs_session_init()
fs/super.c:vfs_get_tree(struct fs_context *fc))
fs/9p/v9fs.c:get_cache_mode(char *s)
fs/9p/v9fs.c:init_v9fs(void)
fs/9p/v9fs.c:v9fs_inode_init_once(void *foo)
fs/9p/v9fs.c:v9fs_parse_options(struct v9fs_session_info *v9ses, char *opts)
fs/9p/v9fs.c:v9fs_session_close(struct v9fs_session_info *v9ses)
fs/9p/v9fs.c:v9fs_session_init()
fs/9p/v9fs.c:v9fs_show_options(struct seq_file *m, struct dentry *root)
fs/9p/v9fs.c:v9fs_sysfs_init(void)
fs/9p/vfs_super.c:v9fs_drop_inode(struct inode *inode)
fs/9p/vfs_super.c:v9fs_fill_super(struct super_block *sb, struct v9fs_session_info *v9ses, int flags)
fs/9p/vfs_super.c:v9fs_mount()
fs/9p/vfs_super.c:v9fs_statfs(struct dentry *dentry, struct kstatfs *buf)
fs/9p/vfs_super.c:v9fs_write_inode(struct inode *inode, struct writeback_control *wbc)
fs/9p/vfs_super.c:v9fs_write_inode_dotl(struct inode *inode, struct writeback_control *wbc)
include/linux/fscache.h:__fscache_update_cookie(struct fscache_cookie *cookie, const void *aux_data, const loff_t *object_size)
include/linux/fscache.h:fscache_clear_inode_writeback(struct fscache_cookie *cookie, struct inode *inode, const void *aux)
include/linux/fscache.h:fscache_end_operation(struct netfs_cache_resources *cres)
include/linux/fscache.h:fscache_note_page_release(struct fscache_cookie *cookie)
include/linux/fscache.h:fscache_update_aux(struct fscache_cookie *cookie, const void *aux_data, const loff_t *object_size)
include/linux/fscache.h:fscache_write_to_cache(struct fscache_cookie *cookie, struct address_space *mapping, loff_t start, size_t len, loff_t i_size, netfs_io_terminated_t term_func, void *term_func_priv, bool caching)
fs/namespace.c:do_add_mount(struct mount *newmnt, struct mountpoint *mp, const struct path *path, int mnt_flags)
fs/namespace.c:do_mount(const char *dev_name, const char __user *dir_name, const char *type_page, unsigned long flags, void *data_page)
fs/namespace.c:do_move_mount(struct path *old_path, struct path *new_path)
fs/namespace.c:do_new_mount(struct path *path, const char *fstype, int sb_flags, int mnt_flags, const char *name, void *data)
fs/namespace.c:do_new_mount_fc(struct fs_context *fc, struct path *mountpoint, unsigned int mnt_flags)
fs/namespace.c:do_reconfigure_mnt(struct path *path, unsigned int mnt_flags)
fs/namespace.c:do_remount(struct path *path, int ms_flags, int sb_flags, int mnt_flags, void *data)
fs/namespace.c:path_mount(const char *dev_name, struct path *path, const char *type_page, unsigned long flags, void *data_page)
fs/fs_context.c:legacy_get_tree(struct fs_context *fc)
fs/fs_context.c:legacy_parse_monolithic(struct fs_context *fc, void *data)
fs/fs_context.c:legacy_parse_param(struct fs_context *fc, struct fs_parameter *param)
fs/super.c:mount_bdev()
fs/super.c:mount_single()
fs/super.c:vfs_get_tree(struct fs_context *fc))
__kasan_report()
mm/kasan/report.c:kasan_report(unsigned long addr, size_t size, bool is_write, unsigned long ip)
mm/kasan/report.c:print_address_description(void *addr, u8 tag)
func for case 283ce5a46486d6acdbaf
fs/open.c:access_override_creds()
fs/open.c:build_open_flags(const struct open_how *how, struct open_flags *op)
fs/open.c:build_open_how(int flags, umode_t mode)
fs/open.c:chmod_common(const struct path *path, umode_t mode)
fs/open.c:chown_common(const struct path *path, uid_t user, gid_t group)
fs/open.c:dentry_open()
fs/open.c:do_dentry_open(struct file *f, struct inode *inode, int (*open)(struct inode *, struct file *))
fs/open.c:do_faccessat(int dfd, const char __user *filename, int mode, int flags)
fs/open.c:do_fchmodat(int dfd, const char __user *filename, umode_t mode)
fs/open.c:do_fchownat(int dfd, const char __user *filename, uid_t user, gid_t group, int flag)
fs/open.c:do_sys_openat2(int dfd, const char __user *filename, struct open_how *how)
fs/open.c:filp_close(struct file *filp, fl_owner_t id)
fs/open.c:filp_open()
fs/open.c:finish_open(struct file *file, struct dentry *dentry, int (*open)(struct inode *, struct file *))
fs/open.c:open_with_fake_path()
fs/file_table.c:__alloc_file()
fs/file_table.c:__fput(struct file *file)
fs/file_table.c:alloc_empty_file()
fs/file_table.c:alloc_empty_file_noaccount()
fs/file_table.c:alloc_file()
fs/file_table.c:alloc_file_clone()
fs/file_table.c:alloc_file_pseudo()
fs/file_table.c:file_free_rcu(struct rcu_head *head)
fs/file_table.c:files_maxfiles_init(void)
fs/file_table.c:fput_many(struct file *file, unsigned int refs)
fs/fs_context.c:alloc_fs_context()
fs/fs_context.c:finish_clean_context(struct fs_context *fc)
fs/fs_context.c:generic_parse_monolithic(struct fs_context *fc, void *data)
fs/fs_context.c:legacy_fs_context_dup(struct fs_context *fc, struct fs_context *src_fc)
fs/fs_context.c:legacy_get_tree(struct fs_context *fc)
fs/fs_context.c:legacy_parse_monolithic(struct fs_context *fc, void *data)
fs/fs_context.c:legacy_parse_param(struct fs_context *fc, struct fs_parameter *param)
fs/fs_context.c:legacy_reconfigure(struct fs_context *fc)
fs/fs_context.c:put_fc_log(struct fs_context *fc)
fs/fs_context.c:put_fs_context(struct fs_context *fc)
fs/fs_context.c:vfs_clean_context(struct fs_context *fc)
fs/fs_context.c:vfs_dup_fs_context()
fs/fs_context.c:vfs_parse_fs_param(struct fs_context *fc, struct fs_parameter *param)
fs/fs_context.c:vfs_parse_fs_string(struct fs_context *fc, const char *key, const char *value, size_t v_size)
fs/fs_context.c:vfs_parse_sb_flag(struct fs_context *fc, const char *key)
fs/fsopen.c:fscontext_alloc_log(struct fs_context *fc)
fs/fsopen.c:fscontext_create_fd(struct fs_context *fc, unsigned int o_flags)
fs/fsopen.c:fscontext_read(struct file *file, char __user *_buf, size_t len, loff_t *pos)
fs/fsopen.c:vfs_fsconfig_locked(struct fs_context *fc, int cmd, struct fs_parameter *param)
fs/file.c:__close_fd_get_file(unsigned int fd, struct file **res)
__do_sys_close()
fs/file.c:alloc_fd(unsigned start, unsigned end, unsigned flags)
fs/file.c:close_fd(unsigned fd)
fs/file.c:copy_fdtable(struct fdtable *nfdt, struct fdtable *ofdt)
fs/file.c:dup_fd()
fs/file.c:fd_install(unsigned int fd, struct file *file)
fs/open.c:filp_close(struct file *filp, fl_owner_t id)
fs/namei.c:do_file_open_root()
fs/namei.c:do_filp_open()
fs/namei.c:filename_create()
fs/namei.c:path_openat()
fs/namei.c:vfs_create(struct user_namespace *mnt_userns, struct inode *dir, struct dentry *dentry, umode_t mode, bool want_excl)
fs/namei.c:vfs_mkdir(struct user_namespace *mnt_userns, struct inode *dir, struct dentry *dentry, umode_t mode)
fs/namei.c:vfs_symlink(struct user_namespace *mnt_userns, struct inode *dir, struct dentry *dentry, const char *oldname)
fs/namei.c:vfs_unlink(struct user_namespace *mnt_userns, struct inode *dir, struct dentry *dentry, struct inode **delegated_inode)
mm/slub.c:__free_slab(struct kmem_cache *s, struct page *page)
mm/slub.c:__slab_free(struct kmem_cache *s, struct page *page, void *head, void *tail, int cnt, unsigned long addr)
mm/slub.c:do_slab_free(struct kmem_cache *s, struct page *page, void *head, void *tail, int cnt, unsigned long addr)
mm/slub.c:free_debug_processing(struct kmem_cache *s, struct page *page, void *head, void *tail, int bulk_cnt, unsigned long addr)
mm/slub.c:free_partial(struct kmem_cache *s, struct kmem_cache_node *n)
mm/slub.c:kmem_cache_free(struct kmem_cache *s, void *x)
mm/slub.c:slab_free_freelist_hook(struct kmem_cache *s, void **head, void **tail)
mm/slub.c:slab_free_hook(struct kmem_cache *s, void *x, bool init)
kernel/task_work.c:task_work_run(void)
security/security.c:security_file_alloc(struct file *file)
security/security.c:security_file_free(struct file *file)
security/security.c:security_inode_free(struct inode *inode)
func for case 0b7c8bfd17c00d016fb4
drivers/tty/pty.c:ptm_open_peer(struct file *master, struct tty_struct *tty, int flags)
drivers/tty/pty.c:ptmx_open(struct inode *inode, struct file *filp)
drivers/tty/pty.c:pty_bsd_ioctl(struct tty_struct *tty, unsigned int cmd, unsigned long arg)
drivers/tty/pty.c:pty_close(struct tty_struct *tty, struct file *filp)
drivers/tty/pty.c:pty_common_install(struct tty_driver *driver, struct tty_struct *tty, bool legacy)
drivers/tty/pty.c:pty_flush_buffer(struct tty_struct *tty)
drivers/tty/pty.c:pty_open(struct tty_struct *tty, struct file *filp)
drivers/tty/pty.c:pty_resize(struct tty_struct *tty, struct winsize *ws)
drivers/tty/pty.c:pty_set_pktmode(struct tty_struct *tty, int __user *arg)
drivers/tty/pty.c:pty_set_termios(struct tty_struct *tty, struct ktermios *old_termios)
drivers/tty/pty.c:pty_signal(struct tty_struct *tty, int sig)
drivers/tty/pty.c:pty_start(struct tty_struct *tty)
drivers/tty/pty.c:pty_stop(struct tty_struct *tty)
drivers/tty/pty.c:pty_unix98_ioctl(struct tty_struct *tty, unsigned int cmd, unsigned long arg)
drivers/tty/pty.c:pty_write(struct tty_struct *tty, const unsigned char *buf, int c)
drivers/tty/tty_buffer.c:__tty_buffer_request_room(struct tty_port *port, size_t size, int flags)
drivers/tty/tty_buffer.c:__tty_insert_flip_char(struct tty_port *port, unsigned char ch, char flag)
drivers/tty/tty_buffer.c:flush_to_ldisc(struct work_struct *work)
drivers/tty/tty_buffer.c:receive_buf(struct tty_port *port, struct tty_buffer *head, int count)
drivers/tty/tty_buffer.c:tty_buffer_alloc()
drivers/tty/tty_buffer.c:tty_buffer_flush(struct tty_struct *tty, struct tty_ldisc *ld)
drivers/tty/tty_buffer.c:tty_buffer_free(struct tty_port *port, struct tty_buffer *b)
drivers/tty/tty_buffer.c:tty_buffer_free_all(struct tty_port *port)
drivers/tty/tty_buffer.c:tty_buffer_init(struct tty_port *port)
drivers/tty/tty_buffer.c:tty_flip_buffer_push(struct tty_port *port)
drivers/tty/tty_buffer.c:tty_insert_flip_string_fixed_flag(struct tty_port *port, const unsigned char *chars, char flag, size_t size)
drivers/tty/tty_buffer.c:tty_insert_flip_string_flags(struct tty_port *port, const unsigned char *chars, const char *flags, size_t size)
drivers/tty/tty_buffer.c:tty_ldisc_receive_buf(struct tty_ldisc *ld, const unsigned char *p, const char *f, int count)
drivers/tty/tty_buffer.c:tty_prepare_flip_string(struct tty_port *port, unsigned char **chars, size_t size)
kernel/locking/lockdep.c:__lock_acquire(struct lockdep_map *lock, unsigned int subclass, int trylock, int read, int check, int hardirqs_off, struct lockdep_map *nest_lock, unsigned long ip, int references, int pin_count)
kernel/locking/lockdep.c:check_irq_usage(struct task_struct *curr, struct held_lock *prev, struct held_lock *next)
kernel/locking/lockdep.c:check_noncircular(struct held_lock *src, struct held_lock *target, struct lock_trace **const trace)
kernel/locking/lockdep.c:check_prev_add(struct task_struct *curr, struct held_lock *prev, struct held_lock *next, u16 distance, struct lock_trace **const trace)
kernel/locking/lockdep.c:check_prevs_add(struct task_struct *curr, struct held_lock *next)
kernel/locking/lockdep.c:check_usage_backwards(struct task_struct *curr, struct held_lock *this, enum lock_usage_bit bit)
kernel/locking/lockdep.c:check_usage_forwards(struct task_struct *curr, struct held_lock *this, enum lock_usage_bit bit)
kernel/locking/lockdep.c:mark_held_locks(struct task_struct *curr, enum lock_usage_bit base_bit)
kernel/locking/lockdep.c:mark_lock_irq(struct task_struct *curr, struct held_lock *this, enum lock_usage_bit new_bit)
kernel/locking/lockdep.c:mark_usage(struct task_struct *curr, struct held_lock *hlock, int check)
kernel/locking/lockdep.c:print_circular_bug(struct lock_list *this, struct lock_list *target, struct held_lock *check_src, struct held_lock *check_tgt)
kernel/locking/lockdep.c:print_deadlock_bug(struct task_struct *curr, struct held_lock *prev, struct held_lock *next)
kernel/locking/lockdep.c:print_irq_inversion_bug(struct task_struct *curr, struct lock_list *root, struct lock_list *other, struct held_lock *this, int forwards, const char *irqclass)
kernel/locking/lockdep.c:print_usage_bug(struct task_struct *curr, struct held_lock *this, enum lock_usage_bit prev_bit, enum lock_usage_bit new_bit)
kernel/locking/lockdep.c:validate_chain(struct task_struct *curr, struct held_lock *hlock, int chain_head, u64 chain_key)
kernel/printk/printk.c:call_console_drivers(const char *ext_text, size_t ext_len, const char *text, size_t len)
kernel/printk/printk.c:console_lock_spinning_disable_and_check(void)
kernel/printk/printk.c:console_lock_spinning_enable(void)
kernel/printk/printk.c:console_trylock_spinning(void)
kernel/printk/printk.c:console_unlock(void)
kernel/printk/printk.c:register_console(struct console *newcon)
kernel/printk/printk.c:unregister_console(struct console *console)
kernel/printk/printk.c:vprintk_emit(int facility, int level, const struct dev_printk_info *dev_info, const char *fmt, va_list args)
drivers/tty/tty_io.c:do_tty_write(ssize_t (*write)(struct tty_struct *, struct file *, const unsigned char *, size_t), struct tty_struct *tty, struct file *file, struct iov_iter *from)
drivers/tty/tty_io.c:file_tty_write(struct file *file, struct kiocb *iocb, struct iov_iter *from)
drivers/tty/tty_io.c:tty_fasync(int fd, struct file *filp, int on)
drivers/tty/tty_io.c:tty_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
drivers/tty/tty_io.c:tty_open(struct inode *inode, struct file *filp)
drivers/tty/tty_io.c:tty_poll(struct file *filp, poll_table *wait)
drivers/tty/tty_io.c:tty_release(struct inode *inode, struct file *filp)
drivers/tty/tty_io.c:tty_write_message(struct tty_struct *tty, char *msg)
drivers/tty/n_tty.c:n_tty_receive_buf_common(struct tty_struct *tty, const unsigned char *cp, const char *fp, int count, int flow)
drivers/tty/n_tty.c:n_tty_receive_buf_raw(struct tty_struct *tty, const unsigned char *cp, const char *fp, int count)
drivers/tty/n_tty.c:n_tty_receive_buf_standard(struct tty_struct *tty, const unsigned char *cp, const char *fp, int count)
drivers/tty/n_tty.c:n_tty_receive_char(struct tty_struct *tty, unsigned char c)
n_tty_receive_char_flow_ctrl()
drivers/tty/n_tty.c:n_tty_receive_char_special(struct tty_struct *tty, unsigned char c)
drivers/tty/n_tty.c:n_tty_receive_parity_error(struct tty_struct *tty, unsigned char c)
drivers/tty/n_tty.c:n_tty_write(struct tty_struct *tty, struct file *file, const unsigned char *buf, size_t nr)
drivers/tty/serial/8250/8250_port.c:serial8250_console_write(struct uart_8250_port *up, const char *s, unsigned int count)
drivers/tty/serial/8250/8250_port.c:serial8250_default_handle_irq(struct uart_port *port)
drivers/tty/serial/8250/8250_port.c:serial8250_do_set_termios(struct uart_port *port, struct ktermios *termios, struct ktermios *old)
drivers/tty/serial/8250/8250_port.c:serial8250_handle_irq(struct uart_port *port, unsigned int iir)
drivers/tty/serial/8250/8250_port.c:serial8250_rx_chars(struct uart_8250_port *up, unsigned char lsr)
drivers/tty/serial/8250/8250_port.c:serial8250_start_tx(struct uart_port *port)
drivers/tty/serial/8250/8250_port.c:serial8250_stop_tx(struct uart_port *port)
drivers/tty/serial/8250/8250_port.c:serial8250_tx_chars(struct uart_8250_port *up)
mm/slub.c:__kmalloc()
mm/slub.c:slab_alloc_node()
mm/slub.c:slab_free(struct kmem_cache *s, struct slab *slab, void *head, void *tail, int cnt, unsigned long addr)
lib/fault-inject.c:fail_stacktrace(struct fault_attr *attr)
lib/fault-inject.c:setup_fault_attr(struct fault_attr *attr, char *str)
lib/fault-inject.c:should_fail(struct fault_attr *attr, ssize_t size)
fs/read_write.c:ksys_write(unsigned int fd, const char __user *buf, size_t count)
fs/read_write.c:new_sync_write(struct file *filp, const char __user *buf, size_t len, loff_t *ppos)
fs/read_write.c:vfs_write(struct file *file, const char __user *buf, size_t count, loff_t *pos)
func for case 5b82f0e951f8c2bcdb8f
fs/btrfs/ordered-data.c:alloc_ordered_extent()
fs/btrfs/ordered-data.c:btrfs_dec_test_ordered_pending(struct btrfs_inode *inode, struct btrfs_ordered_extent **cached, u64 file_offset, u64 io_size)
fs/btrfs/inode.c:btrfs_dio_end_io(struct btrfs_bio *bbio)
fs/btrfs/inode.c:btrfs_dio_submit_io(const struct iomap_iter *iter, struct bio *bio, loff_t file_offset)
fs/btrfs/inode.c:btrfs_dio_write()
fs/btrfs/file.c:btrfs_do_write_iter(struct kiocb *iocb, struct iov_iter *from, const struct btrfs_ioctl_encoded_io_args *encoded)
fs/btrfs/ordered-data.c:btrfs_finish_ordered_extent(struct btrfs_ordered_extent *ordered, struct page *page, u64 file_offset, u64 len, bool uptodate)
fs/btrfs/ordered-data.c:btrfs_mark_ordered_io_finished(struct btrfs_inode *inode, struct page *page, u64 file_offset, u64 num_bytes, bool uptodate)
fs/btrfs/ordered-data.c:btrfs_put_ordered_extent(struct btrfs_ordered_extent *entry)
fs/btrfs/ordered-data.c:btrfs_queue_ordered_fn(struct btrfs_ordered_extent *ordered)
fs/btrfs/ordered-data.c:btrfs_remove_ordered_extent(struct btrfs_inode *btrfs_inode, struct btrfs_ordered_extent *entry)
fs/btrfs/ordered-data.c:btrfs_start_ordered_extent(struct btrfs_ordered_extent *entry)
fs/btrfs/ordered-data.c:btrfs_wait_ordered_range(struct inode *inode, u64 start, u64 len)
fs/btrfs/ordered-data.c:can_finish_ordered_extent(struct btrfs_ordered_extent *ordered, struct page *page, u64 file_offset, u64 len, bool uptodate)
fs/btrfs/ordered-data.c:insert_ordered_extent(struct btrfs_ordered_extent *entry)
fs/btrfs/inode.c:btrfs_clear_delalloc_extent(struct btrfs_inode *inode, struct extent_state *state, u32 bits)
fs/btrfs/inode.c:btrfs_create_dio_extent()
fs/btrfs/inode.c:btrfs_dio_end_io(struct btrfs_bio *bbio)
fs/btrfs/inode.c:btrfs_dio_iomap_begin(struct inode *inode, loff_t start, loff_t length, unsigned int flags, struct iomap *iomap, struct iomap *srcmap)
fs/btrfs/inode.c:btrfs_dio_iomap_end(struct inode *inode, loff_t pos, loff_t length, ssize_t written, unsigned int flags, struct iomap *iomap)
fs/btrfs/inode.c:btrfs_dio_submit_io(const struct iomap_iter *iter, struct bio *bio, loff_t file_offset)
fs/btrfs/inode.c:btrfs_extract_ordered_extent(struct btrfs_bio *bbio, struct btrfs_ordered_extent *ordered)
fs/btrfs/inode.c:btrfs_finish_one_ordered(struct btrfs_ordered_extent *ordered_extent)
fs/btrfs/inode.c:btrfs_get_blocks_direct_write(struct extent_map **map, struct inode *inode, struct btrfs_dio_data *dio_data, u64 start, u64 *lenp, unsigned int iomap_flags)
fs/btrfs/inode.c:btrfs_new_extent_direct()
fs/btrfs/inode.c:btrfs_set_extent_delalloc(struct btrfs_inode *inode, u64 start, u64 end, unsigned int extra_bits, struct extent_state **cached_state)
fs/btrfs/inode.c:can_nocow_extent(struct inode *inode, u64 offset, u64 *len, u64 *orig_start, u64 *orig_block_len, u64 *ram_bytes, bool nowait, bool strict)
fs/btrfs/inode.c:insert_ordered_extent_file_extent(struct btrfs_trans_handle *trans, struct btrfs_ordered_extent *oe)
fs/btrfs/inode.c:insert_reserved_file_extent(struct btrfs_trans_handle *trans, struct btrfs_inode *inode, u64 file_pos, struct btrfs_file_extent_item *stack_fi, const bool update_inode_bytes, u64 qgroup_reserved)
fs/btrfs/inode.c:lock_extent_direct(struct inode *inode, u64 lockstart, u64 lockend, struct extent_state **cached_state, unsigned int iomap_flags)
fs/iomap/direct-io.c:__iomap_dio_rw()
fs/iomap/direct-io.c:iomap_dio_bio_end_io(struct bio *bio)
fs/iomap/direct-io.c:iomap_dio_bio_iter(const struct iomap_iter *iter, struct iomap_dio *dio)
fs/iomap/direct-io.c:iomap_dio_bio_opflags(struct iomap_dio *dio, const struct iomap *iomap, bool use_fua)
fs/iomap/direct-io.c:iomap_dio_complete(struct iomap_dio *dio)
fs/iomap/direct-io.c:iomap_dio_complete_work(struct work_struct *work)
fs/iomap/direct-io.c:iomap_dio_inline_iter(const struct iomap_iter *iomi, struct iomap_dio *dio)
fs/iomap/direct-io.c:iomap_dio_iter(const struct iomap_iter *iter, struct iomap_dio *dio)
fs/iomap/direct-io.c:iomap_dio_submit_bio(const struct iomap_iter *iter, struct iomap_dio *dio, struct bio *bio, loff_t pos)
fs/iomap/direct-io.c:iomap_dio_zero(const struct iomap_iter *iter, struct iomap_dio *dio, loff_t pos, unsigned len)
fs/btrfs/file.c:btrfs_buffered_write(struct kiocb *iocb, struct iov_iter *i)
fs/btrfs/file.c:btrfs_check_nocow_lock(struct btrfs_inode *inode, loff_t pos, size_t *write_bytes, bool nowait)
fs/btrfs/file.c:btrfs_direct_write(struct kiocb *iocb, struct iov_iter *from)
fs/btrfs/file.c:btrfs_dirty_pages(struct btrfs_inode *inode, struct page **pages, size_t num_pages, loff_t pos, size_t write_bytes, struct extent_state **cached, bool noreserve)
fs/btrfs/file.c:btrfs_do_write_iter(struct kiocb *iocb, struct iov_iter *from, const struct btrfs_ioctl_encoded_io_args *encoded)
fs/btrfs/file.c:btrfs_write_check(struct kiocb *iocb, struct iov_iter *from, size_t count)
fs/btrfs/file.c:lock_and_cleanup_extent_if_need(struct btrfs_inode *inode, struct page **pages, size_t num_pages, loff_t pos, size_t write_bytes, u64 *lockstart, u64 *lockend, bool nowait, struct extent_state **cached_state)
fs/btrfs/file.c:prepare_pages(struct inode *inode, struct page **pages, size_t num_pages, loff_t pos, size_t write_bytes, bool force_uptodate, bool nowait)
fs/btrfs/disk-io.c:btrfs_cleanup_one_transaction(struct btrfs_transaction *cur_trans, struct btrfs_fs_info *fs_info)
fs/btrfs/disk-io.c:btrfs_cleanup_transaction(struct btrfs_fs_info *fs_info)
fs/btrfs/disk-io.c:btrfs_destroy_all_delalloc_inodes(struct btrfs_fs_info *fs_info)
fs/btrfs/disk-io.c:btrfs_destroy_all_ordered_extents(struct btrfs_fs_info *fs_info)
fs/btrfs/disk-io.c:btrfs_destroy_delayed_refs(struct btrfs_transaction *trans, struct btrfs_fs_info *fs_info)
fs/btrfs/disk-io.c:btrfs_destroy_marked_extents(struct btrfs_fs_info *fs_info, struct extent_io_tree *dirty_pages, int mark)
fs/btrfs/disk-io.c:btrfs_destroy_pinned_extent(struct btrfs_fs_info *fs_info, struct extent_io_tree *unpin)
fs/btrfs/disk-io.c:btrfs_drop_all_logs(struct btrfs_fs_info *fs_info)
btrfs_device_total_bytes()
btrfs_next_old_item()
btrfs_node_blockptr()
btrfs_node_ptr_generation()
btrfs_set_device_total_bytes()
btrfs_set_node_blockptr()
btrfs_set_node_key()
btrfs_set_node_ptr_generation()
fs/btrfs/transaction.c:btrfs_attach_transaction_barrier()
fs/btrfs/transaction.c:btrfs_commit_transaction(struct btrfs_trans_handle *trans)
fs/btrfs/transaction.c:btrfs_put_transaction(struct btrfs_transaction *transaction)
fs/btrfs/transaction.c:btrfs_record_root_in_trans(struct btrfs_trans_handle *trans, struct btrfs_root *root)
fs/btrfs/transaction.c:btrfs_wait_extents(struct btrfs_fs_info *fs_info, struct extent_io_tree *dirty_pages)
fs/btrfs/transaction.c:btrfs_write_and_wait_transaction(struct btrfs_trans_handle *trans)
fs/btrfs/transaction.c:btrfs_write_marked_extents(struct btrfs_fs_info *fs_info, struct extent_io_tree *dirty_pages, int mark)
fs/btrfs/transaction.c:switch_commit_roots(struct btrfs_trans_handle *trans)
fs/btrfs/extent-tree.c:btrfs_free_extent(struct btrfs_trans_handle *trans, struct btrfs_ref *ref)
fs/btrfs/extent-tree.c:btrfs_inc_extent_ref(struct btrfs_trans_handle *trans, struct btrfs_ref *generic_ref)
fs/btrfs/extent-tree.c:btrfs_run_delayed_refs(struct btrfs_trans_handle *trans, unsigned long count)
fs/read_write.c:do_iter_write(struct file *file, struct iov_iter *iter, loff_t *pos, rwf_t flags)
fs/read_write.c:do_pwritev(unsigned long fd, const struct iovec __user *vec, unsigned long vlen, loff_t pos, rwf_t flags)
fs/read_write.c:vfs_writev(struct file *file, const struct iovec __user *vec, unsigned long vlen, loff_t *pos, rwf_t flags)
func for case 31d54c60c5b254d6f75b
drivers/net/wireless/ath/ath9k/wmi.c:ath9k_fatal_work(struct work_struct *work)
drivers/net/wireless/ath/ath9k/wmi.c:ath9k_init_wmi()
drivers/net/wireless/ath/ath9k/wmi.c:ath9k_wmi_cmd(struct wmi *wmi, enum wmi_cmd_id cmd_id, u8 *cmd_buf, u32 cmd_len, u8 *rsp_buf, u32 rsp_len, u32 timeout)
drivers/net/wireless/ath/ath9k/wmi.c:ath9k_wmi_cmd_issue(struct wmi *wmi, struct sk_buff *skb, enum wmi_cmd_id cmd, u16 len)
drivers/net/wireless/ath/ath9k/wmi.c:ath9k_wmi_connect(struct htc_target *htc, struct wmi *wmi, enum htc_endpoint_id *wmi_ctrl_epid)
drivers/net/wireless/ath/ath9k/wmi.c:ath9k_wmi_ctrl_rx(void *priv, struct sk_buff *skb, enum htc_endpoint_id epid)
drivers/net/wireless/ath/ath9k/wmi.c:ath9k_wmi_event_tasklet(struct tasklet_struct *t)
drivers/net/wireless/ath/ath9k/htc_drv_txrx.c:ath9k_htc_check_stop_queues(struct ath9k_htc_priv *priv)
drivers/net/wireless/ath/ath9k/htc_drv_txrx.c:ath9k_htc_check_tx_aggr(struct ath9k_htc_priv *priv, struct ieee80211_vif *vif, struct sk_buff *skb)
drivers/net/wireless/ath/ath9k/htc_drv_txrx.c:ath9k_htc_tx_cleanup_queue(struct ath9k_htc_priv *priv, struct sk_buff_head *epid_queue)
drivers/net/wireless/ath/ath9k/htc_drv_txrx.c:ath9k_htc_tx_cleanup_timer(struct timer_list *t)
drivers/net/wireless/ath/ath9k/htc_drv_txrx.c:ath9k_htc_tx_data(struct ath9k_htc_priv *priv, struct ieee80211_vif *vif, struct sk_buff *skb, u8 sta_idx, u8 vif_idx, u8 slot, bool is_cab)
drivers/net/wireless/ath/ath9k/htc_drv_txrx.c:ath9k_htc_tx_drain(struct ath9k_htc_priv *priv)
drivers/net/wireless/ath/ath9k/htc_drv_txrx.c:ath9k_htc_tx_get_packet()
drivers/net/wireless/ath/ath9k/htc_drv_txrx.c:ath9k_htc_tx_mgmt(struct ath9k_htc_priv *priv, struct ath9k_htc_vif *avp, struct sk_buff *skb, u8 sta_idx, u8 vif_idx, u8 slot)
drivers/net/wireless/ath/ath9k/htc_drv_txrx.c:ath9k_htc_tx_process(struct ath9k_htc_priv *priv, struct sk_buff *skb, struct __wmi_event_txstatus *txs)
drivers/net/wireless/ath/ath9k/htc_drv_txrx.c:ath9k_htc_tx_start(struct ath9k_htc_priv *priv, struct ieee80211_sta *sta, struct sk_buff *skb, u8 slot, bool is_cab)
drivers/net/wireless/ath/ath9k/htc_drv_txrx.c:ath9k_htc_txep(void *drv_priv, struct sk_buff *skb, enum htc_endpoint_id ep_id, bool txok)
drivers/net/wireless/ath/ath9k/htc_drv_txrx.c:ath9k_htc_txq_setup(struct ath9k_htc_priv *priv, int subtype)
drivers/net/wireless/ath/ath9k/htc_drv_txrx.c:ath9k_htc_txstatus(struct ath9k_htc_priv *priv, void *wmi_event)
drivers/net/wireless/ath/ath9k/htc_drv_txrx.c:ath9k_tx_init(struct ath9k_htc_priv *priv)
drivers/net/wireless/ath/ath9k/htc_drv_txrx.c:ath_htc_txq_update(struct ath9k_htc_priv *priv, int qnum, struct ath9k_tx_queue_info *qinfo)
kernel/locking/lockdep.c:__lock_acquire(struct lockdep_map *lock, unsigned int subclass, int trylock, int read, int check, int hardirqs_off, struct lockdep_map *nest_lock, unsigned long ip, int references, int pin_count)
kernel/locking/lockdep.c:__lock_release(struct lockdep_map *lock, unsigned long ip)
kernel/locking/lockdep.c:__lock_set_class(struct lockdep_map *lock, const char *name, struct lock_class_key *key, unsigned int subclass, unsigned long ip)
kernel/locking/lockdep.c:assign_lock_key(struct lockdep_map *lock)
kernel/locking/lockdep.c:lock_acquire(struct lockdep_map *lock, unsigned int subclass, int trylock, int read, int check, struct lockdep_map *nest_lock, unsigned long ip)
kernel/locking/lockdep.c:lock_release(struct lockdep_map *lock, unsigned long ip)
kernel/locking/lockdep.c:lock_set_class(struct lockdep_map *lock, const char *name, struct lock_class_key *key, unsigned int subclass, unsigned long ip)
kernel/locking/lockdep.c:lockdep_free_key_range_imm(void *start, unsigned long size)
kernel/locking/lockdep.c:lockdep_free_key_range_reg(void *start, unsigned long size)
kernel/locking/lockdep.c:lockdep_init_map_type(struct lockdep_map *lock, const char *name, struct lock_class_key *key, int subclass, u8 inner, u8 outer, u8 lock_type)
kernel/locking/lockdep.c:lockdep_register_key(struct lock_class_key *key)
kernel/locking/lockdep.c:lockdep_reset_lock_imm(struct lockdep_map *lock)
kernel/locking/lockdep.c:lockdep_reset_lock_reg(struct lockdep_map *lock)
kernel/locking/lockdep.c:lockdep_unregister_key(struct lock_class_key *key)
kernel/locking/lockdep.c:register_lock_class()
drivers/net/wireless/ath/ath9k/htc_drv_main.c:ath9k_htc_ampdu_action(struct ieee80211_hw *hw, struct ieee80211_vif *vif, struct ieee80211_ampdu_params *params)
drivers/net/wireless/ath/ath9k/htc_drv_main.c:ath9k_htc_bss_info_changed(struct ieee80211_hw *hw, struct ieee80211_vif *vif, struct ieee80211_bss_conf *bss_conf, u32 changed)
drivers/net/wireless/ath/ath9k/htc_drv_main.c:ath9k_htc_reset(struct ath9k_htc_priv *priv)
drivers/net/wireless/ath/ath9k/htc_drv_main.c:ath9k_htc_set_channel(struct ath9k_htc_priv *priv, struct ieee80211_hw *hw, struct ath9k_channel *hchan)
drivers/net/wireless/ath/ath9k/htc_drv_main.c:ath9k_htc_set_key(struct ieee80211_hw *hw, enum set_key_cmd cmd, struct ieee80211_vif *vif, struct ieee80211_sta *sta, struct ieee80211_key_conf *key)
drivers/net/wireless/ath/ath9k/htc_drv_main.c:ath9k_htc_start(struct ieee80211_hw *hw)
drivers/net/wireless/ath/ath9k/htc_drv_main.c:ath9k_htc_stop(struct ieee80211_hw *hw)
drivers/net/wireless/ath/ath9k/htc_drv_main.c:ath9k_htc_tx(struct ieee80211_hw *hw, struct ieee80211_tx_control *control, struct sk_buff *skb)
kernel/softirq.c:__tasklet_schedule_common(struct tasklet_struct *t, struct tasklet_head __percpu *headp, unsigned int softirq_nr)
kernel/softirq.c:run_ksoftirqd(unsigned int cpu)
kernel/softirq.c:tasklet_action_common(struct softirq_action *a, struct tasklet_head *tl_head, unsigned int softirq_nr)
kernel/softirq.c:tasklet_init(struct tasklet_struct *t, void (*func)(unsigned long), unsigned long data)
kernel/softirq.c:tasklet_kill(struct tasklet_struct *t)
kernel/softirq.c:tasklet_setup(struct tasklet_struct *t, void (*callback)(struct tasklet_struct *))
kernel/softirq.c:tasklet_unlock_spin_wait(struct tasklet_struct *t)
kernel/softirq.c:wakeup_softirqd(void)
kernel/locking/lockdep.c:__lock_acquire(struct lockdep_map *lock, unsigned int subclass, int trylock, int read, int check, int hardirqs_off, struct lockdep_map *nest_lock, unsigned long ip, int references, int pin_count)
__raw_spin_lock_bh()
_raw_spin_lock_bh()
kernel/locking/lockdep.c:assign_lock_key(struct lockdep_map *lock)
lib/dump_stack.c:dump_stack_lvl(const char *log_lvl)
kernel/locking/lockdep.c:lock_acquire(struct lockdep_map *lock, unsigned int subclass, int trylock, int read, int check, struct lockdep_map *nest_lock, unsigned long ip)
kernel/locking/lockdep.c:register_lock_class()
spin_lock_bh()
drivers/net/wireless/ath/ath9k/htc_drv_init.c:ath9k_htc_connect_svc(struct ath9k_htc_priv *priv, u16 service_id, void (*tx) (void *, struct sk_buff *, enum htc_endpoint_id, bool txok), enum htc_endpoint_id *ep_id)
drivers/net/wireless/ath/ath9k/htc_drv_init.c:ath9k_init_device(struct ath9k_htc_priv *priv, u16 devid, char *product, u32 drv_info)
drivers/net/wireless/ath/ath9k/htc_drv_init.c:ath9k_init_htc_services(struct ath9k_htc_priv *priv, u16 devid, u32 drv_info)
func for case 67654e51e54455f1c585
fs/hugetlbfs/inode.c:hugetlb_get_unmapped_area(struct file *file, unsigned long addr, unsigned long len, unsigned long pgoff, unsigned long flags)
fs/hugetlbfs/inode.c:hugetlb_get_unmapped_area_topdown(struct file *file, unsigned long addr, unsigned long len, unsigned long pgoff, unsigned long flags)
fs/hugetlbfs/inode.c:hugetlb_vmdelete_list(struct rb_root_cached *root, pgoff_t start, pgoff_t end)
fs/hugetlbfs/inode.c:hugetlb_vmtruncate(struct inode *inode, loff_t offset)
fs/hugetlbfs/inode.c:hugetlbfs_alloc_inode()
fs/hugetlbfs/inode.c:hugetlbfs_dec_free_inodes(struct hugetlbfs_sb_info *sbinfo)
fs/hugetlbfs/inode.c:hugetlbfs_evict_inode(struct inode *inode)
fs/hugetlbfs/inode.c:hugetlbfs_fallocate(struct file *file, int mode, loff_t offset, loff_t len)
fs/hugetlbfs/inode.c:hugetlbfs_file_mmap(struct file *file, struct vm_area_struct *vma)
fs/hugetlbfs/inode.c:hugetlbfs_get_inode()
fs/hugetlbfs/inode.c:hugetlbfs_migrate_page(struct address_space *mapping, struct page *newpage, struct page *page, enum migrate_mode mode)
fs/hugetlbfs/inode.c:hugetlbfs_punch_hole(struct inode *inode, loff_t offset, loff_t len)
fs/hugetlbfs/inode.c:hugetlbfs_read_actor(struct page *page, unsigned long offset, struct iov_iter *to, unsigned long size)
fs/hugetlbfs/inode.c:hugetlbfs_read_iter(struct kiocb *iocb, struct iov_iter *to)
fs/hugetlbfs/inode.c:remove_inode_hugepages(struct inode *inode, loff_t lstart, loff_t lend)
mm/hugetlb.c:__unmap_hugepage_range(struct mmu_gather *tlb, struct vm_area_struct *vma, unsigned long start, unsigned long end, struct page *ref_page)
mm/hugetlb.c:__unmap_hugepage_range_final(struct mmu_gather *tlb, struct vm_area_struct *vma, unsigned long start, unsigned long end, struct page *ref_page)
mm/hugetlb.c:copy_hugetlb_page_range(struct mm_struct *dst, struct mm_struct *src, struct vm_area_struct *vma)
mm/hugetlb.c:hugetlb_acct_memory(struct hstate *h, long delta)
mm/hugetlb.c:hugetlb_cow(struct mm_struct *mm, struct vm_area_struct *vma, unsigned long address, pte_t *ptep, struct page *pagecache_page, spinlock_t *ptl)
hugetlb_evict_inode()
mm/hugetlb.c:hugetlb_fault(struct mm_struct *mm, struct vm_area_struct *vma, unsigned long address, unsigned int flags)
mm/hugetlb.c:hugetlb_no_page(struct mm_struct *mm, struct vm_area_struct *vma, struct address_space *mapping, pgoff_t idx, unsigned long address, pte_t *ptep, unsigned int flags)
mm/hugetlb.c:hugetlb_reserve_pages(struct inode *inode, long from, long to, struct vm_area_struct *vma, vm_flags_t vm_flags)
mm/hugetlb.c:hugetlb_unreserve_pages(struct inode *inode, long start, long end, long freed)
mm/hugetlb.c:hugetlb_vm_op_close(struct vm_area_struct *vma)
mm/hugetlb.c:hugetlb_vm_op_open(struct vm_area_struct *vma)
mm/hugetlb.c:region_add(struct resv_map *resv, long f, long t, long in_regions_needed, struct hstate *h, struct hugetlb_cgroup *h_cg)
mm/hugetlb.c:region_chg(struct resv_map *resv, long f, long t, long *out_regions_needed)
fs/hugetlbfs/inode.c:remove_inode_hugepages(struct inode *inode, loff_t lstart, loff_t lend)
fs/inode.c:__destroy_inode(struct inode *inode)
fs/inode.c:alloc_inode()
fs/inode.c:clear_inode(struct inode *inode)
fs/inode.c:destroy_inode(struct inode *inode)
fs/inode.c:evict_inodes(struct super_block *sb)
fs/inode.c:inode_init_always(struct super_block *sb, struct inode *inode)
fs/inode.c:inode_init_once(struct inode *inode)
fs/inode.c:iput_final(struct inode *inode)
fs/dcache.c:__dentry_kill(struct dentry *dentry)
fs/dcache.c:d_delete(struct dentry * dentry)
fs/dcache.c:d_invalidate(struct dentry *dentry)
fs/dcache.c:d_lru_isolate(struct list_lru_one *lru, struct dentry *dentry)
fs/dcache.c:dentry_free(struct dentry *dentry)
dentry_unlink_inode()
fs/dcache.c:dentry_unlist(struct dentry *dentry, struct dentry *parent)
fs/file_table.c:__alloc_file()
fs/file_table.c:__fput(struct file *file)
fs/file_table.c:alloc_empty_file()
fs/file_table.c:alloc_empty_file_noaccount()
fs/file_table.c:alloc_file()
fs/file_table.c:alloc_file_clone()
fs/file_table.c:alloc_file_pseudo()
fs/file_table.c:file_free_rcu(struct rcu_head *head)
mm/memory.c:__handle_mm_fault(struct vm_area_struct *vma, unsigned long address, unsigned int flags)
mm/memory.c:do_fault(struct vm_fault *vmf)
mm/memory.c:handle_mm_fault(struct vm_area_struct *vma, unsigned long address, unsigned int flags, struct pt_regs *regs)
fs/super.c:deactivate_locked_super(struct super_block *s))
fs/super.c:destroy_unused_super(struct super_block *s))
fs/super.c:generic_shutdown_super(struct super_block *sb))
mm/page_alloc.c:__alloc_contig_pages(unsigned long start_pfn, unsigned long nr_pages, gfp_t gfp_mask)
mm/page_alloc.c:alloc_contig_range(unsigned long start, unsigned long end, unsigned migratetype, gfp_t gfp_mask)
mm/page_alloc.c:free_contig_range(unsigned long pfn, unsigned long nr_pages)
func for case 178efee9e2d7f87f5103
net/netfilter/nf_tables_api.c:__nft_release_table(struct net *net, struct nft_table *table)
net/netfilter/nf_tables_api.c:__nft_release_tables(struct net *net)
net/netfilter/nf_tables_api.c:nf_tables_chain_destroy(struct nft_ctx *ctx)
net/netfilter/nf_tables_api.c:nf_tables_commit_release(struct net *net)
net/netfilter/nf_tables_api.c:nf_tables_exit_net(struct net *net)
net/netfilter/nf_tables_api.c:nf_tables_rule_destroy(const struct nft_ctx *ctx, struct nft_rule *rule)
nf_tables_set_destroy()
net/netfilter/nf_tables_api.c:nf_tables_table_destroy(struct nft_ctx *ctx)
net/netfilter/nf_tables_api.c:nf_tables_trans_destroy_work(struct work_struct *w)
net/netfilter/nf_tables_api.c:nft_chain_release_hook(struct nft_chain_hook *hook)
net/netfilter/nf_tables_api.c:nft_commit_release(struct nft_trans *trans)
net/netfilter/nf_tables_api.c:nft_ctx_init(struct nft_ctx *ctx, struct net *net, const struct sk_buff *skb, const struct nlmsghdr *nlh, u8 family, struct nft_table *table, struct nft_chain *chain, const struct nlattr * const *nla)
net/netfilter/nf_tables_api.c:nft_netdev_unregister_hooks(struct net *net, struct list_head *hook_list, bool release_netdev)
net/netfilter/nf_tables_api.c:nft_set_elem_destroy(const struct nft_set *set, void *elem, bool destroy_expr)
net/netfilter/nf_tables_api.c:nft_trans_alloc_gfp()
net/core/net_namespace.c:__peernet2id(const struct net *net, struct net *peer)
net/core/net_namespace.c:alloc_netid(struct net *net, struct net *peer, int reqid)
net/core/net_namespace.c:cleanup_net(struct work_struct *work)
net/core/net_namespace.c:copy_net_ns()
net/core/net_namespace.c:get_net_ns_by_id()
net/core/net_namespace.c:net_alloc()
net/core/net_namespace.c:net_alloc_generic()
net/core/net_namespace.c:net_assign_generic(struct net *net, unsigned int id, void *data)
net/core/net_namespace.c:net_drop_ns(void *p)
net/core/net_namespace.c:ops_exit_list(const struct pernet_operations *ops, struct list_head *net_exit_list)
net/core/net_namespace.c:ops_free_list(const struct pernet_operations *ops, struct list_head *net_exit_list)
net/core/net_namespace.c:ops_pre_exit_list(const struct pernet_operations *ops, struct list_head *net_exit_list)
net/core/net_namespace.c:peernet2id_alloc(struct net *net, struct net *peer, gfp_t gfp)
net/core/net_namespace.c:setup_net(struct net *net, struct user_namespace *user_ns)
net/core/net_namespace.c:unhash_nsid(struct net *net, struct net *last)
kernel/workqueue.c:alloc_and_link_pwqs(struct workqueue_struct *wq)
kernel/workqueue.c:alloc_unbound_pwq()
kernel/workqueue.c:alloc_worker()
kernel/workqueue.c:alloc_workqueue()
kernel/workqueue.c:alloc_workqueue_attrs()
kernel/workqueue.c:create_worker()
kernel/workqueue.c:destroy_worker(struct worker *worker)
kernel/workqueue.c:destroy_workqueue(struct workqueue_struct *wq)
kernel/workqueue.c:get_unbound_pool()
kernel/workqueue.c:init_worker_pool(struct worker_pool *pool)
kernel/workqueue.c:insert_work(struct pool_workqueue *pwq, struct work_struct *work, struct list_head *head, unsigned int extra_flags)
kernel/workqueue.c:put_pwq(struct pool_workqueue *pwq)
kernel/workqueue.c:put_unbound_pool(struct worker_pool *pool)
kernel/workqueue.c:worker_attach_to_pool(struct worker *worker, struct worker_pool *pool)
kernel/workqueue.c:worker_detach_from_pool(struct worker *worker)
net/netfilter/nft_ct.c:nft_ct_get_eval(const struct nft_expr *expr, struct nft_regs *regs, const struct nft_pktinfo *pkt)
net/netfilter/nft_ct.c:nft_ct_get_eval_counter(const struct nf_conn_counter *c, enum nft_ct_keys k, enum ip_conntrack_dir d)
net/netfilter/nft_ct.c:nft_ct_get_init(const struct nft_ctx *ctx, const struct nft_expr *expr, const struct nlattr * const tb[])
net/netfilter/nft_ct.c:nft_ct_helper_obj_init(const struct nft_ctx *ctx, const struct nlattr * const tb[], struct nft_object *obj)
net/netfilter/nft_ct.c:nft_ct_set_eval(const struct nft_expr *expr, struct nft_regs *regs, const struct nft_pktinfo *pkt)
net/netfilter/nft_ct.c:nft_ct_set_init(const struct nft_ctx *ctx, const struct nft_expr *expr, const struct nlattr * const tb[])
net/netfilter/nft_ct.c:nft_ct_set_zone_eval(const struct nft_expr *expr, struct nft_regs *regs, const struct nft_pktinfo *pkt)
net/netfilter/nft_ct.c:nft_ct_timeout_obj_init(const struct nft_ctx *ctx, const struct nlattr * const tb[], struct nft_object *obj)
net/netfilter/nft_chain_nat.c:nft_chain_nat_init(void)
net/netfilter/nft_chain_nat.c:nft_nat_do_chain(void *priv, struct sk_buff *skb, const struct nf_hook_state *state)
net/netfilter/nft_flow_offload.c:nft_dev_fill_forward_path(const struct nf_flow_route *route, const struct dst_entry *dst_cache, const struct nf_conn *ct, enum ip_conntrack_dir dir, u8 *ha, struct net_device_path_stack *stack)
net/netfilter/nft_flow_offload.c:nft_dev_forward_path(struct nf_flow_route *route, const struct nf_conn *ct, enum ip_conntrack_dir dir, struct nft_flowtable *ft)
net/netfilter/nft_flow_offload.c:nft_dev_path_info(const struct net_device_path_stack *stack, struct nft_forward_info *info, unsigned char *ha, struct nf_flowtable *flowtable)
net/netfilter/nft_flow_offload.c:nft_flow_offload_dump(struct sk_buff *skb, const struct nft_expr *expr)
net/netfilter/nft_flow_offload.c:nft_flow_offload_eval(const struct nft_expr *expr, struct nft_regs *regs, const struct nft_pktinfo *pkt)
net/netfilter/nft_flow_offload.c:nft_flow_offload_init(const struct nft_ctx *ctx, const struct nft_expr *expr, const struct nlattr * const tb[])
net/netfilter/nft_flow_offload.c:nft_flow_route(const struct nft_pktinfo *pkt, const struct nf_conn *ct, struct nf_flow_route *route, enum ip_conntrack_dir dir, struct nft_flowtable *ft)
net/netfilter/nft_flow_offload.c:nft_flowtable_find_dev(const struct net_device *dev, struct nft_flowtable *ft)
nft_fib_inet_destroy()
nft_fib_inet_dump()
net/netfilter/nft_fib_inet.c:nft_fib_inet_eval(const struct nft_expr *expr, struct nft_regs *regs, const struct nft_pktinfo *pkt)
nft_fib_inet_init()
nft_fib_inet_type()
nft_fib_inet_validate()
net/netfilter/nft_compat.c:nft_compat_chain_validate_dependency(const struct nft_ctx *ctx, const char *tablename)
net/netfilter/nft_compat.c:nft_match_select_ops()
net/netfilter/nft_compat.c:nft_target_select_ops()
nf_tables()
nf_tables_api()
net/netfilter/nf_tables_api.c:nf_tables_exit_net(struct net *net)
nft_counter()
net/netfilter/nft_hash.c:nft_hash_select_ops()
func for case 5d5821ad053bbbd4a11174989f2bf9d111873c52
net/ipv6/sit.c:ipip6_changelink(struct net_device *dev, struct nlattr *tb[], struct nlattr *data[], struct netlink_ext_ack *extack)
net/ipv6/sit.c:ipip6_netlink_parms(struct nlattr *data[], struct ip_tunnel_parm *parms, __u32 *fwmark)
net/ipv6/sit.c:ipip6_newlink(struct net *src_net, struct net_device *dev, struct nlattr *tb[], struct nlattr *data[], struct netlink_ext_ack *extack)
net/ipv6/sit.c:ipip6_tunnel_bind_dev(struct net_device *dev)
net/ipv6/sit.c:ipip6_tunnel_create(struct net_device *dev)
net/ipv6/sit.c:ipip6_tunnel_init(struct net_device *dev)
net/ipv6/sit.c:ipip6_tunnel_locate()
net/ipv6/sit.c:ipip6_tunnel_setup(struct net_device *dev)
net/ipv6/sit.c:ipip6_tunnel_uninit(struct net_device *dev)
net/ipv6/sit.c:ipip6_tunnel_unlink(struct sit_net *sitn, struct ip_tunnel *t)
net/ipv6/sit.c:ipip6_tunnel_update(struct ip_tunnel *t, struct ip_tunnel_parm *p, __u32 fwmark)
net/ipv6/sit.c:ipip6_tunnel_xmit(struct sk_buff *skb, struct net_device *dev)
net/ipv6/sit.c:ipip6_validate(struct nlattr *tb[], struct nlattr *data[], struct netlink_ext_ack *extack)
net/ipv6/sit.c:sit_tunnel_xmit(struct sk_buff *skb, struct net_device *dev)
net/ipv6/sit.c:sit_tunnel_xmit__(struct sk_buff *skb, struct net_device *dev, u8 ipproto)
net/core/skbuff.c:pskb_carve(struct sk_buff *skb, const u32 len, gfp_t gfp)
net/core/skbuff.c:pskb_expand_head(struct sk_buff *skb, int nhead, int ntail, gfp_t gfp_mask)
net/core/skbuff.c:skb_clone()
net/core/skbuff.c:skb_condense(struct sk_buff *skb)
net/core/skbuff.c:skb_copy()
net/core/skbuff.c:skb_copy_expand()
net/core/skbuff.c:skb_cow_data(struct sk_buff *skb, int tailbits, struct sk_buff **trailer)
net/core/skbuff.c:skb_ensure_writable(struct sk_buff *skb, unsigned int write_len)
net/core/skbuff.c:skb_maybe_pull_tail(struct sk_buff *skb, unsigned int len, unsigned int max)
net/core/skbuff.c:skb_panic(struct sk_buff *skb, unsigned int sz, void *addr, const char msg[])
net/core/skbuff.c:skb_push()
net/core/skbuff.c:skb_realloc_headroom()
net/core/skbuff.c:skb_shift(struct sk_buff *tgt, struct sk_buff *skb, int shiftlen)
net/core/skbuff.c:skb_split(struct sk_buff *skb, struct sk_buff *skb1, const u32 len)
skb_under_panic()
net/ipv4/ip_tunnel.c:__ip_tunnel_create()
net/ipv4/ip_tunnel.c:ip_tunnel_bind_dev(struct net_device *dev)
net/ipv4/ip_tunnel.c:ip_tunnel_changelink(struct net_device *dev, struct nlattr *tb[], struct ip_tunnel_parm *p, __u32 fwmark)
net/ipv4/ip_tunnel.c:ip_tunnel_create()
net/ipv4/ip_tunnel.c:ip_tunnel_ctl(struct net_device *dev, struct ip_tunnel_parm *p, int cmd)
net/ipv4/ip_tunnel.c:ip_tunnel_encap_setup(struct ip_tunnel *t, struct ip_tunnel_encap *ipencap)
net/ipv4/ip_tunnel.c:ip_tunnel_find()
net/ipv4/ip_tunnel.c:ip_tunnel_init(struct net_device *dev)
net/ipv4/ip_tunnel.c:ip_tunnel_key_match(const struct ip_tunnel_parm *p, __be16 flags, __be32 key)
net/ipv4/ip_tunnel.c:ip_tunnel_lookup()
net/ipv4/ip_tunnel.c:ip_tunnel_newlink(struct net_device *dev, struct nlattr *tb[], struct ip_tunnel_parm *p, __u32 fwmark)
net/ipv4/ip_tunnel.c:ip_tunnel_rcv(struct ip_tunnel *tunnel, struct sk_buff *skb, const struct tnl_ptk_info *tpi, struct metadata_dst *tun_dst, bool log_ecn_error)
net/ipv4/ip_tunnel.c:ip_tunnel_uninit(struct net_device *dev)
net/ipv4/ip_tunnel.c:ip_tunnel_update(struct ip_tunnel_net *itn, struct ip_tunnel *t, struct net_device *dev, struct ip_tunnel_parm *p, bool set_mtu, __u32 fwmark)
net/ipv4/ip_tunnel.c:ip_tunnel_xmit(struct sk_buff *skb, struct net_device *dev, const struct iphdr *tnl_params, u8 protocol)
net/ipv4/fou_core.c:__gue_build_header(struct sk_buff *skb, struct ip_tunnel_encap *e, u8 *protocol, __be16 *sport, int type)
net/ipv4/fou_core.c:fou_build_header(struct sk_buff *skb, struct ip_tunnel_encap *e, u8 *protocol, struct flowi4 *fl4)
net/ipv4/fou_core.c:fou_build_udp(struct sk_buff *skb, struct ip_tunnel_encap *e, struct flowi4 *fl4, u8 *protocol, __be16 sport)
net/ipv4/fou_core.c:fou_recv_pull(struct sk_buff *skb, struct fou *fou, size_t len)
net/ipv4/fou_core.c:fou_udp_recv(struct sock *sk, struct sk_buff *skb)
net/ipv4/fou_core.c:gue_build_header(struct sk_buff *skb, struct ip_tunnel_encap *e, u8 *protocol, struct flowi4 *fl4)
net/ipv4/fou_core.c:gue_err(struct sk_buff *skb, u32 info)
net/ipv4/fou_core.c:gue_udp_recv(struct sock *sk, struct sk_buff *skb)
net/core/skbuff.c:skb_push()
net/core/dev.c:__dev_queue_xmit(struct sk_buff *skb, struct net_device *sb_dev)
net/core/dev.c:dev_hard_start_xmit()
net/core/dev.c:netif_setup_tc(struct net_device *dev, unsigned int txq)
net/core/dev.c:netif_skb_features(struct sk_buff *skb)
net/core/dev.c:skb_checksum_help(struct sk_buff *skb)
net/core/dev.c:skb_tx_hash(const struct net_device *dev, const struct net_device *sb_dev, struct sk_buff *skb)
net/core/dev.c:validate_xmit_skb()
net/core/dev.c:xmit_one(struct sk_buff *skb, struct net_device *dev, struct netdev_queue *txq, bool more)
net/ipv4/udp.c:__udp_queue_rcv_skb(struct sock *sk, struct sk_buff *skb)
net/ipv4/udp.c:udp4_hwcsum(struct sk_buff *skb, __be32 src, __be32 dst)
net/ipv4/udp.c:udp_push_pending_frames(struct sock *sk)
net/ipv4/udp.c:udp_queue_rcv_one_skb(struct sock *sk, struct sk_buff *skb)
net/ipv4/udp.c:udp_queue_rcv_skb(struct sock *sk, struct sk_buff *skb)
net/ipv4/udp.c:udp_send_skb(struct sk_buff *skb, struct flowi4 *fl4, struct inet_cork *cork)
net/ipv4/udp.c:udp_sendmsg(struct sock *sk, struct msghdr *msg, size_t len)
net/ipv4/udp.c:udp_set_csum(bool nocheck, struct sk_buff *skb, __be32 saddr, __be32 daddr, int len)
include/net/ip_tunnels.h:ip_encap_hlen(struct ip_tunnel_encap *e)
include/net/ip_tunnels.h:ip_tunnel_encap(struct sk_buff *skb, struct ip_tunnel_encap *e, u8 *protocol, struct flowi4 *fl4)
include/net/ip_tunnels.h:ip_tunnel_get_dsfield(const struct iphdr *iph, const struct sk_buff *skb)
include/net/ip_tunnels.h:ip_tunnel_info_opts_set(struct ip_tunnel_info *info, const void *from, int len, __be16 flags)
include/net/ip_tunnels.h:ip_tunnel_init_flow(struct flowi4 *fl4, int proto, __be32 daddr, __be32 saddr, __be32 key, __u8 tos, struct net *net, int oif, __u32 mark, __u32 tun_inner_hash, __u8 flow_flags)
include/net/ip_tunnels.h:ip_tunnel_key_init(struct ip_tunnel_key *key, __be32 saddr, __be32 daddr, u8 tos, u8 ttl, __be32 label, __be16 tp_src, __be16 tp_dst, __be64 tun_id, __be16 tun_flags)
include/net/ip_tunnels.h:iptunnel_pull_offloads(struct sk_buff *skb)
include/net/ip_tunnels.h:pskb_inet_may_pull(struct sk_buff *skb)
include/linux/netdevice.h:__is_skb_forwardable(const struct net_device *dev, const struct sk_buff *skb, const bool check_mtu)
include/linux/netdevice.h:dev_direct_xmit(struct sk_buff *skb, u16 queue_id)
include/linux/netdevice.h:netdev_start_xmit(struct sk_buff *skb, struct net_device *dev, struct netdev_queue *txq, bool more)
net/socket.c:____sys_sendmsg(struct socket *sock, struct msghdr *msg_sys, unsigned int flags, struct used_address *used_address, unsigned int allowed_msghdr_flags)
net/socket.c:kernel_sendmsg_locked(struct sock *sk, struct msghdr *msg, struct kvec *vec, size_t num, size_t size)
net/socket.c:sock_sendmsg_nosec(struct socket *sock, struct msghdr *msg)
net/ipv4/ip_output.c:ip_finish_output2(struct net *net, struct sock *sk, struct sk_buff *skb)
net/ipv4/ip_output.c:ip_local_out(struct net *net, struct sock *sk, struct sk_buff *skb)
net/ipv4/ip_output.c:ip_output(struct net *net, struct sock *sk, struct sk_buff *skb)
func for case 6ada951e7c0f7bc8a71e
mm/hugetlb.c:__hugetlb_zap_begin(struct vm_area_struct *vma, unsigned long *start, unsigned long *end)
kernel/fork.c:__mmput(struct mm_struct *mm)
mm/hugetlb.c:__unmap_hugepage_range(struct mmu_gather *tlb, struct vm_area_struct *vma, unsigned long start, unsigned long end, struct page *ref_page, zap_flags_t zap_flags)
mm/mmap.c:exit_mmap(struct mm_struct *mm)
mm/hugetlb.c:hugetlb_change_protection(struct vm_area_struct *vma, unsigned long address, unsigned long end, pgprot_t newprot, unsigned long cp_flags)
mm/hugetlb.c:hugetlb_fault(struct mm_struct *mm, struct vm_area_struct *vma, unsigned long address, unsigned int flags)
mm/hugetlb.c:hugetlb_no_page(struct mm_struct *mm, struct vm_area_struct *vma, struct address_space *mapping, pgoff_t idx, unsigned long address, pte_t *ptep, pte_t old_pte, unsigned int flags)
mm/hugetlb.c:hugetlb_reserve_pages(struct inode *inode, long from, long to, struct vm_area_struct *vma, vm_flags_t vm_flags)
mm/hugetlb.c:hugetlb_unreserve_pages(struct inode *inode, long start, long end, long freed)
mm/hugetlb.c:hugetlb_vma_lock_write(struct vm_area_struct *vma)
mm/hugetlb.c:hugetlb_wp(struct mm_struct *mm, struct vm_area_struct *vma, unsigned long address, pte_t *ptep, unsigned int flags, struct folio *pagecache_folio, spinlock_t *ptl)
hugetlb_zap_begin()
mm/hugetlb.c:unmap_hugepage_range(struct vm_area_struct *vma, unsigned long start, unsigned long end, struct page *ref_page, zap_flags_t zap_flags)
mm/memory.c:unmap_vmas(struct mmu_gather *tlb, struct ma_state *mas, struct vm_area_struct *vma, unsigned long start_addr, unsigned long end_addr, unsigned long tree_end, bool mm_wr_locked)
kernel/locking/lockdep.c:__lock_acquire(struct lockdep_map *lock, unsigned int subclass, int trylock, int read, int check, int hardirqs_off, struct lockdep_map *nest_lock, unsigned long ip, int references, int pin_count, int sync)
kernel/locking/lockdep.c:check_chain_key(struct task_struct *curr)
kernel/locking/lockdep.c:check_deadlock(struct task_struct *curr, struct held_lock *next)
kernel/locking/lockdep.c:check_flags(unsigned long flags)
kernel/locking/lockdep.c:check_irq_usage(struct task_struct *curr, struct held_lock *prev, struct held_lock *next)
kernel/locking/lockdep.c:check_noncircular(struct held_lock *src, struct held_lock *target, struct lock_trace **const trace)
kernel/locking/lockdep.c:check_prev_add(struct task_struct *curr, struct held_lock *prev, struct held_lock *next, u16 distance, struct lock_trace **const trace)
kernel/locking/lockdep.c:check_usage_backwards(struct task_struct *curr, struct held_lock *this, enum lock_usage_bit bit)
kernel/locking/lockdep.c:check_usage_forwards(struct task_struct *curr, struct held_lock *this, enum lock_usage_bit bit)
kernel/locking/lockdep.c:check_wait_context(struct task_struct *curr, struct held_lock *next)
kernel/locking/lockdep.c:lock_acquire(struct lockdep_map *lock, unsigned int subclass, int trylock, int read, int check, struct lockdep_map *nest_lock, unsigned long ip)
kernel/locking/lockdep.c:mark_usage(struct task_struct *curr, struct held_lock *hlock, int check)
kernel/locking/lockdep.c:print_deadlock_bug(struct task_struct *curr, struct held_lock *prev, struct held_lock *next)
kernel/locking/lockdep.c:print_irq_inversion_bug(struct task_struct *curr, struct lock_list *root, struct lock_list *other, struct held_lock *this, int forwards, const char *irqclass)
kernel/locking/lockdep.c:validate_chain(struct task_struct *curr, struct held_lock *hlock, int chain_head, u64 chain_key)
mm/memory.c:__handle_mm_fault(struct vm_area_struct *vma, unsigned long address, unsigned int flags)
mm/memory.c:free_p4d_range(struct mmu_gather *tlb, pgd_t *pgd, unsigned long addr, unsigned long end, unsigned long floor, unsigned long ceiling)
mm/memory.c:free_pgd_range(struct mmu_gather *tlb, unsigned long addr, unsigned long end, unsigned long floor, unsigned long ceiling)
mm/memory.c:free_pgtables(struct mmu_gather *tlb, struct ma_state *mas, struct vm_area_struct *vma, unsigned long floor, unsigned long ceiling, bool mm_wr_locked)
mm/memory.c:free_pmd_range(struct mmu_gather *tlb, pud_t *pud, unsigned long addr, unsigned long end, unsigned long floor, unsigned long ceiling)
mm/memory.c:free_pud_range(struct mmu_gather *tlb, p4d_t *p4d, unsigned long addr, unsigned long end, unsigned long floor, unsigned long ceiling)
mm/memory.c:handle_mm_fault(struct vm_area_struct *vma, unsigned long address, unsigned int flags, struct pt_regs *regs)
mm/memory.c:unmap_page_range(struct mmu_gather *tlb, struct vm_area_struct *vma, unsigned long addr, unsigned long end, struct zap_details *details)
mm/memory.c:unmap_single_vma(struct mmu_gather *tlb, struct vm_area_struct *vma, unsigned long start_addr, unsigned long end_addr, struct zap_details *details, bool mm_wr_locked)
mm/memory.c:unmap_vmas(struct mmu_gather *tlb, struct ma_state *mas, struct vm_area_struct *vma, unsigned long start_addr, unsigned long end_addr, unsigned long tree_end, bool mm_wr_locked)
mm/memory.c:zap_p4d_range(struct mmu_gather *tlb, struct vm_area_struct *vma, pgd_t *pgd, unsigned long addr, unsigned long end, struct zap_details *details)
mm/memory.c:zap_page_range_single(struct vm_area_struct *vma, unsigned long address, unsigned long size, struct zap_details *details)
mm/memory.c:zap_pmd_range(struct mmu_gather *tlb, struct vm_area_struct *vma, pud_t *pud, unsigned long addr, unsigned long end, struct zap_details *details)
mm/memory.c:zap_pte_range(struct mmu_gather *tlb, struct vm_area_struct *vma, pmd_t *pmd, unsigned long addr, unsigned long end, struct zap_details *details)
mm/memory.c:zap_pud_range(struct mmu_gather *tlb, struct vm_area_struct *vma, p4d_t *p4d, unsigned long addr, unsigned long end, struct zap_details *details)
kernel/locking/rwsem.c:rwsem_down_read_slowpath()
kernel/locking/rwsem.c:rwsem_down_write_slowpath()
kernel/locking/rwsem.c:rwsem_mark_wake(struct rw_semaphore *sem, enum rwsem_wake_type wake_type, struct wake_q_head *wake_q)
kernel/locking/rwsem.c:rwsem_optimistic_spin(struct rw_semaphore *sem)
kernel/locking/rwsem.c:rwsem_read_trylock(struct rw_semaphore *sem, long *cntp)
kernel/locking/rwsem.c:rwsem_set_nonspinnable(struct rw_semaphore *sem)
kernel/locking/rwsem.c:rwsem_try_write_lock(struct rw_semaphore *sem, struct rwsem_waiter *waiter)
kernel/locking/rwsem.c:rwsem_write_trylock(struct rw_semaphore *sem)
mm/mmap.c:__split_vma(struct vma_iterator *vmi, struct vm_area_struct *vma, unsigned long addr, int new_below)
do_mas_align_munmap()
do_mas_munmap()
mm/mmap.c:exit_mmap(struct mm_struct *mm)
munmap_sidetree()
mm/mmap.c:remove_mt(struct mm_struct *mm, struct ma_state *mas)
mm/mmap.c:unmap_region(struct mm_struct *mm, struct ma_state *mas, struct vm_area_struct *vma, struct vm_area_struct *prev, struct vm_area_struct *next, unsigned long start, unsigned long end, unsigned long tree_end, bool mm_wr_locked)
mm/mmap.c:vma_link(struct mm_struct *mm, struct vm_area_struct *vma)
kernel/fork.c:__mmput(struct mm_struct *mm)
kernel/fork.c:copy_mm(unsigned long clone_flags, struct task_struct *tsk)
kernel/fork.c:copy_process()
kernel/fork.c:dup_mm()
kernel/fork.c:dup_mmap(struct mm_struct *mm, struct mm_struct *oldmm)
kernel/fork.c:mm_alloc()
kernel/fork.c:mm_init()
kernel/fork.c:mm_release(struct task_struct *tsk, struct mm_struct *mm)
kernel/exit.c:__exit_signal(struct task_struct *tsk)
kernel/exit.c:do_exit(long code)
kernel/exit.c:exit_mm(void)
kernel/exit.c:exit_notify(struct task_struct *tsk, int group_dead)
kernel/exit.c:find_new_reaper()
kernel/exit.c:forget_original_parent(struct task_struct *father, struct list_head *dead)
kernel/exit.c:release_task(struct task_struct *p)
kernel/exit.c:reparent_leader(struct task_struct *father, struct task_struct *p, struct list_head *dead)
include/linux/hugetlb.h:huge_pte_lock()
include/linux/hugetlb.h:huge_pte_lockptr()
kernel/locking/lockdep.c:__lock_acquire(struct lockdep_map *lock, unsigned int subclass, int trylock, int read, int check, int hardirqs_off, struct lockdep_map *nest_lock, unsigned long ip, int references, int pin_count, int sync)
down_write()
kernel/locking/lockdep.c:lock_acquire(struct lockdep_map *lock, unsigned int subclass, int trylock, int read, int check, struct lockdep_map *nest_lock, unsigned long ip)
func for case 60c52ca98513a8760a91
kernel/cred.c:__put_cred(struct cred *cred)
kernel/cred.c:__validate_process_creds(struct task_struct *tsk, const char *file, unsigned line)
kernel/cred.c:abort_creds(struct cred *new)
kernel/cred.c:commit_creds(struct cred *new)
kernel/cred.c:cred_alloc_blank()
kernel/cred.c:dump_invalid_creds(const struct cred *cred, const char *label, const struct task_struct *tsk)
kernel/cred.c:exit_creds(struct task_struct *tsk)
kernel/cred.c:override_creds()
kernel/cred.c:prepare_creds()
kernel/cred.c:prepare_kernel_cred()
kernel/cred.c:put_cred_rcu(struct rcu_head *rcu)
kernel/cred.c:revert_creds(const struct cred *old)
kernel/cred.c:set_create_files_as(struct cred *new, struct inode *inode)
kernel/cred.c:set_cred_ucounts(struct cred *new)
kernel/cred.c:validate_creds_for_do_exit(struct task_struct *tsk)
security/keys/process_keys.c:get_user_register()
security/keys/process_keys.c:get_user_session_keyring_rcu()
security/keys/process_keys.c:install_process_keyring_to_cred(struct cred *new)
security/keys/process_keys.c:install_session_keyring(struct key *keyring)
security/keys/process_keys.c:install_session_keyring_to_cred(struct cred *cred, struct key *keyring)
security/keys/process_keys.c:install_thread_keyring_to_cred(struct cred *new)
security/keys/process_keys.c:join_session_keyring(const char *name)
security/keys/process_keys.c:key_change_session_keyring(struct callback_head *twork)
security/keys/process_keys.c:look_up_user_keyrings(struct key **_user_keyring, struct key **_user_session_keyring)
security/keys/process_keys.c:lookup_user_key(key_serial_t id, unsigned long lflags, enum key_need_perm need_perm)
security/keys/process_keys.c:search_cred_keyrings_rcu(struct keyring_search_context *ctx)
security/keys/process_keys.c:search_process_keyrings_rcu(struct keyring_search_context *ctx)
fs/io_uring.c:io_allocate_scq_urings(struct io_ring_ctx *ctx, struct io_uring_params *p)
fs/io_uring.c:io_register_personality(struct io_ring_ctx *ctx)
fs/io_uring.c:io_ring_ctx_free(struct io_ring_ctx *ctx)
fs/io_uring.c:io_ring_ctx_wait_and_kill(struct io_ring_ctx *ctx)
fs/io_uring.c:io_uring_alloc_task_context(struct task_struct *task, struct io_ring_ctx *ctx)
fs/io_uring.c:io_uring_clean_tctx(struct io_uring_task *tctx)
fs/io_uring.c:io_uring_create(unsigned entries, struct io_uring_params *p, struct io_uring_params __user *params)
fs/io_uring.c:io_uring_get_file()
fs/io_uring.c:io_uring_install_fd(struct io_ring_ctx *ctx, struct file *file)
fs/io_uring.c:io_uring_poll(struct file *file, poll_table *wait)
fs/io_uring.c:io_uring_release(struct inode *inode, struct file *file)
fs/io_uring.c:io_uring_setup(u32 entries, struct io_uring_params __user *params)
fs/io_uring.c:io_uring_show_cred(struct seq_file *m, unsigned int id, const struct cred *cred)
fs/io_uring.c:io_uring_try_cancel_iowq(struct io_ring_ctx *ctx)
fs/io_uring.c:io_uring_try_cancel_requests(struct io_ring_ctx *ctx, struct task_struct *task, bool cancel_all)
security/keys/keyctl.c:keyctl_instantiate_key_common(key_serial_t id, struct iov_iter *from, key_serial_t ringid)
security/keys/keyctl.c:keyctl_instantiate_key_iov(key_serial_t id, const struct iovec __user *_payload_iov, unsigned ioc, key_serial_t ringid)
security/keys/keyctl.c:keyctl_keyring_link(key_serial_t id, key_serial_t ringid)
security/keys/keyctl.c:keyctl_keyring_search(key_serial_t ringid, const char __user *_type, const char __user *_description, key_serial_t destringid)
security/keys/keyctl.c:keyctl_keyring_unlink(key_serial_t id, key_serial_t ringid)
security/keys/keyctl.c:keyctl_revoke_key(key_serial_t id)
security/keys/keyctl.c:keyctl_setperm_key(key_serial_t id, key_perm_t perm)
security/keys/keyctl.c:keyctl_update_key(key_serial_t id, const void __user *_payload, size_t plen)
security/keys/key.c:__key_instantiate_and_link(struct key *key, struct key_preparsed_payload *prep, struct key *keyring, struct key *authkey, struct assoc_array_edit **_edit)
security/keys/key.c:key_alloc()
security/keys/key.c:key_create_or_update(key_ref_t keyring_ref, const char *type, const char *description, const void *payload, size_t plen, key_perm_t perm, unsigned long flags)
security/keys/key.c:key_instantiate_and_link(struct key *key, const void *data, size_t datalen, struct key *keyring, struct key *authkey)
security/keys/key.c:key_lookup()
security/keys/key.c:key_reject_and_link(struct key *key, unsigned timeout, unsigned error, struct key *keyring, struct key *authkey)
security/keys/key.c:key_type_lookup()
security/keys/key.c:key_user_lookup()
security/keys/keyring.c:find_key_to_update(key_ref_t keyring_ref, const struct keyring_index_key *index_key)
security/keys/keyring.c:key_link(struct key *keyring, struct key *key)
security/keys/keyring.c:key_unlink(struct key *keyring, struct key *key)
security/keys/keyring.c:keyring_alloc()
security/keys/keyring.c:keyring_detect_cycle(struct key *A, struct key *B)
security/keys/keyring.c:keyring_restrict(key_ref_t keyring_ref, const char *type, const char *restriction)
security/keys/keyring.c:keyring_restriction_alloc()
security/keys/keyring.c:keyring_search(key_ref_t keyring, struct key_type *type, const char *description, bool recurse)
IORING_REGISTER_PERSONALITY()
__do_sys_add_key()
add_key()
kernel/cred.c:commit_creds(struct cred *new)
fscrypt_provisioning()
security/keys/process_keys.c:install_process_keyring(void)
io_uring_register()
security/keys/process_keys.c:lookup_user_key(key_serial_t id, unsigned long lflags, enum key_need_perm need_perm)
syz_io_uring_setup()
syz_io_uring_submit()
kernel/cred.c:commit_creds(struct cred *new)
security/keys/process_keys.c:install_process_keyring(void)
security/keys/process_keys.c:lookup_user_key(key_serial_t id, unsigned long lflags, enum key_need_perm need_perm)
func for case 649e339fa6658ee623d3
net/netfilter/nft_ct.c:nft_ct_get_dump(struct sk_buff *skb, const struct nft_expr *expr)
net/netfilter/nft_ct.c:nft_ct_get_eval(const struct nft_expr *expr, struct nft_regs *regs, const struct nft_pktinfo *pkt)
net/netfilter/nft_ct.c:nft_ct_get_init(const struct nft_ctx *ctx, const struct nft_expr *expr, const struct nlattr * const tb[])
net/netfilter/nft_ct.c:nft_ct_helper_obj_destroy(const struct nft_ctx *ctx, struct nft_object *obj)
net/netfilter/nft_ct.c:nft_ct_helper_obj_init(const struct nft_ctx *ctx, const struct nlattr * const tb[], struct nft_object *obj)
net/netfilter/nft_ct.c:nft_ct_select_ops()
net/netfilter/nft_ct.c:nft_ct_set_destroy(const struct nft_ctx *ctx, const struct nft_expr *expr)
net/netfilter/nft_ct.c:nft_ct_set_dump(struct sk_buff *skb, const struct nft_expr *expr)
net/netfilter/nft_ct.c:nft_ct_set_eval(const struct nft_expr *expr, struct nft_regs *regs, const struct nft_pktinfo *pkt)
net/netfilter/nft_ct.c:nft_ct_set_init(const struct nft_ctx *ctx, const struct nft_expr *expr, const struct nlattr * const tb[])
net/netfilter/nft_ct.c:nft_ct_timeout_obj_eval(struct nft_object *obj, struct nft_regs *regs, const struct nft_pktinfo *pkt)
net/netfilter/nft_ct.c:nft_ct_timeout_obj_init(const struct nft_ctx *ctx, const struct nlattr * const tb[], struct nft_object *obj)
net/netfilter/nft_ct.c:nft_ct_tmpl_alloc_pcpu(void)
net/netfilter/nft_ct.c:nft_ct_tmpl_put_pcpu(void)
net/netfilter/nft_ct.c:nft_notrack_eval(const struct nft_expr *expr, struct nft_regs *regs, const struct nft_pktinfo *pkt)
net/netfilter/nf_conntrack_core.c:__nf_conntrack_alloc()
net/netfilter/nf_conntrack_core.c:clean_from_lists(struct nf_conn *ct)
net/netfilter/nf_conntrack_core.c:destroy_conntrack(struct nf_conntrack *nfct)
net/netfilter/nf_conntrack_core.c:nf_conntrack_alter_reply(struct nf_conn *ct, const struct nf_conntrack_tuple *newreply)
net/netfilter/nf_conntrack_core.c:nf_conntrack_attach(struct sk_buff *nskb, const struct sk_buff *skb)
net/netfilter/nf_conntrack_core.c:nf_conntrack_free(struct nf_conn *ct)
net/netfilter/nf_conntrack_core.c:nf_conntrack_hash_check_insert(struct nf_conn *ct)
net/netfilter/nf_conntrack_core.c:nf_conntrack_in(struct sk_buff *skb, const struct nf_hook_state *state)
net/netfilter/nf_conntrack_core.c:nf_ct_add_to_dying_list(struct nf_conn *ct)
net/netfilter/nf_conntrack_core.c:nf_ct_add_to_unconfirmed_list(struct nf_conn *ct)
net/netfilter/nf_conntrack_core.c:nf_ct_del_from_dying_or_unconfirmed_list(struct nf_conn *ct)
net/netfilter/nf_conntrack_core.c:nf_ct_delete(struct nf_conn *ct, u32 portid, int report)
net/netfilter/nf_conntrack_core.c:nf_ct_delete_from_lists(struct nf_conn *ct)
net/netfilter/nf_conntrack_core.c:nf_ct_tmpl_alloc()
net/netfilter/nf_conntrack_core.c:nf_ct_tmpl_free(struct nf_conn *tmpl)
net/netfilter/nf_tables_api.c:nf_tables_newexpr(const struct nft_ctx *ctx, const struct nft_expr_info *expr_info, struct nft_expr *expr)
net/netfilter/nf_tables_api.c:nf_tables_newset(struct sk_buff *skb, const struct nfnl_info *info, const struct nlattr * const nla[])
net/netfilter/nf_tables_api.c:nf_tables_newsetelem(struct sk_buff *skb, const struct nfnl_info *info, const struct nlattr * const nla[])
net/netfilter/nf_tables_api.c:nf_tables_setelem_notify(const struct nft_ctx *ctx, const struct nft_set *set, const struct nft_set_elem *elem, int event, u16 flags)
net/netfilter/nf_tables_api.c:nft_add_set_elem(struct nft_ctx *ctx, struct nft_set *set, const struct nlattr *attr, u32 nlmsg_flags)
net/netfilter/nf_tables_api.c:nft_del_setelem(struct nft_ctx *ctx, struct nft_set *set, const struct nlattr *attr)
net/netfilter/nf_tables_api.c:nft_expr_init()
net/netfilter/nf_tables_api.c:nft_set_catchall_flush(const struct nft_ctx *ctx, struct nft_set *set)
net/netfilter/nf_tables_api.c:nft_set_elem_destroy(const struct nft_set *set, void *elem, bool destroy_expr)
net/netfilter/nf_tables_api.c:nft_set_elem_expr_alloc()
net/netfilter/nf_tables_api.c:nft_set_elem_expr_clone(const struct nft_ctx *ctx, struct nft_set *set, struct nft_expr *expr_array[])
net/netfilter/nf_tables_api.c:nft_set_elem_expr_setup(struct nft_ctx *ctx, const struct nft_set_ext *ext, struct nft_expr *expr_array[], u32 num_exprs)
net/netfilter/nf_tables_api.c:nft_set_elem_init()
net/netfilter/nf_tables_api.c:nft_setelem_flush(const struct nft_ctx *ctx, struct nft_set *set, const struct nft_set_iter *iter, struct nft_set_elem *elem)
net/netfilter/nf_tables_api.c:nft_trans_elem_alloc()
net/netfilter/nft_ct.c:__nft_ct_set_destroy(const struct nft_ctx *ctx, struct nft_ct *priv)
include/net/netfilter/nf_conntrack.h:nf_conntrack_get_ht(struct hlist_nulls_head **hash, unsigned int *hsize)
nf_conntrack_put()
nf_ct_put()
net/netfilter/nf_tables_api.c:nf_tables_newexpr(const struct nft_ctx *ctx, const struct nft_expr_info *expr_info, struct nft_expr *expr)
net/netfilter/nft_ct.c:nft_ct_set_init(const struct nft_ctx *ctx, const struct nft_expr *expr, const struct nlattr * const tb[])
net/netfilter/nft_ct.c:nft_ct_tmpl_put_pcpu(void)
net/netfilter/nf_tables_api.c:nft_expr_init()
net/netfilter/nft_ct.c:__nft_ct_set_destroy(const struct nft_ctx *ctx, struct nft_ct *priv)
net/netfilter/nf_conntrack_core.c:destroy_conntrack(struct nf_conntrack *nfct)
nf_conntrack_put()
nf_ct_put()
net/netfilter/nf_conntrack_core.c:nf_ct_tmpl_alloc()
net/netfilter/nf_conntrack_core.c:nf_ct_tmpl_free(struct nf_conn *tmpl)
net/netfilter/nft_ct.c:nft_ct_set_init(const struct nft_ctx *ctx, const struct nft_expr *expr, const struct nlattr * const tb[])
net/netfilter/nft_ct.c:nft_ct_tmpl_put_pcpu(void)
mm/slub.c:__slab_free(struct kmem_cache *s, struct page *page, void *head, void *tail, int cnt, unsigned long addr)
mm/slub.c:do_slab_free(struct kmem_cache *s, struct page *page, void *head, void *tail, int cnt, unsigned long addr)
mm/slub.c:free_debug_processing(struct kmem_cache *s, struct page *page, void *head, void *tail, int bulk_cnt, unsigned long addr)
mm/slub.c:free_partial(struct kmem_cache *s, struct kmem_cache_node *n)
mm/slub.c:kmem_cache_free(struct kmem_cache *s, void *x)
mm/slub.c:slab_free(struct kmem_cache *s, struct page *page, void *head, void *tail, int cnt, unsigned long addr)
mm/slub.c:slab_free_freelist_hook(struct kmem_cache *s, void **head, void **tail)
mm/slub.c:slab_free_hook(struct kmem_cache *s, void *x, bool init)
mm/kasan/common.c:____kasan_kfree_large(void *ptr, unsigned long ip)
mm/kasan/common.c:____kasan_kmalloc()
mm/kasan/common.c:____kasan_slab_free(struct kmem_cache *cache, void *object, unsigned long ip, bool quarantine, bool init)
mm/kasan/common.c:__kasan_kmalloc_large()
mm/kasan/common.c:__kasan_krealloc()
mm/kasan/common.c:__kasan_slab_alloc()
mm/kasan/common.c:__kasan_slab_free_mempool(void *ptr, unsigned long ip)
mm/kasan/common.c:assign_tag(struct kmem_cache *cache, const void *object, bool init)
net/netfilter/core.c:nf_ct_attach(struct sk_buff *new, const struct sk_buff *skb)
net/netfilter/core.c:nf_hook_slow(struct sk_buff *skb, struct nf_hook_state *state, const struct nf_hook_entries *e, unsigned int s)
net/netfilter/core.c:nf_hook_slow_list(struct list_head *head, struct nf_hook_state *state, const struct nf_hook_entries *e)
net/netfilter/nfnetlink.c:nfnetlink_rcv(struct sk_buff *skb)
net/netfilter/nfnetlink.c:nfnetlink_rcv_batch(struct sk_buff *skb, struct nlmsghdr *nlh, u16 subsys_id, u32 genid)
net/netfilter/nfnetlink.c:nfnetlink_rcv_skb_batch(struct sk_buff *skb, struct nlmsghdr *nlh)
atomic_dec_and_test()
instrument_atomic_read_write()
nf_conntrack_put()
func for case 2b9b4f0895be09a6dec3
mm/mprotect.c:can_change_pte_writable(struct vm_area_struct *vma, unsigned long addr, pte_t pte)
mm/mprotect.c:change_p4d_range(struct mmu_gather *tlb, struct vm_area_struct *vma, pgd_t *pgd, unsigned long addr, unsigned long end, pgprot_t newprot, unsigned long cp_flags)
mm/mprotect.c:change_pmd_range(struct mmu_gather *tlb, struct vm_area_struct *vma, pud_t *pud, unsigned long addr, unsigned long end, pgprot_t newprot, unsigned long cp_flags)
mm/mprotect.c:change_protection_range(struct mmu_gather *tlb, struct vm_area_struct *vma, unsigned long addr, unsigned long end, pgprot_t newprot, unsigned long cp_flags)
mm/mprotect.c:change_pte_range(struct mmu_gather *tlb, struct vm_area_struct *vma, pmd_t *pmd, unsigned long addr, unsigned long end, pgprot_t newprot, unsigned long cp_flags)
mm/mprotect.c:change_pud_range(struct mmu_gather *tlb, struct vm_area_struct *vma, p4d_t *p4d, unsigned long addr, unsigned long end, pgprot_t newprot, unsigned long cp_flags)
mm/mprotect.c:do_mprotect_pkey(unsigned long start, size_t len, unsigned long prot, int pkey)
mm/mprotect.c:mprotect_fixup(struct mmu_gather *tlb, struct vm_area_struct *vma, struct vm_area_struct **pprev, unsigned long start, unsigned long end, unsigned long newflags)
include/linux/swapops.h:pfn_swap_entry_to_page()
include/linux/swapops.h:pmd_to_swp_entry(pmd_t pmd)
include/linux/swapops.h:pte_swp_clear_flags(pte_t pte)
include/linux/swapops.h:pte_to_swp_entry(pte_t pte)
include/linux/swapops.h:swp_entry_to_pmd(swp_entry_t entry)
include/linux/swapops.h:swp_entry_to_pte(swp_entry_t entry)
mm/userfaultfd.c:__mcopy_atomic(struct mm_struct *dst_mm, unsigned long dst_start, unsigned long src_start, unsigned long len, enum mcopy_atomic_mode mcopy_mode, atomic_t *mmap_changing, __u64 mode)
mm/userfaultfd.c:__mcopy_atomic_hugetlb(struct mm_struct *dst_mm, struct vm_area_struct *dst_vma, unsigned long dst_start, unsigned long src_start, unsigned long len, enum mcopy_atomic_mode mode, bool wp_copy)
mm/userfaultfd.c:mcontinue_atomic_pte(struct mm_struct *dst_mm, pmd_t *dst_pmd, struct vm_area_struct *dst_vma, unsigned long dst_addr, bool wp_copy)
mm/userfaultfd.c:mcopy_atomic_pte(struct mm_struct *dst_mm, pmd_t *dst_pmd, struct vm_area_struct *dst_vma, unsigned long dst_addr, unsigned long src_addr, struct page **pagep, bool wp_copy)
mm/userfaultfd.c:mfill_atomic_install_pte(struct mm_struct *dst_mm, pmd_t *dst_pmd, struct vm_area_struct *dst_vma, unsigned long dst_addr, struct page *page, bool newly_allocated, bool wp_copy)
mm/userfaultfd.c:mfill_atomic_pte(struct mm_struct *dst_mm, pmd_t *dst_pmd, struct vm_area_struct *dst_vma, unsigned long dst_addr, unsigned long src_addr, struct page **page, enum mcopy_atomic_mode mode, bool wp_copy)
mm/userfaultfd.c:mfill_zeropage_pte(struct mm_struct *dst_mm, pmd_t *dst_pmd, struct vm_area_struct *dst_vma, unsigned long dst_addr)
mm/userfaultfd.c:mwriteprotect_range(struct mm_struct *dst_mm, unsigned long start, unsigned long len, bool enable_wp, atomic_t *mmap_changing)
fs/userfaultfd.c:userfaultfd_api(struct userfaultfd_ctx *ctx, unsigned long arg)
fs/userfaultfd.c:userfaultfd_ctx_put(struct userfaultfd_ctx *ctx)
fs/userfaultfd.c:userfaultfd_event_wait_completion(struct userfaultfd_ctx *ctx, struct userfaultfd_wait_queue *ewq)
fs/userfaultfd.c:userfaultfd_ioctl(struct file *file, unsigned cmd, unsigned long arg)
fs/userfaultfd.c:userfaultfd_read(struct file *file, char __user *buf, size_t count, loff_t *ppos)
fs/userfaultfd.c:userfaultfd_register(struct userfaultfd_ctx *ctx, unsigned long arg)
fs/userfaultfd.c:userfaultfd_unregister(struct userfaultfd_ctx *ctx, unsigned long arg)
fs/userfaultfd.c:userfaultfd_writeprotect(struct userfaultfd_ctx *ctx, unsigned long arg)
mm/memory.c:__handle_mm_fault(struct vm_area_struct *vma, unsigned long address, unsigned int flags)
mm/memory.c:do_set_pte(struct vm_fault *vmf, struct page *page, unsigned long addr)
mm/memory.c:do_swap_page(struct vm_fault *vmf)
mm/memory.c:handle_mm_fault(struct vm_area_struct *vma, unsigned long address, unsigned int flags, struct pt_regs *regs)
mm/memory.c:handle_pte_fault(struct vm_fault *vmf)
mm/memory.c:handle_pte_marker(struct vm_fault *vmf)
mm/memory.c:pte_marker_clear(struct vm_fault *vmf)
mm/memory.c:pte_marker_handle_uffd_wp(struct vm_fault *vmf)
arch/x86/include/asm/pgtable.h:check_pgprot(pgprot_t pgprot)
arch/x86/include/asm/pgtable.h:pmd_modify(pmd_t pmd, pgprot_t newprot)
arch/x86/include/asm/pgtable.h:pmdp_establish(struct vm_area_struct *vma, unsigned long address, pmd_t *pmdp, pmd_t pmd)
arch/x86/include/asm/pgtable.h:pte_accessible(struct mm_struct *mm, pte_t a)
arch/x86/include/asm/pgtable.h:pte_flags_pkey(unsigned long pte_flags)
arch/x86/include/asm/pgtable.h:pte_modify(pte_t pte, pgprot_t newprot)
arch/x86/include/asm/pgtable.h:ptep_get_and_clear_full(struct mm_struct *mm, unsigned long addr, pte_t *ptep, int full)
arch/x86/include/asm/pgtable.h:pudp_huge_get_and_clear(struct mm_struct *mm, unsigned long addr, pud_t *pudp)
arch/x86/include/asm/pgtable_types.h:pmd_pfn_mask(pmd_t pmd)
mm/page_alloc.c:alloc_contig_range(unsigned long start, unsigned long end, unsigned migratetype, gfp_t gfp_mask)
mm/page_alloc.c:break_down_buddy_pages(struct zone *zone, struct page *page, struct page *target, int low, int high, int migratetype)
mm/page_alloc.c:free_contig_range(unsigned long pfn, unsigned long nr_pages)
fs/ioctl.c:do_vfs_ioctl(struct file *filp, unsigned int fd, unsigned int cmd, unsigned long arg)
fs/ioctl.c:ioctl_fioasync(unsigned int fd, struct file *filp, int __user *argp)
fs/ioctl.c:ioctl_fionbio(struct file *filp, int __user *argp)
mm/swapfile.c:__swap_duplicate(swp_entry_t entry, unsigned char usage)
mm/swapfile.c:swap_duplicate(swp_entry_t entry)
mm/swapfile.c:swap_free(swp_entry_t entry)
func for case 9937dc42271cd87d4b98
fs/sysfs/group.c:compat_only_sysfs_link_entry_to_kobj(struct kobject *kobj, struct kobject *target_kobj, const char *target_name, const char *symlink_name)
fs/sysfs/group.c:create_files(struct kernfs_node *parent, struct kobject *kobj, kuid_t uid, kgid_t gid, const struct attribute_group *grp, int update)
fs/sysfs/group.c:internal_create_group(struct kobject *kobj, int update, const struct attribute_group *grp)
fs/sysfs/group.c:internal_create_groups(struct kobject *kobj, int update, const struct attribute_group **groups)
fs/sysfs/group.c:remove_files(struct kernfs_node *parent, const struct attribute_group *grp)
fs/sysfs/group.c:sysfs_add_link_to_group(struct kobject *kobj, const char *group_name, struct kobject *target, const char *link_name)
fs/sysfs/group.c:sysfs_group_attrs_change_owner(struct kernfs_node *grp_kn, const struct attribute_group *grp, struct iattr *newattrs)
fs/sysfs/group.c:sysfs_group_change_owner(struct kobject *kobj, const struct attribute_group *grp, kuid_t kuid, kgid_t kgid)
fs/sysfs/group.c:sysfs_merge_group(struct kobject *kobj, const struct attribute_group *grp)
fs/sysfs/group.c:sysfs_remove_group(struct kobject *kobj, const struct attribute_group *grp)
fs/sysfs/group.c:sysfs_unmerge_group(struct kobject *kobj, const struct attribute_group *grp)
drivers/block/nbd.c:nbd_add_socket(struct nbd_device *nbd, unsigned long arg, bool netlink)
drivers/block/nbd.c:nbd_alloc_config()
drivers/block/nbd.c:nbd_dev_add(int index)
drivers/block/nbd.c:nbd_disconnect(struct nbd_device *nbd)
drivers/block/nbd.c:nbd_genl_connect(struct sk_buff *skb, struct genl_info *info)
drivers/block/nbd.c:nbd_get_socket()
drivers/block/nbd.c:nbd_handle_cmd(struct nbd_cmd *cmd, int index)
drivers/block/nbd.c:nbd_parse_flags(struct nbd_device *nbd)
drivers/block/nbd.c:nbd_queue_rq(struct blk_mq_hw_ctx *hctx, const struct blk_mq_queue_data *bd)
drivers/block/nbd.c:nbd_reconnect_socket(struct nbd_device *nbd, unsigned long arg)
drivers/block/nbd.c:nbd_send_cmd(struct nbd_device *nbd, struct nbd_cmd *cmd, int index)
drivers/block/nbd.c:nbd_start_device(struct nbd_device *nbd)
drivers/block/nbd.c:nbd_xmit_timeout(struct request *req, bool reserved)
drivers/block/nbd.c:send_disconnects(struct nbd_device *nbd)
drivers/block/nbd.c:sock_xmit(struct nbd_device *nbd, int index, int send, struct iov_iter *iter, int msg_flags, int *sent)
block/blk-sysfs.c:blk_exit_queue(struct request_queue *q)
block/blk-sysfs.c:blk_register_queue(struct gendisk *disk)
block/blk-sysfs.c:blk_release_queue(struct kobject *kobj)
block/blk-sysfs.c:blk_unregister_queue(struct gendisk *disk)
block/blk-sysfs.c:queue_attr_show(struct kobject *kobj, struct attribute *attr, char *page)
block/blk-sysfs.c:queue_attr_store(struct kobject *kobj, struct attribute *attr, const char *page, size_t length)
block/blk-sysfs.c:queue_attr_visible(struct kobject *kobj, struct attribute *attr, int n)
block/blk-sysfs.c:queue_io_timeout_store(struct request_queue *q, const char *page, size_t count)
block/blk-sysfs.c:queue_nomerges_store(struct request_queue *q, const char *page, size_t count)
block/blk-sysfs.c:queue_poll_delay_store(struct request_queue *q, const char *page, size_t count)
block/blk-sysfs.c:queue_poll_store(struct request_queue *q, const char *page, size_t count)
block/blk-sysfs.c:queue_rq_affinity_store(struct request_queue *q, const char *page, size_t count)
block/blk-sysfs.c:queue_wb_lat_store(struct request_queue *q, const char *page, size_t count)
block/blk-sysfs.c:queue_wc_store(struct request_queue *q, const char *page, size_t count)
block/blk-sysfs.c:queue_zoned_show(struct request_queue *q, char *page)
block/genhd.c:__device_add_disk(struct device *parent, struct gendisk *disk, const struct attribute_group **groups, bool register_queue)
block/genhd.c:del_gendisk(struct gendisk *disk)
block/genhd.c:disk_release(struct device *dev)
block/genhd.c:disk_scan_partitions(struct gendisk *disk)
block/genhd.c:disk_uevent(struct gendisk *disk, enum kobject_action action)
block/genhd.c:disk_visible(struct kobject *kobj, struct attribute *a, int n)
block/genhd.c:register_disk(struct device *parent, struct gendisk *disk, const struct attribute_group **groups)
block/genhd.c:set_capacity_and_notify(struct gendisk *disk, sector_t size)
net/netlink/genetlink.c:genl_family_rcv_msg(const struct genl_family *family, struct sk_buff *skb, struct nlmsghdr *nlh, struct netlink_ext_ack *extack)
net/netlink/genetlink.c:genl_family_rcv_msg_doit(const struct genl_family *family, struct sk_buff *skb, struct nlmsghdr *nlh, struct netlink_ext_ack *extack, const struct genl_ops *ops, int hdrlen, struct net *net)
net/netlink/genetlink.c:genl_notify(const struct genl_family *family, struct sk_buff *skb, struct genl_info *info, u32 group, gfp_t flags)
net/netlink/genetlink.c:genl_rcv_msg(struct sk_buff *skb, struct nlmsghdr *nlh, struct netlink_ext_ack *extack)
net/netlink/genetlink.c:genl_register_family(struct genl_family *family)
net/netlink/genetlink.c:genl_unregister_family(const struct genl_family *family)
net/netlink/genetlink.c:genl_validate_assign_mc_groups(struct genl_family *family)
net/netlink/genetlink.c:genl_validate_ops(const struct genl_family *family)
net/netlink/af_netlink.c:netlink_broadcast_filtered(struct sock *ssk, struct sk_buff *skb, u32 portid, u32 group, gfp_t allocation, int (*filter)(struct sock *dsk, struct sk_buff *skb, void *data), void *filter_data)
net/netlink/af_netlink.c:netlink_compare(struct rhashtable_compare_arg *arg, const void *ptr)
net/netlink/af_netlink.c:netlink_getsockbyportid()
net/netlink/af_netlink.c:netlink_insert(struct sock *sk, u32 portid)
net/netlink/af_netlink.c:netlink_rcv_skb(struct sk_buff *skb, int (*cb)(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *))
net/netlink/af_netlink.c:netlink_sendmsg(struct socket *sock, struct msghdr *msg, size_t len)
net/netlink/af_netlink.c:netlink_unicast(struct sock *ssk, struct sk_buff *skb, u32 portid, int nonblock)
net/netlink/af_netlink.c:netlink_unicast_kernel(struct sock *sk, struct sk_buff *skb, struct sock *ssk)
block/genhd.c:__device_add_disk(struct device *parent, struct gendisk *disk, const struct attribute_group **groups, bool register_queue)
add_disk()
block/blk-sysfs.c:blk_register_queue(struct gendisk *disk)
net/netlink/genetlink.c:genl_family_rcv_msg_doit(const struct genl_family *family, struct sk_buff *skb, struct nlmsghdr *nlh, struct netlink_ext_ack *extack, const struct genl_ops *ops, int hdrlen, struct net *net)
net/netlink/genetlink.c:genl_rcv_msg(struct sk_buff *skb, struct nlmsghdr *nlh, struct netlink_ext_ack *extack)
fs/sysfs/group.c:internal_create_group(struct kobject *kobj, int update, const struct attribute_group *grp)
drivers/block/nbd.c:nbd_dev_add(int index)
drivers/block/nbd.c:nbd_genl_connect(struct sk_buff *skb, struct genl_info *info)
block/genhd.c:__device_add_disk(struct device *parent, struct gendisk *disk, const struct attribute_group **groups, bool register_queue)
add_disk()
block/blk-sysfs.c:blk_register_queue(struct gendisk *disk)
fs/sysfs/group.c:internal_create_group(struct kobject *kobj, int update, const struct attribute_group *grp)
include/net/genetlink.h:genl_has_listeners(const struct genl_family *family, struct net *net, unsigned int group)
include/net/genetlink.h:genl_set_err(const struct genl_family *family, struct net *net, u32 portid, u32 group, int code)
net/socket.c:kernel_sendmsg_locked(struct sock *sk, struct msghdr *msg, struct kvec *vec, size_t num, size_t size)
net/socket.c:sock_sendmsg(struct socket *sock, struct msghdr *msg)
net/socket.c:sock_sendmsg_nosec(struct socket *sock, struct msghdr *msg)
func for case 11421fbbff99b989670e
net/xdp/xdp_umem.c:xdp_put_umem(struct xdp_umem *umem, bool defer_cleanup)
net/xdp/xdp_umem.c:xdp_umem_account_pages(struct xdp_umem *umem)
net/xdp/xdp_umem.c:xdp_umem_create()
net/xdp/xdp_umem.c:xdp_umem_pin_pages(struct xdp_umem *umem, unsigned long address)
net/xdp/xdp_umem.c:xdp_umem_reg(struct xdp_umem *umem, struct xdp_umem_reg *mr)
net/xdp/xdp_umem.c:xdp_umem_release(struct xdp_umem *umem)
net/xdp/xdp_umem.c:xdp_umem_unaccount_pages(struct xdp_umem *umem)
mm/util.c:__account_locked_vm(struct mm_struct *mm, unsigned long pages, bool inc, struct task_struct *task, bool bypass_rlim)
__vmalloc_array()
mm/util.c:account_locked_vm(struct mm_struct *mm, unsigned long pages, bool inc)
mm/util.c:arch_pick_mmap_layout(struct mm_struct *mm, struct rlimit *rlim_stack)
mm/util.c:arch_randomize_brk(struct mm_struct *mm)
mm/util.c:folio_copy(struct folio *dst, struct folio *src)
mm/util.c:kmemdup_nul()
mm/util.c:kvmalloc_node()
mm/util.c:memdup_user()
mm/util.c:mmap_base(unsigned long rnd, struct rlimit *rlim_stack)
randomize_page()
mm/util.c:randomize_stack_top(unsigned long stack_top)
mm/util.c:vm_mmap(struct file *file, unsigned long addr, unsigned long len, unsigned long prot, unsigned long flag, unsigned long offset)
mm/util.c:vm_mmap_pgoff(struct file *file, unsigned long addr, unsigned long len, unsigned long prot, unsigned long flag, unsigned long pgoff)
mm/util.c:vmemdup_user()
__xsk_generic_xmit()
net/xdp/xsk.c:__xsk_map_redirect(truct xdp_sock *xs, struct xdp_buff *xdp) {)
net/xdp/xsk.c:__xsk_rcv_zc(truct xdp_sock *xs, struct xdp_buff *xdp, u32 len) {)
net/xdp/xsk.c:xsk_bind(truct socket *sock, struct sockaddr *addr, int addr_len) {)
net/xdp/xsk.c:xsk_build_skb()
net/xdp/xsk.c:xsk_build_skb_zerocopy()
net/xdp/xsk.c:xsk_generic_rcv(truct xdp_sock *xs, struct xdp_buff *xdp) {)
net/xdp/xsk.c:xsk_generic_xmit(truct sock *sk) {)
net/xdp/xsk.c:xsk_init_queue(32 entries, struct xsk_queue **queue, bool umem_queue) {)
net/xdp/xsk.c:xsk_rcv(truct xdp_sock *xs, struct xdp_buff *xdp) {)
net/xdp/xsk.c:xsk_setsockopt(truct socket *sock, int level, int optname, sockptr_t optval, unsigned int optlen) {)
net/xdp/xsk.c:xsk_tx_peek_desc(truct xsk_buff_pool *pool, struct xdp_desc *desc) {)
net/xdp/xsk.c:xsk_tx_peek_release_desc_batch(truct xsk_buff_pool *pool, struct xdp_desc *descs, u32 max_entries) {)
net/xdp/xsk.c:xsk_tx_release(truct xsk_buff_pool *pool) {)
net/xdp/xsk.c:xsk_unbind_dev(truct xdp_sock *xs) {)
include/linux/slab.h:__kmalloc_index(size_t size, bool size_is_constant)
include/linux/slab.h:kmalloc_type(gfp_t flags)
kvmalloc_array()
mm/util.c:kvmalloc_node()
include/linux/vmalloc.h:is_vm_area_hugepages(const void *addr)
include/linux/vmalloc.h:set_vm_flush_reset_perms(void *addr)
include/linux/gfp.h:__alloc_pages_node()
include/linux/gfp.h:__folio_alloc_node()
include/linux/gfp.h:alloc_pages_bulk_array_node(gfp_t gfp, int nid, unsigned long nr_pages, struct page **page_array)
include/linux/gfp.h:gfp_migratetype(const gfp_t gfp_flags)
include/linux/gfp.h:gfp_zone(gfp_t flags)
warn_if_node_offline()
mm/page_alloc.c:__alloc_pages()
mm/page_alloc.c:__get_free_pages(gfp_t gfp_mask, unsigned int order)
mm/page_alloc.c:alloc_contig_range(unsigned long start, unsigned long end, unsigned migratetype, gfp_t gfp_mask)
net/socket.c:__sys_setsockopt(int fd, int level, int optname, char __user *user_optval, int optlen)
net/socket.c:sock_do_ioctl(struct net *net, struct socket *sock, unsigned int cmd, unsigned long arg)
net/socket.c:sock_ioctl(struct file *file, unsigned cmd, unsigned long arg)
func for case 958967f249155967d42a
kernel/bpf/btf.c:__btf_resolve_size()
kernel/bpf/btf.c:btf_array_check_member(struct btf_verifier_env *env, const struct btf_type *struct_type, const struct btf_member *member, const struct btf_type *member_type)
kernel/bpf/btf.c:btf_array_check_meta(struct btf_verifier_env *env, const struct btf_type *t, u32 meta_left)
kernel/bpf/btf.c:btf_check_all_metas(struct btf_verifier_env *env)
kernel/bpf/btf.c:btf_check_all_types(struct btf_verifier_env *env)
kernel/bpf/btf.c:btf_check_meta(struct btf_verifier_env *env, const struct btf_type *t, u32 meta_left)
kernel/bpf/btf.c:btf_func_check_meta(struct btf_verifier_env *env, const struct btf_type *t, u32 meta_left)
kernel/bpf/btf.c:btf_int_check_member(struct btf_verifier_env *env, const struct btf_type *struct_type, const struct btf_member *member, const struct btf_type *member_type)
kernel/bpf/btf.c:btf_int_check_meta(struct btf_verifier_env *env, const struct btf_type *t, u32 meta_left)
kernel/bpf/btf.c:btf_resolve(struct btf_verifier_env *env, const struct btf_type *t, u32 type_id)
kernel/bpf/btf.c:btf_resolve_valid(struct btf_verifier_env *env, const struct btf_type *t, u32 type_id)
kernel/bpf/btf.c:btf_struct_check_member(struct btf_verifier_env *env, const struct btf_type *struct_type, const struct btf_member *member, const struct btf_type *member_type)
kernel/bpf/btf.c:btf_struct_check_meta(struct btf_verifier_env *env, const struct btf_type *t, u32 meta_left)
kernel/bpf/btf.c:btf_type_id_size()
kernel/bpf/btf.c:btf_var_check_meta(struct btf_verifier_env *env, const struct btf_type *t, u32 meta_left)
kernel/bpf/syscall.c:bpf_map_alloc_id(struct bpf_map *map)
kernel/bpf/syscall.c:bpf_map_alloc_percpu()
kernel/bpf/syscall.c:bpf_map_copy_value(struct bpf_map *map, void *key, void *value, __u64 flags)
kernel/bpf/syscall.c:bpf_map_free_id(struct bpf_map *map)
kernel/bpf/syscall.c:bpf_map_init_from_attr(struct bpf_map *map, union bpf_attr *attr)
kernel/bpf/syscall.c:bpf_map_kmalloc_node()
kernel/bpf/syscall.c:bpf_map_kzalloc()
kernel/bpf/syscall.c:bpf_map_save_memcg(struct bpf_map *map)
kernel/bpf/syscall.c:bpf_map_update_value(struct bpf_map *map, struct file *map_file, void *key, void *value, __u64 flags)
kernel/bpf/syscall.c:bpf_map_value_size(const struct bpf_map *map)
kernel/bpf/syscall.c:bpf_obj_free_fields(const struct btf_record *rec, void *obj)
kernel/bpf/syscall.c:btf_record_find()
kernel/bpf/syscall.c:find_and_alloc_map()
kernel/bpf/syscall.c:map_check_btf(struct bpf_map *map, const struct btf *btf, u32 btf_key_id, u32 btf_value_id)
kernel/bpf/syscall.c:map_create(union bpf_attr *attr)
kernel/bpf/verifier.c:check_btf_func(struct bpf_verifier_env *env, const union bpf_attr *attr, bpfptr_t uattr)
kernel/bpf/verifier.c:check_btf_info(struct bpf_verifier_env *env, const union bpf_attr *attr, bpfptr_t uattr)
kernel/bpf/verifier.c:check_btf_line(struct bpf_verifier_env *env, const union bpf_attr *attr, bpfptr_t uattr)
kernel/bpf/verifier.c:check_core_relo(struct bpf_verifier_env *env, const union bpf_attr *attr, bpfptr_t uattr)
kernel/bpf/verifier.c:check_func_arg(struct bpf_verifier_env *env, u32 arg, struct bpf_call_arg_meta *meta, const struct bpf_func_proto *fn, int insn_idx)
kernel/bpf/verifier.c:check_func_arg_reg_off(struct bpf_verifier_env *env, const struct bpf_reg_state *reg, int regno, enum bpf_arg_type arg_type)
kernel/bpf/verifier.c:check_helper_call(struct bpf_verifier_env *env, struct bpf_insn *insn, int *insn_idx_p)
kernel/bpf/verifier.c:check_kfunc_call(struct bpf_verifier_env *env, struct bpf_insn *insn, int *insn_idx_p)
kernel/bpf/verifier.c:check_map_access(struct bpf_verifier_env *env, u32 regno, int off, int size, bool zero_size_allowed, enum bpf_access_src src)
kernel/bpf/verifier.c:check_map_prog_compatibility(struct bpf_verifier_env *env, struct bpf_map *map, struct bpf_prog *prog)
kernel/bpf/verifier.c:check_mem_access(struct bpf_verifier_env *env, int insn_idx, u32 regno, int off, int bpf_size, enum bpf_access_type t, int value_regno, bool strict_alignment_once)
kernel/bpf/verifier.c:check_pseudo_btf_id(struct bpf_verifier_env *env, struct bpf_insn *insn, struct bpf_insn_aux_data *aux)
kernel/bpf/verifier.c:check_ptr_to_btf_access(struct bpf_verifier_env *env, struct bpf_reg_state *regs, int regno, int off, int size, enum bpf_access_type atype, int value_regno)
kernel/bpf/verifier.c:check_reg_type(struct bpf_verifier_env *env, u32 regno, enum bpf_arg_type arg_type, const u32 *arg_btf_id, struct bpf_call_arg_meta *meta)
kernel/bpf/verifier.c:check_stack_access_within_bounds(struct bpf_verifier_env *env, int regno, int off, int access_size, enum bpf_access_src src, enum bpf_access_type type)
include/linux/bpf.h:bpf_long_memcpy(void *dst, const void *src, u32 size)
include/linux/bpf.h:bpf_map_flags_to_cap(struct bpf_map *map)
include/linux/bpf.h:bpf_obj_init(const struct btf_record *rec, void *obj)
include/linux/bpf.h:bpf_obj_init_field(const struct btf_field *field, void *addr)
include/linux/bpf.h:bpf_obj_memcpy(struct btf_record *rec, void *dst, void *src, u32 size, bool long_memcpy)
include/linux/bpf.h:bpf_obj_memzero(struct btf_record *rec, void *dst, u32 size)
include/linux/bpf.h:btf_field_type_align(enum btf_field_type type)
include/linux/bpf.h:btf_field_type_size(enum btf_field_type type)
kernel/bpf/core.c:bpf_internal_load_pointer_neg_helper()
kernel/bpf/core.c:bpf_jit_binary_alloc()
kernel/bpf/core.c:bpf_jit_blind_insn(const struct bpf_insn *from, const struct bpf_insn *aux, struct bpf_insn *to_buff, bool emit_zext)
kernel/bpf/core.c:bpf_jit_get_func_addr(const struct bpf_prog *prog, const struct bpf_insn *insn, bool extra_pass, u64 *func_addr, bool *func_addr_fixed)
kernel/bpf/core.c:bpf_prog_alloc()
kernel/bpf/core.c:bpf_prog_alloc_no_stats()
kernel/bpf/core.c:bpf_prog_calc_tag(struct bpf_prog *fp)
kernel/bpf/core.c:bpf_prog_realloc()
include/linux/filter.h:__bpf_prog_run(const struct bpf_prog *prog, const void *ctx, bpf_dispatcher_fn dfunc)
include/linux/filter.h:__bpf_prog_run_save_cb(const struct bpf_prog *prog, const void *ctx)
include/linux/filter.h:__bpf_xdp_redirect_map(struct bpf_map *map, u64 index, u64 flags, const u64 flag_mask, void *lookup_elem(struct bpf_map *map, u32 key))
include/linux/filter.h:bpf_compute_data_pointers(struct sk_buff *skb)
include/linux/filter.h:bpf_prog_run_clear_cb(const struct bpf_prog *prog, struct sk_buff *skb)
include/linux/filter.h:bpf_prog_run_xdp(const struct bpf_prog *prog, struct xdp_buff *xdp)
include/linux/filter.h:bpf_sk_lookup_run_v4(struct net *net, int protocol, const __be32 saddr, const __be16 sport, const __be32 daddr, const u16 dport, const int ifindex, struct sock **psk)
include/linux/filter.h:bpf_sk_lookup_run_v6(struct net *net, int protocol, const struct in6_addr *saddr, const __be16 sport, const struct in6_addr *daddr, const u16 dport, const int ifindex, struct sock **psk)
__do_sys_bpf()
__se_sys_bpf()
kernel/bpf/syscall.c:__sys_bpf(int cmd, bpfptr_t uattr, unsigned int size)
__x64_sys_bpf()
kernel/bpf/btf.c:btf_type_id_size()
do_syscall_x64()
kernel/bpf/syscall.c:map_check_btf(struct bpf_map *map, const struct btf *btf, u32 btf_key_id, u32 btf_value_id)
kernel/bpf/syscall.c:map_create(union bpf_attr *attr)
func for case 35eebd505e97d315d01c
drivers/hid/hid-thrustmaster.c:thrustmaster_change_handler(truct urb *urb) {)
drivers/hid/hid-thrustmaster.c:thrustmaster_interrupts(truct hid_device *hdev) {)
drivers/hid/hid-thrustmaster.c:thrustmaster_model_handler(truct urb *urb) {)
drivers/hid/hid-thrustmaster.c:thrustmaster_probe(truct hid_device *hdev, const struct hid_device_id *id) {)
drivers/hid/hid-core.c:hid_add_field(struct hid_parser *parser, unsigned report_type, unsigned flags)
drivers/hid/hid-core.c:hid_add_usage(struct hid_parser *parser, unsigned usage, u8 size)
drivers/hid/hid-core.c:hid_input_report(struct hid_device *hid, int type, u8 *data, u32 size, int interrupt)
drivers/hid/hid-core.c:hid_lookup_collection(struct hid_parser *parser, unsigned type)
drivers/hid/hid-core.c:hid_open_report(struct hid_device *device)
drivers/hid/hid-core.c:hid_parser_global(struct hid_parser *parser, struct hid_item *item)
drivers/hid/hid-core.c:hid_parser_local(struct hid_parser *parser, struct hid_item *item)
drivers/hid/hid-core.c:hid_parser_main(struct hid_parser *parser, struct hid_item *item)
drivers/hid/hid-core.c:hid_process_event(struct hid_device *hid, struct hid_field *field, struct hid_usage *usage, __s32 value, int interrupt)
drivers/hid/hid-core.c:hid_report_raw_event(struct hid_device *hid, int type, u8 *data, u32 size, int interrupt)
drivers/hid/hid-core.c:hid_scan_collection(struct hid_parser *parser, unsigned type)
drivers/hid/hid-core.c:hid_scan_feature_usage(struct hid_parser *parser, u32 usage)
drivers/hid/hid-core.c:hid_scan_main(struct hid_parser *parser, struct hid_item *item)
drivers/hid/hid-core.c:hid_scan_report(struct hid_device *hid)
drivers/hid/hid-core.c:open_collection(struct hid_parser *parser, unsigned type)
drivers/hid/usbhid/hid-core.c:hid_alloc_buffers(struct usb_device *dev, struct hid_device *hid)
drivers/hid/usbhid/hid-core.c:hid_ctrl(struct urb *urb)
drivers/hid/usbhid/hid-core.c:hid_find_max_report(struct hid_device *hid, unsigned int type, unsigned int *max)
drivers/hid/usbhid/hid-core.c:hid_free_buffers(struct usb_device *dev, struct hid_device *hid)
drivers/hid/usbhid/hid-core.c:hid_io_error(struct hid_device *hid)
drivers/hid/usbhid/hid-core.c:hid_irq_in(struct urb *urb)
drivers/hid/usbhid/hid-core.c:hid_irq_out(struct urb *urb)
drivers/hid/usbhid/hid-core.c:hid_reset(struct work_struct *work)
drivers/hid/usbhid/hid-core.c:hid_start_in(struct hid_device *hid)
drivers/hid/usbhid/hid-core.c:hid_submit_ctrl(struct hid_device *hid)
drivers/hid/usbhid/hid-core.c:hid_submit_out(struct hid_device *hid)
drivers/hid/usbhid/hid-core.c:usbhid_get_raw_report(struct hid_device *hid, unsigned char report_number, __u8 *buf, size_t count, unsigned char report_type)
drivers/hid/usbhid/hid-core.c:usbhid_init_reports(struct hid_device *hid)
drivers/hid/usbhid/hid-core.c:usbhid_parse(struct hid_device *hid)
drivers/hid/usbhid/hid-core.c:usbhid_set_raw_report(struct hid_device *hid, unsigned int reportnum, __u8 *buf, size_t count, unsigned char rtype)
drivers/usb/core/config.c:config_endpoint_is_duplicate(struct usb_host_config *config, int inum, int asnum, struct usb_endpoint_descriptor *d)
drivers/usb/core/config.c:find_next_descriptor(unsigned char *buffer, int size, int dt1, int dt2, int *num_skipped)
drivers/usb/core/config.c:usb_get_bos_descriptor(struct usb_device *dev)
drivers/usb/core/config.c:usb_get_configuration(struct usb_device *dev)
drivers/usb/core/config.c:usb_parse_configuration(struct usb_device *dev, int cfgidx, struct usb_host_config *config, unsigned char *buffer, int size)
drivers/usb/core/config.c:usb_parse_endpoint(struct device *ddev, int cfgno, struct usb_host_config *config, int inum, int asnum, struct usb_host_interface *ifp, int num_ep, unsigned char *buffer, int size)
drivers/usb/core/config.c:usb_parse_interface(struct device *ddev, int cfgno, struct usb_host_config *config, unsigned char *buffer, int size, u8 inums[], u8 nalts[])
drivers/usb/core/config.c:usb_parse_ss_endpoint_companion(struct device *ddev, int cfgno, int inum, int asnum, struct usb_host_endpoint *ep, unsigned char *buffer, int size)
drivers/usb/core/hub.c:hub_configure(struct usb_hub *hub, struct usb_endpoint_descriptor *endpoint)
drivers/usb/core/hub.c:hub_event(struct work_struct *work)
drivers/usb/core/hub.c:hub_port_connect(struct usb_hub *hub, int port1, u16 portstatus, u16 portchange)
drivers/usb/core/hub.c:hub_port_init(struct usb_hub *hub, struct usb_device *udev, int port1, int retry_counter)
drivers/usb/core/hub.c:hub_port_reset(struct usb_hub *hub, int port1, struct usb_device *udev, unsigned int delay, bool warm)
drivers/usb/core/hub.c:hub_port_wait_reset(struct usb_hub *hub, int port1, struct usb_device *udev, unsigned int delay, bool warm)
drivers/usb/core/hub.c:usb_enumerate_device(struct usb_device *udev)
drivers/usb/core/hub.c:usb_new_device(struct usb_device *udev)
drivers/usb/core/driver.c:usb_driver_claim_interface(struct usb_driver *driver, struct usb_interface *iface, void *data)
drivers/usb/core/driver.c:usb_driver_release_interface(struct usb_driver *driver, struct usb_interface *iface)
drivers/usb/core/driver.c:usb_match_device(struct usb_device *dev, const struct usb_device_id *id)
drivers/usb/core/driver.c:usb_match_one_id(struct usb_interface *interface, const struct usb_device_id *id)
drivers/usb/core/driver.c:usb_probe_device(struct device *dev)
drivers/usb/core/driver.c:usb_probe_interface(struct device *dev)
drivers/usb/core/driver.c:usb_unbind_device(struct device *dev)
drivers/usb/core/driver.c:usb_unbind_interface(struct device *dev)
drivers/usb/core/message.c:usb_control_msg(struct usb_device *dev, unsigned int pipe, __u8 request, __u8 requesttype, __u16 value, __u16 index, void *data, __u16 size, int timeout)
drivers/usb/core/message.c:usb_control_msg_recv(struct usb_device *dev, __u8 endpoint, __u8 request, __u8 requesttype, __u16 value, __u16 index, void *driver_data, __u16 size, int timeout, gfp_t memflags)
drivers/usb/core/message.c:usb_disable_device(struct usb_device *dev, int skip_ep0)
drivers/usb/core/message.c:usb_disable_device_endpoints(struct usb_device *dev, int skip_ep0)
drivers/usb/core/message.c:usb_get_descriptor(struct usb_device *dev, unsigned char type, unsigned char index, void *buf, int size)
drivers/usb/core/message.c:usb_get_device_descriptor(struct usb_device *dev, unsigned int size)
drivers/usb/core/message.c:usb_internal_control_msg(struct usb_device *usb_dev, unsigned int pipe, struct usb_ctrlrequest *cmd, void *data, int len, int timeout)
drivers/usb/core/message.c:usb_set_configuration(struct usb_device *dev, int configuration)
include/linux/usb.h:usb_fill_control_urb(struct urb *urb, struct usb_device *dev, unsigned int pipe, unsigned char *setup_packet, void *transfer_buffer, int buffer_length, usb_complete_t complete_fn, void *context)
include/linux/usb.h:usb_fill_int_urb(struct urb *urb, struct usb_device *dev, unsigned int pipe, void *transfer_buffer, int buffer_length, usb_complete_t complete_fn, void *context, int interval)
include/linux/usb.h:usb_maxpacket(struct usb_device *udev, int pipe, int is_out)
drivers/hid/hid-thrustmaster.c:thrustmaster_interrupts(truct hid_device *hdev) {)
drivers/hid/hid-thrustmaster.c:thrustmaster_probe(truct hid_device *hdev, const struct hid_device_id *id) {)
drivers/base/dd.c:__driver_probe_device(struct device_driver *drv, struct device *dev)
drivers/base/dd.c:driver_probe_device(struct device_driver *drv, struct device *dev)
drivers/base/dd.c:really_probe(struct device *dev, struct device_driver *drv)
func for case 91e171a9aa357b24b62b3ab188bc04996448c99b
net/ipv6/addrconf.c:addrconf_dad_completed(struct inet6_ifaddr *ifp, bool bump_id, bool send_na)
net/ipv6/addrconf.c:addrconf_dad_kick(struct inet6_ifaddr *ifp)
net/ipv6/addrconf.c:addrconf_dad_work(struct work_struct *w)
net/ipv6/addrconf.c:in6_dump_addrs(struct inet6_dev *idev, struct sk_buff *skb, struct netlink_callback *cb, int s_ip_idx, struct inet6_fill_args *fillargs)
net/ipv6/addrconf.c:inet6_addr_add(struct net *net, int ifindex, struct ifa6_config *cfg, struct netlink_ext_ack *extack)
net/ipv6/addrconf.c:inet6_addr_del(struct net *net, int ifindex, u32 ifa_flags, const struct in6_addr *pfx, unsigned int plen)
net/ipv6/addrconf.c:inet6_dump_addr(struct sk_buff *skb, struct netlink_callback *cb, enum addr_type_t type)
net/ipv6/addrconf.c:inet6_fill_ifacaddr(struct sk_buff *skb, struct ifacaddr6 *ifaca, struct inet6_fill_args *args)
net/ipv6/addrconf.c:inet6_fill_ifaddr(struct sk_buff *skb, struct inet6_ifaddr *ifa, struct inet6_fill_args *args)
net/ipv6/addrconf.c:inet6_fill_ifmcaddr(struct sk_buff *skb, struct ifmcaddr6 *ifmca, struct inet6_fill_args *args)
net/ipv6/addrconf.c:inet6_rtm_deladdr(struct sk_buff *skb, struct nlmsghdr *nlh, struct netlink_ext_ack *extack)
net/ipv6/addrconf.c:inet6_rtm_getaddr(struct sk_buff *in_skb, struct nlmsghdr *nlh, struct netlink_ext_ack *extack)
net/ipv6/addrconf.c:inet6_rtm_newaddr(struct sk_buff *skb, struct nlmsghdr *nlh, struct netlink_ext_ack *extack)
net/ipv6/addrconf.c:ipv6_add_addr()
net/ipv6/addrconf.c:ipv6_del_addr(struct inet6_ifaddr *ifp)
net/netlink/af_netlink.c:__netlink_dump_start(struct sock *ssk, struct sk_buff *skb, const struct nlmsghdr *nlh, struct netlink_dump_control *control)
net/netlink/af_netlink.c:netlink_alloc_large_skb()
net/netlink/af_netlink.c:netlink_broadcast(struct sock *ssk, struct sk_buff *skb, u32 portid, u32 group, gfp_t allocation)
net/netlink/af_netlink.c:netlink_compare(struct rhashtable_compare_arg *arg, const void *ptr)
net/netlink/af_netlink.c:netlink_dump(struct sock *sk)
net/netlink/af_netlink.c:netlink_getsockopt(struct socket *sock, int level, int optname, char __user *optval, int __user *optlen)
net/netlink/af_netlink.c:netlink_insert(struct sock *sk, u32 portid)
net/netlink/af_netlink.c:netlink_lookup()
net/netlink/af_netlink.c:netlink_rcv_skb(struct sk_buff *skb, int (*cb)(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *))
net/netlink/af_netlink.c:netlink_sendmsg(struct socket *sock, struct msghdr *msg, size_t len)
net/netlink/af_netlink.c:netlink_setsockopt(struct socket *sock, int level, int optname, sockptr_t optval, unsigned int optlen)
net/netlink/af_netlink.c:netlink_skb_destructor(struct sk_buff *skb)
net/netlink/af_netlink.c:netlink_skb_set_owner_r(struct sk_buff *skb, struct sock *sk)
net/netlink/af_netlink.c:netlink_unicast(struct sock *ssk, struct sk_buff *skb, u32 portid, int nonblock)
net/netlink/af_netlink.c:netlink_unicast_kernel(struct sock *sk, struct sk_buff *skb, struct sock *ssk)
net/core/rtnetlink.c:__rtnl_link_register(struct rtnl_link_ops *ops)
net/core/rtnetlink.c:__rtnl_unlock(void)
net/core/rtnetlink.c:rtm_msgindex(int msgtype)
net/core/rtnetlink.c:rtnl_get_link()
net/core/rtnetlink.c:rtnl_link_fill(struct sk_buff *skb, const struct net_device *dev)
net/core/rtnetlink.c:rtnl_link_get_af_size(const struct net_device *dev, u32 ext_filter_mask)
net/core/rtnetlink.c:rtnl_link_get_size(const struct net_device *dev)
net/core/rtnetlink.c:rtnl_link_get_slave_info_data_size(const struct net_device *dev)
net/core/rtnetlink.c:rtnl_link_info_fill(struct sk_buff *skb, const struct net_device *dev)
net/core/rtnetlink.c:rtnl_link_register(struct rtnl_link_ops *ops)
net/core/rtnetlink.c:rtnl_link_slave_info_fill(struct sk_buff *skb, const struct net_device *dev)
net/core/rtnetlink.c:rtnl_lock_unregistering_all(void)
net/core/rtnetlink.c:rtnl_register_internal(struct module *owner, int protocol, int msgtype, rtnl_doit_func doit, rtnl_dumpit_func dumpit, unsigned int flags)
net/core/rtnetlink.c:rtnl_unregister(int protocol, int msgtype)
net/core/rtnetlink.c:rtnl_unregister_all(int protocol)
include/linux/netlink.h:netlink_skb_clone()
include/linux/netlink.h:nl_set_extack_cookie_u64(struct netlink_ext_ack *extack, u64 cookie)
net/ipv6/route.c:__rt6_find_exception_rcu()
net/ipv6/route.c:fib6_select_path(const struct net *net, struct fib6_result *res, struct flowi6 *fl6, int oif, bool have_oif_match, const struct sk_buff *skb, int strict)
net/ipv6/route.c:fib6_table_lookup(struct net *net, struct fib6_table *table, int oif, struct flowi6 *fl6, struct fib6_result *res, int strict)
net/ipv6/addrconf.c:in6_dump_addrs(struct inet6_dev *idev, struct sk_buff *skb, struct netlink_callback *cb, int s_ip_idx, struct inet6_fill_args *fillargs)
net/ipv6/route.c:ip6_pol_route()
net/ipv6/route.c:rt6_find_cached_rt()
net/ipv6/route.c:rt6_insert_exception(struct rt6_info *nrt, const struct fib6_result *res)
net/ipv6/route.c:rt6_lookup()
net/ipv6/route.c:rt6_select(struct net *net, struct fib6_node *fn, int oif, struct fib6_result *res, int strict)
net/ipv6/ndisc.c:ip6_nd_hdr(struct sk_buff *skb, const struct in6_addr *saddr, const struct in6_addr *daddr, int hop_limit, int len)
net/ipv6/ndisc.c:ndisc_rcv(struct sk_buff *skb)
net/ipv6/ndisc.c:ndisc_recv_na(struct sk_buff *skb)
net/ipv6/ndisc.c:ndisc_recv_ns(struct sk_buff *skb)
net/ipv6/ndisc.c:ndisc_router_discovery(struct sk_buff *skb)
net/ipv6/ndisc.c:ndisc_send_na(struct net_device *dev, const struct in6_addr *daddr, const struct in6_addr *solicited_addr, bool router, bool solicited, bool override, bool inc_opt)
net/ipv6/ndisc.c:ndisc_send_skb(struct sk_buff *skb, const struct in6_addr *daddr, const struct in6_addr *saddr)
net/ipv6/ndisc.c:ndisc_solicit(struct neighbour *neigh, struct sk_buff *skb)
net/socket.c:____sys_sendmsg(struct socket *sock, struct msghdr *msg_sys, unsigned int flags, struct used_address *used_address, unsigned int allowed_msghdr_flags)
net/socket.c:___sys_sendmsg(struct socket *sock, struct user_msghdr __user *msg, struct msghdr *msg_sys, unsigned int flags, struct used_address *used_address, unsigned int allowed_msghdr_flags)
net/socket.c:__sys_sendmsg(int fd, struct user_msghdr __user *msg, unsigned int flags, bool forbid_cmsg_compat)
net/socket.c:__sys_setsockopt(int fd, int level, int optname, char __user *user_optval, int optlen)
net/socket.c:__sys_socket(int family, int type, int protocol)
net/socket.c:sendmsg_copy_msghdr(struct msghdr *msg, struct user_msghdr __user *umsg, unsigned flags, struct iovec **iov)
net/socket.c:sock_alloc_file()
net/socket.c:sock_alloc_inode()
net/ipv6/ip6_output.c:__ip6_finish_output(struct net *net, struct sock *sk, struct sk_buff *skb)
net/ipv6/ip6_output.c:ip6_finish_output2(struct net *net, struct sock *sk, struct sk_buff *skb)
net/ipv6/ip6_output.c:ip6_output(struct net *net, struct sock *sk, struct sk_buff *skb)
net/ipv6/ip6_tunnel.c:ip6_tnl_err(struct sk_buff *skb, __u8 ipproto, struct inet6_skb_parm *opt, u8 *type, u8 *code, int *msg, __u32 *info, int offset)
net/ipv6/ip6_tunnel.c:ip6_tnl_rcv_ctl(struct ip6_tnl *t, const struct in6_addr *laddr, const struct in6_addr *raddr)
net/ipv6/ip6_tunnel.c:ip6_tnl_xmit(struct sk_buff *skb, struct net_device *dev, __u8 dsfield, struct flowi6 *fl6, int encap_limit, __u32 *pmtu, __u8 proto)
net/ipv6/addrlabel.c:ip6addrlbl_dump(struct sk_buff *skb, struct netlink_callback *cb)
net/ipv6/addrlabel.c:ip6addrlbl_fill(struct sk_buff *skb, struct ip6addrlbl_entry *p, u32 lseq, u32 portid, u32 seq, int event, unsigned int flags)
net/ipv6/addrlabel.c:ip6addrlbl_putmsg(struct nlmsghdr *nlh, int prefixlen, int ifindex, u32 lseq)
func for case 4d2d56175b934b9a7bf9
drivers/net/wireless/ath/ath9k/hif_usb.c:ath9k_hif_usb_reg_in_cb(struct urb *urb)
drivers/net/wireless/ath/ath9k/htc_hst.c:ath9k_htc_rx_msg(struct htc_target *htc_handle, struct sk_buff *skb, u32 len, u8 pipe_id)
drivers/net/wireless/ath/ath9k/htc_drv_txrx.c:ath9k_htc_rxep(void *drv_priv, struct sk_buff *skb, enum htc_endpoint_id ep_id)
drivers/net/wireless/ath/ath9k/htc_drv_txrx.c:ath9k_htc_tx_cleanup_queue(struct ath9k_htc_priv *priv, struct sk_buff_head *epid_queue)
drivers/net/wireless/ath/ath9k/htc_drv_txrx.c:ath9k_htc_tx_data(struct ath9k_htc_priv *priv, struct ieee80211_vif *vif, struct sk_buff *skb, u8 sta_idx, u8 vif_idx, u8 slot, bool is_cab)
drivers/net/wireless/ath/ath9k/htc_drv_txrx.c:ath9k_htc_tx_get_packet()
drivers/net/wireless/ath/ath9k/htc_drv_txrx.c:ath9k_htc_tx_mgmt(struct ath9k_htc_priv *priv, struct ath9k_htc_vif *avp, struct sk_buff *skb, u8 sta_idx, u8 vif_idx, u8 slot)
drivers/net/wireless/ath/ath9k/htc_drv_txrx.c:ath9k_htc_tx_process(struct ath9k_htc_priv *priv, struct sk_buff *skb, struct __wmi_event_txstatus *txs)
drivers/net/wireless/ath/ath9k/htc_drv_txrx.c:ath9k_htc_tx_start(struct ath9k_htc_priv *priv, struct ieee80211_sta *sta, struct sk_buff *skb, u8 slot, bool is_cab)
drivers/net/wireless/ath/ath9k/htc_drv_txrx.c:ath9k_htc_txep(void *drv_priv, struct sk_buff *skb, enum htc_endpoint_id ep_id, bool txok)
drivers/net/wireless/ath/ath9k/htc_drv_txrx.c:ath9k_htc_txstatus(struct ath9k_htc_priv *priv, void *wmi_event)
drivers/net/wireless/ath/ath9k/htc_drv_txrx.c:ath9k_rx_init(struct ath9k_htc_priv *priv)
drivers/net/wireless/ath/ath9k/htc_drv_txrx.c:ath9k_rx_prepare(struct ath9k_htc_priv *priv, struct ath9k_htc_rxbuf *rxbuf, struct ieee80211_rx_status *rx_status)
drivers/net/wireless/ath/ath9k/htc_drv_txrx.c:check_cookie(struct ath9k_htc_priv *priv, struct sk_buff *skb, u8 cookie, u8 epid)
drivers/net/wireless/ath/ath9k/htc_drv_txrx.c:check_packet(struct ath9k_htc_priv *priv, struct sk_buff *skb)
drivers/net/wireless/ath/ath9k/htc_hst.c:ath9k_htc_fw_panic_report(struct htc_target *htc_handle, struct sk_buff *skb)
drivers/net/wireless/ath/ath9k/htc_hst.c:ath9k_htc_hw_alloc()
drivers/net/wireless/ath/ath9k/htc_hst.c:ath9k_htc_rx_msg(struct htc_target *htc_handle, struct sk_buff *skb, u32 len, u8 pipe_id)
drivers/net/wireless/ath/ath9k/htc_hst.c:ath9k_htc_txcompletion_cb(struct htc_target *htc_handle, struct sk_buff *skb, bool txok)
drivers/net/wireless/ath/ath9k/htc_hst.c:get_next_avail_ep()
drivers/net/wireless/ath/ath9k/htc_hst.c:htc_config_pipe_credits(struct htc_target *target)
drivers/net/wireless/ath/ath9k/htc_hst.c:htc_connect_service(struct htc_target *target, struct htc_service_connreq *service_connreq, enum htc_endpoint_id *conn_rsp_epid)
drivers/net/wireless/ath/ath9k/htc_hst.c:htc_issue_send(struct htc_target *target, struct sk_buff* skb, u16 len, u8 flags, u8 epid)
drivers/net/wireless/ath/ath9k/htc_hst.c:htc_process_conn_rsp(struct htc_target *target, struct htc_frame_hdr *htc_hdr)
drivers/net/wireless/ath/ath9k/htc_hst.c:htc_process_target_rdy(struct htc_target *target, void *buf)
drivers/net/wireless/ath/ath9k/htc_hst.c:htc_send(struct htc_target *target, struct sk_buff *skb)
drivers/net/wireless/ath/ath9k/htc_hst.c:htc_setup_complete(struct htc_target *target)
drivers/net/wireless/ath/ath9k/hif_usb.c:__hif_usb_tx(struct hif_device_usb *hif_dev)
drivers/net/wireless/ath/ath9k/hif_usb.c:ath9k_hif_usb_alloc_reg_in_urbs(struct hif_device_usb *hif_dev)
drivers/net/wireless/ath/ath9k/hif_usb.c:ath9k_hif_usb_alloc_urbs(struct hif_device_usb *hif_dev)
drivers/net/wireless/ath/ath9k/hif_usb.c:ath9k_hif_usb_dev_init(struct hif_device_usb *hif_dev)
drivers/net/wireless/ath/ath9k/hif_usb.c:ath9k_hif_usb_download_fw(struct hif_device_usb *hif_dev)
drivers/net/wireless/ath/ath9k/hif_usb.c:ath9k_hif_usb_reg_in_cb(struct urb *urb)
drivers/net/wireless/ath/ath9k/hif_usb.c:ath9k_hif_usb_rx_cb(struct urb *urb)
drivers/net/wireless/ath/ath9k/hif_usb.c:ath9k_hif_usb_rx_stream(struct hif_device_usb *hif_dev, struct sk_buff *skb)
drivers/net/wireless/ath/ath9k/hif_usb.c:hif_usb_mgmt_cb(struct urb *urb)
drivers/net/wireless/ath/ath9k/hif_usb.c:hif_usb_regout_cb(struct urb *urb)
drivers/net/wireless/ath/ath9k/hif_usb.c:hif_usb_send(void *hif_handle, u8 pipe_id, struct sk_buff *skb)
drivers/net/wireless/ath/ath9k/hif_usb.c:hif_usb_send_mgmt(struct hif_device_usb *hif_dev, struct sk_buff *skb)
drivers/net/wireless/ath/ath9k/hif_usb.c:hif_usb_send_regout(struct hif_device_usb *hif_dev, struct sk_buff *skb)
drivers/net/wireless/ath/ath9k/hif_usb.c:hif_usb_send_tx(struct hif_device_usb *hif_dev, struct sk_buff *skb)
drivers/net/wireless/ath/ath9k/hif_usb.c:hif_usb_tx_cb(struct urb *urb)
kernel/locking/lockdep.c:__lock_acquire(struct lockdep_map *lock, unsigned int subclass, int trylock, int read, int check, int hardirqs_off, struct lockdep_map *nest_lock, unsigned long ip, int references, int pin_count)
kernel/locking/lockdep.c:assign_lock_key(struct lockdep_map *lock)
kernel/locking/lockdep.c:lock_acquire(struct lockdep_map *lock, unsigned int subclass, int trylock, int read, int check, struct lockdep_map *nest_lock, unsigned long ip)
kernel/locking/lockdep.c:lockdep_init_map_type(struct lockdep_map *lock, const char *name, struct lock_class_key *key, int subclass, u8 inner, u8 outer, u8 lock_type)
kernel/locking/lockdep.c:lockdep_register_key(struct lock_class_key *key)
kernel/locking/lockdep.c:lockdep_reset_lock_reg(struct lockdep_map *lock)
kernel/locking/lockdep.c:lockdep_unregister_key(struct lock_class_key *key)
kernel/locking/lockdep.c:register_lock_class()
drivers/usb/core/hcd.c:__usb_hcd_giveback_urb(struct urb *urb)
drivers/usb/core/hcd.c:usb_hcd_check_unlink_urb(struct usb_hcd *hcd, struct urb *urb, int status)
drivers/usb/core/hcd.c:usb_hcd_giveback_urb(struct usb_hcd *hcd, struct urb *urb, int status)
drivers/usb/core/hcd.c:usb_hcd_link_urb_to_ep(struct usb_hcd *hcd, struct urb *urb)
drivers/usb/core/hcd.c:usb_hcd_map_urb_for_dma(struct usb_hcd *hcd, struct urb *urb, gfp_t mem_flags)
drivers/usb/core/hcd.c:usb_hcd_submit_urb(struct urb *urb, gfp_t mem_flags)
drivers/usb/core/hcd.c:usb_hcd_unlink_urb(struct urb *urb, int status)
drivers/usb/core/hcd.c:usb_hcd_unmap_urb_for_dma(struct usb_hcd *hcd, struct urb *urb)
drivers/usb/core/hcd.c:__usb_hcd_giveback_urb(struct urb *urb)
kernel/locking/lockdep.c:assign_lock_key(struct lockdep_map *lock)
drivers/net/wireless/ath/ath9k/hif_usb.c:ath9k_hif_usb_reg_in_cb(struct urb *urb)
drivers/net/wireless/ath/ath9k/htc_hst.c:ath9k_htc_rx_msg(struct htc_target *htc_handle, struct sk_buff *skb, u32 len, u8 pipe_id)
drivers/net/wireless/ath/ath9k/htc_drv_txrx.c:ath9k_htc_rxep(void *drv_priv, struct sk_buff *skb, enum htc_endpoint_id ep_id)
drivers/usb/gadget/udc/dummy_hcd.c:dummy_timer(struct timer_list *t)
kernel/locking/lockdep.c:register_lock_class()
drivers/usb/core/hcd.c:usb_hcd_giveback_urb(struct usb_hcd *hcd, struct urb *urb, int status)
include/linux/spinlock_api_smp.h:__raw_spin_lock_irq(raw_spinlock_t *lock)
include/linux/spinlock_api_smp.h:__raw_spin_lock_irqsave(raw_spinlock_t *lock)
include/linux/spinlock_api_smp.h:__raw_spin_trylock(raw_spinlock_t *lock)
include/linux/spinlock_api_smp.h:__raw_spin_trylock_bh(raw_spinlock_t *lock)
drivers/net/wireless/ath/ath9k/htc_drv_main.c:ath9k_htc_start(struct ieee80211_hw *hw)
drivers/net/wireless/ath/ath9k/htc_drv_main.c:ath9k_htc_stop(struct ieee80211_hw *hw)
drivers/net/wireless/ath/ath9k/htc_drv_main.c:ath9k_htc_tx(struct ieee80211_hw *hw, struct ieee80211_tx_control *control, struct sk_buff *skb)
drivers/usb/gadget/udc/dummy_hcd.c:dummy_timer(struct timer_list *t)
drivers/usb/gadget/udc/dummy_hcd.c:dummy_urb_dequeue(struct usb_hcd *hcd, struct urb *urb, int status)
drivers/usb/gadget/udc/dummy_hcd.c:dummy_urb_enqueue(struct usb_hcd *hcd, struct urb *urb, gfp_t mem_flags)
kernel/time/timer.c:__run_timers(struct timer_base *base)
kernel/time/timer.c:call_timer_fn(struct timer_list *timer, void (*fn)(struct timer_list *), unsigned long baseclk)
kernel/time/timer.c:run_timer_softirq(struct softirq_action *h)
func for case 1665a0a4a1d6d4d3f61624353f8a9e5dbfff67bd
net/l2tp/l2tp_core.c:l2tp_recv_common(struct l2tp_session *session, struct sk_buff *skb, unsigned char *ptr, unsigned char *optr, u16 hdrflags, int length)
net/l2tp/l2tp_core.c:l2tp_recv_dequeue(struct l2tp_session *session)
net/l2tp/l2tp_core.c:l2tp_recv_dequeue_skb(struct l2tp_session *session, struct sk_buff *skb)
net/l2tp/l2tp_core.c:l2tp_recv_queue_skb(struct l2tp_session *session, struct sk_buff *skb)
net/l2tp/l2tp_core.c:l2tp_session_register(struct l2tp_session *session, struct l2tp_tunnel *tunnel)
net/l2tp/l2tp_core.c:l2tp_session_unhash(struct l2tp_session *session)
net/l2tp/l2tp_core.c:l2tp_tunnel_closeall(struct l2tp_tunnel *tunnel)
net/l2tp/l2tp_core.c:l2tp_tunnel_create(int fd, int version, u32 tunnel_id, u32 peer_tunnel_id, struct l2tp_tunnel_cfg *cfg, struct l2tp_tunnel **tunnelp)
net/l2tp/l2tp_core.c:l2tp_tunnel_destruct(struct sock *sk)
net/l2tp/l2tp_core.c:l2tp_tunnel_register(struct l2tp_tunnel *tunnel, struct net *net, struct l2tp_tunnel_cfg *cfg)
net/l2tp/l2tp_core.c:l2tp_tunnel_sock_create(struct net *net, u32 tunnel_id, u32 peer_tunnel_id, struct l2tp_tunnel_cfg *cfg, struct socket **sockp)
net/l2tp/l2tp_core.c:l2tp_udp_encap_recv(struct sock *sk, struct sk_buff *skb)
net/l2tp/l2tp_core.c:l2tp_udp_recv_core(struct l2tp_tunnel *tunnel, struct sk_buff *skb)
net/l2tp/l2tp_core.c:l2tp_xmit_core(struct l2tp_session *session, struct sk_buff *skb, unsigned int *len)
net/l2tp/l2tp_core.c:l2tp_xmit_skb(struct l2tp_session *session, struct sk_buff *skb)
net/ipv4/inet_connection_sock.c:inet_csk_accept()
net/ipv4/inet_connection_sock.c:inet_csk_bind_conflict(const struct sock *sk, const struct inet_bind_bucket *tb, const struct inet_bind2_bucket *tb2, /* may be null */ bool relax, bool reuseport_ok)
net/ipv4/inet_connection_sock.c:inet_csk_clear_xmit_timers(struct sock *sk)
net/ipv4/inet_connection_sock.c:inet_csk_clone_lock()
net/ipv4/inet_connection_sock.c:inet_csk_destroy_sock(struct sock *sk)
net/ipv4/inet_connection_sock.c:inet_csk_find_open_port()
net/ipv4/inet_connection_sock.c:inet_csk_get_port(struct sock *sk, unsigned short snum)
net/ipv4/inet_connection_sock.c:inet_csk_init_xmit_timers(struct sock *sk, void (*retransmit_handler)(struct timer_list *t), void (*delack_handler)(struct timer_list *t), void (*keepalive_handler)(struct timer_list *t))
net/ipv4/inet_connection_sock.c:inet_csk_listen_start(struct sock *sk)
net/ipv4/inet_connection_sock.c:inet_csk_listen_stop(struct sock *sk)
net/ipv4/inet_connection_sock.c:inet_csk_rebuild_route()
net/ipv4/inet_connection_sock.c:inet_csk_route_child_sock()
net/ipv4/inet_connection_sock.c:inet_csk_route_req()
net/ipv4/inet_connection_sock.c:inet_csk_update_fastreuse(struct inet_bind_bucket *tb, struct sock *sk)
net/ipv4/inet_connection_sock.c:inet_csk_update_pmtu()
net/ipv4/af_inet.c:__inet_bind(struct sock *sk, struct sockaddr *uaddr, int addr_len, u32 flags)
net/core/sock.c:__sk_destruct(struct rcu_head *head)
net/ipv4/af_inet.c:inet_bind(struct socket *sock, struct sockaddr *uaddr, int addr_len)
net/ipv4/inet_connection_sock.c:inet_csk_get_port(struct sock *sk, unsigned short snum)
net/core/sock.c:sk_alloc()
net/core/sock.c:sk_clone_lock()
net/core/sock.c:sk_destruct(struct sock *sk)
net/core/sock.c:sk_free(struct sock *sk)
net/core/sock.c:sk_setup_caps(struct sock *sk, struct dst_entry *dst)
net/core/sock.c:sock_alloc_send_pskb()
net/core/sock.c:sock_i_uid(struct sock *sk)
net/core/sock.c:sock_init_data(struct socket *sock, struct sock *sk)
net/core/sock.c:sock_kmalloc()
net/core/sock.c:sock_wait_for_wmem(struct sock *sk, long timeo)
net/core/sock.c:sock_wmalloc()
net/ipv4/af_inet.c:__inet_bind(struct sock *sk, struct sockaddr *uaddr, int addr_len, u32 flags)
net/ipv4/af_inet.c:__inet_stream_connect(struct socket *sock, struct sockaddr *uaddr, int addr_len, int flags, int is_sendmsg)
net/ipv4/af_inet.c:inet_accept(struct socket *sock, struct socket *newsock, int flags, bool kern)
net/ipv4/af_inet.c:inet_bind(struct socket *sock, struct sockaddr *uaddr, int addr_len)
net/ipv4/af_inet.c:inet_create(struct net *net, struct socket *sock, int protocol, int kern)
net/ipv4/af_inet.c:inet_dgram_connect(struct socket *sock, struct sockaddr *uaddr, int addr_len, int flags)
net/ipv4/af_inet.c:inet_listen(struct socket *sock, int backlog)
net/ipv4/af_inet.c:inet_release(struct socket *sock)
net/smc/af_smc.c:smc_accept(struct socket *sock, struct socket *new_sock, int flags, bool kern)
net/smc/af_smc.c:smc_bind(struct socket *sock, struct sockaddr *uaddr, int addr_len)
net/smc/af_smc.c:smc_connect(struct socket *sock, struct sockaddr *addr, int alen, int flags)
net/smc/af_smc.c:smc_hash_sk(struct sock *sk)
net/smc/af_smc.c:smc_listen(struct socket *sock, int backlog)
net/smc/af_smc.c:smc_release(struct socket *sock)
net/smc/af_smc.c:smc_sock_alloc()
net/smc/af_smc.c:smc_unhash_sk(struct sock *sk)
net/ipv4/inet_hashtables.c:__inet_check_established(struct inet_timewait_death_row *death_row, struct sock *sk, __u16 lport, struct inet_timewait_sock **twp)
net/ipv4/inet_hashtables.c:__inet_hash_connect(struct inet_timewait_death_row *death_row, struct sock *sk, u64 port_offset, int (*check_established)(struct inet_timewait_death_row *, struct sock *, __u16, struct inet_timewait_sock **))
net/ipv4/inet_hashtables.c:__inet_inherit_port(const struct sock *sk, struct sock *child)
net/ipv4/inet_hashtables.c:__inet_lookup_established()
net/ipv4/inet_hashtables.c:inet_ehash_insert(struct sock *sk, struct sock *osk, bool *found_dup_sk)
net/ipv4/inet_hashtables.c:inet_ehash_lookup_by_sk(struct sock *sk, struct hlist_nulls_head *list)
inet_hash2()
inet_hashtables()
inet_unhash2()
spin_lock()
tcp_ipv4()
net/ipv4/tcp_ipv4.c:tcp_v4_connect(struct sock *sk, struct sockaddr *uaddr, int addr_len)
net/ipv4/tcp_ipv4.c:tcp_v4_destroy_sock(struct sock *sk)
net/ipv4/tcp_ipv4.c:tcp_v4_do_rcv(struct sock *sk, struct sk_buff *skb)
net/ipv4/tcp_ipv4.c:tcp_v4_err(struct sk_buff *skb, u32 info)
net/ipv4/tcp_ipv4.c:tcp_v4_init_req(struct request_sock *req, const struct sock *sk_listener, struct sk_buff *skb)
net/ipv4/tcp_ipv4.c:tcp_v4_rcv(struct sk_buff *skb)
net/ipv4/tcp_ipv4.c:tcp_v4_send_reset(const struct sock *sk, struct sk_buff *skb)
net/ipv4/tcp_ipv4.c:tcp_v4_syn_recv_sock()
kernel/locking/lockdep.c:check_irq_usage(struct task_struct *curr, struct held_lock *prev, struct held_lock *next)
kernel/locking/lockdep.c:print_bad_irq_dependency(struct task_struct *curr, struct lock_list *prev_root, struct lock_list *next_root, struct lock_list *backwards_entry, struct lock_list *forwards_entry, struct held_lock *prev, struct held_lock *next, enum lock_usage_bit bit1, enum lock_usage_bit bit2, const char *irqclass)
kernel/locking/lockdep.c:validate_chain(struct task_struct *curr, struct held_lock *hlock, int chain_head, u64 chain_key)
net/l2tp/l2tp_netlink.c:l2tp_nl_cmd_tunnel_create(struct sk_buff *skb, struct genl_info *info)
net/l2tp/l2tp_netlink.c:l2tp_nl_cmd_tunnel_create_get_addr(struct nlattr **attrs, struct l2tp_tunnel_cfg *cfg)
net/l2tp/l2tp_netlink.c:l2tp_tunnel_notify(struct genl_family *family, struct genl_info *info, struct l2tp_tunnel *tunnel, u8 cmd)
net/netlink/af_netlink.c:netlink_bind(struct socket *sock, struct sockaddr *addr, int addr_len)
net/netlink/af_netlink.c:netlink_sendmsg(struct socket *sock, struct msghdr *msg, size_t len)
net/netlink/af_netlink.c:netlink_unicast(struct sock *ssk, struct sk_buff *skb, u32 portid, int nonblock)
func for case 3493b1873fb3ea827986
net/netfilter/ipset/ip_set_hash_gen.h:mtype_add(struct ip_set *set, void *value, const struct ip_set_ext *ext, struct ip_set_ext *mext, u32 flags)
net/netfilter/ipset/ip_set_hash_gen.h:mtype_add_cidr(struct ip_set *set, struct htype *h, u8 cidr, u8 n)
net/netfilter/ipset/ip_set_hash_gen.h:mtype_del(struct ip_set *set, void *value, const struct ip_set_ext *ext, struct ip_set_ext *mext, u32 flags)
net/netfilter/ipset/ip_set_hash_gen.h:mtype_del_cidr(struct ip_set *set, struct htype *h, u8 cidr, u8 n)
net/netfilter/ipset/ip_set_hash_gen.h:mtype_destroy(struct ip_set *set)
net/netfilter/ipset/ip_set_hash_gen.h:mtype_ext_size(struct ip_set *set, u32 *elements, size_t *ext_size)
net/netfilter/ipset/ip_set_hash_gen.h:mtype_flush(struct ip_set *set)
net/netfilter/ipset/ip_set_hash_gen.h:mtype_gc(struct work_struct *work)
net/netfilter/ipset/ip_set_hash_gen.h:mtype_gc_do(struct ip_set *set, struct htype *h, struct htable *t, u32 r)
net/netfilter/ipset/ip_set_hash_gen.h:mtype_head(struct ip_set *set, struct sk_buff *skb)
net/netfilter/ipset/ip_set_hash_gen.h:mtype_list(const struct ip_set *set, struct sk_buff *skb, struct netlink_callback *cb)
net/netfilter/ipset/ip_set_hash_gen.h:mtype_resize(struct ip_set *set, bool retried)
net/netfilter/ipset/ip_set_hash_gen.h:mtype_test(struct ip_set *set, void *value, const struct ip_set_ext *ext, struct ip_set_ext *mext, u32 flags)
net/netfilter/ipset/ip_set_hash_gen.h:mtype_test_cidrs(struct ip_set *set, struct mtype_elem *d, const struct ip_set_ext *ext, struct ip_set_ext *mext, u32 flags)
net/netfilter/ipset/ip_set_hash_gen.h:mtype_uref(struct ip_set *set, struct netlink_callback *cb, bool start)
net/netfilter/ipset/ip_set_core.c:call_ad(struct net *net, struct sock *ctnl, struct sk_buff *skb, struct ip_set *set, struct nlattr *tb[], enum ipset_adt adt, u32 flags, bool use_lineno)
elem_len()
net/netfilter/ipset/ip_set_core.c:find_free_id(struct ip_set_net *inst, const char *name, ip_set_id_t *index, struct ip_set **set)
get_extensions()
hash_ip_create()
net/netfilter/ipset/ip_set_core.c:ip_set_ad(struct net *net, struct sock *ctnl, struct sk_buff *skb, enum ipset_adt adt, const struct nlmsghdr *nlh, const struct nlattr * const attr[], struct netlink_ext_ack *extack)
ip_set_core()
net/netfilter/ipset/ip_set_core.c:ip_set_create(struct sk_buff *skb, const struct nfnl_info *info, const struct nlattr * const attr[])
net/netfilter/ipset/ip_set_core.c:ip_set_destroy(struct sk_buff *skb, const struct nfnl_info *info, const struct nlattr * const attr[])
net/netfilter/ipset/ip_set_core.c:ip_set_destroy_set(struct ip_set *set)
net/netfilter/ipset/ip_set_core.c:ip_set_elem_len(struct ip_set *set, struct nlattr *tb[], size_t len, size_t align)
net/netfilter/ipset/ip_set_core.c:ip_set_flush(struct sk_buff *skb, const struct nfnl_info *info, const struct nlattr * const attr[])
net/netfilter/ipset/ip_set_core.c:ip_set_get_extensions(struct ip_set *set, struct nlattr *tb[], struct ip_set_ext *ext)
net/netfilter/ipset/ip_set_core.c:ip_set_init(void)
net/netfilter/ipset/ip_set_core.c:ip_set_net_exit(struct net *net)
net/netfilter/ipset/ip_set_core.c:ip_set_net_init(struct net *net)
net/netfilter/ipset/ip_set_core.c:ip_set_put_extensions(struct sk_buff *skb, const struct ip_set *set, const void *e, bool active)
net/netfilter/ipset/ip_set_core.c:ip_set_swap(struct sk_buff *skb, const struct nfnl_info *info, const struct nlattr * const attr[])
mm/util.c:kvmalloc_node()
mm/util.c:__account_locked_vm(struct mm_struct *mm, unsigned long pages, bool inc, struct task_struct *task, bool bypass_rlim)
mm/util.c:__vm_enough_memory(struct mm_struct *mm, long pages, int cap_sys_admin)
mm/util.c:account_locked_vm(struct mm_struct *mm, unsigned long pages, bool inc)
mm/util.c:arch_pick_mmap_layout(struct mm_struct *mm, struct rlimit *rlim_stack)
mm/util.c:arch_randomize_brk(struct mm_struct *mm)
mm/util.c:kmemdup_nul()
mm/util.c:kvmalloc_node()
mm/util.c:memdup_user()
mm/util.c:memdup_user_nul()
mm/util.c:mmap_base(unsigned long rnd, struct rlimit *rlim_stack)
mm/util.c:randomize_stack_top(unsigned long stack_top)
mm/util.c:strndup_user()
mm/util.c:vm_mmap(struct file *file, unsigned long addr, unsigned long len, unsigned long prot, unsigned long flag, unsigned long offset)
mm/util.c:vm_mmap_pgoff(struct file *file, unsigned long addr, unsigned long len, unsigned long prot, unsigned long flag, unsigned long pgoff)
mm/util.c:vmemdup_user()
net/netfilter/nfnetlink.c:nfnetlink_rcv(struct sk_buff *skb)
net/netfilter/nfnetlink.c:nfnetlink_rcv_batch(struct sk_buff *skb, struct nlmsghdr *nlh, u16 subsys_id, u32 genid)
net/netfilter/nfnetlink.c:nfnetlink_rcv_msg(struct sk_buff *skb, struct nlmsghdr *nlh, struct netlink_ext_ack *extack)
net/netfilter/nfnetlink.c:nfnetlink_rcv_skb_batch(struct sk_buff *skb, struct nlmsghdr *nlh)
net/netfilter/nfnetlink.c:nfnetlink_subsys_register(const struct nfnetlink_subsystem *n)
net/netfilter/nfnetlink.c:nfnetlink_unicast(struct sk_buff *skb, struct net *net, u32 portid)
net/netfilter/nfnetlink.c:nfnl_err_add(struct list_head *list, struct nlmsghdr *nlh, int err, const struct netlink_ext_ack *extack)
net/netfilter/nfnetlink.c:nfnl_err_deliver(struct list_head *err_list, struct sk_buff *skb)
net/netlink/af_netlink.c:netlink_alloc_large_skb()
net/netlink/af_netlink.c:netlink_attachskb(struct sock *sk, struct sk_buff *skb, long *timeo, struct sock *ssk)
net/netlink/af_netlink.c:netlink_broadcast_filtered(struct sock *ssk, struct sk_buff *skb, u32 portid, u32 group, gfp_t allocation, int (*filter)(struct sock *dsk, struct sk_buff *skb, void *data), void *filter_data)
net/netlink/af_netlink.c:netlink_rcv_skb(struct sk_buff *skb, int (*cb)(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *))
net/netlink/af_netlink.c:netlink_sendmsg(struct socket *sock, struct msghdr *msg, size_t len)
net/netlink/af_netlink.c:netlink_trim()
net/netlink/af_netlink.c:netlink_unicast(struct sock *ssk, struct sk_buff *skb, u32 portid, int nonblock)
net/netlink/af_netlink.c:netlink_unicast_kernel(struct sock *sk, struct sk_buff *skb, struct sock *ssk)
include/linux/mm.h:kvmalloc_array()
include/linux/mm.h:vm_end_gap(struct vm_area_struct *vma)
include/linux/mm.h:vm_start_gap(struct vm_area_struct *vma)
include/linux/netlink.h:netlink_dump_start(struct sock *ssk, struct sk_buff *skb, const struct nlmsghdr *nlh, struct netlink_dump_control *control)
func for case d2c5e6980bfc84513464
crypto/crypto_null.c:crypto_get_default_null_skcipher()
crypto/crypto_null.c:crypto_null_mod_init(void)
crypto/crypto_null.c:crypto_put_default_null_skcipher(void)
crypto/crypto_null.c:null_skcipher_crypt(struct skcipher_request *req)
net/ipv6/esp6.c:esp6_find_tcp_sk()
net/ipv6/esp6.c:esp6_output(struct xfrm_state *x, struct sk_buff *skb)
net/ipv6/esp6.c:esp6_output_encap(struct xfrm_state *x, struct sk_buff *skb, struct esp_info *esp)
net/ipv6/esp6.c:esp6_output_head(struct xfrm_state *x, struct sk_buff *skb, struct esp_info *esp)
net/ipv6/esp6.c:esp6_output_tail(struct xfrm_state *x, struct sk_buff *skb, struct esp_info *esp)
net/ipv6/esp6.c:esp6_output_tcp_encap()
net/ipv6/esp6.c:esp6_output_udp_encap()
net/ipv6/esp6.c:esp_alloc_tmp()
net/ipv6/esp6.c:esp_output_done(struct crypto_async_request *base, int err)
net/ipv6/esp6.c:esp_output_encap_csum(struct sk_buff *skb)
net/ipv6/esp6.c:esp_output_restore_header(struct sk_buff *skb)
net/ipv6/esp6.c:esp_output_set_esn()
net/ipv6/esp6.c:esp_output_tcp_finish(struct xfrm_state *x, struct sk_buff *skb)
net/ipv6/esp6.c:esp_restore_header(struct sk_buff *skb, unsigned int offset)
net/ipv6/esp6.c:esp_ssg_unref(struct xfrm_state *x, void *tmp)
crypto/authenc.c:authenc_geniv_ahash_done(struct crypto_async_request *areq, int err)
crypto/authenc.c:crypto_authenc_copy_assoc(struct aead_request *req)
crypto/authenc.c:crypto_authenc_create(struct crypto_template *tmpl, struct rtattr **tb)
crypto/authenc.c:crypto_authenc_decrypt(struct aead_request *req)
crypto/authenc.c:crypto_authenc_decrypt_tail(struct aead_request *req, unsigned int flags)
crypto/authenc.c:crypto_authenc_encrypt(struct aead_request *req)
crypto/authenc.c:crypto_authenc_extractkeys(struct crypto_authenc_keys *keys, const u8 *key, unsigned int keylen)
crypto/authenc.c:crypto_authenc_free(struct aead_instance *inst)
crypto/authenc.c:crypto_authenc_genicv(struct aead_request *req, unsigned int flags)
crypto/authenc.c:crypto_authenc_init_tfm(struct crypto_aead *tfm)
crypto/authenc.c:crypto_authenc_setkey(struct crypto_aead *authenc, const u8 *key, unsigned int keylen)
net/xfrm/xfrm_output.c:xfrm6_transport_output(struct xfrm_state *x, struct sk_buff *skb)
net/xfrm/xfrm_output.c:xfrm_inner_extract_output(struct xfrm_state *x, struct sk_buff *skb)
net/xfrm/xfrm_output.c:xfrm_outer_mode_output(struct xfrm_state *x, struct sk_buff *skb)
net/xfrm/xfrm_output.c:xfrm_output(struct sock *sk, struct sk_buff *skb)
net/xfrm/xfrm_output.c:xfrm_output_gso(struct net *net, struct sock *sk, struct sk_buff *skb)
net/xfrm/xfrm_output.c:xfrm_output_one(struct sk_buff *skb, int err)
net/xfrm/xfrm_output.c:xfrm_output_resume(struct sock *sk, struct sk_buff *skb, int err)
net/xfrm/xfrm_output.c:xfrm_skb_check_space(struct sk_buff *skb)
crypto/skcipher.c:crypto_skcipher_encrypt(struct skcipher_request *req)
crypto/skcipher.c:crypto_skcipher_setkey(struct crypto_skcipher *tfm, const u8 *key, unsigned int keylen)
crypto/skcipher.c:skcipher_copy_iv(struct skcipher_walk *walk)
crypto/skcipher.c:skcipher_setkey_unaligned(struct crypto_skcipher *tfm, const u8 *key, unsigned int keylen)
crypto/skcipher.c:skcipher_walk_complete(struct skcipher_walk *walk, int err)
crypto/skcipher.c:skcipher_walk_done(struct skcipher_walk *walk, int err)
crypto/skcipher.c:skcipher_walk_first(struct skcipher_walk *walk)
crypto/skcipher.c:skcipher_walk_virt(struct skcipher_walk *walk, struct skcipher_request *req, bool atomic)
net/ipv6/xfrm6_output.c:__xfrm6_output(struct net *net, struct sock *sk, struct sk_buff *skb)
net/ipv6/xfrm6_output.c:xfrm6_local_error(struct sk_buff *skb, u32 mtu)
net/ipv6/xfrm6_output.c:xfrm6_local_rxpmtu(struct sk_buff *skb, u32 mtu)
mm/slub.c:__slab_free(struct kmem_cache *s, struct slab *slab, void *head, void *tail, int cnt, unsigned long addr)
mm/slub.c:do_slab_free(struct kmem_cache *s, struct slab *slab, void *head, void *tail, int cnt, unsigned long addr)
mm/slub.c:free_consistency_checks(struct kmem_cache *s, struct slab *slab, void *object, unsigned long addr)
mm/slub.c:free_debug_processing(struct kmem_cache *s, struct slab *slab, void *head, void *tail, int bulk_cnt, unsigned long addr)
mm/slub.c:kmem_cache_free(struct kmem_cache *s, void *x)
mm/slub.c:slab_free(struct kmem_cache *s, struct slab *slab, void *head, void *tail, int cnt, unsigned long addr)
mm/slub.c:slab_free_freelist_hook(struct kmem_cache *s, void **head, void **tail, int *cnt)
mm/slub.c:slab_free_hook(struct kmem_cache *s, void *x, bool init)
mm/kasan/common.c:____kasan_kmalloc()
mm/kasan/common.c:____kasan_slab_free(struct kmem_cache *cache, void *object, unsigned long ip, bool quarantine, bool init)
mm/kasan/common.c:__kasan_slab_alloc()
crypto/authenc.c:crypto_authenc_encrypt(struct aead_request *req)
crypto/skcipher.c:crypto_skcipher_encrypt(struct skcipher_request *req)
crypto/crypto_null.c:null_skcipher_crypt(struct skcipher_request *req)
net/ipv6/ip6_output.c:ip6_finish_output(struct net *net, struct sock *sk, struct sk_buff *skb)
net/ipv6/ip6_output.c:ip6_finish_output2(struct net *net, struct sock *sk, struct sk_buff *skb)
net/ipv6/ip6_output.c:ip6_output(struct net *net, struct sock *sk, struct sk_buff *skb)
func for case 02617ac69815ae324053c954118c2dc7ba0e59b2
net/tls/tls_sw.c:__skb_nsg(struct sk_buff *skb, int offset, int len, unsigned int recursion_level)
net/tls/tls_sw.c:decrypt_internal(struct sock *sk, struct sk_buff *skb, struct iov_iter *out_iov, struct scatterlist *out_sg, int *chunk, bool *zc, bool async)
net/tls/tls_sw.c:decrypt_skb_update(struct sock *sk, struct sk_buff *skb, struct iov_iter *dest, int *chunk, bool *zc, bool async)
net/tls/tls_sw.c:process_rx_list(struct tls_sw_context_rx *ctx, struct msghdr *msg, u8 *control, bool *cmsg, size_t skip, size_t len, bool zc, bool is_peek)
net/tls/tls_sw.c:tls_alloc_encrypted_msg(struct sock *sk, int len)
net/tls/tls_sw.c:tls_clone_plaintext_msg(struct sock *sk, int required)
net/tls/tls_sw.c:tls_decrypt_done(struct crypto_async_request *req, int err)
net/tls/tls_sw.c:tls_do_decryption(struct sock *sk, struct sk_buff *skb, struct scatterlist *sgin, struct scatterlist *sgout, char *iv_recv, size_t data_len, struct aead_request *aead_req, bool async)
net/tls/tls_sw.c:tls_do_encryption(struct sock *sk, struct tls_context *tls_ctx, struct tls_sw_context_tx *ctx, struct aead_request *aead_req, size_t data_len, u32 start)
net/tls/tls_sw.c:tls_encrypt_done(struct crypto_async_request *req, int err)
net/tls/tls_sw.c:tls_get_rec()
net/tls/tls_sw.c:tls_set_sw_offload(struct sock *sk, struct tls_context *ctx, int tx)
net/tls/tls_sw.c:tls_sw_advance_skb(struct sock *sk, struct sk_buff *skb, unsigned int len)
net/tls/tls_sw.c:tls_sw_recvmsg(struct sock *sk, struct msghdr *msg, size_t len, int nonblock, int flags, int *addr_len)
net/tls/tls_sw.c:tls_trim_both_msgs(struct sock *sk, int target_size)
net/tls/tls_main.c:do_tls_setsockopt(struct sock *sk, int optname, sockptr_t optval, unsigned int optlen)
net/tls/tls_main.c:do_tls_setsockopt_conf(struct sock *sk, sockptr_t optval, unsigned int optlen, int tx)
net/tls/tls_main.c:tls_build_proto(struct sock *sk)
net/tls/tls_main.c:tls_ctx_create()
net/tls/tls_main.c:tls_getsockopt(struct sock *sk, int level, int optname, char __user *optval, int __user *optlen)
net/tls/tls_main.c:tls_init(struct sock *sk)
net/tls/tls_main.c:tls_proccess_cmsg(struct sock *sk, struct msghdr *msg, unsigned char *record_type)
net/tls/tls_main.c:tls_push_sg(struct sock *sk, struct tls_context *ctx, struct scatterlist *sg, u16 first_offset, int flags)
net/tls/tls_main.c:tls_setsockopt(struct sock *sk, int level, int optname, sockptr_t optval, unsigned int optlen)
net/tls/tls_main.c:tls_sk_proto_cleanup(struct sock *sk, struct tls_context *ctx, long timeo)
net/tls/tls_main.c:tls_sk_proto_close(struct sock *sk, long timeout)
net/tls/tls_main.c:tls_update(struct sock *sk, struct proto *p, void (*write_space)(struct sock *sk))
net/tls/tls_main.c:tls_write_space(struct sock *sk)
net/tls/tls_main.c:update_sk_prot(struct sock *sk, struct tls_context *ctx)
net/tls/tls_main.c:wait_on_pending_writer(struct sock *sk, long *timeo)
net/socket.c:____sys_recvmsg(struct socket *sock, struct msghdr *msg_sys, struct user_msghdr __user *msg, struct sockaddr __user *uaddr, unsigned int flags, int nosec)
net/socket.c:___sys_recvmsg(struct socket *sock, struct user_msghdr __user *msg, struct msghdr *msg_sys, unsigned int flags, int nosec)
net/socket.c:__copy_msghdr_from_user(struct msghdr *kmsg, struct user_msghdr __user *umsg, struct sockaddr __user **save_addr, struct iovec __user **uiov, size_t *nsegs)
net/socket.c:__sys_recvmmsg(int fd, struct mmsghdr __user *mmsg, unsigned int vlen, unsigned int flags, struct __kernel_timespec __user *timeout, struct old_timespec32 __user *timeout32)
net/socket.c:__sys_recvmsg(int fd, struct user_msghdr __user *msg, unsigned int flags, bool forbid_cmsg_compat)
net/socket.c:copy_msghdr_from_user(struct msghdr *kmsg, struct user_msghdr __user *umsg, struct sockaddr __user **save_addr, struct iovec **iov)
net/tls/tls_sw.c:decrypt_internal(struct sock *sk, struct sk_buff *skb, struct iov_iter *out_iov, struct scatterlist *out_sg, int *chunk, bool *zc, bool async)
net/tls/tls_sw.c:decrypt_skb_update(struct sock *sk, struct sk_buff *skb, struct iov_iter *dest, int *chunk, bool *zc, bool async)
net/socket.c:do_recvmmsg(int fd, struct mmsghdr __user *mmsg, unsigned int vlen, unsigned int flags, struct timespec64 *timeout)
net/tls/tls_main.c:do_tls_setsockopt(struct sock *sk, int optname, sockptr_t optval, unsigned int optlen)
net/tls/tls_main.c:do_tls_setsockopt_conf(struct sock *sk, sockptr_t optval, unsigned int optlen, int tx)
net/socket.c:recvmsg_copy_msghdr(struct msghdr *msg, struct user_msghdr __user *umsg, unsigned flags, struct sockaddr __user **uaddr, struct iovec **iov)
net/tls/tls_sw.c:tls_set_sw_offload(struct sock *sk, struct tls_context *ctx, int tx)
net/tls/tls_main.c:tls_setsockopt(struct sock *sk, int level, int optname, sockptr_t optval, unsigned int optlen)
net/tls/tls_sw.c:tls_sw_recvmsg(struct sock *sk, struct msghdr *msg, size_t len, int nonblock, int flags, int *addr_len)
net/ipv6/af_inet6.c:__inet6_bind(struct sock *sk, struct sockaddr *uaddr, int addr_len, u32 flags)
net/ipv6/af_inet6.c:inet6_bind(struct socket *sock, struct sockaddr *uaddr, int addr_len)
net/ipv6/af_inet6.c:inet6_create(struct net *net, struct socket *sock, int protocol, int kern)
net/ipv6/af_inet6.c:inet6_destroy_sock(struct sock *sk)
net/ipv6/af_inet6.c:inet6_getname(struct socket *sock, struct sockaddr *uaddr, int peer)
net/ipv6/af_inet6.c:inet6_ioctl(struct socket *sock, unsigned int cmd, unsigned long arg)
net/ipv6/af_inet6.c:inet6_recvmsg(struct socket *sock, struct msghdr *msg, size_t size, int flags)
net/ipv6/af_inet6.c:inet6_release(struct socket *sock)
__kasan_kmalloc()
__kasan_slab_free()
kasan_cache_create()
kasan_kmalloc_large()
kasan_krealloc()
kasan_poison_kfree()
kasan_poison_shadow()
kasan_unpoison_shadow()
mm/slub.c:___slab_alloc()
mm/slub.c:__kmalloc()
mm/slub.c:__kmalloc_node()
mm/slub.c:alloc_slab_page()
mm/slub.c:allocate_slab()
mm/slub.c:kmem_cache_alloc()
new_slab_objects()
mm/slub.c:slab_alloc_node()
kmalloc_array()
kmalloc_array_node()
kmalloc_index()
kmalloc_node()
include/linux/slab.h:kmalloc_type(gfp_t flags)
mm/slub.c:kmem_cache_alloc_node_trace()
mm/slub.c:kmem_cache_alloc_trace()
krealloc_array()
check_memory_region_inline()
mm/kasan/generic.c:memory_is_poisoned(unsigned long addr, size_t size)
mm/kasan/generic.c:memory_is_poisoned_16(unsigned long addr)
mm/kasan/report.c:__kasan_report(unsigned long addr, size_t size, bool is_write, unsigned long ip)
mm/kasan/report.c:end_report(unsigned long *flags, unsigned long addr)
mm/kasan/report.c:print_address_description(void *addr, u8 tag)
func for case 5f26f85569bd179c18ce
net/tls/tls_sw.c:decrypt_internal(struct sock *sk, struct sk_buff *skb, struct iov_iter *out_iov, struct scatterlist *out_sg, struct tls_decrypt_arg *darg)
decrypt_skb()
net/tls/tls_sw.c:process_rx_list(struct tls_sw_context_rx *ctx, struct msghdr *msg, u8 *control, size_t skip, size_t len, bool zc, bool is_peek)
net/tls/tls_sw.c:tls_alloc_encrypted_msg(struct sock *sk, int len)
net/tls/tls_sw.c:tls_data_ready(struct sock *sk)
net/tls/tls_sw.c:tls_decrypt_done(struct crypto_async_request *req, int err)
net/tls/tls_sw.c:tls_do_decryption(struct sock *sk, struct sk_buff *skb, struct scatterlist *sgin, struct scatterlist *sgout, char *iv_recv, size_t data_len, struct aead_request *aead_req, struct tls_decrypt_arg *darg)
net/tls/tls_sw.c:tls_do_encryption(struct sock *sk, struct tls_context *tls_ctx, struct tls_sw_context_tx *ctx, struct aead_request *aead_req, size_t data_len, u32 start)
net/tls/tls_sw.c:tls_encrypt_done(struct crypto_async_request *req, int err)
net/tls/tls_sw.c:tls_push_record(struct sock *sk, int flags, unsigned char record_type)
tls_sw_advance_skb()
net/tls/tls_sw.c:tls_sw_recvmsg(struct sock *sk, struct msghdr *msg, size_t len, int flags, int *addr_len)
net/tls/tls_sw.c:tls_sw_release_resources_rx(struct sock *sk)
net/tls/tls_sw.c:tls_sw_release_resources_tx(struct sock *sk)
net/tls/tls_sw.c:tls_sw_sendmsg(struct sock *sk, struct msghdr *msg, size_t size)
include/linux/skmsg.h:psock_replace_prog(struct bpf_prog **pprog, struct bpf_prog *prog, struct bpf_prog *old)
include/linux/skmsg.h:sk_msg_apply_bytes(struct sk_psock *psock, u32 bytes)
include/linux/skmsg.h:sk_msg_compute_data_pointers(struct sk_msg *msg)
include/linux/skmsg.h:sk_msg_page_add(struct sk_msg *msg, struct page *page, u32 len, u32 offset)
include/linux/skmsg.h:sk_msg_sg_copy(struct sk_msg *msg, u32 i, bool copy_state)
include/linux/skmsg.h:sk_msg_xfer(struct sk_msg *dst, struct sk_msg *src, int which, u32 size)
include/linux/skmsg.h:sk_psock_cork_free(struct sk_psock *psock)
include/linux/skmsg.h:sk_psock_get()
sk_psock_restore_proto()
net/core/sock.c:__sk_destruct(struct rcu_head *head)
net/core/sock.c:__sock_wfree(struct sk_buff *skb)
net/core/sock.c:sk_alloc()
net/core/sock.c:sk_clone_lock()
net/core/sock.c:sk_common_release(struct sock *sk)
net/core/sock.c:sk_destruct(struct sock *sk)
net/core/sock.c:sk_free_unlock_clone(struct sock *sk)
net/core/sock.c:sk_init_common(struct sock *sk)
net/core/sock.c:sk_prot_alloc()
net/core/sock.c:sk_prot_free(struct proto *prot, struct sock *sk)
include/linux/skmsg.h:sk_psock_get()
net/core/sock.c:sk_setup_caps(struct sock *sk, struct dst_entry *dst)
net/core/sock.c:sock_alloc_send_pskb()
net/core/sock.c:sock_init_data(struct socket *sock, struct sock *sk)
net/core/sock.c:sock_wfree(struct sk_buff *skb)
net/ipv4/tcp_input.c:tcp_data_queue(struct sock *sk, struct sk_buff *skb)
tcp_data_ready()
net/ipv4/tcp_input.c:tcp_fin(struct sock *sk)
net/ipv4/tcp_input.c:tcp_rcv_established(struct sock *sk, struct sk_buff *skb)
net/ipv4/tcp_input.c:tcp_rcv_state_process(struct sock *sk, struct sk_buff *skb)
net/ipv4/tcp_input.c:tcp_reset(struct sock *sk, struct sk_buff *skb)
net/ipv4/tcp_input.c:tcp_urg(struct sock *sk, struct sk_buff *skb, const struct tcphdr *th)
net/ipv4/tcp_input.c:tcp_validate_incoming(struct sock *sk, struct sk_buff *skb, const struct tcphdr *th, int syn_inerr)
net/ipv4/af_inet.c:__inet_bind(struct sock *sk, struct sockaddr *uaddr, int addr_len, u32 flags)
net/ipv4/af_inet.c:__inet_stream_connect(struct socket *sock, struct sockaddr *uaddr, int addr_len, int flags, int is_sendmsg)
net/ipv4/af_inet.c:inet_bind(struct socket *sock, struct sockaddr *uaddr, int addr_len)
net/ipv4/af_inet.c:inet_create(struct net *net, struct socket *sock, int protocol, int kern)
net/ipv4/af_inet.c:inet_listen(struct socket *sock, int backlog)
net/ipv4/af_inet.c:inet_release(struct socket *sock)
net/ipv4/af_inet.c:inet_shutdown(struct socket *sock, int how)
net/ipv4/af_inet.c:inet_sock_destruct(struct sock *sk)
lib/refcount.c:refcount_dec_and_lock(refcount_t *r, spinlock_t *lock)
lib/refcount.c:refcount_dec_and_lock_irqsave(refcount_t *r, spinlock_t *lock, unsigned long *flags)
lib/refcount.c:refcount_dec_not_one(refcount_t *r)
lib/refcount.c:refcount_warn_saturate(refcount_t *r, enum refcount_saturation_type t)
include/linux/refcount.h:__refcount_add(int i, refcount_t *r, int *oldp)
include/linux/refcount.h:__refcount_add_not_zero(int i, refcount_t *r, int *oldp)
include/linux/refcount.h:__refcount_sub_and_test(int i, refcount_t *r, int *oldp)
net/ipv4/tcp_ipv4.c:tcp_v4_destroy_sock(struct sock *sk)
net/ipv4/tcp_ipv4.c:tcp_v4_do_rcv(struct sock *sk, struct sk_buff *skb)
net/ipv4/tcp_ipv4.c:tcp_v4_rcv(struct sk_buff *skb)
net/ipv4/inet_connection_sock.c:inet_child_forget(struct sock *sk, struct request_sock *req, struct sock *child)
net/ipv4/inet_connection_sock.c:inet_csk_destroy_sock(struct sock *sk)
net/ipv4/inet_connection_sock.c:inet_csk_listen_stop(struct sock *sk)
net/socket.c:__sys_setsockopt(int fd, int level, int optname, char __user *user_optval, int optlen)
net/socket.c:__sys_shutdown(int fd, int how)
net/socket.c:__sys_socket(int family, int type, int protocol)
func for case e68c89a9510c159d9684
kernel/profile.c:create_proc_profile(void)
kernel/profile.c:do_profile_hits(int type, void *__pc, unsigned int nr_hits)
kernel/profile.c:prof_cpu_mask_proc_write(struct file *file, const char __user *buffer, size_t count, loff_t *pos)
kernel/profile.c:profile_dead_cpu(unsigned int cpu)
kernel/profile.c:profile_discard_flip_buffers(void)
kernel/profile.c:profile_event_unregister(enum profile_type type, struct notifier_block *n)
kernel/profile.c:profile_flip_buffers(void)
kernel/profile.c:profile_init(void)
kernel/profile.c:profile_prepare_cpu(unsigned int cpu)
kernel/profile.c:profile_setup(char *str)
kernel/profile.c:read_profile(struct file *file, char __user *buf, size_t count, loff_t *ppos)
kernel/profile.c:write_profile(struct file *file, const char __user *buf, size_t count, loff_t *ppos)
kernel/ksysfs.c:kexec_crash_size_store(struct kobject *kobj, struct kobj_attribute *attr, const char *buf, size_t count)
kernel/ksysfs.c:ksysfs_init(void)
kernel/ksysfs.c:profiling_store(struct kobject *kobj, struct kobj_attribute *attr, const char *buf, size_t count)
kernel/ksysfs.c:uevent_helper_store(struct kobject *kobj, struct kobj_attribute *attr, const char *buf, size_t count)
lib/ubsan.c:__ubsan_handle_alignment_assumption(void *_data, unsigned long ptr, unsigned long align, unsigned long offset)
lib/ubsan.c:__ubsan_handle_divrem_overflow(void *_data, void *lhs, void *rhs)
lib/ubsan.c:__ubsan_handle_load_invalid_value(void *_data, void *val)
lib/ubsan.c:__ubsan_handle_out_of_bounds(void *_data, void *index)
lib/ubsan.c:__ubsan_handle_shift_out_of_bounds(void *_data, void *lhs, void *rhs)
lib/ubsan.c:__ubsan_handle_type_mismatch_v1(void *_data, void *ptr)
lib/ubsan.c:get_signed_val(struct type_descriptor *type, void *val)
lib/ubsan.c:handle_misaligned_access(struct type_mismatch_data_common *data, unsigned long ptr)
lib/ubsan.c:handle_null_ptr_deref(struct type_mismatch_data_common *data)
lib/ubsan.c:handle_object_size_mismatch(struct type_mismatch_data_common *data, unsigned long ptr)
lib/ubsan.c:ubsan_epilogue(void)
lib/ubsan.c:ubsan_prologue(struct source_location *loc, const char *reason)
lib/ubsan.c:ubsan_type_mismatch_common(struct type_mismatch_data_common *data, unsigned long ptr)
lib/ubsan.c:val_to_string(char *str, size_t size, struct type_descriptor *type, void *value)
fs/sysfs/file.c:sysfs_add_file_mode_ns(struct kernfs_node *parent, const struct attribute *attr, bool is_bin, umode_t mode, kuid_t uid, kgid_t gid, const void *ns)
fs/sysfs/file.c:sysfs_create_bin_file(struct kobject *kobj, const struct bin_attribute *attr)
fs/sysfs/file.c:sysfs_create_file_ns(struct kobject *kobj, const struct attribute *attr, const void *ns)
fs/sysfs/file.c:sysfs_kf_bin_write(struct kernfs_open_file *of, char *buf, size_t count, loff_t pos)
fs/sysfs/file.c:sysfs_kf_read(struct kernfs_open_file *of, char *buf, size_t count, loff_t pos)
fs/sysfs/file.c:sysfs_kf_write(struct kernfs_open_file *of, char *buf, size_t count, loff_t pos)
fs/sysfs/file.c:sysfs_notify(struct kobject *kobj, const char *dir, const char *attr)
fs/sysfs/file.c:sysfs_remove_file_from_group(struct kobject *kobj, const struct attribute *attr, const char *group)
lib/kobject.c:kobj_attr_store(struct kobject *kobj, struct attribute *attr, const char *buf, size_t count)
lib/kobject.c:kobject_add(struct kobject *kobj, struct kobject *parent, const char *fmt, ...)
lib/kobject.c:kobject_add_internal(struct kobject *kobj)
lib/kobject.c:kobject_cleanup(struct kobject *kobj)
lib/kobject.c:kobject_get()
lib/kobject.c:kobject_init(struct kobject *kobj, struct kobj_type *ktype)
lib/kobject.c:kobject_move(struct kobject *kobj, struct kobject *new_parent)
lib/kobject.c:kobject_release(struct kref *kref)
kernel/profile.c:create_proc_profile(void)
kernel/profile.c:profile_event_register(enum profile_type type, struct notifier_block *n)
kernel/profile.c:profile_event_unregister(enum profile_type type, struct notifier_block *n)
profile_hits()
kernel/profile.c:profile_init(void)
kernel/profile.c:profile_setup(char *str)
kernel/profile.c:profile_tick(int type)
kernel/ksysfs.c:profiling_store(struct kobject *kobj, struct kobj_attribute *attr, const char *buf, size_t count)
fs/kernfs/file.c:kernfs_fop_open(struct inode *inode, struct file *file)
fs/kernfs/file.c:kernfs_fop_release(struct inode *inode, struct file *filp)
kernfs_fop_write()
kernel/profile.c:profile_init(void)
func for case 7ca4b2719dc742b8d0a4
mm/memory.c:copy_nonpresent_pte(struct mm_struct *dst_mm, struct mm_struct *src_mm, pte_t *dst_pte, pte_t *src_pte, struct vm_area_struct *dst_vma, struct vm_area_struct *src_vma, unsigned long addr, int *rss)
mm/memory.c:copy_present_pte(struct vm_area_struct *dst_vma, struct vm_area_struct *src_vma, pte_t *dst_pte, pte_t *src_pte, unsigned long addr, int *rss, struct folio **prealloc)
mm/memory.c:free_p4d_range(struct mmu_gather *tlb, pgd_t *pgd, unsigned long addr, unsigned long end, unsigned long floor, unsigned long ceiling)
mm/memory.c:free_pgd_range(struct mmu_gather *tlb, unsigned long addr, unsigned long end, unsigned long floor, unsigned long ceiling)
mm/memory.c:free_pgtables(struct mmu_gather *tlb, struct ma_state *mas, struct vm_area_struct *vma, unsigned long floor, unsigned long ceiling, bool mm_wr_locked)
mm/memory.c:free_pmd_range(struct mmu_gather *tlb, pud_t *pud, unsigned long addr, unsigned long end, unsigned long floor, unsigned long ceiling)
mm/memory.c:free_pud_range(struct mmu_gather *tlb, p4d_t *p4d, unsigned long addr, unsigned long end, unsigned long floor, unsigned long ceiling)
mm/memory.c:handle_pte_fault(struct vm_fault *vmf)
mm/memory.c:unmap_page_range(struct mmu_gather *tlb, struct vm_area_struct *vma, unsigned long addr, unsigned long end, struct zap_details *details)
mm/memory.c:unmap_single_vma(struct mmu_gather *tlb, struct vm_area_struct *vma, unsigned long start_addr, unsigned long end_addr, struct zap_details *details, bool mm_wr_locked)
mm/memory.c:unmap_vmas(struct mmu_gather *tlb, struct ma_state *mas, struct vm_area_struct *vma, unsigned long start_addr, unsigned long end_addr, unsigned long tree_end, bool mm_wr_locked)
mm/memory.c:zap_p4d_range(struct mmu_gather *tlb, struct vm_area_struct *vma, pgd_t *pgd, unsigned long addr, unsigned long end, struct zap_details *details)
mm/memory.c:zap_pmd_range(struct mmu_gather *tlb, struct vm_area_struct *vma, pud_t *pud, unsigned long addr, unsigned long end, struct zap_details *details)
mm/memory.c:zap_pte_range(struct mmu_gather *tlb, struct vm_area_struct *vma, pmd_t *pmd, unsigned long addr, unsigned long end, struct zap_details *details)
mm/memory.c:zap_pud_range(struct mmu_gather *tlb, struct vm_area_struct *vma, p4d_t *p4d, unsigned long addr, unsigned long end, struct zap_details *details)
PAGEMAP_SCAN()
fs/proc/task_mmu.c:do_pagemap_scan(struct mm_struct *mm, unsigned long uarg)
fs/proc/task_mmu.c:pagemap_hugetlb_category(pte_t pte)
fs/proc/task_mmu.c:pagemap_page_category(struct pagemap_scan_private *p, struct vm_area_struct *vma, unsigned long addr, pte_t pte)
fs/proc/task_mmu.c:pagemap_read(struct file *file, char __user *buf, size_t count, loff_t *ppos)
pagemap_scan_()
fs/proc/task_mmu.c:pagemap_scan_flush_buffer(struct pagemap_scan_private *p)
fs/proc/task_mmu.c:pagemap_scan_get_args(struct pm_scan_arg *arg, unsigned long uarg)
fs/proc/task_mmu.c:pagemap_scan_hugetlb_entry(pte_t *ptep, unsigned long hmask, unsigned long start, unsigned long end, struct mm_walk *walk)
fs/proc/task_mmu.c:pagemap_scan_init_bounce_buffer(struct pagemap_scan_private *p)
fs/proc/task_mmu.c:pagemap_scan_output(unsigned long categories, struct pagemap_scan_private *p, unsigned long addr, unsigned long *end)
fs/proc/task_mmu.c:pagemap_scan_pmd_entry(pmd_t *pmd, unsigned long start, unsigned long end, struct mm_walk *walk)
fs/proc/task_mmu.c:pagemap_scan_pte_hole(unsigned long addr, unsigned long end, int depth, struct mm_walk *walk)
fs/proc/task_mmu.c:pagemap_scan_push_range(unsigned long categories, struct pagemap_scan_private *p, unsigned long addr, unsigned long end)
fs/proc/task_mmu.c:pagemap_scan_test_walk(unsigned long start, unsigned long end, struct mm_walk *walk)
fs/proc/task_mmu.c:pagemap_scan_thp_entry(pmd_t *pmd, unsigned long start, unsigned long end, struct mm_walk *walk)
fs/proc/task_mmu.c:pagemap_thp_category(struct pagemap_scan_private *p, struct vm_area_struct *vma, unsigned long addr, pmd_t pmd)
mm/memory.c:unmap_page_range(struct mmu_gather *tlb, struct vm_area_struct *vma, unsigned long addr, unsigned long end, struct zap_details *details)
mm/memory.c:zap_pte_range(struct mmu_gather *tlb, struct vm_area_struct *vma, pmd_t *pmd, unsigned long addr, unsigned long end, struct zap_details *details)
fs/proc/generic.c:__proc_create()
fs/proc/generic.c:pde_free(struct proc_dir_entry *pde)
fs/proc/generic.c:proc_alloc_inum(unsigned int *inum)
fs/proc/generic.c:proc_create_data()
fs/proc/generic.c:proc_create_mount_point()
fs/proc/generic.c:proc_create_reg()
fs/proc/generic.c:proc_create_seq_private()
fs/proc/generic.c:proc_create_single_data()
fs/proc/generic.c:proc_getattr(struct mnt_idmap *idmap, const struct path *path, struct kstat *stat, u32 request_mask, unsigned int query_flags)
proc_mkdir_data()
fs/proc/generic.c:proc_notify_change(struct mnt_idmap *idmap, struct dentry *dentry, struct iattr *iattr)
fs/proc/generic.c:proc_register()
fs/proc/generic.c:proc_symlink()
fs/proc/generic.c:remove_proc_entry(const char *name, struct proc_dir_entry *parent)
fs/proc/generic.c:remove_proc_subtree(const char *name, struct proc_dir_entry *parent)
fs/proc/base.c:dname_to_vma_addr(struct dentry *dentry, unsigned long *start, unsigned long *end)
fs/proc/base.c:has_pid_permissions(struct proc_fs_info *fs_info, struct task_struct *task, enum proc_hidepid hide_pid_min)
map_files()
fs/proc/base.c:map_files_get_link(struct dentry *dentry, struct path *path)
fs/proc/base.c:proc_map_files_instantiate()
fs/proc/base.c:proc_map_files_lookup()
fs/proc/base.c:proc_map_files_readdir(struct file *file, struct dir_context *ctx)
fs/proc/base.c:proc_pid_make_inode()
fs/proc/base.c:proc_pid_permission(struct mnt_idmap *idmap, struct inode *inode, int mask)
__do_munmap()
__vma_adjust()
detach_vmas_to_be_unmapped()
mm/mmap.c:exit_mmap(struct mm_struct *mm)
remove_vma_list()
mm/mmap.c:unmap_region(struct mm_struct *mm, struct ma_state *mas, struct vm_area_struct *vma, struct vm_area_struct *prev, struct vm_area_struct *next, unsigned long start, unsigned long end, unsigned long tree_end, bool mm_wr_locked)
mm/mmap.c:vma_link(struct mm_struct *mm, struct vm_area_struct *vma)
mm/mmap.c:vma_merge()
kernel/fork.c:__mmput(struct mm_struct *mm)
kernel/fork.c:copy_mm(unsigned long clone_flags, struct task_struct *tsk)
kernel/fork.c:dup_mm()
kernel/fork.c:dup_mmap(struct mm_struct *mm, struct mm_struct *oldmm)
kernel/fork.c:mm_alloc()
kernel/fork.c:mm_init()
kernel/fork.c:mm_release(struct task_struct *tsk, struct mm_struct *mm)
kernel/exit.c:__exit_signal(struct task_struct *tsk)
kernel/exit.c:__unhash_process(struct task_struct *p, bool group_dead)
kernel/exit.c:do_exit(long code)
kernel/exit.c:do_group_exit(int exit_code)
kernel/exit.c:exit_mm(void)
kernel/exit.c:exit_notify(struct task_struct *tsk, int group_dead)
kernel/exit.c:find_new_reaper()
kernel/exit.c:release_task(struct task_struct *p)
mm/mmap.c:vm_unmapped_area(struct vm_unmapped_area_info *info)
include/linux/mm.h:vma_init(struct vm_area_struct *vma, struct mm_struct *mm)
include/linux/mm.h:vmf_insert_page(struct vm_area_struct *vma, unsigned long addr, struct page *page)
PAGEMAP_SCAN()
mm/memory.c:unmap_page_range(struct mmu_gather *tlb, struct vm_area_struct *vma, unsigned long addr, unsigned long end, struct zap_details *details)
mm/memory.c:zap_pte_range(struct mmu_gather *tlb, struct vm_area_struct *vma, pmd_t *pmd, unsigned long addr, unsigned long end, struct zap_details *details)
mm/page_alloc.c:alloc_pages_exact()
mm/page_alloc.c:free_pages_exact(void *virt, size_t size)
mm/page_alloc.c:free_the_page(struct page *page, unsigned int order)
func for case 6d31bf169a8265204b8d
drivers/media/rc/mceusb.c:mce_write(struct mceusb_dev *ir, u8 *data, int size)
drivers/media/rc/mceusb.c:mceusb_cmd_datasize(u8 cmd, u8 subcmd)
drivers/media/rc/mceusb.c:mceusb_dev_printdata(struct mceusb_dev *ir, u8 *buf, int buf_len, int offset, int len, bool out)
drivers/media/rc/mceusb.c:mceusb_dev_recv(struct urb *urb)
drivers/media/rc/mceusb.c:mceusb_gen1_init(struct mceusb_dev *ir)
drivers/media/rc/mceusb.c:mceusb_gen2_init(struct mceusb_dev *ir)
drivers/media/rc/mceusb.c:mceusb_get_parameters(struct mceusb_dev *ir)
drivers/media/rc/mceusb.c:mceusb_handle_command(struct mceusb_dev *ir, u8 *buf_in)
drivers/media/rc/mceusb.c:mceusb_process_ir_data(struct mceusb_dev *ir, int buf_len)
drivers/media/rc/mceusb.c:mceusb_set_rx_carrier_report(struct rc_dev *dev, int enable)
drivers/media/rc/mceusb.c:mceusb_set_rx_wideband(struct rc_dev *dev, int enable)
drivers/media/rc/mceusb.c:mceusb_set_timeout(struct rc_dev *dev, unsigned int timeout)
drivers/media/rc/mceusb.c:mceusb_set_tx_carrier(struct rc_dev *dev, u32 carrier)
drivers/media/rc/mceusb.c:mceusb_set_tx_mask(struct rc_dev *dev, u32 mask)
drivers/media/rc/mceusb.c:mceusb_tx_ir(struct rc_dev *dev, unsigned *txbuf, unsigned count)
drivers/usb/core/hcd.c:__usb_hcd_giveback_urb(struct urb *urb)
drivers/usb/core/hcd.c:hcd_alloc_coherent(struct usb_bus *bus, gfp_t mem_flags, dma_addr_t *dma_handle, void **vaddr_handle, size_t size, enum dma_data_direction dir)
drivers/usb/core/hcd.c:hcd_free_coherent(struct usb_bus *bus, dma_addr_t *dma_handle, void **vaddr_handle, size_t size, enum dma_data_direction dir)
drivers/usb/core/hcd.c:usb_alloc_streams(struct usb_interface *interface, struct usb_host_endpoint **eps, unsigned int num_eps, unsigned int num_streams, gfp_t mem_flags)
drivers/usb/core/hcd.c:usb_free_streams(struct usb_interface *interface, struct usb_host_endpoint **eps, unsigned int num_eps, gfp_t mem_flags)
drivers/usb/core/hcd.c:usb_hcd_check_unlink_urb(struct usb_hcd *hcd, struct urb *urb, int status)
drivers/usb/core/hcd.c:usb_hcd_disable_endpoint(struct usb_device *udev, struct usb_host_endpoint *ep)
drivers/usb/core/hcd.c:usb_hcd_flush_endpoint(struct usb_device *udev, struct usb_host_endpoint *ep)
drivers/usb/core/hcd.c:usb_hcd_giveback_urb(struct usb_hcd *hcd, struct urb *urb, int status)
drivers/usb/core/hcd.c:usb_hcd_link_urb_to_ep(struct usb_hcd *hcd, struct urb *urb)
drivers/usb/core/hcd.c:usb_hcd_map_urb_for_dma(struct usb_hcd *hcd, struct urb *urb, gfp_t mem_flags)
drivers/usb/core/hcd.c:usb_hcd_reset_endpoint(struct usb_device *udev, struct usb_host_endpoint *ep)
drivers/usb/core/hcd.c:usb_hcd_submit_urb(struct urb *urb, gfp_t mem_flags)
drivers/usb/core/hcd.c:usb_hcd_unlink_urb(struct urb *urb, int status)
drivers/usb/core/hcd.c:usb_hcd_unmap_urb_for_dma(struct usb_hcd *hcd, struct urb *urb)
drivers/usb/core/urb.c:usb_alloc_urb()
drivers/usb/core/urb.c:usb_anchor_urb(struct urb *urb, struct usb_anchor *anchor)
drivers/usb/core/urb.c:usb_init_urb(struct urb *urb)
drivers/usb/core/urb.c:usb_kill_urb(struct urb *urb)
drivers/usb/core/urb.c:usb_poison_urb(struct urb *urb)
drivers/usb/core/urb.c:usb_submit_urb(struct urb *urb, gfp_t mem_flags)
drivers/usb/core/urb.c:usb_unanchor_urb(struct urb *urb)
drivers/usb/core/urb.c:usb_unlink_urb(struct urb *urb)
lib/ubsan.c:__ubsan_handle_shift_out_of_bounds(void *_data, void *lhs, void *rhs)
lib/ubsan.c:get_signed_val(struct type_descriptor *type, void *val)
lib/ubsan.c:handle_overflow(struct overflow_data *data, void *lhs, void *rhs, char op)
lib/ubsan.c:ubsan_epilogue(void)
lib/ubsan.c:ubsan_prologue(struct source_location *loc, const char *reason)
lib/ubsan.c:val_to_string(char *str, size_t size, struct type_descriptor *type, void *value)
include/linux/usb.h:init_usb_anchor(struct usb_anchor *anchor)
include/linux/usb.h:usb_fill_control_urb(struct urb *urb, struct usb_device *dev, unsigned int pipe, unsigned char *setup_packet, void *transfer_buffer, int buffer_length, usb_complete_t complete_fn, void *context)
include/linux/usb.h:usb_fill_int_urb(struct urb *urb, struct usb_device *dev, unsigned int pipe, void *transfer_buffer, int buffer_length, usb_complete_t complete_fn, void *context, int interval)
include/linux/usb.h:usb_make_path(struct usb_device *dev, char *buf, size_t size)
include/linux/usb.h:usb_maxpacket(struct usb_device *udev, int pipe, int is_out)
drivers/usb/core/hcd.c:__usb_hcd_giveback_urb(struct urb *urb)
kernel/time/timer.c:call_timer_fn(struct timer_list *timer, void (*fn)(struct timer_list *), unsigned long baseclk)
drivers/usb/gadget/udc/dummy_hcd.c:dummy_timer(struct timer_list *t)
kernel/time/timer.c:expire_timers(struct timer_base *base, struct hlist_head *head)
drivers/media/rc/mceusb.c:mceusb_dev_printdata(struct mceusb_dev *ir, u8 *buf, int buf_len, int offset, int len, bool out)
drivers/media/rc/mceusb.c:mceusb_dev_recv(struct urb *urb)
drivers/media/rc/mceusb.c:mceusb_process_ir_data(struct mceusb_dev *ir, int buf_len)
drivers/usb/core/hcd.c:usb_hcd_giveback_urb(struct usb_hcd *hcd, struct urb *urb, int status)
drivers/usb/gadget/udc/dummy_hcd.c:dummy_timer(struct timer_list *t)
drivers/usb/gadget/udc/dummy_hcd.c:dummy_urb_dequeue(struct usb_hcd *hcd, struct urb *urb, int status)
drivers/usb/gadget/udc/dummy_hcd.c:dummy_urb_enqueue(struct usb_hcd *hcd, struct urb *urb, gfp_t mem_flags)
kernel/time/timer.c:__run_timers(struct timer_base *base)
kernel/time/timer.c:expire_timers(struct timer_base *base, struct hlist_head *head)
kernel/time/timer.c:run_timer_softirq(struct softirq_action *h)
kernel/softirq.c:__irq_exit_rcu(void)
kernel/softirq.c:invoke_softirq(void)
kernel/softirq.c:irq_exit(void)
func for case 60df062e1c41940cae0f
drivers/base/component.c:__component_match_add(struct device *master, struct component_match **matchptr, void (*release)(struct device *, void *), int (*compare)(struct device *, void *), int (*compare_typed)(struct device *, int, void *), void *compare_data)
drivers/base/component.c:component_bind(struct component *component, struct master *master, void *data)
drivers/base/component.c:component_bind_all(struct device *parent, void *data)
drivers/base/component.c:component_del(struct device *dev, const struct component_ops *ops)
drivers/base/component.c:component_master_add_with_match(struct device *parent, const struct component_master_ops *ops, struct component_match *match)
drivers/base/component.c:component_match_realloc(struct component_match *match, size_t num)
drivers/base/component.c:component_unbind_all(struct device *parent, void *data)
drivers/base/component.c:find_component()
drivers/base/component.c:find_components(struct master *master)
drivers/base/component.c:free_master(struct master *master)
drivers/base/component.c:remove_component(struct master *master, struct component *c)
drivers/base/component.c:try_to_bring_up_master(struct master *master, struct component *component)
drivers/base/component.c:try_to_bring_up_masters(struct component *component)
drivers/usb/core/hub.c:hub_activate(struct usb_hub *hub, enum hub_activation_type type)
drivers/usb/core/hub.c:hub_configure(struct usb_hub *hub, struct usb_endpoint_descriptor *endpoint)
drivers/usb/core/hub.c:hub_disconnect(struct usb_interface *intf)
drivers/usb/core/hub.c:hub_free_dev(struct usb_device *udev)
drivers/usb/core/hub.c:hub_port_connect(struct usb_hub *hub, int port1, u16 portstatus, u16 portchange)
drivers/usb/core/hub.c:hub_port_disable(struct usb_hub *hub, int port1, int set_state)
drivers/usb/core/hub.c:hub_port_init(struct usb_hub *hub, struct usb_device *udev, int port1, int retry_counter)
drivers/usb/core/hub.c:hub_port_logical_disconnect(struct usb_hub *hub, int port1)
drivers/usb/core/hub.c:hub_port_reset(struct usb_hub *hub, int port1, struct usb_device *udev, unsigned int delay, bool warm)
drivers/usb/core/hub.c:hub_port_wait_reset(struct usb_hub *hub, int port1, struct usb_device *udev, unsigned int delay, bool warm)
drivers/usb/core/hub.c:hub_quiesce(struct usb_hub *hub, enum hub_quiescing_type type)
drivers/usb/core/hub.c:usb_disconnect(struct usb_device **pdev)
drivers/usb/core/hub.c:usb_enumerate_device(struct usb_device *udev)
drivers/usb/core/hub.c:usb_new_device(struct usb_device *udev)
drivers/usb/core/hub.c:usb_set_device_state(struct usb_device *udev, enum usb_device_state new_state)
drivers/usb/core/port.c:connect_type_show(struct device *dev, struct device_attribute *attr, char *buf)
drivers/usb/core/port.c:find_and_link_peer(struct usb_hub *hub, int port1)
drivers/usb/core/port.c:link_peers(struct usb_port *left, struct usb_port *right)
drivers/usb/core/port.c:link_peers_report(struct usb_port *left, struct usb_port *right)
drivers/usb/core/port.c:match_location(struct usb_device *peer_hdev, void *p)
drivers/usb/core/port.c:unlink_peers(struct usb_port *left, struct usb_port *right)
drivers/usb/core/port.c:usb3_lpm_permit_show(struct device *dev, struct device_attribute *attr, char *buf)
drivers/usb/core/port.c:usb3_lpm_permit_store(struct device *dev, struct device_attribute *attr, const char *buf, size_t count)
drivers/usb/core/port.c:usb_hub_create_port_device(struct usb_hub *hub, int port1)
drivers/usb/core/port.c:usb_hub_remove_port_device(struct usb_hub *hub, int port1)
drivers/usb/core/port.c:usb_port_runtime_resume(struct device *dev)
drivers/usb/core/port.c:usb_port_runtime_suspend(struct device *dev)
drivers/usb/core/devio.c:proc_claim_port(struct usb_dev_state *ps, void __user *arg)
drivers/usb/core/devio.c:proc_connectinfo(struct usb_dev_state *ps, void __user *arg)
drivers/usb/core/devio.c:proc_disconnect_claim(struct usb_dev_state *ps, void __user *arg)
drivers/usb/core/devio.c:proc_ioctl(struct usb_dev_state *ps, struct usbdevfs_ioctl *ctl)
drivers/usb/core/devio.c:proc_ioctl_default(struct usb_dev_state *ps, void __user *arg)
drivers/usb/core/devio.c:proc_releaseinterface(struct usb_dev_state *ps, void __user *arg)
drivers/usb/core/devio.c:usbdev_do_ioctl(struct file *file, unsigned int cmd, void __user *p)
drivers/usb/core/devio.c:usbdev_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
drivers/base/dd.c:__device_release_driver(struct device *dev, struct device *parent)
drivers/base/dd.c:__driver_probe_device(struct device_driver *drv, struct device *dev)
drivers/base/dd.c:device_release_driver(struct device *dev)
drivers/base/dd.c:device_release_driver_internal(struct device *dev, struct device_driver *drv, struct device *parent)
drivers/base/dd.c:driver_bound(struct device *dev)
drivers/base/dd.c:driver_probe_device(struct device_driver *drv, struct device *dev)
drivers/base/dd.c:driver_sysfs_remove(struct device *dev)
drivers/base/dd.c:really_probe(struct device *dev, struct device_driver *drv)
drivers/usb/core/driver.c:usb_driver_claim_interface(struct usb_driver *driver, struct usb_interface *iface, void *data)
drivers/usb/core/driver.c:usb_driver_release_interface(struct usb_driver *driver, struct usb_interface *iface)
drivers/usb/core/driver.c:usb_forced_unbind_intf(struct usb_interface *intf)
drivers/usb/core/driver.c:usb_match_device(struct usb_device *dev, const struct usb_device_id *id)
drivers/usb/core/driver.c:usb_match_one_id(struct usb_interface *interface, const struct usb_device_id *id)
drivers/usb/core/driver.c:usb_probe_interface(struct device *dev)
drivers/usb/core/driver.c:usb_unbind_device(struct device *dev)
drivers/usb/core/driver.c:usb_unbind_interface(struct device *dev)
drivers/usb/core/usb.c:usb_alloc_dev()
drivers/usb/core/usb.c:usb_dev_authorized(struct usb_device *dev, struct usb_hcd *hcd)
drivers/usb/core/usb.c:usb_find_common_endpoints(struct usb_host_interface *alt, struct usb_endpoint_descriptor **bulk_in, struct usb_endpoint_descriptor **bulk_out, struct usb_endpoint_descriptor **int_in, struct usb_endpoint_descriptor **int_out)
drivers/usb/core/usb.c:usb_find_common_endpoints_reverse(struct usb_host_interface *alt, struct usb_endpoint_descriptor **bulk_in, struct usb_endpoint_descriptor **bulk_out, struct usb_endpoint_descriptor **int_in, struct usb_endpoint_descriptor **int_out)
drivers/usb/core/usb.c:usb_find_interface()
drivers/usb/core/usb.c:usb_ifnum_to_if()
drivers/usb/core/usb.c:usb_lock_device_for_reset(struct usb_device *udev, const struct usb_interface *iface)
drivers/usb/core/usb.c:usb_release_dev(struct device *dev)
__x64_sys_ioctl()
fs/ioctl.c:do_vfs_ioctl(struct file *filp, unsigned int fd, unsigned int cmd, unsigned long arg)
fs/ioctl.c:ioctl_fiemap(struct file *filp, struct fiemap __user *ufiemap)
ksys_ioctl()
drivers/usb/core/port.c:usb_hub_remove_port_device(struct usb_hub *hub, int port1)
drivers/base/core.c:device_del(struct device *dev)
drivers/base/core.c:device_links_purge(struct device *dev)
drivers/base/core.c:device_links_unbind_consumers(struct device *dev)
func for case a532b03fdfee2c137666
drivers/scsi/sg.c:sg_add_request()
drivers/scsi/sg.c:sg_build_indirect(Sg_scatter_hold * schp, Sg_fd * sfp, int buff_size)
drivers/scsi/sg.c:sg_build_reserve(Sg_fd * sfp, int req_size)
drivers/scsi/sg.c:sg_common_write(Sg_fd * sfp, Sg_request * srp, unsigned char *cmnd, int timeout, int blocking)
drivers/scsi/sg.c:sg_finish_rem_req(Sg_request *srp)
drivers/scsi/sg.c:sg_ioctl_common(struct file *filp, Sg_device *sdp, Sg_fd *sfp, unsigned int cmd_in, void __user *p)
drivers/scsi/sg.c:sg_link_reserve(Sg_fd * sfp, Sg_request * srp, int size)
drivers/scsi/sg.c:sg_mmap(struct file *filp, struct vm_area_struct *vma)
drivers/scsi/sg.c:sg_new_write(Sg_fd *sfp, struct file *file, const char __user *buf, size_t count, int blocking, int read_only, int sg_io_owned, Sg_request **o_srp)
drivers/scsi/sg.c:sg_read_oxfer(Sg_request * srp, char __user *outp, int num_read_xfer)
drivers/scsi/sg.c:sg_remove_request(Sg_fd * sfp, Sg_request * srp)
drivers/scsi/sg.c:sg_remove_scat(Sg_fd * sfp, Sg_scatter_hold * schp)
drivers/scsi/sg.c:sg_rq_end_io(struct request *rq, blk_status_t status)
drivers/scsi/sg.c:sg_start_req(Sg_request *srp, unsigned char *cmd)
drivers/scsi/sg.c:sg_unlink_reserve(Sg_fd * sfp, Sg_request * srp)
lib/iov_iter.c:__iov_iter_get_pages_alloc(struct iov_iter *i, struct page ***pages, size_t maxsize, unsigned int maxpages, size_t *start)
lib/iov_iter.c:_copy_from_iter(void *addr, size_t bytes, struct iov_iter *i)
lib/iov_iter.c:copy_from_user_iter(void __user *iter_from, size_t progress, size_t len, void *to, void *priv2)
lib/iov_iter.c:copy_page_from_iter(struct page *page, size_t offset, size_t bytes, struct iov_iter *i)
lib/iov_iter.c:copy_page_from_iter_atomic(struct page *page, size_t offset, size_t bytes, struct iov_iter *i)
lib/iov_iter.c:fault_in_iov_iter_readable(const struct iov_iter *i, size_t size)
lib/iov_iter.c:fault_in_iov_iter_writeable(const struct iov_iter *i, size_t size)
lib/iov_iter.c:iov_iter_advance(struct iov_iter *i, size_t size)
lib/iov_iter.c:iov_iter_extract_bvec_pages(struct iov_iter *i, struct page ***pages, size_t maxsize, unsigned int maxpages, iov_iter_extraction_t extraction_flags, size_t *offset0)
lib/iov_iter.c:iov_iter_extract_kvec_pages(struct iov_iter *i, struct page ***pages, size_t maxsize, unsigned int maxpages, iov_iter_extraction_t extraction_flags, size_t *offset0)
lib/iov_iter.c:iov_iter_extract_pages(struct iov_iter *i, struct page ***pages, size_t maxsize, unsigned int maxpages, iov_iter_extraction_t extraction_flags, size_t *offset0)
lib/iov_iter.c:iov_iter_extract_user_pages(struct iov_iter *i, struct page ***pages, size_t maxsize, unsigned int maxpages, iov_iter_extraction_t extraction_flags, size_t *offset0)
lib/iov_iter.c:iov_iter_init(struct iov_iter *i, unsigned int direction, const struct iovec *iov, unsigned long nr_segs, size_t count)
lib/iov_iter.c:iov_iter_revert(struct iov_iter *i, size_t unroll)
lib/iov_iter.c:iter_xarray_get_pages(struct iov_iter *i, struct page ***pages, size_t maxsize, unsigned maxpages, size_t *_start_offset)
block/blk-map.c:bio_alloc_map_data()
block/blk-map.c:bio_copy_kern()
block/blk-map.c:bio_copy_to_iter(struct bio *bio, struct iov_iter iter)
block/blk-map.c:bio_copy_user_iov(struct request *rq, struct rq_map_data *map_data, struct iov_iter *iter, gfp_t gfp_mask)
block/blk-map.c:bio_invalidate_vmalloc_pages(struct bio *bio)
block/blk-map.c:bio_map_kern()
block/blk-map.c:bio_map_user_iov(struct request *rq, struct iov_iter *iter, gfp_t gfp_mask)
block/blk-map.c:bio_uncopy_user(struct bio *bio)
block/blk-map.c:blk_rq_append_bio(struct request *rq, struct bio *bio)
block/blk-map.c:blk_rq_map_bio_alloc()
block/blk-map.c:blk_rq_map_kern(struct request_queue *q, struct request *rq, void *kbuf, unsigned int len, gfp_t gfp_mask)
block/blk-map.c:blk_rq_map_user_bvec(struct request *rq, const struct iov_iter *iter)
block/blk-map.c:blk_rq_map_user_io(struct request *req, struct rq_map_data *map_data, void __user *ubuf, unsigned long buf_len, gfp_t gfp_mask, bool vec, int iov_count, bool check_iter_count, int rw)
block/blk-map.c:blk_rq_map_user_iov(struct request_queue *q, struct request *rq, struct rq_map_data *map_data, const struct iov_iter *iter, gfp_t gfp_mask)
block/blk-map.c:blk_rq_unmap_user(struct bio *bio)
include/linux/uaccess.h:__copy_from_user(void *to, const void __user *from, unsigned long n)
include/linux/uaccess.h:__copy_from_user_inatomic(void *to, const void __user *from, unsigned long n)
include/linux/uaccess.h:__copy_to_user(void __user *to, const void *from, unsigned long n)
include/linux/uaccess.h:__copy_to_user_inatomic(void __user *to, const void *from, unsigned long n)
include/linux/uaccess.h:_copy_from_user(void *to, const void __user *from, unsigned long n)
include/linux/uaccess.h:_copy_to_user(void __user *to, const void *from, unsigned long n)
include/linux/uaccess.h:copy_struct_from_user(void *dst, size_t ksize, const void __user *src, size_t usize)
include/linux/iov_iter.h:iterate_and_advance2(struct iov_iter *iter, size_t len, void *priv, void *priv2, iov_ustep_f ustep, iov_step_f step)
include/linux/iov_iter.h:iterate_bvec(struct iov_iter *iter, size_t len, void *priv, void *priv2, iov_step_f step)
include/linux/iov_iter.h:iterate_iovec(struct iov_iter *iter, size_t len, void *priv, void *priv2, iov_ustep_f step)
include/linux/iov_iter.h:iterate_kvec(struct iov_iter *iter, size_t len, void *priv, void *priv2, iov_step_f step)
include/linux/iov_iter.h:iterate_xarray(struct iov_iter *iter, size_t len, void *priv, void *priv2, iov_step_f step)
block/blk-map.c:bio_copy_from_iter(struct bio *bio, struct iov_iter *iter)
include/linux/blk_types.h:bio_issue_init(struct bio_issue *issue, sector_t size)
include/linux/blk_types.h:blk_path_error(blk_status_t error)
block/blk-map.c:blk_rq_map_user_iov(struct request_queue *q, struct request *rq, struct rq_map_data *map_data, const struct iov_iter *iter, gfp_t gfp_mask)
blk_types()
iov_iter()
include/linux/scatterlist.h:__sg_chain(struct scatterlist *chain_sg, struct scatterlist *sgl)
lib/iov_iter.c:_copy_from_iter(void *addr, size_t bytes, struct iov_iter *i)
include/linux/scatterlist.h:sg_assign_page(struct scatterlist *sg, struct page *page)
include/linux/scatterlist.h:sg_mark_end(struct scatterlist *sg)
fs/ioctl.c:do_vfs_ioctl(struct file *filp, unsigned int fd, unsigned int cmd, unsigned long arg)
fs/ioctl.c:file_ioctl(struct file *filp, unsigned int cmd, int __user *p)
lib/iov_iter.c:_copy_from_iter(void *addr, size_t bytes, struct iov_iter *i)
iov_iter()
drivers/scsi/sg.c:sg_common_write(Sg_fd * sfp, Sg_request * srp, unsigned char *cmnd, int timeout, int blocking)
drivers/scsi/sg.c:sg_new_write(Sg_fd *sfp, struct file *file, const char __user *buf, size_t count, int blocking, int read_only, int sg_io_owned, Sg_request **o_srp)
func for case 2ee18845e89ae76342c5
lib/maple_tree.c:mas_root_expand(aple_node *node; void __rcu **slot)
lib/maple_tree.c:mas_start()
lib/maple_tree.c:mas_store_root(if (((unsigned long) (entry) & 3))
lib/maple_tree.c:mas_walk()
lib/maple_tree.c:mas_wr_bnode(et(&b_node, 0, sizeof(struct)
lib/maple_tree.c:mas_wr_end_piv()) wr_mas->end_piv = wr_ma)
lib/maple_tree.c:mas_wr_extend_null(->offset_end]) mas->last =)
lib/maple_tree.c:mas_wr_modify(Direct replacement */ if (w)
lib/maple_tree.c:mas_wr_node_store(gned char dst_offset; unsig)
lib/maple_tree.c:mas_wr_node_walk(g index, min, max; if (unl)
lib/maple_tree.c:mas_wr_slot_store(set = mas->offset; if ((wr)
lib/maple_tree.c:mas_wr_spanning_store(ed char height; /* Left an)
lib/maple_tree.c:mas_wr_store_entry()
lib/maple_tree.c:mas_wr_store_setup(->mas)) { if (mas_is_none()
lib/maple_tree.c:mas_wr_walk(kely(mas_is_span_wr(wr_mas)))
mm/ksm.c:__stable_node_chain()
mm/ksm.c:alloc_stable_node_chain()
mm/ksm.c:remove_all_stable_nodes(void)
mm/ksm.c:remove_node_from_stable_tree(struct ksm_stable_node *stable_node)
mm/ksm.c:remove_stable_node(struct ksm_stable_node *stable_node)
mm/ksm.c:remove_stable_node_chain(struct ksm_stable_node *stable_node, struct rb_root *root)
mm/ksm.c:run_store(struct kobject *kobj, struct kobj_attribute *attr, const char *buf, size_t count)
mm/ksm.c:stable_node_chain_remove_range(struct ksm_stable_node *stable_node, unsigned long start_pfn, unsigned long end_pfn, struct rb_root *root)
mm/ksm.c:stable_node_dup()
mm/ksm.c:stable_node_dup_any()
mm/ksm.c:stable_node_dup_remove_range(struct ksm_stable_node *stable_node, unsigned long start_pfn, unsigned long end_pfn)
mm/ksm.c:stable_tree_append(struct ksm_rmap_item *rmap_item, struct ksm_stable_node *stable_node, bool max_page_sharing_bypass)
mm/ksm.c:stable_tree_insert()
mm/ksm.c:stable_tree_search()
mm/ksm.c:unmerge_and_remove_all_rmap_items(void)
include/linux/mm.h:find_exact_vma()
include/linux/mm.h:folio_maybe_dma_pinned(struct folio *folio)
include/linux/mm.h:is_longterm_pinnable_page(struct page *page)
include/linux/mm.h:page_needs_cow_for_dma(struct vm_area_struct *vma, struct page *page)
include/linux/mm.h:put_devmap_managed_page_refs(struct page *page, int refs)
include/linux/mm.h:put_page(struct page *page)
include/linux/mm.h:try_get_page(struct page *page)
include/linux/mm.h:vm_end_gap(struct vm_area_struct *vma)
include/linux/mm.h:vm_start_gap(struct vm_area_struct *vma)
include/linux/mm.h:vma_init(struct vm_area_struct *vma, struct mm_struct *mm)
include/linux/mm.h:vma_is_foreign(struct vm_area_struct *vma)
include/linux/mm.h:vma_is_temporary_stack(struct vm_area_struct *vma)
include/linux/mm.h:vma_iter_bulk_store(struct vma_iterator *vmi, struct vm_area_struct *vma)
include/linux/mm.h:vma_next()
include/linux/mm.h:vma_wants_manual_pte_write_upgrade(struct vm_area_struct *vma)
include/linux/rcupdate.h:rcu_head_after_call_rcu(struct rcu_head *rhp, rcu_callback_t f)
include/linux/rcupdate.h:rcu_read_lock(void)
include/linux/rcupdate.h:rcu_read_lock_bh(void)
include/linux/rcupdate.h:rcu_read_lock_sched(void)
include/linux/rcupdate.h:rcu_read_unlock(void)
kernel/locking/lockdep.c:check_irq_usage(struct task_struct *curr, struct held_lock *prev, struct held_lock *next)
kernel/locking/lockdep.c:lockdep_hardirqs_off(unsigned long ip)
kernel/locking/lockdep.c:lockdep_hardirqs_on(unsigned long ip)
kernel/locking/lockdep.c:lockdep_rcu_suspicious(const char *file, const int line, const char *s)
kernel/locking/lockdep.c:lockdep_softirqs_off(unsigned long ip)
kernel/locking/lockdep.c:lockdep_softirqs_on(unsigned long ip)
kernel/locking/lockdep.c:mark_usage(struct task_struct *curr, struct held_lock *hlock, int check)
kernel/locking/lockdep.c:print_irqtrace_events(struct task_struct *curr)
include/linux/mmap_lock.h:mmap_read_lock_killable(struct mm_struct *mm)
mmap_read_trylock_non_owner()
include/linux/mmap_lock.h:mmap_write_lock_killable(struct mm_struct *mm)
include/linux/mmap_lock.h:mmap_write_trylock(struct mm_struct *mm)
fs/kernfs/file.c:kernfs_fop_mmap(struct file *file, struct vm_area_struct *vma)
fs/kernfs/file.c:kernfs_fop_open(struct inode *inode, struct file *file)
fs/kernfs/file.c:kernfs_fop_release(struct inode *inode, struct file *filp)
kernfs_fop_write()
fs/kernfs/file.c:kernfs_fop_write_iter(struct kiocb *iocb, struct iov_iter *iter)
fs/kernfs/file.c:kernfs_vma_fault(struct vm_fault *vmf)
fs/kernfs/file.c:kernfs_vma_open(struct vm_area_struct *vma)
fs/kernfs/file.c:kernfs_vma_page_mkwrite(struct vm_fault *vmf)
fs/sysfs/file.c:sysfs_kf_bin_write(struct kernfs_open_file *of, char *buf, size_t count, loff_t pos)
fs/sysfs/file.c:sysfs_kf_read(struct kernfs_open_file *of, char *buf, size_t count, loff_t pos)
fs/sysfs/file.c:sysfs_kf_write(struct kernfs_open_file *of, char *buf, size_t count, loff_t pos)
lib/kobject.c:kobj_attr_store(struct kobject *kobj, struct attribute *attr, const char *buf, size_t count)
lib/kobject.c:kobject_add(struct kobject *kobj, struct kobject *parent, const char *fmt, ...)
lib/kobject.c:kobject_init(struct kobject *kobj, const struct kobj_type *ktype)
fs/read_write.c:ksys_write(unsigned int fd, const char __user *buf, size_t count)
fs/read_write.c:new_sync_write(struct file *filp, const char __user *buf, size_t len, loff_t *ppos)
fs/read_write.c:vfs_write(struct file *file, const char __user *buf, size_t count, loff_t *pos)
func for case 011e4ea1da6692cf881c
fs/pipe.c:__do_pipe_flags(int *fd, struct file **files, int flags)
__pipe_lock()
fs/pipe.c:alloc_pipe_info()
fs/pipe.c:create_pipe_files(struct file **res, int flags)
fs/pipe.c:do_pipe_flags(int *fd, int flags)
fs/pipe.c:free_pipe_info(struct pipe_inode_info *pipe)
fs/pipe.c:pipe_double_lock(struct pipe_inode_info *pipe1, struct pipe_inode_info *pipe2)
fs/pipe.c:pipe_fasync(int fd, struct file *filp, int on)
fs/pipe.c:pipe_lock(struct pipe_inode_info *pipe)
pipe_lock_nested()
fs/pipe.c:pipe_read(struct kiocb *iocb, struct iov_iter *to)
fs/pipe.c:pipe_release(struct inode *inode, struct file *file)
fs/pipe.c:pipe_resize_ring(struct pipe_inode_info *pipe, unsigned int nr_slots)
fs/pipe.c:pipe_set_size(struct pipe_inode_info *pipe, unsigned int arg)
fs/pipe.c:pipe_write(struct kiocb *iocb, struct iov_iter *from)
kernel/locking/mutex.c:__mutex_add_waiter(struct mutex *lock, struct mutex_waiter *waiter, struct list_head *list)
kernel/locking/mutex.c:__mutex_handoff(struct mutex *lock, struct task_struct *task)
kernel/locking/mutex.c:__mutex_lock_common(struct mutex *lock, unsigned int state, unsigned int subclass, struct lockdep_map *nest_lock, unsigned long ip, struct ww_acquire_ctx *ww_ctx, const bool use_ww_ctx)
kernel/locking/mutex.c:__mutex_remove_waiter(struct mutex *lock, struct mutex_waiter *waiter)
kernel/locking/mutex.c:__mutex_trylock_common()
kernel/locking/mutex.c:__mutex_trylock_fast(struct mutex *lock)
kernel/locking/mutex.c:__mutex_unlock_slowpath(struct mutex *lock, unsigned long ip)
kernel/locking/mutex.c:mutex_can_spin_on_owner(struct mutex *lock)
kernel/locking/mutex.c:mutex_lock_io_nested(struct mutex *lock, unsigned int subclass)
kernel/locking/mutex.c:mutex_optimistic_spin(struct mutex *lock, struct ww_acquire_ctx *ww_ctx, struct mutex_waiter *waiter)
kernel/locking/mutex.c:mutex_spin_on_owner(struct mutex *lock, struct task_struct *owner, struct ww_acquire_ctx *ww_ctx, struct mutex_waiter *waiter)
kernel/locking/mutex.c:mutex_trylock(struct mutex *lock)
kernel/locking/mutex.c:ww_mutex_lock(struct ww_mutex *lock, struct ww_acquire_ctx *ctx)
kernel/locking/mutex.c:ww_mutex_lock_interruptible(struct ww_mutex *lock, struct ww_acquire_ctx *ctx)
kernel/locking/mutex.c:ww_mutex_trylock(struct ww_mutex *ww, struct ww_acquire_ctx *ww_ctx)
fs/splice.c:__do_splice(struct file *in, loff_t __user *off_in, struct file *out, loff_t __user *off_out, size_t len, unsigned int flags)
fs/splice.c:add_to_pipe(struct pipe_inode_info *pipe, struct pipe_buffer *buf)
fs/splice.c:do_splice(struct file *in, loff_t *off_in, struct file *out, loff_t *off_out, size_t len, unsigned int flags)
fs/splice.c:iter_file_splice_write(struct pipe_inode_info *pipe, struct file *out, loff_t *ppos, size_t len, unsigned int flags)
fs/splice.c:iter_to_pipe(struct iov_iter *from, struct pipe_inode_info *pipe, unsigned flags)
fs/splice.c:link_pipe(struct pipe_inode_info *ipipe, struct pipe_inode_info *opipe, size_t len, unsigned int flags)
fs/splice.c:splice_direct_to_actor(struct file *in, struct splice_desc *sd, splice_direct_actor *actor)
fs/splice.c:splice_file_to_pipe(struct file *in, struct pipe_inode_info *opipe, loff_t *offset, size_t len, unsigned int flags)
fs/splice.c:splice_from_pipe_feed(struct pipe_inode_info *pipe, struct splice_desc *sd, splice_actor *actor)
fs/splice.c:splice_from_pipe_next(struct pipe_inode_info *pipe, struct splice_desc *sd)
fs/splice.c:splice_grow_spd(const struct pipe_inode_info *pipe, struct splice_pipe_desc *spd)
fs/splice.c:splice_pipe_to_pipe(struct pipe_inode_info *ipipe, struct pipe_inode_info *opipe, size_t len, unsigned int flags)
fs/splice.c:splice_to_pipe(struct pipe_inode_info *pipe, struct splice_pipe_desc *spd)
fs/splice.c:vmsplice_to_pipe(struct file *file, struct iov_iter *iter, unsigned int flags)
fs/splice.c:wait_for_space(struct pipe_inode_info *pipe, unsigned flags)
kernel/locking/lockdep.c:__lock_acquire(struct lockdep_map *lock, unsigned int subclass, int trylock, int read, int check, int hardirqs_off, struct lockdep_map *nest_lock, unsigned long ip, int references, int pin_count, int sync)
kernel/locking/lockdep.c:check_chain_key(struct task_struct *curr)
kernel/locking/lockdep.c:check_deadlock(struct task_struct *curr, struct held_lock *next)
kernel/locking/lockdep.c:check_prev_add(struct task_struct *curr, struct held_lock *prev, struct held_lock *next, u16 distance, struct lock_trace **const trace)
kernel/locking/lockdep.c:lock_acquire(struct lockdep_map *lock, unsigned int subclass, int trylock, int read, int check, struct lockdep_map *nest_lock, unsigned long ip)
kernel/locking/lockdep.c:mark_usage(struct task_struct *curr, struct held_lock *hlock, int check)
kernel/locking/lockdep.c:print_deadlock_bug(struct task_struct *curr, struct held_lock *prev, struct held_lock *next)
kernel/locking/lockdep.c:validate_chain(struct task_struct *curr, struct held_lock *hlock, int chain_head, u64 chain_key)
include/linux/pipe_fs_i.h:pipe_buf_release(struct pipe_inode_info *pipe, struct pipe_buffer *buf)
include/linux/pipe_fs_i.h:pipe_discard_from(struct pipe_inode_info *pipe, unsigned int old_head)
fs/read_write.c:do_iter_readv_writev(struct file *filp, struct iov_iter *iter, loff_t *ppos, int type, rwf_t flags)
fs/read_write.c:do_iter_write(struct file *file, struct iov_iter *iter, loff_t *pos, rwf_t flags)
fs/read_write.c:do_writev(unsigned long fd, const struct iovec __user *vec, unsigned long vlen, rwf_t flags)
fs/read_write.c:generic_write_check_limits(struct file *file, loff_t pos, loff_t *count)
fs/read_write.c:generic_write_checks_count(struct kiocb *iocb, loff_t *count)
read_write()
fs/read_write.c:vfs_iocb_iter_write(struct file *file, struct kiocb *iocb, struct iov_iter *iter)
fs/read_write.c:vfs_write(struct file *file, const char __user *buf, size_t count, loff_t *pos)
fs/read_write.c:vfs_writev(struct file *file, const struct iovec __user *vec, unsigned long vlen, loff_t *pos, rwf_t flags)
__pipe_lock()
pipe_lock_nested()
fs/pipe.c:pipe_write(struct kiocb *iocb, struct iov_iter *from)
mm/filemap.c:filemap_splice_read(struct file *in, loff_t *ppos, struct pipe_inode_info *pipe, size_t len, unsigned int flags)
mm/filemap.c:generic_file_write_iter(struct kiocb *iocb, struct iov_iter *from)
mm/filemap.c:splice_folio_into_pipe(struct pipe_inode_info *pipe, struct folio *folio, loff_t fpos, size_t size)
func for case 42d8c7c3d3e594b34346
drivers/media/v4l2-core/v4l2-ctrls.c:set_ctrl(struct v4l2_fh *fh, struct v4l2_ctrl *ctrl, u32 ch_flags)
drivers/media/v4l2-core/v4l2-ctrls.c:std_equal(const struct v4l2_ctrl *ctrl, u32 idx, union v4l2_ctrl_ptr ptr1, union v4l2_ctrl_ptr ptr2)
drivers/media/v4l2-core/v4l2-ctrls.c:std_init(const struct v4l2_ctrl *ctrl, u32 idx, union v4l2_ctrl_ptr ptr)
drivers/media/v4l2-core/v4l2-ctrls.c:std_init_compound(const struct v4l2_ctrl *ctrl, u32 idx, union v4l2_ctrl_ptr ptr)
drivers/media/v4l2-core/v4l2-ctrls.c:std_validate(const struct v4l2_ctrl *ctrl, u32 idx, union v4l2_ctrl_ptr ptr)
drivers/media/v4l2-core/v4l2-ctrls.c:std_validate_compound(const struct v4l2_ctrl *ctrl, u32 idx, union v4l2_ctrl_ptr ptr)
drivers/media/v4l2-core/v4l2-ctrls.c:try_or_set_cluster(struct v4l2_fh *fh, struct v4l2_ctrl *master, bool set, u32 ch_flags)
drivers/media/v4l2-core/v4l2-ctrls.c:try_set_ext_ctrls(struct v4l2_fh *fh, struct v4l2_ctrl_handler *hdl, struct video_device *vdev, struct media_device *mdev, struct v4l2_ext_controls *cs, bool set)
drivers/media/v4l2-core/v4l2-ctrls.c:try_set_ext_ctrls_common(struct v4l2_fh *fh, struct v4l2_ctrl_handler *hdl, struct v4l2_ext_controls *cs, struct video_device *vdev, bool set)
drivers/media/v4l2-core/v4l2-ctrls.c:v4l2_ctrl_new()
drivers/media/v4l2-core/v4l2-ctrls.c:v4l2_ctrl_new_custom()
drivers/media/v4l2-core/v4l2-ctrls.c:v4l2_ctrl_new_std()
drivers/media/v4l2-core/v4l2-ctrls.c:v4l2_s_ctrl(struct v4l2_fh *fh, struct v4l2_ctrl_handler *hdl, struct v4l2_control *control)
drivers/media/v4l2-core/v4l2-ctrls.c:validate_ctrls(struct v4l2_ext_controls *cs, struct v4l2_ctrl_helper *helpers, struct video_device *vdev, bool set)
drivers/media/v4l2-core/v4l2-ctrls.c:validate_new(const struct v4l2_ctrl *ctrl, union v4l2_ctrl_ptr p_new)
drivers/media/v4l2-core/v4l2-ioctl.c:__video_do_ioctl(struct file *file, unsigned int cmd, void *arg)
drivers/media/v4l2-core/v4l2-ioctl.c:check_ext_ctrls(struct v4l2_ext_controls *c, int allow_priv)
drivers/media/v4l2-core/v4l2-ioctl.c:v4l_g_ctrl(const struct v4l2_ioctl_ops *ops, struct file *file, void *fh, void *arg)
drivers/media/v4l2-core/v4l2-ioctl.c:v4l_g_ext_ctrls(const struct v4l2_ioctl_ops *ops, struct file *file, void *fh, void *arg)
drivers/media/v4l2-core/v4l2-ioctl.c:v4l_print_control(const void *arg, bool write_only)
drivers/media/v4l2-core/v4l2-ioctl.c:v4l_print_ext_controls(const void *arg, bool write_only)
drivers/media/v4l2-core/v4l2-ioctl.c:v4l_print_query_ext_ctrl(const void *arg, bool write_only)
drivers/media/v4l2-core/v4l2-ioctl.c:v4l_print_queryctrl(const void *arg, bool write_only)
drivers/media/v4l2-core/v4l2-ioctl.c:v4l_query_ext_ctrl(const struct v4l2_ioctl_ops *ops, struct file *file, void *fh, void *arg)
drivers/media/v4l2-core/v4l2-ioctl.c:v4l_queryctrl(const struct v4l2_ioctl_ops *ops, struct file *file, void *fh, void *arg)
drivers/media/v4l2-core/v4l2-ioctl.c:v4l_querymenu(const struct v4l2_ioctl_ops *ops, struct file *file, void *fh, void *arg)
drivers/media/v4l2-core/v4l2-ioctl.c:v4l_s_ctrl(const struct v4l2_ioctl_ops *ops, struct file *file, void *fh, void *arg)
drivers/media/v4l2-core/v4l2-ioctl.c:v4l_s_ext_ctrls(const struct v4l2_ioctl_ops *ops, struct file *file, void *fh, void *arg)
drivers/media/v4l2-core/v4l2-ioctl.c:v4l_try_ext_ctrls(const struct v4l2_ioctl_ops *ops, struct file *file, void *fh, void *arg)
drivers/media/v4l2-core/v4l2-ioctl.c:video_usercopy(struct file *file, unsigned int orig_cmd, unsigned long arg, v4l2_kioctl func)
drivers/media/v4l2-core/v4l2-dev.c:v4l2_get_unmapped_area(struct file *filp, unsigned long addr, unsigned long len, unsigned long pgoff, unsigned long flags)
drivers/media/v4l2-core/v4l2-dev.c:v4l2_ioctl(struct file *filp, unsigned int cmd, unsigned long arg)
drivers/media/v4l2-core/v4l2-dev.c:v4l2_mmap(struct file *filp, struct vm_area_struct *vm)
drivers/media/v4l2-core/v4l2-dev.c:v4l2_open(struct inode *inode, struct file *filp)
drivers/media/v4l2-core/v4l2-dev.c:v4l2_poll(struct file *filp, struct poll_table_struct *poll)
drivers/media/v4l2-core/v4l2-dev.c:v4l2_read(struct file *filp, char __user *buf, size_t sz, loff_t *off)
drivers/media/v4l2-core/v4l2-dev.c:v4l2_release(struct inode *inode, struct file *filp)
drivers/media/v4l2-core/v4l2-dev.c:v4l2_write(struct file *filp, const char __user *buf, size_t sz, loff_t *off)
drivers/media/v4l2-core/v4l2-ioctl.c:__video_do_ioctl(struct file *file, unsigned int cmd, void *arg)
drivers/media/v4l2-core/v4l2-ctrls.c:set_ctrl(struct v4l2_fh *fh, struct v4l2_ctrl *ctrl, u32 ch_flags)
drivers/media/v4l2-core/v4l2-ctrls.c:set_ctrl_lock(struct v4l2_fh *fh, struct v4l2_ctrl *ctrl, struct v4l2_ext_control *c)
drivers/media/v4l2-core/v4l2-ctrls.c:std_validate(const struct v4l2_ctrl *ctrl, u32 idx, union v4l2_ctrl_ptr ptr)
drivers/media/v4l2-core/v4l2-ctrls.c:v4l2_s_ctrl(struct v4l2_fh *fh, struct v4l2_ctrl_handler *hdl, struct v4l2_control *control)
drivers/media/v4l2-core/v4l2-ioctl.c:v4l_s_ctrl(const struct v4l2_ioctl_ops *ops, struct file *file, void *fh, void *arg)
drivers/media/v4l2-core/v4l2-ctrls.c:validate_new(const struct v4l2_ctrl *ctrl, union v4l2_ctrl_ptr p_new)
drivers/media/v4l2-core/v4l2-ioctl.c:video_usercopy(struct file *file, unsigned int orig_cmd, unsigned long arg, v4l2_kioctl func)
drivers/media/v4l2-core/v4l2-ioctl.c:__video_do_ioctl(struct file *file, unsigned int cmd, void *arg)
drivers/media/v4l2-core/v4l2-ctrls.c:set_ctrl(struct v4l2_fh *fh, struct v4l2_ctrl *ctrl, u32 ch_flags)
drivers/media/v4l2-core/v4l2-ctrls.c:set_ctrl_lock(struct v4l2_fh *fh, struct v4l2_ctrl *ctrl, struct v4l2_ext_control *c)
drivers/media/v4l2-core/v4l2-ctrls.c:std_validate(const struct v4l2_ctrl *ctrl, u32 idx, union v4l2_ctrl_ptr ptr)
drivers/media/v4l2-core/v4l2-ctrls.c:v4l2_s_ctrl(struct v4l2_fh *fh, struct v4l2_ctrl_handler *hdl, struct v4l2_control *control)
drivers/media/v4l2-core/v4l2-ioctl.c:v4l_s_ctrl(const struct v4l2_ioctl_ops *ops, struct file *file, void *fh, void *arg)
drivers/media/v4l2-core/v4l2-ctrls.c:validate_new(const struct v4l2_ctrl *ctrl, union v4l2_ctrl_ptr p_new)
drivers/media/v4l2-core/v4l2-ioctl.c:video_usercopy(struct file *file, unsigned int orig_cmd, unsigned long arg, v4l2_kioctl func)
lib/ubsan.c:__ubsan_handle_shift_out_of_bounds(void *_data, void *lhs, void *rhs)
lib/ubsan.c:ubsan_epilogue(void)
lib/ubsan.c:ubsan_prologue(struct source_location *loc, const char *reason)
fs/ioctl.c:do_vfs_ioctl(struct file *filp, unsigned int fd, unsigned int cmd, unsigned long arg)
fs/ioctl.c:ioctl_fioasync(unsigned int fd, struct file *filp, int __user *argp)
fs/ioctl.c:ioctl_fionbio(struct file *filp, int __user *argp)
arch/x86/entry/common.c:do_syscall_64(unsigned long nr, struct pt_regs *regs)
do_syscall_x32()
do_syscall_x64()
func for case c558267ad910fc494497
drivers/media/rc/imon.c:display_close(struct inode *inode, struct file *file)
drivers/media/rc/imon.c:display_open(struct inode *inode, struct file *file)
drivers/media/rc/imon.c:imon_disconnect(struct usb_interface *interface)
drivers/media/rc/imon.c:imon_find_endpoints(struct imon_context *ictx, struct usb_host_interface *iface_desc)
drivers/media/rc/imon.c:imon_get_ffdc_type(struct imon_context *ictx)
drivers/media/rc/imon.c:imon_init_display(struct imon_context *ictx, struct usb_interface *intf)
drivers/media/rc/imon.c:imon_init_idev()
drivers/media/rc/imon.c:imon_init_intf0()
drivers/media/rc/imon.c:imon_init_intf1()
drivers/media/rc/imon.c:imon_init_rdev()
drivers/media/rc/imon.c:imon_init_touch()
drivers/media/rc/imon.c:imon_probe(struct usb_interface *interface, const struct usb_device_id *id)
drivers/media/rc/imon.c:imon_resume(struct usb_interface *intf)
drivers/media/rc/imon.c:imon_set_display_type(struct imon_context *ictx)
drivers/media/rc/imon.c:send_packet(struct imon_context *ictx)
drivers/usb/core/file.c:init_usb_class(void)
drivers/usb/core/file.c:usb_deregister_dev(struct usb_interface *intf, struct usb_class_driver *class_driver)
drivers/usb/core/file.c:usb_devnode()
drivers/usb/core/file.c:usb_open(struct inode *inode, struct file *file)
drivers/usb/core/file.c:usb_register_dev(struct usb_interface *intf, struct usb_class_driver *class_driver)
kernel/locking/mutex.c:__mutex_add_waiter(struct mutex *lock, struct mutex_waiter *waiter, struct list_head *list)
kernel/locking/mutex.c:__mutex_handoff(struct mutex *lock, struct task_struct *task)
kernel/locking/mutex.c:__mutex_init(struct mutex *lock, const char *name, struct lock_class_key *key)
kernel/locking/mutex.c:__mutex_lock_common(struct mutex *lock, unsigned int state, unsigned int subclass, struct lockdep_map *nest_lock, unsigned long ip, struct ww_acquire_ctx *ww_ctx, const bool use_ww_ctx)
kernel/locking/mutex.c:__mutex_remove_waiter(struct mutex *lock, struct mutex_waiter *waiter)
kernel/locking/mutex.c:__mutex_trylock_common()
kernel/locking/mutex.c:__mutex_unlock_slowpath(struct mutex *lock, unsigned long ip)
kernel/locking/mutex.c:mutex_can_spin_on_owner(struct mutex *lock)
kernel/locking/mutex.c:mutex_lock_io_nested(struct mutex *lock, unsigned int subclass)
kernel/locking/mutex.c:mutex_optimistic_spin(struct mutex *lock, struct ww_acquire_ctx *ww_ctx, struct mutex_waiter *waiter)
kernel/locking/mutex.c:mutex_spin_on_owner(struct mutex *lock, struct task_struct *owner, struct ww_acquire_ctx *ww_ctx, struct mutex_waiter *waiter)
kernel/locking/mutex.c:mutex_trylock(struct mutex *lock)
kernel/locking/mutex.c:ww_mutex_lock(struct ww_mutex *lock, struct ww_acquire_ctx *ctx)
kernel/locking/mutex.c:ww_mutex_lock_interruptible(struct ww_mutex *lock, struct ww_acquire_ctx *ctx)
kernel/locking/mutex.c:ww_mutex_trylock(struct ww_mutex *ww, struct ww_acquire_ctx *ww_ctx)
kernel/locking/lockdep.c:__lock_acquire(struct lockdep_map *lock, unsigned int subclass, int trylock, int read, int check, int hardirqs_off, struct lockdep_map *nest_lock, unsigned long ip, int references, int pin_count)
kernel/locking/lockdep.c:check_chain_key(struct task_struct *curr)
kernel/locking/lockdep.c:check_noncircular(struct held_lock *src, struct held_lock *target, struct lock_trace **const trace)
kernel/locking/lockdep.c:check_prev_add(struct task_struct *curr, struct held_lock *prev, struct held_lock *next, u16 distance, struct lock_trace **const trace)
kernel/locking/lockdep.c:check_prevs_add(struct task_struct *curr, struct held_lock *next)
kernel/locking/lockdep.c:mark_usage(struct task_struct *curr, struct held_lock *hlock, int check)
kernel/locking/lockdep.c:print_circular_bug(struct lock_list *this, struct lock_list *target, struct held_lock *check_src, struct held_lock *check_tgt)
kernel/locking/lockdep.c:validate_chain(struct task_struct *curr, struct held_lock *hlock, int chain_head, u64 chain_key)
drivers/usb/core/driver.c:usb_driver_claim_interface(struct usb_driver *driver, struct usb_interface *iface, void *data)
drivers/usb/core/driver.c:usb_driver_release_interface(struct usb_driver *driver, struct usb_interface *iface)
drivers/usb/core/driver.c:usb_probe_device(struct device *dev)
drivers/usb/core/driver.c:usb_probe_interface(struct device *dev)
drivers/usb/core/driver.c:usb_register_device_driver(struct usb_device_driver *new_udriver, struct module *owner)
drivers/usb/core/driver.c:usb_register_driver(struct usb_driver *new_driver, struct module *owner, const char *mod_name)
drivers/usb/core/driver.c:usb_unbind_device(struct device *dev)
drivers/usb/core/driver.c:usb_unbind_interface(struct device *dev)
drivers/base/dd.c:__device_attach(struct device *dev, bool allow_async)
drivers/base/dd.c:__driver_attach(struct device *dev, void *data)
drivers/base/dd.c:__driver_probe_device(struct device_driver *drv, struct device *dev)
drivers/base/dd.c:call_driver_probe(struct device *dev, struct device_driver *drv)
drivers/base/dd.c:device_release_driver(struct device *dev)
drivers/base/dd.c:driver_bound(struct device *dev)
drivers/base/dd.c:driver_probe_device(struct device_driver *drv, struct device *dev)
drivers/base/dd.c:really_probe(struct device *dev, struct device_driver *drv)
fs/char_dev.c:__register_chrdev(unsigned int major, unsigned int baseminor, unsigned int count, const char *name, const struct file_operations *fops)
fs/char_dev.c:__unregister_chrdev(unsigned int major, unsigned int baseminor, unsigned int count, const char *name)
fs/char_dev.c:alloc_chrdev_region(dev_t *dev, unsigned baseminor, unsigned count, const char *name)
fs/char_dev.c:cdev_add(struct cdev *p, dev_t dev, unsigned count)
fs/char_dev.c:cdev_device_add(struct cdev *cdev, struct device *dev)
fs/char_dev.c:chrdev_open(struct inode *inode, struct file *filp)
fs/char_dev.c:register_chrdev_region(dev_t from, unsigned count, const char *name)
fs/char_dev.c:unregister_chrdev_region(dev_t from, unsigned count)
drivers/usb/core/hub.c:hub_event(struct work_struct *work)
drivers/usb/core/hub.c:hub_port_connect(struct usb_hub *hub, int port1, u16 portstatus, u16 portchange)
drivers/usb/core/hub.c:usb_new_device(struct usb_device *udev)
drivers/base/bus.c:bus_add_device(struct device *dev)
drivers/base/bus.c:bus_probe_device(struct device *dev)
drivers/base/bus.c:bus_register(struct bus_type *bus)
fs/open.c:dentry_open()
fs/open.c:do_dentry_open(struct file *f, struct inode *inode, int (*open)(struct inode *, struct file *))
fs/open.c:do_sys_openat2(int dfd, const char __user *filename, struct open_how *how)
func for case 6b74cf8fcd7378d8be7c
fs/fat/inode.c:__fat_write_inode(struct inode *inode, int wait)
fs/fat/inode.c:fat_alloc_inode()
fs/fat/inode.c:fat_attach(struct inode *inode, loff_t i_pos)
fs/fat/inode.c:fat_build_inode()
fs/fat/inode.c:fat_detach(struct inode *inode)
fs/fat/inode.c:fat_evict_inode(struct inode *inode)
fs/fat/inode.c:fat_fill_inode(struct inode *inode, struct msdos_dir_entry *de)
fs/fat/inode.c:fat_fill_super(struct super_block *sb, void *data, int silent, int isvfat, void (*setup)(struct super_block *))
fs/fat/inode.c:fat_flush_inodes(struct super_block *sb, struct inode *i1, struct inode *i2)
fs/fat/inode.c:fat_free_eofblocks(struct inode *inode)
fs/fat/inode.c:fat_iget()
fs/fat/inode.c:fat_read_root(struct inode *inode)
fs/fat/inode.c:fat_remount(struct super_block *sb, int *flags, char *data)
fs/fat/inode.c:fat_set_state(struct super_block *sb, unsigned int set, unsigned int force)
fs/fat/inode.c:fat_write_inode(struct inode *inode, struct writeback_control *wbc)
fs/inode.c:alloc_inode()
fs/inode.c:clear_inode(struct inode *inode)
fs/inode.c:destroy_inode(struct inode *inode)
fs/inode.c:dispose_list(struct list_head *head)
fs/inode.c:evict_inodes(struct super_block *sb)
fs/inode.c:find_inode()
fs/inode.c:find_inode_fast()
fs/inode.c:get_next_ino(void)
fs/inode.c:i_callback(struct rcu_head *head)
fs/inode.c:inode_init_always(struct super_block *sb, struct inode *inode)
fs/inode.c:inode_lru_isolate(struct list_head *item, struct list_lru_one *lru, spinlock_t *lru_lock, void *arg)
fs/inode.c:invalidate_inodes(struct super_block *sb, bool kill_dirty)
fs/inode.c:iput_final(struct inode *inode)
fs/inode.c:new_inode()
fs/inode.c:unlock_new_inode(struct inode *inode)
fs/fs-writeback.c:__inode_attach_wb(struct inode *inode, struct page *page)
fs/fs-writeback.c:__writeback_single_inode(struct inode *inode, struct writeback_control *wbc)
fs/fs-writeback.c:finish_writeback_work(struct bdi_writeback *wb, struct wb_writeback_work *work)
fs/fs-writeback.c:inode_do_switch_wbs(struct inode *inode, struct bdi_writeback *old_wb, struct bdi_writeback *new_wb)
fs/fs-writeback.c:inode_io_list_del(struct inode *inode)
fs/fs-writeback.c:inode_prepare_wbs_switch(struct inode *inode, struct bdi_writeback *new_wb)
fs/fs-writeback.c:inode_switch_wbs(struct inode *inode, int new_wb_id)
fs/fs-writeback.c:redirty_tail_locked(struct inode *inode, struct bdi_writeback *wb)
fs/fs-writeback.c:requeue_inode(struct inode *inode, struct bdi_writeback *wb, struct writeback_control *wbc)
fs/fs-writeback.c:wb_do_writeback(struct bdi_writeback *wb)
fs/fs-writeback.c:wb_io_lists_populated(struct bdi_writeback *wb)
fs/fs-writeback.c:wb_queue_work(struct bdi_writeback *wb, struct wb_writeback_work *work)
fs/fs-writeback.c:wb_workfn(struct work_struct *work)
fs/fs-writeback.c:writeback_inodes_wb(struct bdi_writeback *wb, long nr_pages, enum wb_reason reason)
fs/fs-writeback.c:writeback_single_inode(struct inode *inode, struct writeback_control *wbc)
lib/list_debug.c:__list_del_entry_valid(struct list_head *entry)
fs/dcache.c:___d_drop(struct dentry *dentry)
fs/dcache.c:__d_clear_type_and_inode(struct dentry *dentry)
fs/dcache.c:__dentry_kill(struct dentry *dentry)
fs/dcache.c:d_lru_del(struct dentry *dentry)
fs/dcache.c:dentry_free(struct dentry *dentry)
dentry_unlink_inode()
fs/dcache.c:dentry_unlist(struct dentry *dentry, struct dentry *parent)
namei_vfat()
fs/fat/namei_vfat.c:vfat_add_entry(struct inode *dir, const struct qstr *qname, int is_dir, int cluster, struct timespec64 *ts, struct fat_slot_info *sinfo)
fs/fat/namei_vfat.c:vfat_build_slots(struct inode *dir, const unsigned char *name, int len, int is_dir, int cluster, struct timespec64 *ts, struct msdos_dir_slot *slots, int *nr_slots)
fs/fat/namei_vfat.c:vfat_create(struct user_namespace *mnt_userns, struct inode *dir, struct dentry *dentry, umode_t mode, bool excl)
fs/fat/namei_vfat.c:vfat_lookup()
fs/fat/namei_vfat.c:vfat_mkdir(struct user_namespace *mnt_userns, struct inode *dir, struct dentry *dentry, umode_t mode)
fs/fat/namei_vfat.c:vfat_rename(struct inode *old_dir, struct dentry *old_dentry, struct inode *new_dir, struct dentry *new_dentry)
fs/fat/namei_vfat.c:vfat_rmdir(struct inode *dir, struct dentry *dentry)
fs/fat/namei_vfat.c:vfat_unlink(struct inode *dir, struct dentry *dentry)
mm/slub.c:__slab_free(struct kmem_cache *s, struct slab *slab, void *head, void *tail, int cnt, unsigned long addr)
mm/slub.c:do_slab_free(struct kmem_cache *s, struct slab *slab, void *head, void *tail, int cnt, unsigned long addr)
mm/slub.c:free_consistency_checks(struct kmem_cache *s, struct slab *slab, void *object, unsigned long addr)
mm/slub.c:free_debug_processing(struct kmem_cache *s, struct slab *slab, void *head, void *tail, int bulk_cnt, unsigned long addr)
mm/slub.c:freelist_corrupted(struct kmem_cache *s, struct slab *slab, void **freelist, void *nextfree)
mm/slub.c:slab_free(struct kmem_cache *s, struct slab *slab, void *head, void *tail, void **p, int cnt, unsigned long addr)
mm/slub.c:slab_free_freelist_hook(struct kmem_cache *s, void **head, void **tail, int *cnt)
mm/slub.c:slab_free_hook(struct kmem_cache *s, void *x, bool init)
kernel/rcu/tree.c:call_rcu(_head *head, rcu_callback_t func) { static)
kernel/rcu/tree.c:kvfree_call_rcu(_head *head, rcu_callback_t func) { unsigne)
kernel/rcu/tree.c:rcu_do_batch(_data *rdp) { int div)
fs/namei.c:do_unlinkat(int dfd, struct filename *name)
fs/namei.c:lookup_open()
fs/namei.c:vfs_unlink(struct user_namespace *mnt_userns, struct inode *dir, struct dentry *dentry, struct inode **delegated_inode)
__list_del()
include/linux/list.h:__list_del_entry(struct list_head *entry)
include/linux/list.h:list_replace(struct list_head *old, struct list_head *new)
func for case 6087eafb76a94c4ac9eb
mm/damon/dbgfs.c:add_init_region(struct damon_ctx *c, int target_idx, struct damon_addr_range *ar)
mm/damon/dbgfs.c:dbgfs_attrs_write(struct file *file, const char __user *buf, size_t count, loff_t *ppos)
mm/damon/dbgfs.c:dbgfs_fill_ctx_dir(struct dentry *dir, struct damon_ctx *ctx)
mm/damon/dbgfs.c:dbgfs_init_regions_write(struct file *file, const char __user *buf, size_t count, loff_t *ppos)
mm/damon/dbgfs.c:dbgfs_mk_context(char *name)
mm/damon/dbgfs.c:dbgfs_mk_context_write(struct file *file, const char __user *buf, size_t count, loff_t *ppos)
mm/damon/dbgfs.c:dbgfs_rm_context(char *name)
mm/damon/dbgfs.c:dbgfs_rm_context_write(struct file *file, const char __user *buf, size_t count, loff_t *ppos)
mm/damon/dbgfs.c:dbgfs_schemes_write(struct file *file, const char __user *buf, size_t count, loff_t *ppos)
mm/damon/dbgfs.c:dbgfs_set_targets(struct damon_ctx *ctx, ssize_t nr_targets, struct pid **pids)
mm/damon/dbgfs.c:dbgfs_target_ids_write(struct file *file, const char __user *buf, size_t count, loff_t *ppos)
mm/damon/dbgfs.c:set_init_regions(struct damon_ctx *c, const char *str, ssize_t len)
mm/damon/dbgfs.c:str_to_pids()
mm/damon/dbgfs.c:str_to_schemes()
mm/damon/dbgfs.c:user_input_str()
fs/debugfs/file.c:__full_proxy_fops_init(struct file_operations *proxy_fops, const struct file_operations *real_fops)
fs/debugfs/file.c:debugfs_attr_read(struct file *file, char __user *buf, size_t len, loff_t *ppos)
fs/debugfs/file.c:debugfs_attr_write(struct file *file, const char __user *buf, size_t len, loff_t *ppos)
fs/debugfs/file.c:debugfs_create_mode_unsafe()
fs/debugfs/file.c:debugfs_file_get(struct dentry *dentry)
fs/debugfs/file.c:debugfs_read_file_bool(struct file *file, char __user *user_buf, size_t count, loff_t *ppos)
fs/debugfs/file.c:debugfs_read_file_str(struct file *file, char __user *user_buf, size_t count, loff_t *ppos)
fs/debugfs/file.c:debugfs_write_file_bool(struct file *file, const char __user *user_buf, size_t count, loff_t *ppos)
fs/debugfs/file.c:full_proxy_open(struct inode *inode, struct file *filp)
fs/debugfs/file.c:full_proxy_release(struct inode *inode, struct file *filp)
full_proxy_write()
fs/debugfs/file.c:open_proxy_open(struct inode *inode, struct file *filp)
fs/debugfs/file.c:read_file_blob(struct file *file, char __user *user_buf, size_t count, loff_t *ppos)
fs/debugfs/file.c:u32_array_open(struct inode *inode, struct file *file)
fs/debugfs/file.c:u32_format_array(char *buf, size_t bufsize, u32 *array, int array_size)
mm/damon/core.c:damon_do_apply_schemes(struct damon_ctx *c, struct damon_target *t, struct damon_region *r)
mm/damon/core.c:damon_new_ctx()
mm/damon/core.c:damon_new_region()
mm/damon/core.c:damon_new_target()
mm/damon/core.c:damon_select_ops(struct damon_ctx *ctx, enum damon_ops_id id)
mm/damon/core.c:damon_set_attrs(struct damon_ctx *ctx, struct damon_attrs *attrs)
mm/damon/core.c:damon_set_regions(struct damon_target *t, struct damon_addr_range *ranges, unsigned int nr_ranges)
mm/damon/core.c:kdamond_fn(void *data)
fs/debugfs/inode.c:__debugfs_create_file()
fs/debugfs/inode.c:_debugfs_apply_options(struct super_block *sb, bool remount)
fs/debugfs/inode.c:debugfs_create_file_size(const char *name, umode_t mode, struct dentry *parent, void *data, const struct file_operations *fops, loff_t file_size)
fs/debugfs/inode.c:debugfs_get_inode()
fs/debugfs/inode.c:debugfs_parse_options(char *data, struct debugfs_mount_opts *opts)
fs/debugfs/inode.c:debugfs_release_dentry(struct dentry *dentry)
fs/debugfs/inode.c:debugfs_remount(struct super_block *sb, int *flags, char *data)
fs/debugfs/inode.c:debugfs_setattr(struct user_namespace *mnt_userns, struct dentry *dentry, struct iattr *ia)
mm/damon/dbgfs.c:dbgfs_rm_context(char *name)
mm/damon/dbgfs.c:dbgfs_rm_context_write(struct file *file, const char __user *buf, size_t count, loff_t *ppos)
fs/read_write.c:__kernel_write(struct file *file, const void *buf, size_t count, loff_t *pos)
fs/read_write.c:ksys_write(unsigned int fd, const char __user *buf, size_t count)
fs/read_write.c:vfs_write(struct file *file, const char __user *buf, size_t count, loff_t *pos)
func for case 92beb3d46aab498710fa
drivers/net/bonding/bond_main.c:__bond_release_one(struct net_device *bond_dev, struct net_device *slave_dev, bool all, bool unregister)
drivers/net/bonding/bond_main.c:bond_change_active_slave(struct bonding *bond, struct slave *new_active)
drivers/net/bonding/bond_main.c:bond_do_fail_over_mac(struct bonding *bond, struct slave *new_active, struct slave *old_active)
drivers/net/bonding/bond_main.c:bond_enslave(struct net_device *bond_dev, struct net_device *slave_dev, struct netlink_ext_ack *extack)
drivers/net/bonding/bond_main.c:bond_ethtool_get_ts_info(struct net_device *bond_dev, struct ethtool_ts_info *info)
drivers/net/bonding/bond_main.c:bond_get_old_active()
drivers/net/bonding/bond_main.c:bond_get_slave_by_id()
drivers/net/bonding/bond_main.c:bond_hw_addr_swap(struct bonding *bond, struct slave *new_active, struct slave *old_active)
drivers/net/bonding/bond_main.c:bond_master_upper_dev_link(struct bonding *bond, struct slave *slave, struct netlink_ext_ack *extack)
bond_option_active_slave_get_rcu()
drivers/net/bonding/bond_main.c:bond_release_and_destroy(struct net_device *bond_dev, struct net_device *slave_dev)
drivers/net/bonding/bond_main.c:bond_select_active_slave(struct bonding *bond)
drivers/net/bonding/bond_main.c:bond_set_slave_arr(struct bonding *bond, struct bond_up_slave *usable_slaves, struct bond_up_slave *all_slaves)
drivers/net/bonding/bond_main.c:bond_slave_arr_handler(struct work_struct *work)
drivers/net/bonding/bond_main.c:bond_update_slave_arr(struct bonding *bond, struct slave *skipslave)
include/net/bonding.h:bond_commit_link_state(struct slave *slave, bool notify)
include/net/bonding.h:bond_confirm_addr(struct net_device *dev, __be32 dst, __be32 local)
drivers/net/bonding/bond_main.c:bond_ethtool_get_ts_info(struct net_device *bond_dev, struct ethtool_ts_info *info)
include/net/bonding.h:bond_get_targets_ip(__be32 *targets, __be32 ip)
include/net/bonding.h:bond_get_targets_ip6(struct in6_addr *targets, struct in6_addr *ip)
include/net/bonding.h:bond_hw_addr_copy(u8 *dst, const u8 *src, unsigned int len)
include/net/bonding.h:bond_is_active_slave_dev(const struct net_device *slave_dev)
include/net/bonding.h:bond_mode_can_use_xmit_hash(const struct bonding *bond)
bond_option_active_slave_get_rcu()
include/net/bonding.h:bond_set_slave_inactive_flags(struct slave *slave, bool notify)
include/net/bonding.h:bond_set_slave_state(struct slave *slave, int slave_state, bool notify)
include/net/bonding.h:bond_slave_has_mac_rx(struct bonding *bond, const u8 *mac)
include/net/bonding.h:bond_slave_link_notify(struct bonding *bond)
include/net/bonding.h:bond_slave_state_change(struct bonding *bond)
include/net/bonding.h:bond_slave_state_notify(struct bonding *bond)
net/ethtool/common.c:__ethtool_get_ts_info(struct net_device *dev, struct ethtool_ts_info *info)
net/ethtool/common.c:convert_legacy_settings_to_link_ksettings(struct ethtool_link_ksettings *link_ksettings, const struct ethtool_cmd *legacy_settings)
net/ethtool/common.c:ethtool_check_ops(const struct ethtool_ops *ops)
net/ethtool/common.c:ethtool_get_max_rxfh_channel(struct net_device *dev, u32 *max)
ethtool_get_max_rxnfc_channel()
ethtool_get_rxnfc_rule_count()
net/ethtool/common.c:ethtool_params_from_link_mode(struct ethtool_link_ksettings *link_ksettings, enum ethtool_link_mode_bit_indices link_mode)
sk_setsockopt()
net/core/sock.c:sock_bindtoindex_locked(struct sock *sk, int ifindex)
net/core/sock.c:sock_init_data(struct socket *sock, struct sock *sk)
sock_init_data_uid()
net/core/sock.c:sock_set_timestamping(struct sock *sk, int optname, struct so_timestamping timestamping)
net/core/sock.c:sock_setbindtodevice(struct sock *sk, sockptr_t optval, int optlen)
net/core/sock.c:sock_setsockopt(struct socket *sock, int level, int optname, sockptr_t optval, unsigned int optlen)
net/core/sock.c:sock_timestamping_bind_phc(struct sock *sk, int phc_index)
include/linux/rcupdate.h:rcu_head_after_call_rcu(struct rcu_head *rhp, rcu_callback_t f)
include/linux/rcupdate.h:rcu_read_lock(void)
include/linux/rcupdate.h:rcu_read_lock_bh(void)
include/linux/rcupdate.h:rcu_read_lock_sched(void)
include/linux/rcupdate.h:rcu_read_unlock(void)
drivers/net/bonding/bond_sysfs.c:bond_create_sysfs(struct bond_net *bn)
bond_option_active_slave_get_rcu()
bond_sysfs()
drivers/net/bonding/bond_sysfs.c:bonding_show_active_slave(struct device *d, struct device_attribute *attr, char *buf)
drivers/net/bonding/bond_sysfs.c:bonding_show_ad_actor_system(struct device *d, struct device_attribute *attr, char *buf)
drivers/net/bonding/bond_sysfs.c:bonding_show_ad_partner_mac(struct device *d, struct device_attribute *attr, char *buf)
drivers/net/bonding/bond_sysfs.c:bonding_show_bonds(struct class *cls, struct class_attribute *attr, char *buf)
drivers/net/bonding/bond_sysfs.c:bonding_show_mode(struct device *d, struct device_attribute *attr, char *buf)
drivers/net/bonding/bond_sysfs.c:bonding_show_slaves(struct device *d, struct device_attribute *attr, char *buf)
drivers/net/bonding/bond_sysfs.c:bonding_sysfs_store_option(struct device *d, struct device_attribute *attr, const char *buffer, size_t count)
include/net/sock.h:_sock_tx_timestamp(struct sock *sk, __u16 tsflags, __u8 *tx_flags, __u32 *tskey)
include/net/sock.h:lock_sock_fast(struct sock *sk)
include/net/sock.h:sock_read_timestamp(struct sock *sk)
include/net/sock.h:sock_recv_timestamp(struct msghdr *msg, struct sock *sk, struct sk_buff *skb)
net/core/sock.c:sock_set_timestamping(struct sock *sk, int optname, struct so_timestamping timestamping)
net/core/sock.c:sock_setsockopt(struct socket *sock, int level, int optname, sockptr_t optval, unsigned int optlen)
net/core/sock.c:sock_timestamping_bind_phc(struct sock *sk, int phc_index)
include/net/sock.h:sock_write_timestamp(struct sock *sk, ktime_t kt)
net/socket.c:__sys_setsockopt(int fd, int level, int optname, char __user *user_optval, int optlen)
net/core/sock.c:sock_set_timestamping(struct sock *sk, int optname, struct so_timestamping timestamping)
net/core/sock.c:sock_setsockopt(struct socket *sock, int level, int optname, sockptr_t optval, unsigned int optlen)
drivers/net/bonding/bond_3ad.c:bond_3ad_initialize(struct bonding *bond, u16 tick_resolution)
drivers/net/bonding/bond_3ad.c:bond_3ad_lacpdu_recv(const struct sk_buff *skb, struct bonding *bond, struct slave *slave)
drivers/net/bonding/bond_3ad.c:bond_3ad_update_lacp_rate(struct bonding *bond)
func for case 793a590957d9c1b96620
net/netfilter/nf_conntrack_core.c:____nf_conntrack_find()
net/netfilter/nf_conntrack_core.c:__nf_conntrack_confirm(struct sk_buff *skb)
net/netfilter/nf_conntrack_core.c:__nf_conntrack_find_get()
net/netfilter/nf_conntrack_core.c:__nf_ct_delete_from_lists(struct nf_conn *ct)
net/netfilter/nf_conntrack_core.c:__nf_ct_resolve_clash(struct sk_buff *skb, struct nf_conntrack_tuple_hash *h)
net/netfilter/nf_conntrack_core.c:clean_from_lists(struct nf_conn *ct)
include/net/netfilter/nf_conntrack_core.h:nf_conntrack_confirm(struct sk_buff *skb)
net/netfilter/nf_conntrack_core.c:nf_conntrack_find_get()
net/netfilter/nf_conntrack_core.c:nf_conntrack_free(struct nf_conn *ct)
net/netfilter/nf_conntrack_core.c:nf_conntrack_hash_check_insert(struct nf_conn *ct)
net/netfilter/nf_conntrack_core.c:nf_ct_delete(struct nf_conn *ct, u32 portid, int report)
net/netfilter/nf_conntrack_core.c:nf_ct_destroy(struct nf_conntrack *nfct)
net/netfilter/nf_conntrack_core.c:nf_ct_ext_valid_pre(const struct nf_ct_ext *ext)
net/netfilter/nf_conntrack_core.c:nf_ct_match(const struct nf_conn *ct1, const struct nf_conn *ct2)
net/netfilter/nf_conntrack_core.c:nf_ct_resolve_clash(struct sk_buff *skb, struct nf_conntrack_tuple_hash *h, u32 reply_hash)
net/netfilter/nf_conntrack_proto.c:ipv4_confirm(void *priv, struct sk_buff *skb, const struct nf_hook_state *state)
net/netfilter/nf_conntrack_proto.c:ipv4_conntrack_local(void *priv, struct sk_buff *skb, const struct nf_hook_state *state)
net/netfilter/nf_conntrack_proto.c:ipv6_confirm(void *priv, struct sk_buff *skb, const struct nf_hook_state *state)
net/netfilter/nf_conntrack_proto.c:ipv6_getorigdst(struct sock *sk, int optval, void __user *user, int *len)
net/netfilter/nf_conntrack_proto.c:nf_confirm(struct sk_buff *skb, unsigned int protoff, struct nf_conn *ct, enum ip_conntrack_info ctinfo)
net/netfilter/nf_conntrack_proto.c:nf_conntrack_proto_init(void)
net/netfilter/nf_conntrack_proto.c:nf_conntrack_proto_pernet_init(struct net *net)
net/netfilter/nf_conntrack_proto.c:nf_ct_l4proto_find()
net/netfilter/nf_conntrack_proto.c:nf_ct_l4proto_log_invalid(const struct sk_buff *skb, const struct nf_conn *ct, const struct nf_hook_state *state, const char *fmt, ...)
net/netfilter/nf_conntrack_proto.c:nf_ct_netns_do_get(struct net *net, u8 nfproto)
net/netfilter/nf_conntrack_proto.c:nf_ct_netns_do_put(struct net *net, u8 nfproto)
net/netfilter/nf_conntrack_proto.c:nf_ct_netns_get(struct net *net, u8 nfproto)
net/netfilter/nf_conntrack_proto.c:nf_ct_netns_inet_get(struct net *net)
net/netfilter/nf_conntrack_proto.c:nf_ct_netns_put(struct net *net, uint8_t nfproto)
net/netfilter/nf_conntrack_proto.c:nf_ct_tcp_fixup(struct nf_conn *ct, void *_nfproto)
net/netfilter/nf_conntrack_extend.c:__nf_ct_ext_find()
net/netfilter/nf_conntrack_extend.c:nf_ct_ext_add()
net/netfilter/nf_conntrack_extend.c:total_extension_size(void)
__nf_ct_ext_exist()
net/netfilter/nf_conntrack_core.c:__nf_ct_resolve_clash(struct sk_buff *skb, struct nf_conntrack_tuple_hash *h)
include/net/netfilter/nf_conntrack_core.h:nf_conntrack_confirm(struct sk_buff *skb)
net/netfilter/nf_conntrack_core.c:nf_conntrack_free(struct nf_conn *ct)
net/netfilter/nf_conntrack_core.c:nf_ct_destroy(struct nf_conntrack *nfct)
nf_ct_ext_exist()
nf_ct_put()
net/netfilter/nf_conntrack_core.c:nf_ct_resolve_clash(struct sk_buff *skb, struct nf_conntrack_tuple_hash *h, u32 reply_hash)
net/netfilter/nf_conntrack_ecache.c:__nf_conntrack_eventmask_report(struct nf_conntrack_ecache *e, const u32 events, const u32 missed, const struct nf_ct_event *item)
net/netfilter/nf_conntrack_ecache.c:ecache_work_evict_list(struct nf_conntrack_net *cnet)
net/netfilter/nf_conntrack_ecache.c:nf_conntrack_ecache_pernet_init(struct net *net)
net/netfilter/nf_conntrack_ecache.c:nf_conntrack_ecache_work(struct net *net, enum nf_ct_ecache_state state)
net/netfilter/nf_conntrack_ecache.c:nf_conntrack_eventmask_report(unsigned int events, struct nf_conn *ct, u32 portid, int report)
net/netfilter/nf_conntrack_ecache.c:nf_ct_deliver_cached_events(struct nf_conn *ct)
net/netfilter/nf_conntrack_ecache.c:nf_ct_ecache_ext_add(struct nf_conn *ct, u16 ctmask, u16 expmask, gfp_t gfp)
net/netfilter/nf_conntrack_ecache.c:nf_ct_expect_event_report(enum ip_conntrack_expect_events event, struct nf_conntrack_expect *exp, u32 portid, int report)
net/rxrpc/output.c:rxrpc_fill_out_ack(struct rxrpc_connection *conn, struct rxrpc_call *call, struct rxrpc_ack_buffer *pkt, rxrpc_seq_t *_hard_ack, rxrpc_seq_t *_top, u8 reason)
rxrpc_reject_packet()
net/rxrpc/output.c:rxrpc_send_abort_packet(struct rxrpc_call *call)
net/rxrpc/output.c:rxrpc_send_ack_packet(struct rxrpc_call *call, bool ping, rxrpc_serial_t *_serial)
rxrpc_send_conn_abort()
net/rxrpc/output.c:rxrpc_send_data_packet(struct rxrpc_call *call, struct sk_buff *skb, bool retrans)
net/rxrpc/output.c:rxrpc_send_keepalive(struct rxrpc_peer *peer)
rxrpc_transmit_one()
net/ipv4/udp.c:__udp_queue_rcv_skb(struct sock *sk, struct sk_buff *skb)
destroy_sock()
queue_rcv()
send_skb()
net/ipv4/udp.c:udp_destroy_sock(struct sock *sk)
net/ipv4/udp.c:udp_lib_unhash(struct sock *sk)
net/ipv4/udp.c:udp_queue_rcv_one_skb(struct sock *sk, struct sk_buff *skb)
net/ipv4/udp.c:udp_queue_rcv_skb(struct sock *sk, struct sk_buff *skb)
net/ipv4/udp.c:udp_recvmsg(struct sock *sk, struct msghdr *msg, size_t len, int flags, int *addr_len)
net/ipv4/udp.c:udp_send_skb(struct sk_buff *skb, struct flowi4 *fl4, struct inet_cork *cork)
net/ipv4/udp.c:udp_sendmsg(struct sock *sk, struct msghdr *msg, size_t len)
net/netfilter/core.c:nf_hook_entries_free(struct nf_hook_entries *e)
net/netfilter/core.c:nf_hook_slow(struct sk_buff *skb, struct nf_hook_state *state, const struct nf_hook_entries *e, unsigned int s)
net/netfilter/core.c:nf_hook_slow_list(struct list_head *head, struct nf_hook_state *state, const struct nf_hook_entries *e)
mm/slub.c:__slab_free(struct kmem_cache *s, struct slab *slab, void *head, void *tail, int cnt, unsigned long addr)
mm/slub.c:slab_free_freelist_hook(struct kmem_cache *s, void **head, void **tail, int *cnt)
mm/slub.c:slab_free_hook(struct kmem_cache *s, void *x, bool init)
include/net/netfilter/nf_conntrack_extend.h:nf_ct_ext_find()
func for case 2b50dd7e9d79da3a1949141a7f38c2af0d01ddf3
net/core/sock.c:__sk_free(struct sock *sk)
net/core/sock.c:__sk_mem_schedule(struct sock *sk, int size, int kind)
net/core/sock.c:__sock_wfree(struct sk_buff *skb)
net/core/sock.c:sk_alloc()
net/core/sock.c:sk_clear_memalloc(struct sock *sk)
net/core/sock.c:sk_clone_lock()
net/core/sock.c:sk_destruct(struct sock *sk)
net/core/sock.c:sk_free(struct sock *sk)
net/core/sock.c:sk_free_unlock_clone(struct sock *sk)
net/core/sock.c:sk_prot_alloc()
net/core/sock.c:sk_prot_free(struct proto *prot, struct sock *sk)
net/core/sock.c:sk_setup_caps(struct sock *sk, struct dst_entry *dst)
net/core/sock.c:sock_alloc_send_pskb()
net/core/sock.c:sock_init_data(struct socket *sock, struct sock *sk)
net/core/sock.c:sock_wfree(struct sk_buff *skb)
net/ipv4/tcp.c:__tcp_close(struct sock *sk, long timeout)
net/ipv4/tcp.c:__tcp_splice_read(struct sock *sk, struct tcp_splice_state *tss)
net/ipv4/tcp.c:tcp_abort(struct sock *sk, int err)
net/ipv4/tcp.c:tcp_check_oom(struct sock *sk, int shift)
net/ipv4/tcp.c:tcp_close(struct sock *sk, long timeout)
net/ipv4/tcp.c:tcp_disconnect(struct sock *sk, int flags)
net/ipv4/tcp.c:tcp_done(struct sock *sk)
net/ipv4/tcp.c:tcp_enter_memory_pressure(struct sock *sk)
net/ipv4/tcp.c:tcp_init_sock(struct sock *sk)
net/ipv4/tcp.c:tcp_leave_memory_pressure(struct sock *sk)
net/ipv4/tcp.c:tcp_rtx_queue_purge(struct sock *sk)
net/ipv4/tcp.c:tcp_set_state(struct sock *sk, int state)
net/ipv4/tcp.c:tcp_shutdown(struct sock *sk, int how)
net/ipv4/tcp.c:tcp_splice_read(struct socket *sock, loff_t *ppos, struct pipe_inode_info *pipe, size_t len, unsigned int flags)
net/ipv4/tcp.c:tcp_write_queue_purge(struct sock *sk)
net/ipv6/af_inet6.c:__inet6_bind(struct sock *sk, struct sockaddr *uaddr, int addr_len, u32 flags)
net/ipv6/af_inet6.c:inet6_bind(struct socket *sock, struct sockaddr *uaddr, int addr_len)
net/ipv6/af_inet6.c:inet6_compat_routing_ioctl(struct sock *sk, unsigned int cmd, struct compat_in6_rtmsg __user *ur)
net/ipv6/af_inet6.c:inet6_create(struct net *net, struct socket *sock, int protocol, int kern)
net/ipv6/af_inet6.c:inet6_destroy_sock(struct sock *sk)
net/ipv6/af_inet6.c:inet6_getname(struct socket *sock, struct sockaddr *uaddr, int peer)
net/ipv6/af_inet6.c:inet6_ioctl(struct socket *sock, unsigned int cmd, unsigned long arg)
net/ipv6/af_inet6.c:inet6_net_init(struct net *net)
net/ipv6/af_inet6.c:inet6_recvmsg(struct socket *sock, struct msghdr *msg, size_t size, int flags)
net/ipv6/af_inet6.c:inet6_register_protosw(struct inet_protosw *p)
net/ipv6/af_inet6.c:inet6_release(struct socket *sock)
net/ipv6/af_inet6.c:inet6_sk_rebuild_header(struct sock *sk)
net/ipv6/af_inet6.c:ipv6_cleanup_mibs(struct net *net)
net/ipv6/af_inet6.c:ipv6_init_mibs(struct net *net)
net/ipv6/af_inet6.c:ipv6_opt_accepted(const struct sock *sk, const struct sk_buff *skb, const struct inet6_skb_parm *opt)
net/socket.c:__sock_release(struct socket *sock, struct inode *inode)
net/socket.c:sock_alloc()
net/socket.c:sock_alloc_file()
net/socket.c:sock_alloc_inode()
sock_close()
net/socket.c:sock_map_fd(struct socket *sock, int flags)
net/socket.c:sockfs_setattr(struct user_namespace *mnt_userns, struct dentry *dentry, struct iattr *iattr)
net/socket.c:sockfs_xattr_get(const struct xattr_handler *handler, struct dentry *dentry, struct inode *inode, const char *suffix, void *value, size_t size)
include/net/sock.h:sk_add_node_rcu(struct sock *sk, struct hlist_head *list)
include/net/sock.h:sk_del_node_init(struct sock *sk)
include/net/sock.h:sk_mem_reclaim(struct sock *sk)
include/net/sock.h:sk_mem_reclaim_partial(struct sock *sk)
include/net/sock.h:sk_mem_uncharge(struct sock *sk, int size)
include/net/sock.h:sk_nulls_del_node_init_rcu(struct sock *sk)
include/net/sock.h:sk_prot_clear_nulls(struct sock *sk, int size)
include/net/sock.h:sk_under_memory_pressure(const struct sock *sk)
net/ipv4/af_inet.c:__inet_bind(struct sock *sk, struct sockaddr *uaddr, int addr_len, u32 flags)
net/ipv4/af_inet.c:__inet_stream_connect(struct socket *sock, struct sockaddr *uaddr, int addr_len, int flags, int is_sendmsg)
net/ipv4/af_inet.c:inet_accept(struct socket *sock, struct socket *newsock, int flags, bool kern)
net/ipv4/af_inet.c:inet_bind(struct socket *sock, struct sockaddr *uaddr, int addr_len)
net/ipv4/af_inet.c:inet_create(struct net *net, struct socket *sock, int protocol, int kern)
net/ipv4/af_inet.c:inet_listen(struct socket *sock, int backlog)
net/ipv4/af_inet.c:inet_release(struct socket *sock)
net/ipv4/af_inet.c:inet_sock_destruct(struct sock *sk)
kernel/exit.c:__exit_signal(struct task_struct *tsk)
kernel/exit.c:do_exit(long code)
kernel/exit.c:do_group_exit(int exit_code)
fs/file_table.c:__fput(struct file *file)
fs/file_table.c:file_free_rcu(struct rcu_head *head)
fs/file_table.c:fput_many(struct file *file, unsigned int refs)
kernel/task_work.c:task_work_add(struct task_struct *task, struct callback_head *work, enum task_work_notify_mode notify)
kernel/task_work.c:task_work_run(void)
func for case c203af981f0f7cc27debda75f35d852546cc6013
net/ipv6/ip6_gre.c:__gre6_xmit(struct sk_buff *skb, struct net_device *dev, __u8 dsfield, struct flowi6 *fl6, int encap_limit, __u32 *pmtu, __be16 proto)
net/ipv6/ip6_gre.c:ip6erspan_rcv(struct sk_buff *skb, struct tnl_ptk_info *tpi, int gre_hdr_len)
net/ipv6/ip6_gre.c:ip6erspan_tunnel_xmit(struct sk_buff *skb, struct net_device *dev)
net/ipv6/ip6_gre.c:ip6gre_err(struct sk_buff *skb, struct inet6_skb_parm *opt, u8 type, u8 code, int offset, __be32 info)
net/ipv6/ip6_gre.c:ip6gre_rcv(struct sk_buff *skb, const struct tnl_ptk_info *tpi)
net/ipv6/ip6_gre.c:ip6gre_tunnel_find()
net/ipv6/ip6_gre.c:ip6gre_tunnel_locate()
net/ipv6/ip6_gre.c:ip6gre_tunnel_uninit(struct net_device *dev)
net/ipv6/ip6_gre.c:ip6gre_tunnel_xmit(struct sk_buff *skb, struct net_device *dev)
net/ipv6/ip6_gre.c:ip6gre_xmit_ipv4(struct sk_buff *skb, struct net_device *dev)
net/ipv6/ip6_gre.c:ip6gre_xmit_ipv6(struct sk_buff *skb, struct net_device *dev)
net/ipv6/ip6_gre.c:ip6gre_xmit_other(struct sk_buff *skb, struct net_device *dev)
net/ipv6/ip6_gre.c:prepare_ip6gre_xmit_ipv4(struct sk_buff *skb, struct net_device *dev, struct flowi6 *fl6, __u8 *dsfield, int *encap_limit)
net/ipv6/ip6_gre.c:prepare_ip6gre_xmit_ipv6(struct sk_buff *skb, struct net_device *dev, struct flowi6 *fl6, __u8 *dsfield, int *encap_limit)
net/ipv6/ip6_gre.c:prepare_ip6gre_xmit_other(struct sk_buff *skb, struct net_device *dev, struct flowi6 *fl6, __u8 *dsfield, int *encap_limit)
include/linux/skbuff.h:__skb_cow(struct sk_buff *skb, unsigned int headroom, int cloned)
net/ipv6/ip6_gre.c:ip6erspan_tunnel_xmit(struct sk_buff *skb, struct net_device *dev)
include/linux/skbuff.h:skb_clear_delivery_time(struct sk_buff *skb)
include/linux/skbuff.h:skb_ext_reset(struct sk_buff *skb)
include/linux/skbuff.h:skb_frag_unref(struct sk_buff *skb, int f)
include/linux/skbuff.h:skb_header_unclone(struct sk_buff *skb, gfp_t pri)
skb_mac_header()
include/linux/skbuff.h:skb_mac_header_rebuild(struct sk_buff *skb)
include/linux/skbuff.h:skb_orphan(struct sk_buff *skb)
include/linux/skbuff.h:skb_orphan_frags(struct sk_buff *skb, gfp_t gfp_mask)
include/linux/skbuff.h:skb_probe_transport_header(struct sk_buff *skb)
include/linux/skbuff.h:skb_set_redirected(struct sk_buff *skb, bool from_ingress)
include/linux/skbuff.h:skb_share_check()
include/linux/skbuff.h:skb_tailroom_reserve(struct sk_buff *skb, unsigned int mtu, unsigned int needed_tailroom)
include/linux/skbuff.h:skb_tstamp_cond(const struct sk_buff *skb, bool cond)
include/linux/skbuff.h:skb_unclone(struct sk_buff *skb, gfp_t pri)
include/linux/skbuff.h:skb_unshare()
net/core/dev.c:__dev_direct_xmit(struct sk_buff *skb, u16 queue_id)
net/core/dev.c:__dev_kfree_skb_irq(struct sk_buff *skb, enum skb_free_reason reason)
net/core/dev.c:__skb_gso_segment()
net/core/dev.c:dev_hard_start_xmit()
net/core/dev.c:gso_features_check(const struct sk_buff *skb, struct net_device *dev, netdev_features_t features)
net/core/dev.c:harmonize_features(struct sk_buff *skb, netdev_features_t features)
net/core/dev.c:illegal_highdma(struct net_device *dev, struct sk_buff *skb)
net/core/dev.c:netif_skb_features(struct sk_buff *skb)
net/core/dev.c:netif_tx_wake_queue(struct netdev_queue *dev_queue)
net/core/dev.c:skb_checksum_help(struct sk_buff *skb)
net/core/dev.c:skb_csum_hwoffload_help(struct sk_buff *skb, const netdev_features_t features)
net/core/dev.c:skb_network_protocol(struct sk_buff *skb, int *depth)
net/core/dev.c:skb_tx_hash(const struct net_device *dev, const struct net_device *sb_dev, struct sk_buff *skb)
net/core/dev.c:skb_warn_bad_offload(const struct sk_buff *skb)
net/core/dev.c:xmit_one(struct sk_buff *skb, struct net_device *dev, struct netdev_queue *txq, bool more)
net/packet/af_packet.c:packet_alloc_skb()
net/packet/af_packet.c:packet_rcv(struct sk_buff *skb, struct net_device *dev, struct packet_type *pt, struct net_device *orig_dev)
net/packet/af_packet.c:packet_rcv_fanout(struct sk_buff *skb, struct net_device *dev, struct packet_type *pt, struct net_device *orig_dev)
net/packet/af_packet.c:packet_rcv_has_room(struct packet_sock *po, struct sk_buff *skb)
net/packet/af_packet.c:packet_sendmsg(struct socket *sock, struct msghdr *msg, size_t len)
net/packet/af_packet.c:packet_snd(struct socket *sock, struct msghdr *msg, size_t len)
net/packet/af_packet.c:tpacket_fill_skb(struct packet_sock *po, struct sk_buff *skb, void *frame, struct net_device *dev, void *data, int tp_len, __be16 proto, unsigned char *addr, int hlen, int copylen, const struct sockcm_cookie *sockc)
net/packet/af_packet.c:tpacket_snd(struct packet_sock *po, struct msghdr *msg)
__netdev_start_xmit()
include/linux/netdevice.h:__netdev_tx_sent_queue(struct netdev_queue *dev_queue, unsigned int bytes, bool xmit_more)
include/linux/netdevice.h:dev_direct_xmit(struct sk_buff *skb, u16 queue_id)
include/linux/netdevice.h:netdev_start_xmit(struct sk_buff *skb, struct net_device *dev, struct netdev_queue *txq, bool more)
include/linux/netdevice.h:netdev_tx_sent_queue(struct netdev_queue *dev_queue, unsigned int bytes)
include/linux/netdevice.h:netif_tx_disable(struct net_device *dev)
include/linux/netdevice.h:netif_tx_start_all_queues(struct net_device *dev)
include/linux/netdevice.h:netif_tx_wake_all_queues(struct net_device *dev)
net/socket.c:__sys_sendto(int fd, void __user *buff, size_t len, unsigned int flags, struct sockaddr __user *addr, int addr_len)
net/socket.c:__sys_setsockopt(int fd, int level, int optname, char __user *user_optval, int optlen)
net/socket.c:kernel_sendmsg_locked(struct sock *sk, struct msghdr *msg, struct kvec *vec, size_t num, size_t size)
net/socket.c:sock_init(void)
net/socket.c:sock_ioctl(struct file *file, unsigned cmd, unsigned long arg)
net/socket.c:sock_sendmsg_nosec(struct socket *sock, struct msghdr *msg)
net/socket.c:sock_sendpage(struct file *file, struct page *page, int offset, size_t size, loff_t *ppos, int more)
net/socket.c:sock_write_iter(struct kiocb *iocb, struct iov_iter *from)
include/net/sock.h:__sk_add_backlog(struct sock *sk, struct sk_buff *skb)
include/net/sock.h:sk_add_backlog(struct sock *sk, struct sk_buff *skb, unsigned int limit)
include/net/sock.h:sk_backlog_rcv(struct sock *sk, struct sk_buff *skb)
sk_eat_skb()
sk_wmem_free_skb()
include/net/sock.h:skb_set_hash_from_sk(struct sk_buff *skb, struct sock *sk)
include/net/sock.h:skb_set_owner_r(struct sk_buff *skb, struct sock *sk)
include/net/sock.h:skb_steal_sock()
net/ipv6/ip6_tunnel.c:ip6_tnl_link_config(struct ip6_tnl *t)
net/ipv6/ip6_tunnel.c:ip6_tnl_start_xmit(struct sk_buff *skb, struct net_device *dev)
net/ipv6/ip6_tunnel.c:ip6_tnl_xmit(struct sk_buff *skb, struct net_device *dev, __u8 dsfield, struct flowi6 *fl6, int encap_limit, __u32 *pmtu, __u8 proto)
af_packet()
arch/x86/entry/common.c:do_syscall_64(struct pt_regs *regs, int nr)
ip6_gre()
net/ipv6/ip6_gre.c:ip6erspan_tunnel_xmit(struct sk_buff *skb, struct net_device *dev)
net/packet/af_packet.c:packet_sendmsg(struct socket *sock, struct msghdr *msg, size_t len)
net/packet/af_packet.c:packet_snd(struct socket *sock, struct msghdr *msg, size_t len)
sk_buff()
skb_mac_header()
func for case c94a3675a626f6333d74
drivers/infiniband/core/cma.c:_cma_cancel_listens(struct rdma_id_private *id_priv)
drivers/infiniband/core/cma.c:_destroy_id(struct rdma_id_private *id_priv, enum rdma_cm_state state)
drivers/infiniband/core/cma.c:cma_cancel_operation(struct rdma_id_private *id_priv, enum rdma_cm_state state)
drivers/infiniband/core/cma.c:cma_ib_handler(struct ib_cm_id *cm_id, const struct ib_cm_event *ib_event)
drivers/infiniband/core/cma.c:cma_ib_listen(struct rdma_id_private *id_priv)
drivers/infiniband/core/cma.c:cma_iw_handler(struct iw_cm_id *iw_id, struct iw_cm_event *iw_event)
drivers/infiniband/core/cma.c:cma_iw_listen(struct rdma_id_private *id_priv, int backlog)
drivers/infiniband/core/cma.c:cma_leave_mc_groups(struct rdma_id_private *id_priv)
drivers/infiniband/core/cma.c:cma_listen_handler(struct rdma_cm_id *id, struct rdma_cm_event *event)
drivers/infiniband/core/cma.c:cma_listen_on_all(struct rdma_id_private *id_priv)
drivers/infiniband/core/cma.c:cma_listen_on_dev(struct rdma_id_private *id_priv, struct cma_device *cma_dev, struct rdma_id_private **to_destroy)
drivers/infiniband/core/cma.c:cma_release_port(struct rdma_id_private *id_priv)
drivers/infiniband/core/cma.c:cma_work_handler(struct work_struct *_work)
drivers/infiniband/core/cma.c:destroy_mc(struct rdma_id_private *id_priv, struct cma_multicast *mc)
drivers/infiniband/core/cma.c:rdma_listen(truct rdma_cm_id *id, int backlog) {)
drivers/infiniband/core/ucma.c:ucma_alloc_ctx()
drivers/infiniband/core/ucma.c:ucma_cleanup_ctx_events(struct ucma_context *ctx)
drivers/infiniband/core/ucma.c:ucma_cleanup_mc_events(struct ucma_multicast *mc)
drivers/infiniband/core/ucma.c:ucma_cleanup_multicast(struct ucma_context *ctx)
drivers/infiniband/core/ucma.c:ucma_close(struct inode *inode, struct file *filp)
drivers/infiniband/core/ucma.c:ucma_connect_event_handler(struct rdma_cm_id *cm_id, struct rdma_cm_event *event)
drivers/infiniband/core/ucma.c:ucma_create_id(struct ucma_file *file, const char __user *inbuf, int in_len, int out_len)
drivers/infiniband/core/ucma.c:ucma_destroy_id(struct ucma_file *file, const char __user *inbuf, int in_len, int out_len)
drivers/infiniband/core/ucma.c:ucma_destroy_private_ctx(struct ucma_context *ctx)
drivers/infiniband/core/ucma.c:ucma_event_handler(struct rdma_cm_id *cm_id, struct rdma_cm_event *event)
drivers/infiniband/core/ucma.c:ucma_join_ip_multicast(struct ucma_file *file, const char __user *inbuf, int in_len, int out_len)
drivers/infiniband/core/ucma.c:ucma_listen(struct ucma_file *file, const char __user *inbuf, int in_len, int out_len)
drivers/infiniband/core/ucma.c:ucma_process_join(struct ucma_file *file, struct rdma_ucm_join_mcast *cmd, int out_len)
drivers/infiniband/core/ucma.c:ucma_set_option_id(struct ucma_context *ctx, int optname, void *optval, size_t optlen)
drivers/infiniband/core/ucma.c:ucma_write(struct file *filp, const char __user *buf, size_t len, loff_t *pos)
RDMA_USER_CM()
__list_add()
lib/list_debug.c:__list_add_valid(struct list_head *new, struct list_head *prev, struct list_head *next)
lib/list_debug.c:__list_del_entry_valid(struct list_head *entry)
drivers/infiniband/core/cma.c:__rdma_create_id()
drivers/infiniband/core/cma.c:cma_listen_on_all(struct rdma_id_private *id_priv)
list_add()
list_add_tail()
drivers/infiniband/core/cma.c:rdma_create_user_id()
drivers/infiniband/core/cma.c:rdma_listen(truct rdma_cm_id *id, int backlog) {)
drivers/infiniband/core/ucma.c:ucma_close(struct inode *inode, struct file *filp)
drivers/infiniband/core/ucma.c:ucma_close_id(struct work_struct *work)
drivers/infiniband/core/ucma.c:ucma_create_id(struct ucma_file *file, const char __user *inbuf, int in_len, int out_len)
drivers/infiniband/core/ucma.c:ucma_destroy_private_ctx(struct ucma_context *ctx)
drivers/infiniband/core/ucma.c:ucma_listen(struct ucma_file *file, const char __user *inbuf, int in_len, int out_len)
drivers/infiniband/core/ucma.c:ucma_write(struct file *filp, const char __user *buf, size_t len, loff_t *pos)
mm/kasan/common.c:____kasan_kmalloc()
mm/kasan/common.c:____kasan_slab_free(struct kmem_cache *cache, void *object, unsigned long ip, bool quarantine, bool init)
mm/kasan/common.c:__kasan_cache_create(struct kmem_cache *cache, unsigned int *size, slab_flags_t *flags)
mm/kasan/common.c:__kasan_kmalloc_large()
mm/kasan/common.c:__kasan_krealloc()
mm/kasan/common.c:__kasan_slab_alloc()
mm/kasan/common.c:optimal_redzone(unsigned int object_size)
mm/kasan/common.c:set_alloc_info(struct kmem_cache *cache, void *object, gfp_t flags, bool is_kmalloc)
mm/slub.c:__slab_free(struct kmem_cache *s, struct slab *slab, void *head, void *tail, int cnt, unsigned long addr)
mm/slub.c:do_slab_free(struct kmem_cache *s, struct slab *slab, void *head, void *tail, int cnt, unsigned long addr)
mm/slub.c:free_consistency_checks(struct kmem_cache *s, struct slab *slab, void *object, unsigned long addr)
mm/slub.c:free_debug_processing(struct kmem_cache *s, struct slab *slab, void *head, void *tail, int bulk_cnt, unsigned long addr)
mm/slub.c:kmem_cache_free(struct kmem_cache *s, void *x)
mm/slub.c:slab_free(struct kmem_cache *s, struct slab *slab, void *head, void *tail, int cnt, unsigned long addr)
mm/slub.c:slab_free_freelist_hook(struct kmem_cache *s, void **head, void **tail, int *cnt)
mm/slub.c:slab_free_hook(struct kmem_cache *s, void *x, bool init)
kernel/rcu/tree.c:__call_rcu(struct rcu_head *head, rcu_callback_t func)
kfree_rcu_drain_unlock()
kernel/rcu/tree.c:kfree_rcu_work(struct work_struct *work)
kernel/rcu/tree.c:kvfree_call_rcu(struct rcu_head *head, rcu_callback_t func)
queue_kfree_rcu_work()
kernel/rcu/tree.c:rcu_barrier_callback(struct rcu_head *rhp)
kernel/rcu/tree.c:rcu_init_one(void)
kernel/rcu/tree.c:rcu_report_dead(unsigned int cpu)
net/core/sock.c:__sk_destruct(struct rcu_head *head)
net/core/sock.c:__sk_free(struct sock *sk)
net/core/sock.c:sk_alloc()
net/core/sock.c:sk_clone_lock()
net/core/sock.c:sk_destruct(struct sock *sk)
net/core/sock.c:sk_free(struct sock *sk)
net/core/sock.c:sk_init_common(struct sock *sk)
net/core/sock.c:sk_prot_alloc()
net/netlink/af_netlink.c:__netlink_create(struct net *net, struct socket *sock, struct mutex *cb_mutex, int protocol, int kern)
net/netlink/af_netlink.c:netlink_insert(struct sock *sk, u32 portid)
net/netlink/af_netlink.c:netlink_release(struct socket *sock)
fs/file_table.c:__fput(struct file *file)
fs/file_table.c:file_free_rcu(struct rcu_head *head)
file_table()
fs/file_table.c:fput_many(struct file *file, unsigned int refs)
kernel/task_work.c:task_work_add(struct task_struct *task, struct callback_head *work, enum task_work_notify_mode notify)
kernel/task_work.c:task_work_run(void)
func for case 63dec323ac56c28e644f
lib/iov_iter.c:__iov_iter_get_pages_alloc(struct iov_iter *i, struct page ***pages, size_t maxsize, unsigned int maxpages, size_t *start)
lib/iov_iter.c:_copy_from_iter(void *addr, size_t bytes, struct iov_iter *i)
lib/iov_iter.c:copy_page_from_iter(struct page *page, size_t offset, size_t bytes, struct iov_iter *i)
lib/iov_iter.c:copy_page_from_iter_atomic(struct page *page, unsigned offset, size_t bytes, struct iov_iter *i)
lib/iov_iter.c:fault_in_iov_iter_writeable(const struct iov_iter *i, size_t size)
lib/iov_iter.c:iov_iter_advance(struct iov_iter *i, size_t size)
lib/iov_iter.c:iov_iter_bvec_advance(struct iov_iter *i, size_t size)
lib/iov_iter.c:iov_iter_extract_bvec_pages(struct iov_iter *i, struct page ***pages, size_t maxsize, unsigned int maxpages, iov_iter_extraction_t extraction_flags, size_t *offset0)
lib/iov_iter.c:iov_iter_extract_kvec_pages(struct iov_iter *i, struct page ***pages, size_t maxsize, unsigned int maxpages, iov_iter_extraction_t extraction_flags, size_t *offset0)
lib/iov_iter.c:iov_iter_extract_pages(struct iov_iter *i, struct page ***pages, size_t maxsize, unsigned int maxpages, iov_iter_extraction_t extraction_flags, size_t *offset0)
lib/iov_iter.c:iov_iter_extract_user_pages(struct iov_iter *i, struct page ***pages, size_t maxsize, unsigned int maxpages, iov_iter_extraction_t extraction_flags, size_t *offset0)
lib/iov_iter.c:iov_iter_extract_xarray_pages(struct iov_iter *i, struct page ***pages, size_t maxsize, unsigned int maxpages, iov_iter_extraction_t extraction_flags, size_t *offset0)
lib/iov_iter.c:iov_iter_iovec_advance(struct iov_iter *i, size_t size)
lib/iov_iter.c:iter_xarray_get_pages(struct iov_iter *i, struct page ***pages, size_t maxsize, unsigned maxpages, size_t *_start_offset)
lib/iov_iter.c:iter_xarray_populate_pages(struct page **pages, struct xarray *xa, pgoff_t index, unsigned int nr_pages)
lib/iov_iter.c:_copy_from_iter(void *addr, size_t bytes, struct iov_iter *i)
block/blk-map.c:bio_alloc_map_data()
block/blk-map.c:bio_copy_kern()
block/blk-map.c:bio_copy_to_iter(struct bio *bio, struct iov_iter iter)
block/blk-map.c:bio_copy_user_iov(struct request *rq, struct rq_map_data *map_data, struct iov_iter *iter, gfp_t gfp_mask)
block/blk-map.c:bio_invalidate_vmalloc_pages(struct bio *bio)
block/blk-map.c:bio_map_kern()
block/blk-map.c:bio_map_user_iov(struct request *rq, struct iov_iter *iter, gfp_t gfp_mask)
block/blk-map.c:bio_uncopy_user(struct bio *bio)
block/blk-map.c:blk_rq_append_bio(struct request *rq, struct bio *bio)
block/blk-map.c:blk_rq_map_bio_alloc()
block/blk-map.c:blk_rq_map_kern(struct request_queue *q, struct request *rq, void *kbuf, unsigned int len, gfp_t gfp_mask)
block/blk-map.c:blk_rq_map_user_bvec(struct request *rq, const struct iov_iter *iter)
block/blk-map.c:blk_rq_map_user_io(struct request *req, struct rq_map_data *map_data, void __user *ubuf, unsigned long buf_len, gfp_t gfp_mask, bool vec, int iov_count, bool check_iter_count, int rw)
block/blk-map.c:blk_rq_map_user_iov(struct request_queue *q, struct request *rq, struct rq_map_data *map_data, const struct iov_iter *iter, gfp_t gfp_mask)
block/blk-map.c:blk_rq_unmap_user(struct bio *bio)
lib/iov_iter.c:_copy_from_iter(void *addr, size_t bytes, struct iov_iter *i)
drivers/scsi/sg.c:sg_add_request()
drivers/scsi/sg.c:sg_build_indirect(Sg_scatter_hold * schp, Sg_fd * sfp, int buff_size)
drivers/scsi/sg.c:sg_build_reserve(Sg_fd * sfp, int req_size)
drivers/scsi/sg.c:sg_common_write(Sg_fd * sfp, Sg_request * srp, unsigned char *cmnd, int timeout, int blocking)
drivers/scsi/sg.c:sg_finish_rem_req(Sg_request *srp)
drivers/scsi/sg.c:sg_link_reserve(Sg_fd * sfp, Sg_request * srp, int size)
drivers/scsi/sg.c:sg_new_read(Sg_fd * sfp, char __user *buf, size_t count, Sg_request * srp)
drivers/scsi/sg.c:sg_new_write(Sg_fd *sfp, struct file *file, const char __user *buf, size_t count, int blocking, int read_only, int sg_io_owned, Sg_request **o_srp)
drivers/scsi/sg.c:sg_read(struct file *filp, char __user *buf, size_t count, loff_t * ppos)
drivers/scsi/sg.c:sg_remove_request(Sg_fd * sfp, Sg_request * srp)
drivers/scsi/sg.c:sg_remove_scat(Sg_fd * sfp, Sg_scatter_hold * schp)
drivers/scsi/sg.c:sg_rq_end_io(struct request *rq, blk_status_t status)
drivers/scsi/sg.c:sg_start_req(Sg_request *srp, unsigned char *cmd)
drivers/scsi/sg.c:sg_unlink_reserve(Sg_fd * sfp, Sg_request * srp)
drivers/scsi/sg.c:sg_write(struct file *filp, const char __user *buf, size_t count, loff_t * ppos)
lib/iov_iter.c:_copy_from_iter(void *addr, size_t bytes, struct iov_iter *i)
copy_from_iter()
copy_from_iter_flushcache()
include/linux/uio.h:copy_from_iter_full_nocache(void *addr, size_t bytes, struct iov_iter *i)
copy_from_iter_nocache()
copy_mc_to_iter()
copy_to_iter()
iov_iter_iovec()
include/linux/uio.h:iov_iter_truncate(struct iov_iter *i, u64 count)
include/linux/bio.h:bio_advance_iter(const struct bio *bio, struct bvec_iter *iter, unsigned int bytes)
bio_cur_bytes()
bio_full()
include/linux/bio.h:bio_has_data(struct bio *bio)
include/linux/bio.h:bio_integrity_flagged(struct bio *bio, enum bip_flags flag)
bio_mergeable()
include/linux/bio.h:bio_next_segment(const struct bio *bio, struct bvec_iter_all *iter)
include/linux/bio.h:bio_segments(struct bio *bio)
include/linux/scatterlist.h:__sg_chain(struct scatterlist *chain_sg, struct scatterlist *sgl)
include/linux/scatterlist.h:sg_assign_page(struct scatterlist *sg, struct page *page)
include/linux/scatterlist.h:sg_mark_end(struct scatterlist *sg)
fs/read_write.c:do_iter_readv_writev(struct file *filp, struct iov_iter *iter, loff_t *ppos, int type, rwf_t flags)
fs/read_write.c:do_iter_write(struct file *file, struct iov_iter *iter, loff_t *pos, rwf_t flags)
fs/read_write.c:do_loop_readv_writev(struct file *filp, struct iov_iter *iter, loff_t *ppos, int type, rwf_t flags)
fs/read_write.c:do_writev(unsigned long fd, const struct iovec __user *vec, unsigned long vlen, rwf_t flags)
fs/read_write.c:new_sync_write(struct file *filp, const char __user *buf, size_t len, loff_t *ppos)
read_write()
fs/read_write.c:vfs_iocb_iter_write(struct file *file, struct kiocb *iocb, struct iov_iter *iter)
fs/read_write.c:vfs_write(struct file *file, const char __user *buf, size_t count, loff_t *pos)
fs/read_write.c:vfs_writev(struct file *file, const struct iovec __user *vec, unsigned long vlen, loff_t *pos, rwf_t flags)
block/blk-core.c:__submit_bio_noacct(struct bio *bio)
lib/iov_iter.c:_copy_from_iter(void *addr, size_t bytes, struct iov_iter *i)
block/blk-core.c:bio_check_eod(struct bio *bio)
block/blk-map.c:bio_copy_from_iter(struct bio *bio, struct iov_iter *iter)
block/blk-map.c:blk_rq_map_user_iov(struct request_queue *q, struct request *rq, struct rq_map_data *map_data, const struct iov_iter *iter, gfp_t gfp_mask)
copy_from_iter()
iov_iter()
block/blk-core.c:submit_bio(struct bio *bio)
func for case 6879187cf57845801267
fs/io_uring.c:__io_queue_sqe(struct io_kiocb *req, struct io_comp_state *cs)
fs/io_uring.c:io_allocate_scq_urings(struct io_ring_ctx *ctx, struct io_uring_params *p)
fs/io_uring.c:io_file_get()
fs/io_uring.c:io_queue_sqe(struct io_kiocb *req, const struct io_uring_sqe *sqe, struct io_comp_state *cs)
fs/io_uring.c:io_ring_ctx_free(struct io_ring_ctx *ctx)
fs/io_uring.c:io_ring_exit_work(struct work_struct *work)
fs/io_uring.c:io_sqe_file_register(struct io_ring_ctx *ctx, struct file *file, int index)
io_sqe_files_()
fs/io_uring.c:io_sqe_files_register(struct io_ring_ctx *ctx, void __user *arg, unsigned nr_args)
fs/io_uring.c:io_sqe_files_update(struct io_ring_ctx *ctx, void __user *arg, unsigned nr_args)
fs/io_uring.c:io_submit_sqe(struct io_kiocb *req, const struct io_uring_sqe *sqe, struct io_submit_link *link, struct io_comp_state *cs)
fs/io_uring.c:io_submit_sqes(struct io_ring_ctx *ctx, unsigned int nr)
io_uring()
fs/io_uring.c:io_uring_create(unsigned entries, struct io_uring_params *p, struct io_uring_params __user *params)
io_uring_enter()
fs/io_uring.c:io_uring_release(struct inode *inode, struct file *file)
fs/io_uring.c:io_uring_setup(u32 entries, struct io_uring_params __user *params)
list_add()
include/linux/list.h:__hlist_del(struct hlist_node *n)
include/linux/list.h:__list_add(struct list_head *new, struct list_head *prev, struct list_head *next)
include/linux/list.h:__list_cut_position(struct list_head *list, struct list_head *head, struct list_head *entry)
include/linux/list.h:__list_splice(const struct list_head *list, struct list_head *prev, struct list_head *next)
include/linux/list.h:hlist_add_before(struct hlist_node *n, struct hlist_node *next)
include/linux/list.h:hlist_add_behind(struct hlist_node *n, struct hlist_node *prev)
include/linux/list.h:hlist_add_head(struct hlist_node *n, struct hlist_head *h)
include/linux/list.h:hlist_move_list(struct hlist_head *old, struct hlist_head *new)
include/linux/list.h:list_bulk_move_tail(struct list_head *head, struct list_head *first, struct list_head *last)
include/linux/list.h:list_cut_before(struct list_head *list, struct list_head *head, struct list_head *entry)
include/linux/list.h:list_cut_position(struct list_head *list, struct list_head *head, struct list_head *entry)
include/linux/list.h:list_replace(struct list_head *old, struct list_head *new)
include/linux/list.h:list_rotate_left(struct list_head *head)
include/linux/list.h:list_rotate_to_front(struct list_head *list, struct list_head *head)
include/linux/list.h:list_swap(struct list_head *entry1, struct list_head *entry2)
lib/list_debug.c:__list_add_valid(struct list_head *new, struct list_head *prev, struct list_head *next)
lib/list_debug.c:__list_del_entry_valid(struct list_head *entry)
list_add()
list_add_tail()
include/linux/list.h:list_cut_position(struct list_head *list, struct list_head *head, struct list_head *entry)
list_debug()
list_del()
list_empty()
list_empty_careful()
list_is_singular()
list_move()
list_move_tail()
include/linux/list.h:list_rotate_left(struct list_head *head)
include/linux/list.h:list_rotate_to_front(struct list_head *list, struct list_head *head)
list_splice()
list_splice_tail()
fs/file.c:alloc_fd(unsigned start, unsigned end, unsigned flags)
fs/file.c:close_fd(unsigned fd)
fs/file.c:close_fd_get_file(unsigned int fd, struct file **res)
fs/file.c:dup_fd()
fs/file.c:f_dupfd(unsigned int from, struct file *file, unsigned flags)
fs/file.c:fd_install(unsigned int fd, struct file *file)
fs/file.c:ksys_dup3(unsigned int oldfd, unsigned int newfd, int flags)
fs/file.c:replace_fd(unsigned fd, struct file *file, unsigned flags)
fs/splice.c:__do_splice(struct file *in, loff_t __user *off_in, struct file *out, loff_t __user *off_out, size_t len, unsigned int flags)
fs/splice.c:add_to_pipe(struct pipe_inode_info *pipe, struct pipe_buffer *buf)
fs/splice.c:do_splice(struct file *in, loff_t *off_in, struct file *out, loff_t *off_out, size_t len, unsigned int flags)
fs/splice.c:do_splice_to(struct file *in, loff_t *ppos, struct pipe_inode_info *pipe, size_t len, unsigned int flags)
fs/splice.c:link_pipe(struct pipe_inode_info *ipipe, struct pipe_inode_info *opipe, size_t len, unsigned int flags)
fs/splice.c:splice_from_pipe_feed(struct pipe_inode_info *pipe, struct splice_desc *sd, splice_actor *actor)
fs/splice.c:splice_pipe_to_pipe(struct pipe_inode_info *ipipe, struct pipe_inode_info *opipe, size_t len, unsigned int flags)
fs/splice.c:splice_to_pipe(struct pipe_inode_info *pipe, struct splice_pipe_desc *spd)
io_uring()
list_add()
func for case ea8d2792959aee015d8eb96d362df0c7a0d5130e
drivers/net/ppp/ppp_generic.c:__ppp_xmit_process(struct ppp *ppp, struct sk_buff *skb)
drivers/net/ppp/ppp_generic.c:ppp_create_interface(struct net *net, struct file *file, int *unit)
drivers/net/ppp/ppp_generic.c:ppp_destroy_interface(struct ppp *ppp)
drivers/net/ppp/ppp_generic.c:ppp_dev_configure(struct net *src_net, struct net_device *dev, const struct ppp_config *conf)
drivers/net/ppp/ppp_generic.c:ppp_input(struct ppp_channel *chan, struct sk_buff *skb)
drivers/net/ppp/ppp_generic.c:ppp_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
drivers/net/ppp/ppp_generic.c:ppp_push(struct ppp *ppp)
drivers/net/ppp/ppp_generic.c:ppp_receive_frame(struct ppp *ppp, struct sk_buff *skb, struct channel *pch)
drivers/net/ppp/ppp_generic.c:ppp_receive_nonmp_frame(struct ppp *ppp, struct sk_buff *skb)
drivers/net/ppp/ppp_generic.c:ppp_register_net_channel(struct net *net, struct ppp_channel *chan)
drivers/net/ppp/ppp_generic.c:ppp_send_frame(struct ppp *ppp, struct sk_buff *skb)
drivers/net/ppp/ppp_generic.c:ppp_start_xmit(struct sk_buff *skb, struct net_device *dev)
drivers/net/ppp/ppp_generic.c:ppp_unattached_ioctl(struct net *net, struct ppp_file *pf, struct file *file, unsigned int cmd, unsigned long arg)
drivers/net/ppp/ppp_generic.c:ppp_unregister_channel(struct ppp_channel *chan)
drivers/net/ppp/ppp_generic.c:ppp_xmit_process(struct ppp *ppp, struct sk_buff *skb)
net/core/flow_dissector.c:__skb_flow_dissect(const struct net *net, const struct sk_buff *skb, struct flow_dissector *flow_dissector, void *target_container, const void *data, __be16 proto, int nhoff, int hlen, unsigned int flags)
net/core/flow_dissector.c:__skb_flow_dissect_arp(const struct sk_buff *skb, struct flow_dissector *flow_dissector, void *target_container, const void *data, int nhoff, int hlen)
net/core/flow_dissector.c:__skb_flow_dissect_gre(const struct sk_buff *skb, struct flow_dissector_key_control *key_control, struct flow_dissector *flow_dissector, void *target_container, const void *data, __be16 *p_proto, int *p_nhoff, int *p_hlen, unsigned int flags)
net/core/flow_dissector.c:__skb_flow_dissect_ipv4(const struct sk_buff *skb, struct flow_dissector *flow_dissector, void *target_container, const void *data, const struct iphdr *iph)
net/core/flow_dissector.c:__skb_flow_dissect_ipv6(const struct sk_buff *skb, struct flow_dissector *flow_dissector, void *target_container, const void *data, const struct ipv6hdr *iph)
net/core/flow_dissector.c:__skb_flow_dissect_l2tpv3(const struct sk_buff *skb, struct flow_dissector *flow_dissector, void *target_container, const void *data, int nhoff, int hlen)
net/core/flow_dissector.c:__skb_flow_dissect_mpls(const struct sk_buff *skb, struct flow_dissector *flow_dissector, void *target_container, const void *data, int nhoff, int hlen, int lse_index, bool *entropy_label)
net/core/flow_dissector.c:__skb_flow_dissect_ports(const struct sk_buff *skb, struct flow_dissector *flow_dissector, void *target_container, const void *data, int nhoff, u8 ip_proto, int hlen)
net/core/flow_dissector.c:__skb_flow_dissect_tcp(const struct sk_buff *skb, struct flow_dissector *flow_dissector, void *target_container, const void *data, int thoff, int hlen)
net/core/flow_dissector.c:__skb_flow_get_ports(const struct sk_buff *skb, int thoff, u8 ip_proto, const void *data, int hlen)
net/core/flow_dissector.c:__skb_get_poff(const struct sk_buff *skb, const void *data, const struct flow_keys_basic *keys, int hlen)
net/core/flow_dissector.c:flow_dissector_bpf_prog_attach_check(struct net *net, struct bpf_prog *prog)
net/core/flow_dissector.c:skb_flow_dissect_ct(const struct sk_buff *skb, struct flow_dissector *flow_dissector, void *target_container, u16 *ctinfo_map, size_t mapsize, bool post_ct, u16 zone)
net/core/flow_dissector.c:skb_flow_dissect_tunnel_info(const struct sk_buff *skb, struct flow_dissector *flow_dissector, void *target_container)
net/core/flow_dissector.c:skb_get_poff(const struct sk_buff *skb)
sk_buff()
net/core/skbuff.c:skb_checksum_setup(struct sk_buff *skb, bool recalculate)
net/core/skbuff.c:skb_copy_bits(const struct sk_buff *skb, int offset, void *to, int len)
net/core/skbuff.c:skb_copy_expand()
net/core/skbuff.c:skb_ensure_writable(struct sk_buff *skb, unsigned int write_len)
net/core/skbuff.c:skb_maybe_pull_tail(struct sk_buff *skb, unsigned int len, unsigned int max)
net/core/skbuff.c:skb_segment()
net/core/skbuff.c:skb_shift(struct sk_buff *tgt, struct sk_buff *skb, int shiftlen)
net/core/skbuff.c:skb_store_bits(struct sk_buff *skb, int offset, const void *from, int len)
include/linux/skbuff.h:__skb_header_pointer()
skb_flow_dissect_flow_keys_basic()
include/linux/skbuff.h:skb_header_unclone(struct sk_buff *skb, gfp_t pri)
include/linux/skbuff.h:skb_mac_header_rebuild(struct sk_buff *skb)
include/linux/skbuff.h:skb_probe_transport_header(struct sk_buff *skb)
include/linux/skbuff.h:skb_share_check()
include/linux/skbuff.h:skb_unclone(struct sk_buff *skb, gfp_t pri)
include/linux/skbuff.h:skb_unshare()
net/core/flow_dissector.c:__skb_flow_dissect(const struct net *net, const struct sk_buff *skb, struct flow_dissector *flow_dissector, void *target_container, const void *data, __be16 proto, int nhoff, int hlen, unsigned int flags)
bpf_skb_get_pay_offset()
skb_flow_dissect_flow_keys_basic()
net/core/flow_dissector.c:skb_get_poff(const struct sk_buff *skb)
net/core/filter.c:bpf_check_classic(const struct sock_filter *filter, unsigned int flen)
net/core/filter.c:bpf_convert_filter(struct sock_filter *prog, int len, struct bpf_prog *new_prog, int *new_len, bool *seen_ld_abs)
net/core/filter.c:bpf_skb_copy(void *dst_buff, const void *skb, unsigned long off, unsigned long len)
bpf_skb_get_pay_offset()
net/core/filter.c:bpf_skb_is_valid_access(int off, int size, enum bpf_access_type type, const struct bpf_prog *prog, struct bpf_insn_access_aux *info)
net/core/filter.c:bpf_skb_proto_xlat(struct sk_buff *skb, __be16 to_proto)
sk_buff()
net/core/filter.c:sk_filter_trim_cap(struct sock *sk, struct sk_buff *skb, unsigned int cap)
skb_flow_dissect_flow_keys_basic()
fs/ioctl.c:do_vfs_ioctl(struct file *filp, unsigned int fd, unsigned int cmd, unsigned long arg)
fs/ioctl.c:ioctl_fioasync(unsigned int fd, struct file *filp, int __user *argp)
fs/ioctl.c:ioctl_fionbio(struct file *filp, int __user *argp)
net/core/dev.c:__dev_queue_xmit(struct sk_buff *skb, struct net_device *sb_dev)
net/core/dev.c:dev_hard_start_xmit()
net/core/dev.c:netif_receive_skb_internal(struct sk_buff *skb)
func for case 3faecbfd845a895c04cb
fs/erofs/data.c:erofs_bread()
fs/erofs/data.c:erofs_fiemap(struct inode *inode, struct fiemap_extent_info *fieinfo, u64 start, u64 len)
fs/erofs/data.c:erofs_file_mmap(struct file *file, struct vm_area_struct *vma)
fs/erofs/data.c:erofs_file_read_iter(struct kiocb *iocb, struct iov_iter *to)
fs/erofs/data.c:erofs_iomap_begin(struct inode *inode, loff_t offset, loff_t length, unsigned int flags, struct iomap *iomap, struct iomap *srcmap)
fs/erofs/data.c:erofs_iomap_end(struct inode *inode, loff_t pos, loff_t length, ssize_t written, unsigned int flags, struct iomap *iomap)
fs/erofs/data.c:erofs_map_blocks(struct inode *inode, struct erofs_map_blocks *map, int flags)
fs/erofs/data.c:erofs_map_blocks_flatmode(struct inode *inode, struct erofs_map_blocks *map, int flags)
fs/erofs/data.c:erofs_map_dev(struct super_block *sb, struct erofs_map_dev *map)
map_blocks()
fs/erofs/data.c:erofs_bread()
fs/erofs/namei.c:erofs_dirnamecmp(const struct erofs_qstr *qn, const struct erofs_qstr *qd, unsigned int *matched)
fs/erofs/namei.c:erofs_namei(struct inode *dir, const struct qstr *name, erofs_nid_t *nid, unsigned int *d_type)
fs/erofs/namei.c:find_target_block_classic()
fs/erofs/namei.c:find_target_dirent()
fs/erofs/data.c:erofs_bread()
fs/erofs/zdata.c:z_erofs_alloc_pcluster()
fs/erofs/zdata.c:z_erofs_attach_page(struct z_erofs_decompress_frontend *fe, struct z_erofs_bvec *bvec, bool exclusive)
fs/erofs/zdata.c:z_erofs_bind_cache(struct z_erofs_decompress_frontend *fe, enum z_erofs_cache_alloctype type, struct page **pagepool)
fs/erofs/zdata.c:z_erofs_collector_begin(struct z_erofs_decompress_frontend *fe)
fs/erofs/zdata.c:z_erofs_collector_end(struct z_erofs_decompress_frontend *fe)
fs/erofs/zdata.c:z_erofs_do_decompressed_bvec(struct z_erofs_decompress_backend *be, struct z_erofs_bvec *bvec)
fs/erofs/zdata.c:z_erofs_do_read_page(struct z_erofs_decompress_frontend *fe, struct page *page, struct page **pagepool)
fs/erofs/zdata.c:z_erofs_fill_other_copies(struct z_erofs_decompress_backend *be, int err)
fs/erofs/zdata.c:z_erofs_parse_in_bvecs(struct z_erofs_decompress_backend *be, bool *overlapped)
fs/erofs/zdata.c:z_erofs_parse_out_bvecs(struct z_erofs_decompress_backend *be)
fs/erofs/zdata.c:z_erofs_pcluster_readmore(struct z_erofs_decompress_frontend *f, struct readahead_control *rac, erofs_off_t end, struct page **pagepool, bool backmost)
fs/erofs/zdata.c:z_erofs_read_fragment(struct inode *inode, erofs_off_t pos, struct page *page, unsigned int pageofs, unsigned int len)
fs/erofs/zdata.c:z_erofs_register_pcluster(struct z_erofs_decompress_frontend *fe)
fs/erofs/zdata.c:z_erofs_try_inplace_io(struct z_erofs_decompress_frontend *fe, struct z_erofs_bvec *bvec)
fs/erofs/zdata.c:z_erofs_try_to_claim_pcluster(struct z_erofs_decompress_frontend *f)
fs/erofs/super.c:check_layout_compatibility(struct super_block *sb, struct erofs_super_block *dsb)
fs/erofs/super.c:erofs_fc_fill_super(struct super_block *sb, struct fs_context *fc)
fs/erofs/super.c:erofs_init_device(struct erofs_buf *buf, struct super_block *sb, struct erofs_device_info *dif, erofs_off_t *pos)
fs/erofs/super.c:erofs_init_fs_context(struct fs_context *fc)
fs/erofs/super.c:erofs_load_compr_cfgs(struct super_block *sb, struct erofs_super_block *dsb)
fs/erofs/super.c:erofs_read_superblock(struct super_block *sb)
fs/erofs/super.c:erofs_scan_devices(struct super_block *sb, struct erofs_super_block *dsb)
fs/erofs/super.c:erofs_superblock_csum_verify(struct super_block *sb, void *sbdata)
fs/erofs/inode.c:erofs_fill_inode(struct inode *inode)
fs/erofs/inode.c:erofs_fill_symlink(struct inode *inode, void *kaddr, unsigned int m_pofs)
fs/erofs/inode.c:erofs_iget()
erofs_iget5_set()
fs/erofs/inode.c:erofs_read_inode()
erofs_squash_ino()
fs/erofs/data.c:erofs_bread()
fs/erofs/dir.c:erofs_fill_dentries(struct inode *dir, struct dir_context *ctx, void *dentry_blk, struct erofs_dirent *de, unsigned int nameoff, unsigned int maxsize)
fs/erofs/dir.c:erofs_readdir(struct file *f, struct dir_context *ctx)
fs/namei.c:__lookup_hash()
fs/namei.c:do_mkdirat(int dfd, struct filename *name, umode_t mode)
fs/namei.c:filename_create()
follow_link()
fs/namei.c:link_path_walk(const char *name, struct nameidata *nd)
fs/namei.c:lookup_one_common(struct user_namespace *mnt_userns, const char *name, struct dentry *base, int len, struct qstr *this)
fs/namei.c:path_lookupat(struct nameidata *nd, unsigned flags, struct path *path)
fs/namei.c:vfs_mkdir(struct user_namespace *mnt_userns, struct inode *dir, struct dentry *dentry, umode_t mode)
mm/filemap.c:do_read_cache_folio()
mm/filemap.c:filemap_get_pages(struct kiocb *iocb, struct iov_iter *iter, struct folio_batch *fbatch)
mm/filemap.c:filemap_read_folio(struct file *file, filler_t filler, struct folio *folio)
fs/erofs/data.c:erofs_bread()
erofs_iloc()
fs/erofs/internal.h:erofs_vm_map_ram()
fs/erofs/internal.h:z_erofs_load_lz4_config(struct super_block *sb, struct erofs_super_block *dsb, struct z_erofs_lz4_cfgs *lz4, int len)
fs/erofs/internal.h:z_erofs_load_lzma_config(struct super_block *sb, struct erofs_super_block *dsb, struct z_erofs_lzma_cfgs *lzma, int size)
func for case afd2d80e495f96049571
NETLINK_DROP_MEMBERSHIP()
err_add()
err_deliver()
net_exit_batch()
net_init()
net/netfilter/nfnetlink.c:nfnetlink_bind(struct net *net, int group)
net/netfilter/nfnetlink.c:nfnetlink_init(void)
net/netfilter/nfnetlink.c:nfnetlink_net_exit_batch(struct list_head *net_exit_list)
net/netfilter/nfnetlink.c:nfnetlink_net_init(struct net *net)
net/netfilter/nfnetlink.c:nfnetlink_rcv(struct sk_buff *skb)
net/netfilter/nfnetlink.c:nfnetlink_rcv_batch(struct sk_buff *skb, struct nlmsghdr *nlh, u16 subsys_id, u32 genid)
net/netfilter/nfnetlink.c:nfnetlink_rcv_msg(struct sk_buff *skb, struct nlmsghdr *nlh, struct netlink_ext_ack *extack)
net/netfilter/nfnetlink.c:nfnetlink_rcv_skb_batch(struct sk_buff *skb, struct nlmsghdr *nlh)
net/netfilter/nfnetlink.c:nfnetlink_subsys_register(const struct nfnetlink_subsystem *n)
net/netfilter/nfnetlink.c:nfnetlink_unbind(struct net *net, int group)
net/netfilter/nfnetlink.c:nfnetlink_unicast(struct sk_buff *skb, struct net *net, u32 portid)
net/netfilter/nfnetlink.c:nfnl_err_add(struct list_head *list, struct nlmsghdr *nlh, int err, const struct netlink_ext_ack *extack)
net/netfilter/nfnetlink.c:nfnl_err_deliver(struct list_head *err_list, struct sk_buff *skb)
NETLINK_DROP_MEMBERSHIP()
net/netlink/af_netlink.c:__netlink_clear_multicast_users(struct sock *ksk, unsigned int group)
net/netlink/af_netlink.c:__netlink_create(struct net *net, struct socket *sock, struct mutex *cb_mutex, int protocol, int kern)
clear_multicast_users()
net/netlink/af_netlink.c:netlink_bind(struct socket *sock, struct sockaddr *addr, int addr_len)
net/netlink/af_netlink.c:netlink_create(struct net *net, struct socket *sock, int protocol, int kern)
net/netlink/af_netlink.c:netlink_getsockbyportid()
net/netlink/af_netlink.c:netlink_insert(struct sock *sk, u32 portid)
net/netlink/af_netlink.c:netlink_realloc_groups(struct sock *sk)
net/netlink/af_netlink.c:netlink_release(struct socket *sock)
net/netlink/af_netlink.c:netlink_remove(struct sock *sk)
net/netlink/af_netlink.c:netlink_setsockopt(struct socket *sock, int level, int optname, sockptr_t optval, unsigned int optlen)
net/netlink/af_netlink.c:netlink_sock_destruct(struct sock *sk)
net/netlink/af_netlink.c:netlink_undo_bind(int group, long unsigned int groups, struct sock *sk)
net/netlink/af_netlink.c:netlink_update_listeners(struct sock *sk)
net/netlink/af_netlink.c:netlink_update_socket_mc(struct netlink_sock *nlk, unsigned int group, int is_new)
net/netlink/af_netlink.c:netlink_update_subscriptions(struct sock *sk, unsigned int subscriptions)
realloc_groups()
update_socket_mc()
update_subscriptions()
net/socket.c:____sys_recvmsg(struct socket *sock, struct msghdr *msg_sys, struct user_msghdr __user *msg, struct sockaddr __user *uaddr, unsigned int flags, int nosec)
net/socket.c:____sys_sendmsg(struct socket *sock, struct msghdr *msg_sys, unsigned int flags, struct used_address *used_address, unsigned int allowed_msghdr_flags)
net/socket.c:___sys_recvmsg(struct socket *sock, struct user_msghdr __user *msg, struct msghdr *msg_sys, unsigned int flags, int nosec)
net/socket.c:___sys_sendmsg(struct socket *sock, struct user_msghdr __user *msg, struct msghdr *msg_sys, unsigned int flags, struct used_address *used_address, unsigned int allowed_msghdr_flags)
net/socket.c:__copy_msghdr_from_user(struct msghdr *kmsg, struct user_msghdr __user *umsg, struct sockaddr __user **save_addr, struct iovec __user **uiov, size_t *nsegs)
net/socket.c:__sock_create(struct net *net, int family, int type, int protocol, struct socket **res, int kern)
net/socket.c:__sys_getsockopt(int fd, int level, int optname, char __user *optval, int __user *optlen)
net/socket.c:__sys_recvmsg(int fd, struct user_msghdr __user *msg, unsigned int flags, bool forbid_cmsg_compat)
net/socket.c:__sys_setsockopt(int fd, int level, int optname, char __user *user_optval, int optlen)
net/socket.c:__sys_socketpair(int family, int type, int protocol, int __user *usockvec)
net/socket.c:copy_msghdr_from_user(struct msghdr *kmsg, struct user_msghdr __user *umsg, struct sockaddr __user **save_addr, struct iovec **iov)
net/socket.c:recvmsg_copy_msghdr(struct msghdr *msg, struct user_msghdr __user *umsg, unsigned flags, struct sockaddr __user **uaddr, struct iovec **iov)
net/socket.c:sendmsg_copy_msghdr(struct msghdr *msg, struct user_msghdr __user *umsg, unsigned flags, struct iovec **iov)
net/socket.c:sock_alloc_file()
net/socket.c:sock_alloc_inode()
netlink_NETLINK_DROP_MEMBERSHIP()
nf_tables_api()
net/netfilter/nf_tables_api.c:nf_tables_bind_set(const struct nft_ctx *ctx, struct nft_set *set, struct nft_set_binding *binding)
net/netfilter/nf_tables_api.c:nf_tables_deactivate_set(const struct nft_ctx *ctx, struct nft_set *set, struct nft_set_binding *binding, enum nft_trans_phase phase)
net/netfilter/nf_tables_api.c:nf_tables_delset(struct sk_buff *skb, const struct nfnl_info *info, const struct nlattr * const nla[])
net/netfilter/nf_tables_api.c:nf_tables_newset(struct sk_buff *skb, const struct nfnl_info *info, const struct nlattr * const nla[])
net/netfilter/nf_tables_api.c:nf_tables_set_notify(const struct nft_ctx *ctx, const struct nft_set *set, int event, gfp_t gfp_flags)
net/netfilter/nf_tables_api.c:nf_tables_unbind_set(const struct nft_ctx *ctx, struct nft_set *set, struct nft_set_binding *binding, bool event)
net/netfilter/nfnetlink.c:nfnetlink_unbind(struct net *net, int group)
net/netfilter/nf_tables_api.c:nft_ctx_init(struct nft_ctx *ctx, struct net *net, const struct sk_buff *skb, const struct nlmsghdr *nlh, u8 family, struct nft_table *table, struct nft_chain *chain, const struct nlattr * const *nla)
net/netfilter/nf_tables_api.c:nft_set_lookup()
include/linux/netfilter.h:NF_HOOK_LIST(uint8_t pf, unsigned int hook, struct net *net, struct sock *sk, struct list_head *head, struct net_device *in, struct net_device *out, int (*okfn)(struct net *, struct sock *, struct sk_buff *))
include/linux/netfilter.h:nf_hook(u_int8_t pf, unsigned int hook, struct net *net, struct sock *sk, struct sk_buff *skb, struct net_device *indev, struct net_device *outdev, int (*okfn)(struct net *, struct sock *, struct sk_buff *))
include/linux/netfilter.h:nf_hook_entries_get_hook_ops()
include/linux/netfilter.h:nf_hook_state_init(struct nf_hook_state *p, unsigned int hook, u_int8_t pf, struct net_device *indev, struct net_device *outdev, struct sock *sk, struct net *net, int (*okfn)(struct net *, struct sock *, struct sk_buff *))
include/linux/netfilter.h:nf_inet_addr_cmp(const union nf_inet_addr *a1, const union nf_inet_addr *a2)
include/linux/netfilter.h:nf_inet_addr_mask(const union nf_inet_addr *a1, union nf_inet_addr *result, const union nf_inet_addr *mask)
include/linux/netfilter.h:nf_nat_decode_session(struct sk_buff *skb, struct flowi *fl, u_int8_t family)
net/core/net_namespace.c:__peernet2id(const struct net *net, struct net *peer)
net/core/net_namespace.c:alloc_netid(struct net *net, struct net *peer, int reqid)
net/core/net_namespace.c:get_net_ns_by_id()
net_namespace()
net/core/net_namespace.c:peernet2id_alloc(struct net *net, struct net *peer, gfp_t gfp)
rtnl_net_()
net/core/net_namespace.c:rtnl_net_getid(struct sk_buff *skb, struct nlmsghdr *nlh, struct netlink_ext_ack *extack)
net/core/net_namespace.c:rtnl_net_newid(struct sk_buff *skb, struct nlmsghdr *nlh, struct netlink_ext_ack *extack)
net/core/net_namespace.c:rtnl_net_notifyid(struct net *net, int cmd, int id, u32 portid, struct nlmsghdr *nlh, gfp_t gfp)
net/core/net_namespace.c:setup_net(struct net *net, struct user_namespace *user_ns)
NETLINK_DROP_MEMBERSHIP()
nf_tables()
net/netfilter/nfnetlink.c:nfnetlink_unbind(struct net *net, int group)
NETLINK_DROP_MEMBERSHIP()
nf_conntrack()
include/net/netfilter/nf_conntrack.h:nf_conntrack_get_ht(struct hlist_nulls_head **hash, unsigned int *hsize)
include/net/netfilter/nf_conntrack.h:nf_ct_get()
net/netfilter/nfnetlink.c:nfnetlink_unbind(struct net *net, int group)
func for case ec3b3128c576e109171d
drivers/media/rc/mceusb.c:mce_write(struct mceusb_dev *ir, u8 *data, int size)
drivers/media/rc/mceusb.c:mceusb_cmd_datasize(u8 cmd, u8 subcmd)
drivers/media/rc/mceusb.c:mceusb_defer_kevent(struct mceusb_dev *ir, int kevent)
drivers/media/rc/mceusb.c:mceusb_deferred_kevent(struct work_struct *work)
drivers/media/rc/mceusb.c:mceusb_dev_printdata(struct mceusb_dev *ir, u8 *buf, int buf_len, int offset, int len, bool out)
drivers/media/rc/mceusb.c:mceusb_dev_recv(struct urb *urb)
drivers/media/rc/mceusb.c:mceusb_gen1_init(struct mceusb_dev *ir)
drivers/media/rc/mceusb.c:mceusb_gen2_init(struct mceusb_dev *ir)
drivers/media/rc/mceusb.c:mceusb_get_parameters(struct mceusb_dev *ir)
drivers/media/rc/mceusb.c:mceusb_handle_command(struct mceusb_dev *ir, u8 *buf_in)
drivers/media/rc/mceusb.c:mceusb_process_ir_data(struct mceusb_dev *ir, int buf_len)
drivers/media/rc/mceusb.c:mceusb_set_rx_carrier_report(struct rc_dev *dev, int enable)
drivers/media/rc/mceusb.c:mceusb_set_rx_wideband(struct rc_dev *dev, int enable)
drivers/media/rc/mceusb.c:mceusb_set_tx_carrier(struct rc_dev *dev, u32 carrier)
drivers/media/rc/mceusb.c:mceusb_tx_ir(struct rc_dev *dev, unsigned *txbuf, unsigned count)
include/linux/usb.h:init_usb_anchor(struct usb_anchor *anchor)
drivers/media/rc/mceusb.c:mceusb_handle_command(struct mceusb_dev *ir, u8 *buf_in)
include/linux/usb.h:usb_fill_control_urb(struct urb *urb, struct usb_device *dev, unsigned int pipe, unsigned char *setup_packet, void *transfer_buffer, int buffer_length, usb_complete_t complete_fn, void *context)
include/linux/usb.h:usb_fill_int_urb(struct urb *urb, struct usb_device *dev, unsigned int pipe, void *transfer_buffer, int buffer_length, usb_complete_t complete_fn, void *context, int interval)
include/linux/usb.h:usb_make_path(struct usb_device *dev, char *buf, size_t size)
include/linux/usb.h:usb_maxpacket(struct usb_device *udev, int pipe, int is_out)
drivers/usb/core/hcd.c:__usb_hcd_giveback_urb(struct urb *urb)
drivers/usb/core/hcd.c:usb_hcd_check_unlink_urb(struct usb_hcd *hcd, struct urb *urb, int status)
drivers/usb/core/hcd.c:usb_hcd_giveback_urb(struct usb_hcd *hcd, struct urb *urb, int status)
drivers/usb/core/hcd.c:usb_hcd_link_urb_to_ep(struct usb_hcd *hcd, struct urb *urb)
drivers/usb/core/hcd.c:usb_hcd_map_urb_for_dma(struct usb_hcd *hcd, struct urb *urb, gfp_t mem_flags)
drivers/usb/core/hcd.c:usb_hcd_submit_urb(struct urb *urb, gfp_t mem_flags)
drivers/usb/core/hcd.c:usb_hcd_unlink_urb(struct urb *urb, int status)
drivers/usb/core/hcd.c:usb_hcd_unmap_urb_for_dma(struct usb_hcd *hcd, struct urb *urb)
lib/ubsan.c:__ubsan_handle_load_invalid_value(void *_data, void *val)
lib/ubsan.c:__ubsan_handle_out_of_bounds(void *_data, void *index)
lib/ubsan.c:__ubsan_handle_shift_out_of_bounds(void *_data, void *lhs, void *rhs)
lib/ubsan.c:__ubsan_handle_type_mismatch_v1(void *_data, void *ptr)
lib/ubsan.c:handle_overflow(struct overflow_data *data, void *lhs, void *rhs, char op)
lib/ubsan.c:ubsan_epilogue(void)
lib/ubsan.c:ubsan_prologue(struct source_location *loc, const char *reason)
lib/ubsan.c:ubsan_type_mismatch_common(struct type_mismatch_data_common *data, unsigned long ptr)
drivers/usb/core/hcd.c:__usb_hcd_giveback_urb(struct urb *urb)
kernel/time/timer.c:call_timer_fn(struct timer_list *timer, void (*fn)(struct timer_list *), unsigned long baseclk)
drivers/usb/gadget/udc/dummy_hcd.c:dummy_timer(struct timer_list *t)
kernel/time/timer.c:expire_timers(struct timer_base *base, struct hlist_head *head)
drivers/media/rc/mceusb.c:mceusb_dev_recv(struct urb *urb)
drivers/media/rc/mceusb.c:mceusb_handle_command(struct mceusb_dev *ir, u8 *buf_in)
drivers/media/rc/mceusb.c:mceusb_process_ir_data(struct mceusb_dev *ir, int buf_len)
drivers/usb/core/hcd.c:usb_hcd_giveback_urb(struct usb_hcd *hcd, struct urb *urb, int status)
drivers/usb/gadget/udc/dummy_hcd.c:dummy_timer(struct timer_list *t)
drivers/usb/gadget/udc/dummy_hcd.c:dummy_urb_dequeue(struct usb_hcd *hcd, struct urb *urb, int status)
drivers/usb/gadget/udc/dummy_hcd.c:dummy_urb_enqueue(struct usb_hcd *hcd, struct urb *urb, gfp_t mem_flags)
drivers/media/rc/mceusb.c:mceusb_dev_recv(struct urb *urb)
drivers/media/rc/mceusb.c:mceusb_handle_command(struct mceusb_dev *ir, u8 *buf_in)
drivers/media/rc/mceusb.c:mceusb_process_ir_data(struct mceusb_dev *ir, int buf_len)
kernel/time/timer.c:__run_timers(struct timer_base *base)
kernel/time/timer.c:expire_timers(struct timer_base *base, struct hlist_head *head)
kernel/time/timer.c:run_timer_softirq(struct softirq_action *h)
func for case 97ea55669d5b2e909c5a6b7be2f9f8991499dbbd
net/ipv4/arp.c:arp_constructor(struct neighbour *neigh)
net/ipv4/arp.c:arp_filter(__be32 sip, __be32 tip, struct net_device *dev)
net/ipv4/arp.c:arp_fwd_proxy(struct in_device *in_dev, struct net_device *dev, struct rtable *rt)
net/ipv4/arp.c:arp_fwd_pvlan(struct in_device *in_dev, struct net_device *dev, struct rtable *rt, __be32 sip, __be32 tip)
net/ipv4/arp.c:arp_ioctl(struct net *net, unsigned int cmd, void __user *arg)
net/ipv4/arp.c:arp_is_garp(struct net *net, struct net_device *dev, int *addr_type, __be16 ar_op, __be32 sip, __be32 tip, unsigned char *sha, unsigned char *tha)
net/ipv4/arp.c:arp_mc_map(__be32 addr, u8 *haddr, struct net_device *dev, int dir)
net/ipv4/arp.c:arp_process(struct net *net, struct sock *sk, struct sk_buff *skb)
net/ipv4/arp.c:arp_rcv(struct sk_buff *skb, struct net_device *dev, struct packet_type *pt, struct net_device *orig_dev)
net/ipv4/arp.c:arp_req_delete(struct net *net, struct arpreq *r, struct net_device *dev)
net/ipv4/arp.c:arp_req_delete_public(struct net *net, struct arpreq *r, struct net_device *dev)
net/ipv4/arp.c:arp_req_get(struct arpreq *r, struct net_device *dev)
net/ipv4/arp.c:arp_req_set(struct net *net, struct arpreq *r, struct net_device *dev)
net/ipv4/arp.c:arp_req_set_public(struct net *net, struct arpreq *r, struct net_device *dev)
net/ipv4/arp.c:arp_send_dst(int type, int ptype, __be32 dest_ip, struct net_device *dev, __be32 src_ip, const unsigned char *dest_hw, const unsigned char *src_hw, const unsigned char *target_hw, struct dst_entry *dst)
include/net/arp.h:__ipv4_confirm_neigh(struct net_device *dev, u32 key)
include/net/arp.h:__ipv4_neigh_lookup()
include/net/arp.h:__ipv4_neigh_lookup_noref()
net/ipv4/arp.c:arp_ioctl(struct net *net, unsigned int cmd, void __user *arg)
net/ipv4/arp.c:arp_req_get(struct arpreq *r, struct net_device *dev)
net/ipv4/af_inet.c:__inet_stream_connect(struct socket *sock, struct sockaddr *uaddr, int addr_len, int flags, int is_sendmsg)
af_inet()
net/ipv4/af_inet.c:inet_accept(struct socket *sock, struct socket *newsock, int flags, bool kern)
net/ipv4/af_inet.c:inet_compat_ioctl(struct socket *sock, unsigned int cmd, unsigned long arg)
net/ipv4/af_inet.c:inet_compat_routing_ioctl(struct sock *sk, unsigned int cmd, struct compat_rtentry __user *ur)
net/ipv4/af_inet.c:inet_create(struct net *net, struct socket *sock, int protocol, int kern)
net/ipv4/af_inet.c:inet_ctl_sock_create(struct sock **sk, unsigned short family, unsigned short type, unsigned char protocol, struct net *net)
net/ipv4/af_inet.c:inet_getname(struct socket *sock, struct sockaddr *uaddr, int peer)
net/ipv4/af_inet.c:inet_ioctl(struct socket *sock, unsigned int cmd, unsigned long arg)
net/socket.c:____sys_recvmsg(struct socket *sock, struct msghdr *msg_sys, struct user_msghdr __user *msg, struct sockaddr __user *uaddr, unsigned int flags, int nosec)
net/socket.c:___sys_recvmsg(struct socket *sock, struct user_msghdr __user *msg, struct msghdr *msg_sys, unsigned int flags, int nosec)
compat_ifreq_ioctl()
net/socket.c:compat_sock_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
net/socket.c:compat_sock_ioctl_trans(struct file *file, struct socket *sock, unsigned int cmd, unsigned long arg)
net/socket.c:recvmsg_copy_msghdr(struct msghdr *msg, struct user_msghdr __user *umsg, unsigned flags, struct sockaddr __user **uaddr, struct iovec **iov)
net/socket.c:sock_do_ioctl(struct net *net, struct socket *sock, unsigned int cmd, unsigned long arg)
net/socket.c:sock_ioctl(struct file *file, unsigned cmd, unsigned long arg)
net/core/sock.c:sk_alloc()
net/core/sock.c:sk_free(struct sock *sk)
net/core/sock.c:sock_def_readable(struct sock *sk)
sock_getsockopt()
net/core/sock.c:sock_init_data(struct socket *sock, struct sock *sk)
net/socket.c:sock_ioctl(struct file *file, unsigned cmd, unsigned long arg)
sock_queue_rcv_skb()
sock_setsockopt()
__do_sys_ioctl()
__se_sys_ioctl()
__x64_sys_ioctl()
fs/ioctl.c:do_vfs_ioctl(struct file *filp, unsigned int fd, unsigned int cmd, unsigned long arg)
fs/ioctl.c:ioctl_fiemap(struct file *filp, struct fiemap __user *ufiemap)
fs/ioctl.c:ioctl_fionbio(struct file *filp, int __user *argp)
fs/ioctl.c:ioctl_fssetxattr(struct file *file, void __user *argp)
net/socket.c:sock_do_ioctl(struct net *net, struct socket *sock, unsigned int cmd, unsigned long arg)
net/socket.c:sock_ioctl(struct file *file, unsigned cmd, unsigned long arg)
fs/ioctl.c:vfs_ioctl(struct file *filp, unsigned int cmd, unsigned long arg)
net/ipv4/arp.c:arp_ioctl(struct net *net, unsigned int cmd, void __user *arg)
net/ipv4/arp.c:arp_req_get(struct arpreq *r, struct net_device *dev)
net/ipv4/arp.c:arp_ioctl(struct net *net, unsigned int cmd, void __user *arg)
net/ipv4/arp.c:arp_req_get(struct arpreq *r, struct net_device *dev)
include/linux/in.h:proto_ports_offset(int proto)
func for case cd43695a64bcd21b8596
NFTA_SET_DESC_SIZE()
NFT_SET_DESC_SIZE()
mm/util.c:kvmalloc_node()
net/netfilter/nf_tables_api.c:nf_tables_fill_setelem_info(struct sk_buff *skb, const struct nft_ctx *ctx, u32 seq, u32 portid, int event, u16 flags, const struct nft_set *set, const struct nft_set_elem *elem)
net/netfilter/nf_tables_api.c:nf_tables_newset(struct sk_buff *skb, const struct nfnl_info *info, const struct nlattr * const nla[])
net/netfilter/nf_tables_api.c:nf_tables_newsetelem(struct sk_buff *skb, const struct nfnl_info *info, const struct nlattr * const nla[])
net/netfilter/nf_tables_api.c:nf_tables_set_desc_parse(struct nft_set_desc *desc, const struct nlattr *nla)
net/netfilter/nf_tables_api.c:nft_add_set_elem(struct nft_ctx *ctx, struct nft_set *set, const struct nlattr *attr, u32 nlmsg_flags)
net/netfilter/nf_tables_api.c:nft_set_catchall_flush(const struct nft_ctx *ctx, struct nft_set *set)
nft_set_catchall_insert()
net/netfilter/nf_tables_api.c:nft_set_desc_concat(struct nft_set_desc *desc, const struct nlattr *nla)
net/netfilter/nf_tables_api.c:nft_set_desc_concat_parse(const struct nlattr *attr, struct nft_set_desc *desc)
net/netfilter/nf_tables_api.c:nft_set_elem_destroy(const struct nft_set *set, void *elem, bool destroy_expr)
net/netfilter/nf_tables_api.c:nft_set_elem_expr_alloc()
net/netfilter/nf_tables_api.c:nft_set_elem_init()
net/netfilter/nf_tables_api.c:nft_setelem_parse_data(struct nft_ctx *ctx, struct nft_set *set, struct nft_data_desc *desc, struct nft_data *data, struct nlattr *attr)
net/netfilter/nf_tables_api.c:nft_setelem_parse_flags(const struct nft_set *set, const struct nlattr *attr, u32 *flags)
net/netfilter/nf_tables_api.c:nft_setelem_parse_key(struct nft_ctx *ctx, struct nft_set *set, struct nft_data *key, struct nlattr *attr)
mm/util.c:__account_locked_vm(struct mm_struct *mm, unsigned long pages, bool inc, struct task_struct *task, bool bypass_rlim)
mm/util.c:__vm_enough_memory(struct mm_struct *mm, long pages, int cap_sys_admin)
mm/util.c:account_locked_vm(struct mm_struct *mm, unsigned long pages, bool inc)
mm/util.c:arch_pick_mmap_layout(struct mm_struct *mm, struct rlimit *rlim_stack)
mm/util.c:arch_randomize_brk(struct mm_struct *mm)
mm/util.c:kmemdup_nul()
mm/util.c:kvmalloc_node()
mm/util.c:memdup_user()
mm/util.c:memdup_user_nul()
mm/util.c:mmap_base(unsigned long rnd, struct rlimit *rlim_stack)
mm/util.c:randomize_stack_top(unsigned long stack_top)
mm/util.c:strndup_user()
mm/util.c:vm_mmap(struct file *file, unsigned long addr, unsigned long len, unsigned long prot, unsigned long flag, unsigned long offset)
mm/util.c:vm_mmap_pgoff(struct file *file, unsigned long addr, unsigned long len, unsigned long prot, unsigned long flag, unsigned long pgoff)
mm/util.c:vmemdup_user()
NFT_BATCH()
err_add()
err_deliver()
mm/util.c:kvmalloc_node()
net/netfilter/nf_tables_api.c:nf_tables_newset(struct sk_buff *skb, const struct nfnl_info *info, const struct nlattr * const nla[])
net/netfilter/nfnetlink.c:nfnetlink_bind(struct net *net, int group)
net/netfilter/nfnetlink.c:nfnetlink_init(void)
net/netfilter/nfnetlink.c:nfnetlink_net_exit_batch(struct list_head *net_exit_list)
net/netfilter/nfnetlink.c:nfnetlink_net_init(struct net *net)
net/netfilter/nfnetlink.c:nfnetlink_rcv(struct sk_buff *skb)
net/netfilter/nfnetlink.c:nfnetlink_rcv_batch(struct sk_buff *skb, struct nlmsghdr *nlh, u16 subsys_id, u32 genid)
net/netfilter/nfnetlink.c:nfnetlink_rcv_msg(struct sk_buff *skb, struct nlmsghdr *nlh, struct netlink_ext_ack *extack)
net/netfilter/nfnetlink.c:nfnetlink_rcv_skb_batch(struct sk_buff *skb, struct nlmsghdr *nlh)
net/netfilter/nfnetlink.c:nfnetlink_subsys_register(const struct nfnetlink_subsystem *n)
net/netfilter/nfnetlink.c:nfnetlink_unicast(struct sk_buff *skb, struct net *net, u32 portid)
net/netfilter/nfnetlink.c:nfnl_err_add(struct list_head *list, struct nlmsghdr *nlh, int err, const struct netlink_ext_ack *extack)
net/netfilter/nfnetlink.c:nfnl_err_deliver(struct list_head *err_list, struct sk_buff *skb)
rcv_batch()
rcv_skb_batch()
compound_nr()
include/linux/mm.h:get_mm_counter(struct mm_struct *mm, int member)
mm/util.c:kvmalloc_node()
include/linux/mm.h:page_is_pfmemalloc(const struct page *page)
include/linux/mm.h:put_page(struct page *page)
set_compound_order()
include/linux/mm.h:vmf_insert_page(struct vm_area_struct *vma, unsigned long addr, struct page *page)
net/netlink/af_netlink.c:__netlink_sendskb(struct sock *sk, struct sk_buff *skb)
af_netlink()
net/netlink/af_netlink.c:netlink_alloc_large_skb()
net/netlink/af_netlink.c:netlink_attachskb(struct sock *sk, struct sk_buff *skb, long *timeo, struct sock *ssk)
net/netlink/af_netlink.c:netlink_rcv_skb(struct sk_buff *skb, int (*cb)(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *))
net/netlink/af_netlink.c:netlink_sendmsg(struct socket *sock, struct msghdr *msg, size_t len)
net/netlink/af_netlink.c:netlink_trim()
net/netlink/af_netlink.c:netlink_unicast(struct sock *ssk, struct sk_buff *skb, u32 portid, int nonblock)
net/netlink/af_netlink.c:netlink_unicast_kernel(struct sock *sk, struct sk_buff *skb, struct sock *ssk)
sk_buff()
sk_buffs()
mm/page_alloc.c:__alloc_pages()
mm/page_alloc.c:__alloc_pages_direct_compact()
mm/page_alloc.c:__alloc_pages_direct_reclaim()
mm/page_alloc.c:__alloc_pages_slowpath()
mm/page_alloc.c:get_page_from_freelist()
mm/util.c:kvmalloc_node()
page_alloc()
mm/page_alloc.c:should_reclaim_retry(gfp_t gfp_mask, unsigned order, struct alloc_context *ac, int alloc_flags, bool did_some_progress, int *no_progress_loops)
mm/page_alloc.c:warn_alloc(gfp_t gfp_mask, nodemask_t *nodemask, const char *fmt, ...)
mm/page_alloc.c:zone_watermark_ok_safe(struct zone *z, unsigned int order, unsigned long mark, int highest_zoneidx)
NFT_BATCH()
net/socket.c:____sys_sendmsg(struct socket *sock, struct msghdr *msg_sys, unsigned int flags, struct used_address *used_address, unsigned int allowed_msghdr_flags)
net/socket.c:___sys_sendmsg(struct socket *sock, struct user_msghdr __user *msg, struct msghdr *msg_sys, unsigned int flags, struct used_address *used_address, unsigned int allowed_msghdr_flags)
__copy_msghdr()
net/socket.c:__sys_sendmsg(int fd, struct user_msghdr __user *msg, unsigned int flags, bool forbid_cmsg_compat)
net/socket.c:copy_msghdr_from_user(struct msghdr *kmsg, struct user_msghdr __user *umsg, struct sockaddr __user **save_addr, struct iovec **iov)
net/socket.c:kernel_sendmsg_locked(struct sock *sk, struct msghdr *msg, struct kvec *vec, size_t num, size_t size)
mm/util.c:kvmalloc_node()
net/netfilter/nf_tables_api.c:nf_tables_newset(struct sk_buff *skb, const struct nfnl_info *info, const struct nlattr * const nla[])
net/socket.c:sendmsg_copy_msghdr(struct msghdr *msg, struct user_msghdr __user *umsg, unsigned flags, struct iovec **iov)
net/socket.c:sock_sendmsg(struct socket *sock, struct msghdr *msg)
NFTA_SET_DESC_SIZE()
mm/util.c:kvmalloc_node()
nf_tables()
nf_tables_api()
net/netfilter/nf_tables_api.c:nf_tables_newset(struct sk_buff *skb, const struct nfnl_info *info, const struct nlattr * const nla[])
sk_buff()
net/netfilter/nf_tables_core.c:nft_bitwise_fast_eval(const struct nft_expr *expr, struct nft_regs *regs)
net/netfilter/nf_tables_core.c:nft_do_chain(struct nft_pktinfo *pkt, void *priv)
net/netfilter/nf_tables_core.c:nft_payload_fast_eval(const struct nft_expr *expr, struct nft_regs *regs, const struct nft_pktinfo *pkt)
func for case c70d87ac1d001f29a058
kernel/watch_queue.c:__post_watch_notification(struct watch_list *wlist, struct watch_notification *n, const struct cred *cred, u64 id)
kernel/watch_queue.c:__put_watch_queue(struct kref *kref)
kernel/watch_queue.c:add_one_watch(struct watch *watch, struct watch_list *wlist, struct watch_queue *wqueue)
kernel/watch_queue.c:add_watch_to_object(struct watch *watch, struct watch_list *wlist)
kernel/watch_queue.c:filter_watch_notification(const struct watch_filter *wf, const struct watch_notification *n)
kernel/watch_queue.c:get_watch_queue()
kernel/watch_queue.c:post_one_notification(struct watch_queue *wqueue, struct watch_notification *n)
kernel/watch_queue.c:remove_watch_from_object(struct watch_list *wlist, struct watch_queue *wq, u64 id, bool all)
watch_queue()
kernel/watch_queue.c:watch_queue_clear(struct watch_queue *wqueue)
kernel/watch_queue.c:watch_queue_pipe_buf_release(struct pipe_inode_info *pipe, struct pipe_buffer *buf)
kernel/watch_queue.c:watch_queue_set_filter(struct pipe_inode_info *pipe, struct watch_notification_filter __user *_filter)
kernel/watch_queue.c:watch_queue_set_size(struct pipe_inode_info *pipe, unsigned int nr_notes)
security/keys/key.c:__key_instantiate_and_link(struct key *key, struct key_preparsed_payload *prep, struct key *keyring, struct key *authkey, struct assoc_array_edit **_edit)
security/keys/key.c:__key_update(key_ref_t key_ref, struct key_preparsed_payload *prep)
security/keys/key.c:generic_key_instantiate(struct key *key, struct key_preparsed_payload *prep)
security/keys/key.c:key_alloc()
security/keys/key.c:key_alloc_serial(struct key *key)
security/keys/key.c:key_create_or_update(key_ref_t keyring_ref, const char *type, const char *description, const void *payload, size_t plen, key_perm_t perm, unsigned long flags)
security/keys/key.c:key_instantiate_and_link(struct key *key, const void *data, size_t datalen, struct key *keyring, struct key *authkey)
security/keys/key.c:key_lookup()
security/keys/key.c:key_payload_reserve(struct key *key, size_t datalen)
security/keys/key.c:key_reject_and_link(struct key *key, unsigned timeout, unsigned error, struct key *keyring, struct key *authkey)
security/keys/key.c:key_revoke(struct key *key)
security/keys/key.c:key_type_lookup()
security/keys/key.c:key_update(key_ref_t key_ref, const void *payload, size_t plen)
security/keys/key.c:key_user_lookup()
security/keys/key.c:register_key_type(struct key_type *ktype)
describe_key()
get_security()
instantiate_key()
security/keys/keyctl.c:keyctl_chown_key(key_serial_t id, uid_t user, gid_t group)
security/keys/keyctl.c:keyctl_describe_key(key_serial_t keyid, char __user *buffer, size_t buflen)
security/keys/keyctl.c:keyctl_get_security(key_serial_t keyid, char __user *buffer, size_t buflen)
security/keys/keyctl.c:keyctl_instantiate_key_common(key_serial_t id, struct iov_iter *from, key_serial_t ringid)
security/keys/keyctl.c:keyctl_instantiate_key_iov(key_serial_t id, const struct iovec __user *_payload_iov, unsigned ioc, key_serial_t ringid)
security/keys/keyctl.c:keyctl_keyring_link(key_serial_t id, key_serial_t ringid)
security/keys/keyctl.c:keyctl_keyring_move(key_serial_t id, key_serial_t from_ringid, key_serial_t to_ringid, unsigned int flags)
security/keys/keyctl.c:keyctl_keyring_search(key_serial_t ringid, const char __user *_type, const char __user *_description, key_serial_t destringid)
security/keys/keyctl.c:keyctl_keyring_unlink(key_serial_t id, key_serial_t ringid)
security/keys/keyctl.c:keyctl_read_key(key_serial_t keyid, char __user *buffer, size_t buflen)
security/keys/keyctl.c:keyctl_restrict_keyring(key_serial_t id, const char __user *_type, const char __user *_restriction)
security/keys/keyctl.c:keyctl_set_timeout(key_serial_t id, unsigned timeout)
security/keys/keyctl.c:keyctl_setperm_key(key_serial_t id, key_perm_t perm)
security/keys/keyctl.c:keyctl_update_key(key_serial_t id, const void __user *_payload, size_t plen)
security/keys/keyctl.c:keyctl_watch_key(key_serial_t id, int watch_queue_fd, int watch_id)
read_key()
update_key()
mm/memory.c:__apply_to_page_range(struct mm_struct *mm, unsigned long addr, unsigned long size, pte_fn_t fn, void *data, bool create)
apply_to_()
mm/memory.c:apply_to_p4d_range(struct mm_struct *mm, pgd_t *pgd, unsigned long addr, unsigned long end, pte_fn_t fn, void *data, bool create, pgtbl_mod_mask *mask)
mm/memory.c:apply_to_pmd_range(struct mm_struct *mm, pud_t *pud, unsigned long addr, unsigned long end, pte_fn_t fn, void *data, bool create, pgtbl_mod_mask *mask)
mm/memory.c:apply_to_pte_range(struct mm_struct *mm, pmd_t *pmd, unsigned long addr, unsigned long end, pte_fn_t fn, void *data, bool create, pgtbl_mod_mask *mask)
mm/memory.c:apply_to_pud_range(struct mm_struct *mm, p4d_t *p4d, unsigned long addr, unsigned long end, pte_fn_t fn, void *data, bool create, pgtbl_mod_mask *mask)
copy_()
copy_one_pte()
mm/memory.c:copy_page_range(struct vm_area_struct *dst_vma, struct vm_area_struct *src_vma)
mm/memory.c:copy_pte_range(struct vm_area_struct *dst_vma, struct vm_area_struct *src_vma, pmd_t *dst_pmd, pmd_t *src_pmd, unsigned long addr, unsigned long end)
mm/vmalloc.c:__purge_vmap_area_lazy(unsigned long start, unsigned long end)
mm/vmalloc.c:__vmalloc_area_node()
mm/vmalloc.c:__vmalloc_node_range()
mm/vmalloc.c:alloc_vmap_area()
mm/vmalloc.c:free_vmap_area(struct vmap_area *va)
mm/vmalloc.c:insert_vmap_area(struct vmap_area *va, struct rb_root *root, struct list_head *head)
unlink_va()
mm/vmalloc.c:vm_area_alloc_pages(gfp_t gfp, int nid, unsigned int order, unsigned int nr_pages, struct page **pages)
kernel/fork.c:__put_task_struct(struct task_struct *tsk)
kernel/fork.c:alloc_thread_stack_node(struct task_struct *tsk, int node)
kernel/fork.c:copy_process()
kernel/fork.c:dup_task_struct()
kernel/fork.c:free_task(struct task_struct *tsk)
kernel/fork.c:kernel_clone(struct kernel_clone_args *args)
kernel/fork.c:mm_init()
kernel/fork.c:release_task_stack(struct task_struct *tsk)
mm/page_alloc.c:free_pages_prepare(struct page *page, unsigned int order, bool check_free, fpi_t fpi_flags)
mm/page_alloc.c:get_page_from_freelist()
page_alloc()
mm/page_alloc.c:prep_new_page(struct page *page, unsigned int order, gfp_t gfp_flags, unsigned int alloc_flags)
watch_queue()
security/keys/key.c:__key_update(key_ref_t key_ref, struct key_preparsed_payload *prep)
security/keys/key.c:key_create_or_update(key_ref_t keyring_ref, const char *type, const char *description, const void *payload, size_t plen, key_perm_t perm, unsigned long flags)
security/keys/internal.h:notify_key(struct key *key, enum key_notification_subtype subtype, u32 aux)
func for case e94c5aaf7890901ebf9b
fs/proc/task_mmu.c:do_pagemap_scan(struct mm_struct *mm, unsigned long uarg)
fs/proc/task_mmu.c:make_uffd_wp_huge_pte(struct vm_area_struct *vma, unsigned long addr, pte_t *ptep, pte_t ptent)
fs/proc/task_mmu.c:make_uffd_wp_pmd(struct vm_area_struct *vma, unsigned long addr, pmd_t *pmdp)
fs/proc/task_mmu.c:make_uffd_wp_pte(struct vm_area_struct *vma, unsigned long addr, pte_t *pte)
fs/proc/task_mmu.c:pagemap_page_category(struct pagemap_scan_private *p, struct vm_area_struct *vma, unsigned long addr, pte_t pte)
fs/proc/task_mmu.c:pagemap_scan_flush_buffer(struct pagemap_scan_private *p)
fs/proc/task_mmu.c:pagemap_scan_get_args(struct pm_scan_arg *arg, unsigned long uarg)
fs/proc/task_mmu.c:pagemap_scan_hugetlb_entry(pte_t *ptep, unsigned long hmask, unsigned long start, unsigned long end, struct mm_walk *walk)
fs/proc/task_mmu.c:pagemap_scan_init_bounce_buffer(struct pagemap_scan_private *p)
fs/proc/task_mmu.c:pagemap_scan_output(unsigned long categories, struct pagemap_scan_private *p, unsigned long addr, unsigned long *end)
fs/proc/task_mmu.c:pagemap_scan_pmd_entry(pmd_t *pmd, unsigned long start, unsigned long end, struct mm_walk *walk)
fs/proc/task_mmu.c:pagemap_scan_pte_hole(unsigned long addr, unsigned long end, int depth, struct mm_walk *walk)
fs/proc/task_mmu.c:pagemap_scan_push_range(unsigned long categories, struct pagemap_scan_private *p, unsigned long addr, unsigned long end)
fs/proc/task_mmu.c:pagemap_scan_test_walk(unsigned long start, unsigned long end, struct mm_walk *walk)
fs/proc/task_mmu.c:pagemap_scan_thp_entry(pmd_t *pmd, unsigned long start, unsigned long end, struct mm_walk *walk)
mm/pagewalk.c:__walk_page_range(unsigned long start, unsigned long end, struct mm_walk *walk)
mm/pagewalk.c:walk_hugepd_range(hugepd_t *phpd, unsigned long addr, unsigned long end, struct mm_walk *walk, int pdshift)
mm/pagewalk.c:walk_hugetlb_range(unsigned long addr, unsigned long end, struct mm_walk *walk)
mm/pagewalk.c:walk_p4d_range(pgd_t *pgd, unsigned long addr, unsigned long end, struct mm_walk *walk)
mm/pagewalk.c:walk_page_mapping(struct address_space *mapping, pgoff_t first_index, pgoff_t nr, const struct mm_walk_ops *ops, void *private)
mm/pagewalk.c:walk_page_range(struct mm_struct *mm, unsigned long start, unsigned long end, const struct mm_walk_ops *ops, void *private)
mm/pagewalk.c:walk_page_range_vma(struct vm_area_struct *vma, unsigned long start, unsigned long end, const struct mm_walk_ops *ops, void *private)
mm/pagewalk.c:walk_page_test(unsigned long start, unsigned long end, struct mm_walk *walk)
mm/pagewalk.c:walk_page_vma(struct vm_area_struct *vma, const struct mm_walk_ops *ops, void *private)
mm/pagewalk.c:walk_pgd_range(unsigned long addr, unsigned long end, struct mm_walk *walk)
mm/pagewalk.c:walk_pmd_range(pud_t *pud, unsigned long addr, unsigned long end, struct mm_walk *walk)
mm/pagewalk.c:walk_pte_range(pmd_t *pmd, unsigned long addr, unsigned long end, struct mm_walk *walk)
mm/pagewalk.c:walk_pte_range_inner(pte_t *pte, unsigned long addr, unsigned long end, struct mm_walk *walk)
mm/pagewalk.c:walk_pud_range(p4d_t *p4d, unsigned long addr, unsigned long end, struct mm_walk *walk)
arch/x86/include/asm/pgtable.h:__pkru_allows_pkey(u16 pkey, bool write)
arch/x86/include/asm/pgtable.h:__pte_access_permitted(unsigned long pteval, bool write)
arch/x86/include/asm/pgtable.h:check_pgprot(pgprot_t pgprot)
arch/x86/include/asm/pgtable.h:clone_pgd_range(pgd_t *dst, pgd_t *src, int count)
arch/x86/include/asm/pgtable.h:p4d_bad(p4d_t p4d)
arch/x86/include/asm/pgtable.h:pfn_pmd(unsigned long page_nr, pgprot_t pgprot)
arch/x86/include/asm/pgtable.h:pfn_pud(unsigned long page_nr, pgprot_t pgprot)
arch/x86/include/asm/pgtable.h:pgd_none(pgd_t pgd)
arch/x86/include/asm/pgtable.h:pmd_modify(pmd_t pmd, pgprot_t newprot)
arch/x86/include/asm/pgtable.h:pmd_none(pmd_t pmd)
arch/x86/include/asm/pgtable.h:pmd_present(pmd_t pmd)
arch/x86/include/asm/pgtable.h:pmdp_establish(struct vm_area_struct *vma, unsigned long address, pmd_t *pmdp, pmd_t pmd)
arch/x86/include/asm/pgtable.h:pte_flags_pkey(unsigned long pte_flags)
arch/x86/include/asm/pgtable.h:pte_modify(pte_t pte, pgprot_t newprot)
arch/x86/include/asm/pgtable.h:ptep_get_and_clear_full(struct mm_struct *mm, unsigned long addr, pte_t *ptep, int full)
PAGEMAP_SCAN()
mm/memory.c:apply_to_pmd_range(struct mm_struct *mm, pud_t *pud, unsigned long addr, unsigned long end, pte_fn_t fn, void *data, bool create, pgtbl_mod_mask *mask)
mm/memory.c:do_anonymous_page(struct vm_fault *vmf)
mm/memory.c:do_cow_fault(struct vm_fault *vmf)
mm/memory.c:do_fault(struct vm_fault *vmf)
mm/memory.c:do_swap_page(struct vm_fault *vmf)
mm/memory.c:handle_pte_fault(struct vm_fault *vmf)
fs/proc/task_mmu.c:pagemap_scan_pmd_entry(pmd_t *pmd, unsigned long start, unsigned long end, struct mm_walk *walk)
arch/x86/include/asm/pgtable.h:pte_uffd_wp(pte_t pte)
mm/memory.c:wp_huge_pmd(struct vm_fault *vmf)
mm/memory.c:wp_page_copy(struct vm_fault *vmf)
PAGEMAP_SCAN()
include/linux/mm.h:folio_maybe_dma_pinned(struct folio *folio)
include/linux/mm.h:gup_can_follow_protnone(struct vm_area_struct *vma, unsigned int flags)
gup_must_unshare()
is_longterm_pinnable_page()
include/linux/mm.h:page_is_pfmemalloc(const struct page *page)
include/linux/mm.h:page_needs_cow_for_dma(struct vm_area_struct *vma, struct page *page)
include/linux/mm.h:put_devmap_managed_page_refs(struct page *page, int refs)
include/linux/mm.h:vm_fault_to_errno(vm_fault_t vm_fault, int foll_flags)
PAGEMAP_SCAN()
fs/ioctl.c:do_vfs_ioctl(struct file *filp, unsigned int fd, unsigned int cmd, unsigned long arg)
fs/ioctl.c:file_ioctl(struct file *filp, unsigned int cmd, int __user *p)
fs/ioctl.c:ioctl_fiemap(struct file *filp, struct fiemap __user *ufiemap)
fs/ioctl.c:ioctl_file_dedupe_range(struct file *file, struct file_dedupe_range __user *argp)
fs/ioctl.c:ioctl_fioasync(unsigned int fd, struct file *filp, int __user *argp)
fs/ioctl.c:ioctl_fionbio(struct file *filp, int __user *argp)
fs/ioctl.c:ioctl_fsfreeze(struct file *filp)
fs/ioctl.c:ioctl_fsthaw(struct file *filp)
fs/proc/inode.c:proc_reg_compat_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
fs/proc/inode.c:proc_reg_release(struct inode *inode, struct file *file)
fs/proc/inode.c:proc_reg_unlocked_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
fs/proc/task_mmu.c:pagemap_scan_pmd_entry(pmd_t *pmd, unsigned long start, unsigned long end, struct mm_walk *walk)
arch/x86/include/asm/pgtable.h:pte_uffd_wp(pte_t pte)
task_mmu()
uffd_wp()
fs/proc/task_mmu.c:pagemap_scan_pmd_entry(pmd_t *pmd, unsigned long start, unsigned long end, struct mm_walk *walk)
arch/x86/include/asm/pgtable.h:pte_uffd_wp(pte_t pte)
mm/pagewalk.c:walk_pmd_range(pud_t *pud, unsigned long addr, unsigned long end, struct mm_walk *walk)
func for case fadc0aaf497e6a493b9f
drivers/md/md.c:__md_stop(struct mddev *mddev)
drivers/md/md.c:do_md_run(struct mddev *mddev)
drivers/md/md.c:hot_add_disk(struct mddev *mddev, dev_t dev)
drivers/md/md.c:md_alloc(dev_t dev, char *name)
drivers/md/md.c:md_compat_ioctl(struct block_device *bdev, fmode_t mode, unsigned int cmd, unsigned long arg)
drivers/md/md.c:md_ioctl(struct block_device *bdev, fmode_t mode, unsigned int cmd, unsigned long arg)
drivers/md/md.c:md_open(struct block_device *bdev, fmode_t mode)
drivers/md/md.c:md_probe(dev_t dev)
drivers/md/md.c:md_run(struct mddev *mddev)
drivers/md/md.c:md_set_array_info(struct mddev *mddev, struct mdu_array_info_s *info)
drivers/md/md.c:md_set_read_only(struct block_device *bdev, bool ro)
drivers/md/md.c:md_start(struct mddev *mddev)
drivers/md/md.c:md_stop(struct mddev *mddev)
drivers/md/md.c:mddev_detach(struct mddev *mddev)
open_mutex()
drivers/md/md.c:restart_array(struct mddev *mddev)
bd_()
block/bdev.c:bd_clear_claiming(struct block_device *whole, void *holder)
block/bdev.c:bd_finish_claiming(struct block_device *bdev, void *holder)
block/bdev.c:bd_may_claim(struct block_device *bdev, struct block_device *whole, void *holder)
block/bdev.c:bd_prepare_to_claim(struct block_device *bdev, void *holder)
block/bdev.c:blkdev_get_by_dev()
block/bdev.c:blkdev_get_by_path()
block/bdev.c:blkdev_get_no_open()
block/bdev.c:blkdev_get_part(struct block_device *part, fmode_t mode)
block/bdev.c:blkdev_get_whole(struct block_device *bdev, fmode_t mode)
block/bdev.c:blkdev_put(struct block_device *bdev, fmode_t mode)
block/bdev.c:blkdev_put_whole(struct block_device *bdev, fmode_t mode)
block/bdev.c:freeze_bdev(struct block_device *bdev)
block/bdev.c:invalidate_bdev(struct block_device *bdev)
open_mutex()
block/bdev.c:set_blocksize(struct block_device *bdev, int size)
block/bdev.c:thaw_bdev(struct block_device *bdev)
block/holder.c:bd_register_pending_holders(struct gendisk *disk)
block/bdev.c:blkdev_get_by_dev()
block/bdev.c:blkdev_get_whole(struct block_device *bdev, fmode_t mode)
kernel/power/hibernate.c:create_image(int platform_mode)
block/genhd.c:device_add_disk(struct device *parent, struct gendisk *disk, const struct attribute_group **groups)
kernel/power/hibernate.c:hibernate_setup(char *str)
kernel/power/hibernate.c:hibernation_restore(int platform_mode)
kernel/power/hibernate.c:hibernation_snapshot(int platform_mode)
kernel/power/hibernate.c:load_image_and_restore(void)
drivers/md/md.c:md_alloc(dev_t dev, char *name)
drivers/md/md.c:md_open(struct block_device *bdev, fmode_t mode)
open_mutex()
kernel/power/hibernate.c:resume_store(struct kobject *kobj, struct kobj_attribute *attr, const char *buf, size_t n)
kernel/power/hibernate.c:resume_target_kernel(bool platform_mode)
kernel/power/hibernate.c:software_resume(void)
kernel/power/swap.c:swsusp_check(void)
block/genhd.c:blk_request_module(dev_t devt)
block/genhd.c:del_gendisk(struct gendisk *disk)
block/genhd.c:device_add_disk(struct device *parent, struct gendisk *disk, const struct attribute_group **groups)
block/genhd.c:disk_release(struct device *dev)
block/genhd.c:disk_scan_partitions(struct gendisk *disk)
block/genhd.c:disk_uevent(struct gendisk *disk, enum kobject_action action)
block/genhd.c:disk_visible(struct kobject *kobj, struct attribute *a, int n)
block/genhd.c:set_capacity_and_notify(struct gendisk *disk, sector_t size)
kernel/locking/lockdep.c:__lock_acquire(struct lockdep_map *lock, unsigned int subclass, int trylock, int read, int check, int hardirqs_off, struct lockdep_map *nest_lock, unsigned long ip, int references, int pin_count)
kernel/locking/lockdep.c:check_chain_key(struct task_struct *curr)
kernel/locking/lockdep.c:check_noncircular(struct held_lock *src, struct held_lock *target, struct lock_trace **const trace)
kernel/locking/lockdep.c:check_prev_add(struct task_struct *curr, struct held_lock *prev, struct held_lock *next, u16 distance, struct lock_trace **const trace)
kernel/locking/lockdep.c:check_prevs_add(struct task_struct *curr, struct held_lock *next)
kernel/locking/lockdep.c:mark_usage(struct task_struct *curr, struct held_lock *hlock, int check)
kernel/locking/lockdep.c:print_circular_bug(struct lock_list *this, struct lock_list *target, struct held_lock *check_src, struct held_lock *check_tgt)
kernel/locking/lockdep.c:validate_chain(struct task_struct *curr, struct held_lock *hlock, int chain_head, u64 chain_key)
kernel/locking/mutex.c:__mutex_add_waiter(struct mutex *lock, struct mutex_waiter *waiter, struct list_head *list)
kernel/locking/mutex.c:__mutex_init(struct mutex *lock, const char *name, struct lock_class_key *key)
kernel/locking/mutex.c:__mutex_lock_common(struct mutex *lock, unsigned int state, unsigned int subclass, struct lockdep_map *nest_lock, unsigned long ip, struct ww_acquire_ctx *ww_ctx, const bool use_ww_ctx)
kernel/locking/mutex.c:__mutex_trylock_common()
kernel/locking/mutex.c:__mutex_trylock_fast(struct mutex *lock)
kernel/locking/mutex.c:__mutex_unlock_slowpath(struct mutex *lock, unsigned long ip)
kernel/locking/mutex.c:mutex_lock_io_nested(struct mutex *lock, unsigned int subclass)
kernel/locking/mutex.c:mutex_trylock(struct mutex *lock)
block/holder.c:__link_disk_holder(struct block_device *bdev, struct gendisk *disk)
block/holder.c:bd_link_disk_holder(struct block_device *bdev, struct gendisk *disk)
block/holder.c:bd_register_pending_holders(struct gendisk *disk)
block/holder.c:bd_unlink_disk_holder(struct block_device *bdev, struct gendisk *disk)
kernel/power/swap.c:swsusp_check(void)
kernel/power/swap.c:swsusp_read(unsigned int *flags_p)
kernel/power/swap.c:swsusp_write(unsigned int flags)
block/bdev.c:blkdev_get_by_dev()
drivers/md/md.c:md_alloc(dev_t dev, char *name)
drivers/md/md.c:md_open(struct block_device *bdev, fmode_t mode)
open_mutex()
kernel/power/hibernate.c:software_resume(void)
add_disk()
block/genhd.c:blk_request_module(dev_t devt)
block/bdev.c:blkdev_get_by_dev()
block/genhd.c:device_add_disk(struct device *parent, struct gendisk *disk, const struct attribute_group **groups)
drivers/md/md.c:md_open(struct block_device *bdev, fmode_t mode)
open_mutex()
func for case 62120febbd1ee3c3c860
fs/ext4/xattr.c:ext4_xattr_block_find(struct inode *inode, struct ext4_xattr_info *i, struct ext4_xattr_block_find *bs)
fs/ext4/xattr.c:ext4_xattr_block_set(handle_t *handle, struct inode *inode, struct ext4_xattr_info *i, struct ext4_xattr_block_find *bs)
fs/ext4/xattr.c:ext4_xattr_get(struct inode *inode, int name_index, const char *name, void *buffer, size_t buffer_size)
fs/ext4/xattr.c:ext4_xattr_ibody_find(struct inode *inode, struct ext4_xattr_info *i, struct ext4_xattr_ibody_find *is)
fs/ext4/xattr.c:ext4_xattr_ibody_set(handle_t *handle, struct inode *inode, struct ext4_xattr_info *i, struct ext4_xattr_ibody_find *is)
fs/ext4/xattr.c:ext4_xattr_inode_create()
fs/ext4/xattr.c:ext4_xattr_inode_dec_ref_all(handle_t *handle, struct inode *parent, struct buffer_head *bh, struct ext4_xattr_entry *first, bool block_csum, struct ext4_xattr_inode_array **ea_inode_array, int extra_credits, bool skip_quota)
fs/ext4/xattr.c:ext4_xattr_inode_iget(struct inode *parent, unsigned long ea_ino, u32 ea_inode_hash, struct inode **ea_inode)
fs/ext4/xattr.c:ext4_xattr_inode_lookup_create(handle_t *handle, struct inode *inode, const void *value, size_t value_len, struct inode **ret_inode)
fs/ext4/xattr.c:ext4_xattr_inode_read(struct inode *ea_inode, void *buf, size_t size)
fs/ext4/xattr.c:ext4_xattr_inode_write(handle_t *handle, struct inode *ea_inode, const void *buf, int bufsize)
fs/ext4/xattr.c:ext4_xattr_release_block(handle_t *handle, struct inode *inode, struct buffer_head *bh, struct ext4_xattr_inode_array **ea_inode_array, int extra_credits)
fs/ext4/xattr.c:ext4_xattr_set(struct inode *inode, int name_index, const char *name, const void *value, size_t value_len, int flags)
fs/ext4/xattr.c:ext4_xattr_set_entry(struct ext4_xattr_info *i, struct ext4_xattr_search *s, handle_t *handle, struct inode *inode, bool is_block)
fs/ext4/xattr.c:ext4_xattr_set_handle(handle_t *handle, struct inode *inode, int name_index, const char *name, const void *value, size_t value_len, int flags)
i_rwsem()
xattr_sem()
fs/open.c:build_open_flags(const struct open_how *how, struct open_flags *op)
fs/open.c:build_open_how(int flags, umode_t mode)
fs/open.c:chown_common(const struct path *path, uid_t user, gid_t group)
fs/open.c:dentry_create()
fs/open.c:dentry_open()
fs/open.c:do_dentry_open(struct file *f, struct inode *inode, int (*open)(struct inode *, struct file *))
fs/open.c:do_fchownat(int dfd, const char __user *filename, uid_t user, gid_t group, int flag)
fs/open.c:do_sys_openat2(int dfd, const char __user *filename, struct open_how *how)
fs/open.c:do_sys_truncate(const char __user *pathname, loff_t length)
fs/open.c:do_truncate(struct user_namespace *mnt_userns, struct dentry *dentry, loff_t length, unsigned int time_attrs, struct file *filp)
fs/open.c:filp_close(struct file *filp, fl_owner_t id)
fs/open.c:filp_open()
fs/open.c:finish_open(struct file *file, struct dentry *dentry, int (*open)(struct inode *, struct file *))
i_rwsem()
fs/open.c:open_with_fake_path()
fs/open.c:vfs_truncate(const struct path *path, loff_t length)
xattr_sem()
kernel/locking/lockdep.c:__lock_acquire(struct lockdep_map *lock, unsigned int subclass, int trylock, int read, int check, int hardirqs_off, struct lockdep_map *nest_lock, unsigned long ip, int references, int pin_count)
kernel/locking/lockdep.c:check_irq_usage(struct task_struct *curr, struct held_lock *prev, struct held_lock *next)
kernel/locking/lockdep.c:check_noncircular(struct held_lock *src, struct held_lock *target, struct lock_trace **const trace)
kernel/locking/lockdep.c:check_prev_add(struct task_struct *curr, struct held_lock *prev, struct held_lock *next, u16 distance, struct lock_trace **const trace)
kernel/locking/lockdep.c:check_prevs_add(struct task_struct *curr, struct held_lock *next)
kernel/locking/lockdep.c:check_usage_backwards(struct task_struct *curr, struct held_lock *this, enum lock_usage_bit bit)
kernel/locking/lockdep.c:check_usage_forwards(struct task_struct *curr, struct held_lock *this, enum lock_usage_bit bit)
kernel/locking/lockdep.c:lock_acquire(struct lockdep_map *lock, unsigned int subclass, int trylock, int read, int check, struct lockdep_map *nest_lock, unsigned long ip)
kernel/locking/lockdep.c:mark_lock(struct task_struct *curr, struct held_lock *this, enum lock_usage_bit new_bit)
kernel/locking/lockdep.c:mark_usage(struct task_struct *curr, struct held_lock *hlock, int check)
kernel/locking/lockdep.c:print_circular_bug(struct lock_list *this, struct lock_list *target, struct held_lock *check_src, struct held_lock *check_tgt)
kernel/locking/lockdep.c:print_deadlock_bug(struct task_struct *curr, struct held_lock *prev, struct held_lock *next)
kernel/locking/lockdep.c:print_irq_inversion_bug(struct task_struct *curr, struct lock_list *root, struct lock_list *other, struct held_lock *this, int forwards, const char *irqclass)
kernel/locking/lockdep.c:print_usage_bug(struct task_struct *curr, struct held_lock *this, enum lock_usage_bit prev_bit, enum lock_usage_bit new_bit)
kernel/locking/lockdep.c:validate_chain(struct task_struct *curr, struct held_lock *hlock, int chain_head, u64 chain_key)
fs/xattr.c:__vfs_getxattr(struct dentry *dentry, struct inode *inode, const char *name, void *value, size_t size)
fs/xattr.c:__vfs_setxattr_noperm(struct user_namespace *mnt_userns, struct dentry *dentry, const char *name, const void *value, size_t size, int flags)
i_rwsem()
fs/xattr.c:path_getxattr(const char __user *pathname, const char __user *name, void __user *value, size_t size, unsigned int lookup_flags)
fs/xattr.c:path_setxattr(const char __user *pathname, const char __user *name, const void __user *value, size_t size, int flags, unsigned int lookup_flags)
simple_xattr_()
fs/xattr.c:vfs_getxattr(struct user_namespace *mnt_userns, struct dentry *dentry, const char *name, void *value, size_t size)
fs/xattr.c:vfs_setxattr(struct user_namespace *mnt_userns, struct dentry *dentry, const char *name, void *value, size_t size, int flags)
fs/xattr.c:xattr_permission(struct user_namespace *mnt_userns, struct inode *inode, const char *name, int mask)
fs/xattr.c:xattr_resolve_name()
xattr_sem()
fs/attr.c:inode_newsize_ok(const struct inode *inode, loff_t offset)
fs/attr.c:notify_change(struct user_namespace *mnt_userns, struct dentry *dentry, struct iattr *attr, struct inode **delegated_inode)
fs/attr.c:setattr_copy(struct user_namespace *mnt_userns, struct inode *inode, const struct iattr *attr)
fs/attr.c:setattr_prepare(struct user_namespace *mnt_userns, struct dentry *dentry, struct iattr *attr)
__down_read()
__down_write()
kernel/locking/rwsem.c:rwsem_down_read_slowpath()
kernel/locking/rwsem.c:rwsem_down_write_slowpath()
kernel/locking/rwsem.c:rwsem_mark_wake(struct rw_semaphore *sem, enum rwsem_wake_type wake_type, struct wake_q_head *wake_q)
kernel/locking/rwsem.c:rwsem_optimistic_spin(struct rw_semaphore *sem)
rwsem_try_read_lock_unqueued()
kernel/locking/rwsem.c:rwsem_try_write_lock(struct rw_semaphore *sem, struct rwsem_waiter *waiter)
fs/ext4/inode.c:__ext4_iget()
fs/open.c:chown_common(const struct path *path, uid_t user, gid_t group)
fs/ext4/inode.c:ext4_do_update_inode(handle_t *handle, struct inode *inode, struct ext4_iloc *iloc)
fs/ext4/inode.c:ext4_evict_inode(struct inode *inode)
fs/ext4/inode.c:ext4_iget_extra_inode(struct inode *inode, struct ext4_inode *raw_inode, struct ext4_inode_info *ei)
fs/ext4/inode.c:ext4_inode_attach_jinode(struct inode *inode)
ext4_mark_inode_dirty()
fs/ext4/inode.c:ext4_setattr(struct user_namespace *mnt_userns, struct dentry *dentry, struct iattr *attr)
fs/ext4/inode.c:ext4_write_inode(struct inode *inode, struct writeback_control *wbc)
fs/ext4/xattr.c:ext4_xattr_get(struct inode *inode, int name_index, const char *name, void *buffer, size_t buffer_size)
include/linux/fs.h:break_deleg(struct inode *inode, unsigned int mode)
include/linux/fs.h:break_lease(struct inode *inode, unsigned int mode)
include/linux/fs.h:try_break_deleg(struct inode *inode, struct inode **delegated_inode)
security/commoncap.c:cap_inode_need_killpriv(struct dentry *dentry)
security/commoncap.c:cap_inode_removexattr(struct user_namespace *mnt_userns, struct dentry *dentry, const char *name)
security/commoncap.c:cap_inode_setxattr(struct dentry *dentry, const char *name, const void *value, size_t size, int flags)
fs/ext4/super.c:ext4_quota_off(struct super_block *sb, int type)
fs/ext4/super.c:ext4_quota_on(struct super_block *sb, int type, int format_id, const struct path *path)
fs/ext4/super.c:ext4_quota_write(struct super_block *sb, int type, const char *data, size_t len, loff_t off)
func for case e3563f0c94e188366dbb
drivers/tty/n_gsm.c:gsm_activate_mux(struct gsm_mux *gsm))
drivers/tty/n_gsm.c:gsm_alloc_mux()
drivers/tty/n_gsm.c:gsm_cleanup_mux(struct gsm_mux *gsm, bool disc))
drivers/tty/n_gsm.c:gsm_config(struct gsm_mux *gsm, struct gsm_config *c))
drivers/tty/n_gsm.c:gsm_copy_config_values(struct gsm_mux *gsm, struct gsm_config *c))
drivers/tty/n_gsm.c:gsm_dlci_alloc()
drivers/tty/n_gsm.c:gsm_dlci_free(struct tty_port *port))
drivers/tty/n_gsm.c:gsm_dlci_release(struct gsm_dlci *dlci))
drivers/tty/n_gsm.c:gsm_free_mux(struct gsm_mux *gsm))
drivers/tty/n_gsm.c:gsmld_attach_gsm(struct tty_struct *tty, struct gsm_mux *gsm))
drivers/tty/n_gsm.c:gsmld_close(struct tty_struct *tty))
drivers/tty/n_gsm.c:gsmld_detach_gsm(struct tty_struct *tty, struct gsm_mux *gsm))
drivers/tty/n_gsm.c:gsmld_ioctl(struct tty_struct *tty, unsigned int cmd, unsigned long arg))
drivers/tty/n_gsm.c:gsmld_open(struct tty_struct *tty))
drivers/tty/n_gsm.c:gsmld_receive_buf(struct tty_struct *tty, const unsigned char *cp, const char *fp, int count))
drivers/tty/tty_ioctl.c:__tty_perform_flush(struct tty_struct *tty, unsigned long arg)
drivers/tty/tty_ioctl.c:get_ltchars(struct tty_struct *tty, struct ltchars __user *ltchars)
drivers/tty/tty_ioctl.c:get_sgflags(struct tty_struct *tty)
drivers/tty/tty_ioctl.c:get_sgttyb(struct tty_struct *tty, struct sgttyb __user *sgttyb)
drivers/tty/tty_ioctl.c:get_tchars(struct tty_struct *tty, struct tchars __user *tchars)
drivers/tty/tty_ioctl.c:n_tty_ioctl_helper(struct tty_struct *tty, unsigned int cmd, unsigned long arg)
drivers/tty/tty_ioctl.c:set_ltchars(struct tty_struct *tty, struct ltchars __user *ltchars)
drivers/tty/tty_ioctl.c:set_sgflags(struct ktermios *termios, int flags)
drivers/tty/tty_ioctl.c:set_sgttyb(struct tty_struct *tty, struct sgttyb __user *sgttyb)
drivers/tty/tty_ioctl.c:set_tchars(struct tty_struct *tty, struct tchars __user *tchars)
drivers/tty/tty_ioctl.c:set_termios(struct tty_struct *tty, void __user *arg, int opt)
drivers/tty/tty_ioctl.c:tty_change_softcar(struct tty_struct *tty, int arg)
drivers/tty/tty_ioctl.c:tty_mode_ioctl(struct tty_struct *tty, unsigned int cmd, unsigned long arg)
drivers/tty/tty_ioctl.c:tty_perform_flush(struct tty_struct *tty, unsigned long arg)
drivers/tty/tty_ioctl.c:tty_set_termios(struct tty_struct *tty, struct ktermios *new_termios)
drivers/tty/tty_ldisc.c:get_ldops()
drivers/tty/n_gsm.c:gsmld_receive_buf(struct tty_struct *tty, const unsigned char *cp, const char *fp, int count))
set_ldisc()
tty_ldisc()
drivers/tty/tty_ldisc.c:tty_ldisc_close(struct tty_struct *tty, struct tty_ldisc *ld)
drivers/tty/tty_ldisc.c:tty_ldisc_failto(struct tty_struct *tty, int ld)
drivers/tty/tty_ldisc.c:tty_ldisc_get()
drivers/tty/tty_ldisc.c:tty_ldisc_hangup(struct tty_struct *tty, bool reinit)
drivers/tty/tty_ldisc.c:tty_ldisc_init(struct tty_struct *tty)
drivers/tty/tty_ldisc.c:tty_ldisc_lock(struct tty_struct *tty, unsigned long timeout)
drivers/tty/tty_ldisc.c:tty_ldisc_lock_pair_timeout(struct tty_struct *tty, struct tty_struct *tty2, unsigned long timeout)
drivers/tty/tty_ldisc.c:tty_ldisc_open(struct tty_struct *tty, struct tty_ldisc *ld)
drivers/tty/tty_ldisc.c:tty_ldisc_reinit(struct tty_struct *tty, int disc)
drivers/tty/tty_ldisc.c:tty_ldisc_release(struct tty_struct *tty)
drivers/tty/tty_ldisc.c:tty_ldisc_restore(struct tty_struct *tty, struct tty_ldisc *old)
drivers/tty/tty_ldisc.c:tty_ldisc_setup(struct tty_struct *tty, struct tty_struct *o_tty)
drivers/tty/tty_ldisc.c:tty_ldisc_unlock(struct tty_struct *tty)
drivers/tty/tty_ldisc.c:tty_set_ldisc(struct tty_struct *tty, int disc)
drivers/tty/tty_io.c:send_break(struct tty_struct *tty, unsigned int duration)
drivers/tty/tty_io.c:tty_do_resize(struct tty_struct *tty, struct winsize *ws)
drivers/tty/tty_io.c:tty_fasync(int fd, struct file *filp, int on)
tty_io()
drivers/tty/tty_io.c:tty_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
drivers/tty/tty_io.c:tty_set_serial(struct tty_struct *tty, struct serial_struct *ss)
drivers/tty/tty_io.c:tty_tiocgserial(struct tty_struct *tty, struct serial_struct __user *ss)
drivers/tty/tty_io.c:tty_tiocmget(struct tty_struct *tty, int __user *p)
drivers/tty/tty_io.c:tty_tiocmset(struct tty_struct *tty, unsigned int cmd, unsigned __user *p)
drivers/tty/n_gsm.c:gsmld_receive_buf(struct tty_struct *tty, const unsigned char *cp, const char *fp, int count))
n_gsm()
tty_io()
tty_ldisc()
tty_ldisc_N_TTY()
drivers/tty/tty_ldisc.c:tty_ldisc_flush(struct tty_struct *tty)
drivers/tty/tty_ldisc.c:tty_ldisc_get()
drivers/tty/tty_ldisc.c:tty_ldisc_hangup(struct tty_struct *tty, bool reinit)
tty_ldisc_ops()
drivers/tty/tty_ldisc.c:tty_ldisc_put(struct tty_ldisc *ld)
drivers/tty/tty_buffer.c:tty_ldisc_receive_buf(struct tty_ldisc *ld, const unsigned char *p, const char *f, int count)
drivers/tty/tty_buffer.c:flush_to_ldisc(struct work_struct *work)
drivers/tty/tty_buffer.c:receive_buf(struct tty_port *port, struct tty_buffer *head, int count)
drivers/tty/tty_buffer.c:tty_buffer_flush(struct tty_struct *tty, struct tty_ldisc *ld)
drivers/tty/tty_buffer.c:tty_buffer_free_all(struct tty_port *port)
drivers/tty/tty_buffer.c:tty_buffer_init(struct tty_port *port)
drivers/tty/tty_buffer.c:tty_buffer_unlock_exclusive(struct tty_port *port)
drivers/tty/tty_buffer.c:tty_insert_flip_string_and_push_buffer(struct tty_port *port, const unsigned char *chars, size_t size)
drivers/tty/tty_buffer.c:tty_ldisc_receive_buf(struct tty_ldisc *ld, const unsigned char *p, const char *f, int count)
fs/ioctl.c:do_vfs_ioctl(struct file *filp, unsigned int fd, unsigned int cmd, unsigned long arg)
fs/ioctl.c:ioctl_fioasync(unsigned int fd, struct file *filp, int __user *argp)
fs/ioctl.c:ioctl_fionbio(struct file *filp, int __user *argp)
drivers/tty/n_gsm.c:gsmld_receive_buf(struct tty_struct *tty, const unsigned char *cp, const char *fp, int count))
n_gsm()
tty_io()
drivers/tty/tty_io.c:tty_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
drivers/tty/tty_port.c:tty_port_default_receive_buf(struct tty_port *port, const unsigned char *p, const unsigned char *f, size_t count)
drivers/tty/tty_port.c:tty_port_tty_get()
drivers/tty/tty_port.c:tty_port_tty_set(struct tty_port *port, struct tty_struct *tty)
func for case 4903218f7fba0a2d6226
err_add()
err_deliver()
net_exit_batch()
net_init()
net/netfilter/nfnetlink.c:nfnetlink_bind(struct net *net, int group)
net/netfilter/nfnetlink.c:nfnetlink_init(void)
net/netfilter/nfnetlink.c:nfnetlink_net_exit_batch(struct list_head *net_exit_list)
net/netfilter/nfnetlink.c:nfnetlink_net_init(struct net *net)
net/netfilter/nfnetlink.c:nfnetlink_rcv(struct sk_buff *skb)
net/netfilter/nfnetlink.c:nfnetlink_rcv_batch(struct sk_buff *skb, struct nlmsghdr *nlh, u16 subsys_id, u32 genid)
net/netfilter/nfnetlink.c:nfnetlink_rcv_msg(struct sk_buff *skb, struct nlmsghdr *nlh, struct netlink_ext_ack *extack)
net/netfilter/nfnetlink.c:nfnetlink_rcv_skb_batch(struct sk_buff *skb, struct nlmsghdr *nlh)
net/netfilter/nfnetlink.c:nfnetlink_subsys_register(const struct nfnetlink_subsystem *n)
net/netfilter/nfnetlink.c:nfnetlink_unbind(struct net *net, int group)
net/netfilter/nfnetlink.c:nfnetlink_unicast(struct sk_buff *skb, struct net *net, u32 portid)
net/netfilter/nfnetlink.c:nfnl_err_add(struct list_head *list, struct nlmsghdr *nlh, int err, const struct netlink_ext_ack *extack)
net/netfilter/nfnetlink.c:nfnl_err_deliver(struct list_head *err_list, struct sk_buff *skb)
subsys_register()
net/netlink/af_netlink.c:netlink_autobind(struct socket *sock)
net/netlink/af_netlink.c:netlink_bind(struct socket *sock, struct sockaddr *addr, int addr_len)
net/netlink/af_netlink.c:netlink_compare(struct rhashtable_compare_arg *arg, const void *ptr)
net/netlink/af_netlink.c:netlink_insert(struct sock *sk, u32 portid)
net/netlink/af_netlink.c:netlink_lookup()
net/netlink/af_netlink.c:netlink_overrun(struct sock *sk)
net/netlink/af_netlink.c:netlink_rcv_wake(struct sock *sk)
net/netlink/af_netlink.c:netlink_realloc_groups(struct sock *sk)
net/netlink/af_netlink.c:netlink_release(struct socket *sock)
net/netlink/af_netlink.c:netlink_skb_destructor(struct sk_buff *skb)
net/netlink/af_netlink.c:netlink_skb_set_owner_r(struct sk_buff *skb, struct sock *sk)
net/netlink/af_netlink.c:netlink_sock_destruct(struct sock *sk)
net/netlink/af_netlink.c:netlink_undo_bind(int group, long unsigned int groups, struct sock *sk)
net/netlink/af_netlink.c:netlink_update_listeners(struct sock *sk)
net/netlink/af_netlink.c:netlink_update_subscriptions(struct sock *sk, unsigned int subscriptions)
net/socket.c:__sock_create(struct net *net, int family, int type, int protocol, struct socket **res, int kern)
net/socket.c:__sock_release(struct socket *sock, struct inode *inode)
net/socket.c:__sys_bind(int fd, struct sockaddr __user *umyaddr, int addrlen)
net/socket.c:sock_alloc_file()
net/socket.c:sock_alloc_inode()
net/socket.c:sock_create_lite(int family, int type, int protocol, struct socket **res)
net/socket.c:sock_do_ioctl(struct net *net, struct socket *sock, unsigned int cmd, unsigned long arg)
net/socket.c:sock_fasync(int fd, struct file *filp, int on)
net/socket.c:sock_init(void)
net/socket.c:sock_ioctl(struct file *file, unsigned cmd, unsigned long arg)
net/socket.c:sock_poll(struct file *file, poll_table *wait)
net/socket.c:sock_register(const struct net_proto_family *ops)
net/socket.c:sock_wake_async(struct socket_wq *wq, int how, int band)
net/socket.c:sockfd_lookup()
net/socket.c:sockfd_lookup_light()
lib/ubsan.c:__ubsan_handle_out_of_bounds(void *_data, void *index)
lib/ubsan.c:__ubsan_handle_type_mismatch(struct type_mismatch_data *data, void *ptr)
lib/ubsan.c:__ubsan_handle_type_mismatch_v1(void *_data, void *ptr)
lib/ubsan.c:handle_misaligned_access(struct type_mismatch_data_common *data, unsigned long ptr)
lib/ubsan.c:handle_null_ptr_deref(struct type_mismatch_data_common *data)
lib/ubsan.c:handle_object_size_mismatch(struct type_mismatch_data_common *data, unsigned long ptr)
lib/ubsan.c:ubsan_prologue(struct source_location *loc, const char *reason)
lib/ubsan.c:ubsan_type_mismatch_common(struct type_mismatch_data_common *data, unsigned long ptr)
net/netfilter/nf_conntrack_core.c:nf_conntrack_find_get()
net/netfilter/nf_conntrack_core.c:nf_conntrack_handle_packet(struct nf_conn *ct, struct sk_buff *skb, unsigned int dataoff, enum ip_conntrack_info ctinfo, const struct nf_hook_state *state)
net/netfilter/nf_conntrack_core.c:nf_conntrack_hash_resize(unsigned int hashsize)
net/netfilter/nf_conntrack_core.c:nf_conntrack_in(struct sk_buff *skb, const struct nf_hook_state *state)
net/netfilter/nf_conntrack_core.c:nf_conntrack_init_net(struct net *net)
net/netfilter/nf_conntrack_core.c:nf_conntrack_set_hashsize(const char *val, const struct kernel_param *kp)
net/netfilter/nf_conntrack_core.c:nf_ct_alloc_hashtable()
net/netfilter/nf_conntrack_core.c:nf_ct_delete(struct nf_conn *ct, u32 portid, int report)
net/netfilter/nf_conntrack_helper.c:__nf_conntrack_helper_find()
net/netfilter/nf_conntrack_helper.c:__nf_ct_helper_find()
net/netfilter/nf_conntrack_helper.c:__nf_ct_try_assign_helper(struct nf_conn *ct, struct nf_conn *tmpl, gfp_t flags)
net/netfilter/nf_conntrack_helper.c:nf_conntrack_helper_register(struct nf_conntrack_helper *me)
net/netfilter/nf_conntrack_helper.c:nf_conntrack_helper_unregister(struct nf_conntrack_helper *me)
net/netfilter/nf_conntrack_helper.c:nf_conntrack_helpers_register(struct nf_conntrack_helper *helper, unsigned int n)
net/netfilter/nf_conntrack_helper.c:nf_ct_helper_init(struct nf_conntrack_helper *helper, u16 l3num, u16 protonum, const char *name, u16 default_port, u16 spec_port, u32 id, const struct nf_conntrack_expect_policy *exp_pol, u32 expect_class_max, int (*help)(struct sk_buff *skb, unsigned int protoff, struct nf_conn *ct, enum ip_conntrack_info ctinfo), int (*from_nlattr)(struct nlattr *attr, struct nf_conn *ct), struct module *module)
net/netfilter/nf_conntrack_helper.c:nf_ct_lookup_helper()
kernel/exit.c:__exit_signal(struct task_struct *tsk)
kernel/exit.c:__unhash_process(struct task_struct *p, bool group_dead)
kernel/exit.c:do_exit(long code)
kernel/exit.c:do_group_exit(int exit_code)
kernel/exit.c:exit_notify(struct task_struct *tsk, int group_dead)
kernel/exit.c:find_new_reaper()
kernel/exit.c:release_task(struct task_struct *p)
kernel/exit.c:reparent_leader(struct task_struct *father, struct task_struct *p, struct list_head *dead)
net/netfilter/nfnetlink.c:nfnetlink_unbind(struct net *net, int group)
dump_stack()
lib/dump_stack.c:dump_stack_print_info(const char *log_lvl)
lib/dump_stack.c:dump_stack_set_arch_desc(const char *fmt, ...)
net/netfilter/nfnetlink.c:nfnetlink_unbind(struct net *net, int group)
fs/file_table.c:__fput(struct file *file)
fs/file_table.c:__fput_sync(struct file *file)
fs/file_table.c:fput_many(struct file *file, unsigned int refs)
func for case 92340f7b2b4789907fdb
lib/kobject_uevent.c:add_uevent_var(struct kobj_uevent_env *env, const char *format, ...)
lib/kobject_uevent.c:alloc_uevent_skb()
lib/kobject_uevent.c:init_uevent_argv(struct kobj_uevent_env *env, const char *subsystem)
lib/kobject_uevent.c:kobject_action_args(const char *buf, size_t count, struct kobj_uevent_env **ret_env)
lib/kobject_uevent.c:kobject_action_type(const char *buf, size_t count, enum kobject_action *type, const char **args)
lib/kobject_uevent.c:kobject_synth_uevent(struct kobject *kobj, const char *buf, size_t count)
lib/kobject_uevent.c:kobject_uevent_env(struct kobject *kobj, enum kobject_action action, char *envp_ext[])
lib/kobject_uevent.c:kobject_uevent_net_broadcast(struct kobject *kobj, struct kobj_uevent_env *env, const char *action_string, const char *devpath)
lib/kobject_uevent.c:uevent_net_broadcast(struct sock *usk, struct sk_buff *skb, struct netlink_ext_ack *extack)
lib/kobject_uevent.c:uevent_net_broadcast_tagged(struct sock *usk, struct kobj_uevent_env *env, const char *action_string, const char *devpath)
lib/kobject_uevent.c:uevent_net_broadcast_untagged(struct kobj_uevent_env *env, const char *action_string, const char *devpath)
lib/kobject_uevent.c:uevent_net_init(struct net *net)
lib/kobject_uevent.c:zap_modalias_env(struct kobj_uevent_env *env)
drivers/hid/hid-microsoft.c:ms_ergonomy_kb_quirk(struct hid_input *hi, struct hid_usage *usage, unsigned long **bit, int *max)
drivers/hid/hid-microsoft.c:ms_event(struct hid_device *hdev, struct hid_field *field, struct hid_usage *usage, __s32 value)
drivers/hid/hid-microsoft.c:ms_ff_worker(struct work_struct *work)
drivers/hid/hid-microsoft.c:ms_init_ff(struct hid_device *hdev)
drivers/hid/hid-microsoft.c:ms_input_mapping(struct hid_device *hdev, struct hid_input *hi, struct hid_field *field, struct hid_usage *usage, unsigned long **bit, int *max)
drivers/hid/hid-microsoft.c:ms_play_effect(struct input_dev *dev, void *data, struct ff_effect *effect)
drivers/hid/hid-microsoft.c:ms_presenter_8k_quirk(struct hid_input *hi, struct hid_usage *usage, unsigned long **bit, int *max)
drivers/hid/hid-microsoft.c:ms_probe(struct hid_device *hdev, const struct hid_device_id *id)
drivers/hid/hid-microsoft.c:ms_report_fixup()
drivers/usb/core/hub.c:hub_configure(struct usb_hub *hub, struct usb_endpoint_descriptor *endpoint)
drivers/usb/core/hub.c:hub_disconnect(struct usb_interface *intf)
drivers/usb/core/hub.c:hub_disconnect_children(struct usb_device *udev)
drivers/usb/core/hub.c:hub_event(struct work_struct *work)
drivers/usb/core/hub.c:hub_free_dev(struct usb_device *udev)
drivers/usb/core/hub.c:hub_port_connect(struct usb_hub *hub, int port1, u16 portstatus, u16 portchange)
drivers/usb/core/hub.c:hub_port_init(struct usb_hub *hub, struct usb_device *udev, int port1, int retry_counter)
drivers/usb/core/hub.c:hub_port_logical_disconnect(struct usb_hub *hub, int port1)
drivers/usb/core/hub.c:hub_port_reset(struct usb_hub *hub, int port1, struct usb_device *udev, unsigned int delay, bool warm)
drivers/usb/core/hub.c:hub_port_wait_reset(struct usb_hub *hub, int port1, struct usb_device *udev, unsigned int delay, bool warm)
drivers/usb/core/hub.c:hub_probe(struct usb_interface *intf, const struct usb_device_id *id)
lib/kobject_uevent.c:kobject_uevent_env(struct kobject *kobj, enum kobject_action action, char *envp_ext[])
drivers/usb/core/hub.c:usb_new_device(struct usb_device *udev)
drivers/usb/core/hub.c:usb_reset_and_verify_device(struct usb_device *udev)
drivers/usb/core/hub.c:usb_reset_device(struct usb_device *udev)
drivers/usb/core/hub.c:usb_set_device_state(struct usb_device *udev, enum usb_device_state new_state)
drivers/base/core.c:dev_uevent(struct kset *kset, struct kobject *kobj, struct kobj_uevent_env *env)
drivers/base/core.c:device_add(struct device *dev)
drivers/base/core.c:device_create_sys_dev_entry(struct device *dev)
drivers/base/core.c:device_del(struct device *dev)
drivers/base/core.c:device_initialize(struct device *dev)
drivers/base/core.c:device_private_init(struct device *dev)
drivers/base/core.c:device_remove_sys_dev_entry(struct device *dev)
drivers/base/core.c:kill_device(struct device *dev)
drivers/hid/hid-core.c:hid_add_device(struct hid_device *hdev)
drivers/hid/hid-core.c:hid_connect(struct hid_device *hdev, unsigned int connect_mask)
drivers/hid/hid-core.c:hid_device_probe(struct device *dev)
drivers/hid/hid-core.c:hid_hw_start(struct hid_device *hdev, unsigned int connect_mask)
drivers/hid/hid-core.c:hid_input_report(struct hid_device *hid, int type, u8 *data, u32 size, int interrupt)
drivers/hid/hid-core.c:hid_process_event(struct hid_device *hid, struct hid_field *field, struct hid_usage *usage, __s32 value, int interrupt)
drivers/hid/hid-core.c:hid_scan_main(struct hid_parser *parser, struct hid_item *item)
drivers/hid/hid-core.c:hid_uevent(struct device *dev, struct kobj_uevent_env *env)
drivers/usb/core/message.c:usb_bulk_msg(struct usb_device *usb_dev, unsigned int pipe, void *data, int len, int *actual_length, int timeout)
drivers/usb/core/message.c:usb_control_msg(struct usb_device *dev, unsigned int pipe, __u8 request, __u8 requesttype, __u16 value, __u16 index, void *data, __u16 size, int timeout)
drivers/usb/core/message.c:usb_control_msg_recv(struct usb_device *dev, __u8 endpoint, __u8 request, __u8 requesttype, __u16 value, __u16 index, void *driver_data, __u16 size, int timeout, gfp_t memflags)
drivers/usb/core/message.c:usb_get_descriptor(struct usb_device *dev, unsigned char type, unsigned char index, void *buf, int size)
drivers/usb/core/message.c:usb_get_string(struct usb_device *dev, unsigned short langid, unsigned char index, void *buf, int size)
drivers/usb/core/message.c:usb_internal_control_msg(struct usb_device *usb_dev, unsigned int pipe, struct usb_ctrlrequest *cmd, void *data, int len, int timeout)
drivers/usb/core/message.c:usb_set_configuration(struct usb_device *dev, int configuration)
drivers/usb/core/message.c:usb_string(struct usb_device *dev, int index, char *buf, size_t size)
drivers/hid/usbhid/hid-core.c:hid_alloc_buffers(struct usb_device *dev, struct hid_device *hid)
drivers/hid/usbhid/hid-core.c:hid_find_max_report(struct hid_device *hid, unsigned int type, unsigned int *max)
drivers/hid/usbhid/hid-core.c:hid_io_error(struct hid_device *hid)
drivers/hid/usbhid/hid-core.c:hid_reset(struct work_struct *work)
drivers/hid/usbhid/hid-core.c:hid_start_in(struct hid_device *hid)
drivers/hid/usbhid/hid-core.c:hid_submit_ctrl(struct hid_device *hid)
drivers/hid/usbhid/hid-core.c:usbhid_init_reports(struct hid_device *hid)
drivers/hid/usbhid/hid-core.c:usbhid_probe(struct usb_interface *intf, const struct usb_device_id *id)
drivers/usb/core/config.c:usb_get_configuration(struct usb_device *dev)
drivers/usb/core/config.c:usb_parse_configuration(struct usb_device *dev, int cfgidx, struct usb_host_config *config, unsigned char *buffer, int size)
drivers/usb/core/config.c:usb_parse_interface(struct device *ddev, int cfgno, struct usb_host_config *config, unsigned char *buffer, int size, u8 inums[], u8 nalts[])
drivers/base/dd.c:__device_attach(struct device *dev, bool allow_async)
drivers/base/dd.c:driver_probe_device(struct device_driver *drv, struct device *dev)
drivers/base/dd.c:really_probe(struct device *dev, struct device_driver *drv)
input_add_uevent_modalias_var()
input_dev_uevent()
input_register_device()
func for case 3dea30b047f41084de66
drivers/usb/usbip/vhci_hcd.c:hub_descriptor(struct usb_hub_descriptor *desc)
drivers/usb/usbip/vhci_hcd.c:rh_port_connect(struct vhci_device *vdev, enum usb_device_speed speed)
drivers/usb/usbip/vhci_hcd.c:rh_port_disconnect(struct vhci_device *vdev)
drivers/usb/usbip/vhci_hcd.c:vhci_device_init(struct vhci_device *vdev)
drivers/usb/usbip/vhci_hcd.c:vhci_device_reset(struct usbip_device *ud)
drivers/usb/usbip/vhci_hcd.c:vhci_device_unlink_cleanup(struct vhci_device *vdev)
drivers/usb/usbip/vhci_hcd.c:vhci_hub_control(struct usb_hcd *hcd, u16 typeReq, u16 wValue, u16 wIndex, char *buf, u16 wLength)
drivers/usb/usbip/vhci_hcd.c:vhci_hub_status(struct usb_hcd *hcd, char *buf)
drivers/usb/usbip/vhci_hcd.c:vhci_setup(struct usb_hcd *hcd)
drivers/usb/usbip/vhci_hcd.c:vhci_shutdown_connection(struct usbip_device *ud)
drivers/usb/usbip/vhci_hcd.c:vhci_start(struct usb_hcd *hcd)
drivers/usb/usbip/vhci_hcd.c:vhci_stop(struct usb_hcd *hcd)
drivers/usb/usbip/vhci_hcd.c:vhci_tx_urb(struct urb *urb, struct vhci_device *vdev)
drivers/usb/usbip/vhci_hcd.c:vhci_urb_dequeue(struct usb_hcd *hcd, struct urb *urb, int status)
drivers/usb/usbip/vhci_hcd.c:vhci_urb_enqueue(struct usb_hcd *hcd, struct urb *urb, gfp_t mem_flags)
USBDEVFS_CONTROL()
drivers/usb/core/message.c:usb_bulk_msg(struct usb_device *usb_dev, unsigned int pipe, void *data, int len, int *actual_length, int timeout)
drivers/usb/core/message.c:usb_control_msg(struct usb_device *dev, unsigned int pipe, __u8 request, __u8 requesttype, __u16 value, __u16 index, void *data, __u16 size, int timeout)
drivers/usb/core/message.c:usb_control_msg_recv(struct usb_device *dev, __u8 endpoint, __u8 request, __u8 requesttype, __u16 value, __u16 index, void *driver_data, __u16 size, int timeout, gfp_t memflags)
drivers/usb/core/message.c:usb_get_descriptor(struct usb_device *dev, unsigned char type, unsigned char index, void *buf, int size)
drivers/usb/core/message.c:usb_get_device_descriptor(struct usb_device *dev, unsigned int size)
drivers/usb/core/message.c:usb_get_langid(struct usb_device *dev, unsigned char *tbuf)
drivers/usb/core/message.c:usb_get_status(struct usb_device *dev, int recip, int type, int target, void *data)
drivers/usb/core/message.c:usb_get_string(struct usb_device *dev, unsigned short langid, unsigned char index, void *buf, int size)
drivers/usb/core/message.c:usb_internal_control_msg(struct usb_device *usb_dev, unsigned int pipe, struct usb_ctrlrequest *cmd, void *data, int len, int timeout)
drivers/usb/core/message.c:usb_sg_init(struct usb_sg_request *io, struct usb_device *dev, unsigned pipe, unsigned period, struct scatterlist *sg, int nents, size_t length, gfp_t mem_flags)
drivers/usb/core/message.c:usb_sg_wait(struct usb_sg_request *io)
drivers/usb/core/message.c:usb_start_wait_urb(struct urb *urb, int timeout, int *actual_length)
drivers/usb/core/message.c:usb_string(struct usb_device *dev, int index, char *buf, size_t size)
drivers/usb/core/message.c:usb_string_sub(struct usb_device *dev, unsigned int langid, unsigned int index, unsigned char *buf)
drivers/usb/core/message.c:usb_try_string_workarounds(unsigned char *buf, int *length)
drivers/usb/usbip/vhci_hcd.c:vhci_hub_control(struct usb_hcd *hcd, u16 typeReq, u16 wValue, u16 wIndex, char *buf, u16 wLength)
USBDEVFS_CONTROL()
drivers/usb/core/devio.c:check_ctrlrecip(struct usb_dev_state *ps, unsigned int requesttype, unsigned int request, unsigned int index)
drivers/usb/core/devio.c:copy_urb_data_to_user(u8 __user *userbuffer, struct urb *urb)
drivers/usb/core/devio.c:do_proc_control(struct usb_dev_state *ps, struct usbdevfs_ctrltransfer *ctrl)
drivers/usb/core/devio.c:proc_control(struct usb_dev_state *ps, void __user *arg)
drivers/usb/core/devio.c:proc_control_compat(struct usb_dev_state *ps, struct usbdevfs_ctrltransfer32 __user *p32)
drivers/usb/core/devio.c:proc_do_submiturb(struct usb_dev_state *ps, struct usbdevfs_urb *uurb, struct usbdevfs_iso_packet_desc __user *iso_frame_desc, void __user *arg, sigval_t userurb_sigval)
drivers/usb/core/devio.c:proc_ioctl(struct usb_dev_state *ps, struct usbdevfs_ioctl *ctl)
drivers/usb/core/devio.c:proc_ioctl_compat(struct usb_dev_state *ps, compat_uptr_t arg)
drivers/usb/core/devio.c:proc_submiturb(struct usb_dev_state *ps, void __user *arg)
drivers/usb/core/message.c:usb_control_msg(struct usb_device *dev, unsigned int pipe, __u8 request, __u8 requesttype, __u16 value, __u16 index, void *data, __u16 size, int timeout)
drivers/usb/core/message.c:usb_internal_control_msg(struct usb_device *usb_dev, unsigned int pipe, struct usb_ctrlrequest *cmd, void *data, int len, int timeout)
drivers/usb/core/message.c:usb_start_wait_urb(struct urb *urb, int timeout, int *actual_length)
drivers/usb/core/urb.c:usb_submit_urb(struct urb *urb, gfp_t mem_flags)
drivers/usb/core/devio.c:usbdev_do_ioctl(struct file *file, unsigned int cmd, void __user *p)
usbfs_start_wait_urb()
vhci_hcd()
drivers/usb/core/hcd.c:rh_call_control(struct usb_hcd *hcd, struct urb *urb)
drivers/usb/core/hcd.c:usb_hcd_check_unlink_urb(struct usb_hcd *hcd, struct urb *urb, int status)
drivers/usb/core/hcd.c:usb_hcd_giveback_urb(struct usb_hcd *hcd, struct urb *urb, int status)
drivers/usb/core/hcd.c:usb_hcd_link_urb_to_ep(struct usb_hcd *hcd, struct urb *urb)
drivers/usb/core/hcd.c:usb_hcd_map_urb_for_dma(struct usb_hcd *hcd, struct urb *urb, gfp_t mem_flags)
drivers/usb/core/hcd.c:usb_hcd_submit_urb(struct urb *urb, gfp_t mem_flags)
drivers/usb/core/hcd.c:usb_hcd_unlink_urb(struct urb *urb, int status)
drivers/usb/core/hcd.c:usb_hcd_unmap_urb_for_dma(struct usb_hcd *hcd, struct urb *urb)
drivers/usb/usbip/vhci_sysfs.c:attach_store(struct device *dev, struct device_attribute *attr, const char *buf, size_t count)
drivers/usb/usbip/vhci_sysfs.c:detach_store(struct device *dev, struct device_attribute *attr, const char *buf, size_t count)
drivers/usb/usbip/vhci_sysfs.c:port_show_vhci(char **out, int hub, int port, struct vhci_device *vdev)
drivers/usb/usbip/vhci_sysfs.c:status_name_to_id(const char *name)
drivers/usb/usbip/vhci_sysfs.c:status_show(struct device *dev, struct device_attribute *attr, char *out)
drivers/usb/usbip/vhci_sysfs.c:status_show_vhci(int pdev_nr, char *out)
drivers/usb/usbip/vhci_sysfs.c:valid_port(__u32 *pdev_nr, __u32 *rhport)
drivers/usb/usbip/vhci_sysfs.c:vhci_port_disconnect(struct vhci_hcd *vhci_hcd, __u32 rhport)
drivers/usb/core/urb.c:usb_alloc_urb()
drivers/usb/core/urb.c:usb_anchor_urb(struct urb *urb, struct usb_anchor *anchor)
drivers/usb/core/urb.c:usb_init_urb(struct urb *urb)
drivers/usb/core/urb.c:usb_kill_urb(struct urb *urb)
drivers/usb/core/urb.c:usb_pipe_type_check(struct usb_device *dev, unsigned int pipe)
drivers/usb/core/urb.c:usb_submit_urb(struct urb *urb, gfp_t mem_flags)
drivers/usb/core/urb.c:usb_unanchor_urb(struct urb *urb)
drivers/usb/core/urb.c:usb_unlink_urb(struct urb *urb)
vhci_hcd()
drivers/usb/usbip/vhci_hcd.c:vhci_hub_control(struct usb_hcd *hcd, u16 typeReq, u16 wValue, u16 wIndex, char *buf, u16 wLength)
usbdevice_fs()
vhci_hcd()
drivers/usb/usbip/vhci_hcd.c:vhci_hub_control(struct usb_hcd *hcd, u16 typeReq, u16 wValue, u16 wIndex, char *buf, u16 wLength)
lib/ubsan.c:__ubsan_handle_shift_out_of_bounds(void *_data, void *lhs, void *rhs)
lib/ubsan.c:ubsan_epilogue(void)
lib/ubsan.c:ubsan_prologue(struct source_location *loc, const char *reason)
func for case d451401ffd00a60677ee
net/wireless/reg.c:__reg_process_hint_country_ie(struct wiphy *wiphy, struct regulatory_request *country_ie_request)
net/wireless/reg.c:__reg_process_hint_user(struct regulatory_request *user_request)
net/wireless/reg.c:is_user_regdom_saved(void)
net/wireless/reg.c:queue_regulatory_request(struct regulatory_request *request)
net/wireless/reg.c:reg_copy_regd()
net/wireless/reg.c:reg_process_hint(struct regulatory_request *reg_request)
net/wireless/reg.c:reg_process_hint_country_ie(struct wiphy *wiphy, struct regulatory_request *country_ie_request)
net/wireless/reg.c:reg_process_hint_user(struct regulatory_request *user_request)
net/wireless/reg.c:reg_set_rd_user(const struct ieee80211_regdomain *rd, struct regulatory_request *user_request)
net/wireless/reg.c:regulatory_hint(struct wiphy *wiphy, const char *alpha2)
net/wireless/reg.c:regulatory_hint_country_ie(struct wiphy *wiphy, enum nl80211_band band, const u8 *country_ie, u8 country_ie_len)
net/wireless/reg.c:regulatory_hint_user(const char *alpha2, enum nl80211_user_reg_hint_type user_reg_hint_type)
net/wireless/reg.c:restore_alpha2(char *alpha2, bool reset_user)
net/wireless/reg.c:restore_regulatory_settings(bool reset_user, bool cached)
net/wireless/reg.c:set_regdom(const struct ieee80211_regdomain *rd, enum ieee80211_regd_source regd_src)
NL80211_CMD_REQ_SET_REG()
net/wireless/nl80211.c:__nl80211_set_channel(struct cfg80211_registered_device *rdev, struct net_device *dev, struct genl_info *info)
net/wireless/nl80211.c:nl80211_get_reg_do(struct sk_buff *skb, struct genl_info *info)
net/wireless/nl80211.c:nl80211_new_station(struct sk_buff *skb, struct genl_info *info)
net/wireless/nl80211.c:nl80211_parse_beacon(struct cfg80211_registered_device *rdev, struct nlattr *attrs[], struct cfg80211_beacon_data *bcn)
net/wireless/nl80211.c:nl80211_parse_chandef(struct cfg80211_registered_device *rdev, struct genl_info *info, struct cfg80211_chan_def *chandef)
net/wireless/nl80211.c:nl80211_put_regdom(const struct ieee80211_regdomain *regdom, struct sk_buff *msg)
net/wireless/nl80211.c:nl80211_req_set_reg(struct sk_buff *skb, struct genl_info *info)
net/wireless/nl80211.c:nl80211_send_regdom(struct sk_buff *msg, struct netlink_callback *cb, u32 seq, int flags, struct wiphy *wiphy, const struct ieee80211_regdomain *regdom)
net/wireless/nl80211.c:nl80211_set_beacon(struct sk_buff *skb, struct genl_info *info)
net/wireless/nl80211.c:nl80211_set_interface(struct sk_buff *skb, struct genl_info *info)
net/wireless/nl80211.c:nl80211_set_reg(struct sk_buff *skb, struct genl_info *info)
net/wireless/nl80211.c:nl80211_set_station(struct sk_buff *skb, struct genl_info *info)
net/wireless/nl80211.c:nl80211_set_wiphy(struct sk_buff *skb, struct genl_info *info)
net/wireless/nl80211.c:nl80211_start_ap(struct sk_buff *skb, struct genl_info *info)
net/wireless/nl80211.c:parse_reg_rule(struct nlattr *tb[], struct ieee80211_reg_rule *reg_rule)
NL80211_CMD_REQ_SET_REG()
net/netlink/af_netlink.c:__netlink_sendskb(struct sock *sk, struct sk_buff *skb)
net/netlink/af_netlink.c:netlink_ack(struct sk_buff *in_skb, struct nlmsghdr *nlh, int err, const struct netlink_ext_ack *extack)
net/netlink/af_netlink.c:netlink_alloc_large_skb()
net/netlink/af_netlink.c:netlink_attachskb(struct sock *sk, struct sk_buff *skb, long *timeo, struct sock *ssk)
net/netlink/af_netlink.c:netlink_bind(struct socket *sock, struct sockaddr *addr, int addr_len)
net/netlink/af_netlink.c:netlink_broadcast_filtered(struct sock *ssk, struct sk_buff *skb, u32 portid, u32 group, gfp_t allocation, int (*filter)(struct sock *dsk, struct sk_buff *skb, void *data), void *filter_data)
net/netlink/af_netlink.c:netlink_connect(struct socket *sock, struct sockaddr *addr, int alen, int flags)
net/netlink/af_netlink.c:netlink_getsockbyportid()
net/netlink/af_netlink.c:netlink_getsockopt(struct socket *sock, int level, int optname, char __user *optval, int __user *optlen)
net/netlink/af_netlink.c:netlink_rcv_skb(struct sk_buff *skb, int (*cb)(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *))
net/netlink/af_netlink.c:netlink_recvmsg(struct socket *sock, struct msghdr *msg, size_t len, int flags)
net/netlink/af_netlink.c:netlink_sendmsg(struct socket *sock, struct msghdr *msg, size_t len)
net/netlink/af_netlink.c:netlink_setsockopt(struct socket *sock, int level, int optname, char __user *optval, unsigned int optlen)
net/netlink/af_netlink.c:netlink_trim()
net/netlink/af_netlink.c:netlink_unicast(struct sock *ssk, struct sk_buff *skb, u32 portid, int nonblock)
net/netlink/genetlink.c:genl_family_rcv_msg(const struct genl_family *family, struct sk_buff *skb, struct nlmsghdr *nlh, struct netlink_ext_ack *extack)
net/netlink/genetlink.c:genl_family_rcv_msg_doit(const struct genl_family *family, struct sk_buff *skb, struct nlmsghdr *nlh, struct netlink_ext_ack *extack, const struct genl_ops *ops, int hdrlen, struct net *net)
net/netlink/genetlink.c:genl_family_rcv_msg_dumpit(const struct genl_family *family, struct sk_buff *skb, struct nlmsghdr *nlh, struct netlink_ext_ack *extack, const struct genl_ops *ops, int hdrlen, struct net *net)
net/netlink/genetlink.c:genl_notify(const struct genl_family *family, struct sk_buff *skb, struct genl_info *info, u32 group, gfp_t flags)
net/netlink/genetlink.c:genl_rcv_msg(struct sk_buff *skb, struct nlmsghdr *nlh, struct netlink_ext_ack *extack)
net/netlink/genetlink.c:genl_register_family(struct genl_family *family)
net/netlink/genetlink.c:genl_unregister_family(const struct genl_family *family)
net/netlink/genetlink.c:genlmsg_mcast(struct sk_buff *skb, u32 portid, unsigned long group, gfp_t flags)
kernel/workqueue.c:__queue_work(int cpu, struct workqueue_struct *wq, struct work_struct *work)
net/wireless/reg.c:crda_timeout_work(struct work_struct *work)
kernel/workqueue.c:insert_work(struct pool_workqueue *pwq, struct work_struct *work, struct list_head *head, unsigned int extra_flags)
process_one_work()
kernel/workqueue.c:queue_work_node(int node, struct workqueue_struct *wq, struct work_struct *work)
kernel/workqueue.c:worker_set_flags(struct worker *worker, unsigned int flags)
kernel/workqueue.c:worker_thread(void *__worker)
kernel/workqueue.c:wq_select_unbound_cpu(int cpu)
net/wireless/core.c:__cfg80211_leave(struct cfg80211_registered_device *rdev, struct wireless_dev *wdev)
net/wireless/core.c:__cfg80211_unregister_wdev(struct wireless_dev *wdev, bool sync)
net/wireless/core.c:cfg80211_dev_free(struct cfg80211_registered_device *rdev)
net/wireless/core.c:cfg80211_init_wdev(struct cfg80211_registered_device *rdev, struct wireless_dev *wdev)
net/wireless/core.c:cfg80211_shutdown_all_interfaces(struct wiphy *wiphy)
net/wireless/core.c:cfg80211_stop_iface(struct wiphy *wiphy, struct wireless_dev *wdev, gfp_t gfp)
net/wireless/core.c:wiphy_register(struct wiphy *wiphy)
net/wireless/core.c:wiphy_verify_combinations(struct wiphy *wiphy)
net/socket.c:__sys_getsockopt(int fd, int level, int optname, char __user *optval, int __user *optlen)
net/socket.c:__sys_setsockopt(int fd, int level, int optname, char __user *optval, int optlen)
kernel_getsockopt()
kernel_setsockopt()
net/socket.c:move_addr_to_kernel(void __user *uaddr, int ulen, struct sockaddr_storage *kaddr)
routing_ioctl()
net/socket.c:sock_do_ioctl(struct net *net, struct socket *sock, unsigned int cmd, unsigned long arg)
net/socket.c:sock_ioctl(struct file *file, unsigned cmd, unsigned long arg)
net/wireless/reg.c:is_user_regdom_saved(void)
net/wireless/reg.c:restore_alpha2(char *alpha2, bool reset_user)
net/wireless/reg.c:restore_regulatory_settings(bool reset_user, bool cached)
net/wireless/reg.c:is_user_regdom_saved(void)
net/wireless/reg.c:restore_alpha2(char *alpha2, bool reset_user)
net/wireless/reg.c:restore_regulatory_settings(bool reset_user, bool cached)
func for case f31428628ef672716ea8
net/qrtr/qrtr.c:__qrtr_bind(struct socket *sock, const struct sockaddr_qrtr *addr, int zapped)
net/qrtr/qrtr.c:__qrtr_node_release(struct kref *kref)
net/qrtr/qrtr.c:qrtr_autobind(struct socket *sock)
net/qrtr/qrtr.c:qrtr_bind(struct socket *sock, struct sockaddr *saddr, int len)
net/qrtr/qrtr.c:qrtr_connect(struct socket *sock, struct sockaddr *saddr, int len, int flags)
net/qrtr/qrtr.c:qrtr_create(struct net *net, struct socket *sock, int protocol, int kern)
net/qrtr/qrtr.c:qrtr_endpoint_post(struct qrtr_endpoint *ep, const void *data, size_t len)
net/qrtr/qrtr.c:qrtr_endpoint_register(struct qrtr_endpoint *ep, unsigned int nid)
net/qrtr/qrtr.c:qrtr_endpoint_unregister(struct qrtr_endpoint *ep)
net/qrtr/qrtr.c:qrtr_node_enqueue(struct qrtr_node *node, struct sk_buff *skb, int type, struct sockaddr_qrtr *from, struct sockaddr_qrtr *to)
net/qrtr/qrtr.c:qrtr_port_assign(struct qrtr_sock *ipc, int *port)
net/qrtr/qrtr.c:qrtr_port_remove(struct qrtr_sock *ipc)
net/qrtr/qrtr.c:qrtr_release(struct socket *sock)
net/qrtr/qrtr.c:qrtr_tx_resume(struct qrtr_node *node, struct sk_buff *skb)
net/qrtr/qrtr.c:qrtr_tx_wait(struct qrtr_node *node, int dest_node, int dest_port, int type)
lib/idr.c:ida_alloc_range(struct ida *ida, unsigned int min, unsigned int max, gfp_t gfp)
lib/idr.c:ida_destroy(struct ida *ida)
lib/idr.c:ida_dump_entry(void *entry, unsigned long index)
lib/idr.c:ida_free(struct ida *ida, unsigned int id)
lib/idr.c:idr_alloc(struct idr *idr, void *ptr, int start, int end, gfp_t gfp)
lib/idr.c:idr_alloc_cyclic(struct idr *idr, void *ptr, int start, int end, gfp_t gfp)
lib/idr.c:idr_alloc_u32(struct idr *idr, void *ptr, u32 *nextid, unsigned long max, gfp_t gfp)
lib/idr.c:idr_for_each(const struct idr *idr, int (*fn)(int id, void *p, void *data), void *data)
lib/idr.c:idr_get_next_ul()
lib/idr.c:idr_replace()
net/socket.c:__sock_create(struct net *net, int family, int type, int protocol, struct socket **res, int kern)
net/socket.c:__sys_bind(int fd, struct sockaddr __user *umyaddr, int addrlen)
net/socket.c:__sys_connect(int fd, struct sockaddr __user *uservaddr, int addrlen)
net/socket.c:__sys_socket(int family, int type, int protocol)
lib/idr.c:idr_alloc(struct idr *idr, void *ptr, int start, int end, gfp_t gfp)
net/socket.c:move_addr_to_kernel(void __user *uaddr, int ulen, struct sockaddr_storage *kaddr)
net/socket.c:move_addr_to_user(struct sockaddr_storage *kaddr, int klen, void __user *uaddr, int __user *ulen)
net/socket.c:sock_alloc()
net/socket.c:sock_map_fd(struct socket *sock, int flags)
lib/idr.c:idr_alloc(struct idr *idr, void *ptr, int start, int end, gfp_t gfp)
lib/idr.c:idr_alloc_u32(struct idr *idr, void *ptr, u32 *nextid, unsigned long max, gfp_t gfp)
idr_destroy()
idr_find()
lib/idr.c:idr_get_next()
idr_init()
idr_remove()
lib/idr.c:idr_replace()
arch/x86/entry/common.c:__prepare_exit_to_usermode(struct pt_regs *regs)
arch/x86/entry/common.c:__syscall_return_slowpath(struct pt_regs *regs)
arch/x86/entry/common.c:do_audit_syscall_entry(struct pt_regs *regs, u32 arch)
arch/x86/entry/common.c:do_syscall_32_irqs_on(struct pt_regs *regs)
arch/x86/entry/common.c:do_syscall_64(unsigned long nr, struct pt_regs *regs)
arch/x86/entry/common.c:exit_to_usermode_loop(struct pt_regs *regs, u32 cached_flags)
arch/x86/entry/common.c:syscall_slow_exit_work(struct pt_regs *regs, u32 cached_flags)
arch/x86/entry/common.c:syscall_trace_enter(struct pt_regs *regs)
kernel/panic.c:__warn(const char *file, int line, void *caller, unsigned taint, struct pt_regs *regs, struct warn_args *args)
kernel/panic.c:warn_slowpath_fmt(const char *file, int line, unsigned taint, const char *fmt, ...)
lib/dump_stack.c:dump_stack(void)
lib/idr.c:idr_alloc(struct idr *idr, void *ptr, int start, int end, gfp_t gfp)
net/qrtr/qrtr.c:qrtr_port_assign(struct qrtr_sock *ipc, int *port)
kernel/panic.c:__warn(const char *file, int line, void *caller, unsigned taint, struct pt_regs *regs, struct warn_args *args)
lib/bug.c:find_bug()
lib/idr.c:idr_alloc(struct idr *idr, void *ptr, int start, int end, gfp_t gfp)
lib/bug.c:module_bug_finalize(const Elf_Ehdr *hdr, const Elf_Shdr *sechdrs, struct module *mod)
panic_on_warn()
lib/bug.c:report_bug(unsigned long bugaddr, struct pt_regs *regs)
func for case 2af3bc9585be7f23f290
fs/buffer.c:__block_write_begin_int(struct folio *folio, loff_t pos, unsigned len, get_block_t *get_block, const struct iomap *iomap)
fs/buffer.c:__sync_dirty_buffer(struct buffer_head *bh, blk_opf_t op_flags)
fs/buffer.c:alloc_buffer_head()
fs/buffer.c:alloc_page_buffers()
fs/buffer.c:block_write_begin(struct address_space *mapping, loff_t pos, unsigned len, struct page **pagep, get_block_t *get_block)
fs/buffer.c:buffer_check_dirty_writeback(struct folio *folio, bool *dirty, bool *writeback)
fs/buffer.c:create_empty_buffers(struct page *page, unsigned long blocksize, unsigned long b_state)
fs/buffer.c:grow_buffers(struct block_device *bdev, sector_t block, int size, gfp_t gfp)
fs/buffer.c:grow_dev_page(struct block_device *bdev, sector_t block, pgoff_t index, int size, int sizebits, gfp_t gfp)
fs/buffer.c:init_page_buffers(struct page *page, struct block_device *bdev, sector_t block, int size)
fs/buffer.c:link_dev_buffers(struct page *page, struct buffer_head *head)
fs/buffer.c:mark_buffer_dirty(struct buffer_head *bh)
fs/buffer.c:set_bh_page(struct buffer_head *bh, struct page *page, unsigned long offset)
fs/buffer.c:submit_bh_wbc(blk_opf_t opf, struct buffer_head *bh, struct writeback_control *wbc)
fs/buffer.c:try_to_free_buffers(struct folio *folio)
fs/bfs/file.c:bfs_get_block(struct inode *inode, sector_t block, struct buffer_head *bh_result, int create)
fs/bfs/file.c:bfs_move_block(unsigned long from, unsigned long to, struct super_block *sb)
fs/bfs/file.c:bfs_move_blocks(struct super_block *sb, unsigned long start, unsigned long end, unsigned long where)
fs/bfs/file.c:bfs_write_failed(struct address_space *mapping, loff_t to)
fs/nilfs2/super.c:__nilfs_error(struct super_block *sb, const char *function, const char *fmt, ...)
fs/nilfs2/super.c:nilfs_attach_checkpoint(struct super_block *sb, __u64 cno, int curr_mnt, struct nilfs_root **rootp)
fs/nilfs2/super.c:nilfs_attach_snapshot(struct super_block *s, __u64 cno, struct dentry **root_dentry)
fs/nilfs2/super.c:nilfs_cleanup_super(struct super_block *sb)
fs/nilfs2/super.c:nilfs_commit_super(struct super_block *sb, int flag)
fs/nilfs2/super.c:nilfs_fill_super(struct super_block *sb, void *data, int silent)
fs/nilfs2/super.c:nilfs_move_2nd_super(struct super_block *sb, loff_t sb2off)
fs/nilfs2/super.c:nilfs_put_super(struct super_block *sb)
fs/nilfs2/super.c:nilfs_read_super_block()
fs/nilfs2/super.c:nilfs_remount(struct super_block *sb, int *flags, char *data)
fs/nilfs2/super.c:nilfs_resize_fs(struct super_block *sb, __u64 newsize)
fs/nilfs2/super.c:nilfs_setup_super(struct super_block *sb, int is_mount)
fs/nilfs2/super.c:nilfs_store_magic_and_option(struct super_block *sb, struct nilfs_super_block *sbp, char *data)
fs/nilfs2/super.c:nilfs_sync_fs(struct super_block *sb, int wait)
fs/nilfs2/super.c:nilfs_sync_super(struct super_block *sb, int flag)
fs/namespace.c:attach_recursive_mnt(struct mount *source_mnt, struct mount *dest_mnt, struct mountpoint *dest_mp, bool moving)
fs/namespace.c:clone_mnt()
fs/namespace.c:commit_tree(struct mount *mnt)
fs/namespace.c:do_add_mount(struct mount *newmnt, struct mountpoint *mp, const struct path *path, int mnt_flags)
fs/namespace.c:do_mount(const char *dev_name, const char __user *dir_name, const char *type_page, unsigned long flags, void *data_page)
fs/namespace.c:do_new_mount(struct path *path, const char *fstype, int sb_flags, int mnt_flags, const char *name, void *data)
fs/namespace.c:graft_tree(struct mount *mnt, struct mount *p, struct mountpoint *mp)
fs/namespace.c:path_mount(const char *dev_name, struct path *path, const char *type_page, unsigned long flags, void *data_page)
syz_mount_image()
fs/sync.c:do_fsync(unsigned int fd, int datasync)
fs/sync.c:do_sync_work(struct work_struct *work)
fs/sync.c:ksys_sync_file_range(int fd, loff_t offset, loff_t nbytes, unsigned int flags)
fs/sync.c:sync_file_range(struct file *file, loff_t offset, loff_t nbytes, unsigned int flags)
fs/sync.c:sync_filesystem(struct super_block *sb)
fs/sync.c:vfs_fsync_range(struct file *file, loff_t start, loff_t end, int datasync)
fs/namei.c:do_rmdir(int dfd, struct filename *name)
fs/namei.c:do_unlinkat(int dfd, struct filename *name)
fs/namei.c:link_path_walk(const char *name, struct nameidata *nd)
fs/namei.c:lookup_one_len()
fs/namei.c:may_delete(struct user_namespace *mnt_userns, struct inode *dir, struct dentry *victim, bool isdir)
fs/namei.c:path_lookupat(struct nameidata *nd, unsigned flags, struct path *path)
fs/namei.c:vfs_rmdir(struct user_namespace *mnt_userns, struct inode *dir, struct dentry *dentry)
fs/namei.c:vfs_unlink(struct user_namespace *mnt_userns, struct inode *dir, struct dentry *dentry, struct inode **delegated_inode)
mm/filemap.c:__filemap_fdatawait_range(struct address_space *mapping, loff_t start_byte, loff_t end_byte)
mm/filemap.c:__generic_file_write_iter(struct kiocb *iocb, struct iov_iter *from)
mm/filemap.c:filemap_check_and_keep_errors(struct address_space *mapping)
mm/filemap.c:filemap_check_errors(struct address_space *mapping)
mm/filemap.c:filemap_range_has_writeback(struct address_space *mapping, loff_t start_byte, loff_t end_byte)
mm/filemap.c:filemap_write_and_wait_range(struct address_space *mapping, loff_t lstart, loff_t lend)
mm/filemap.c:generic_file_write_iter(struct kiocb *iocb, struct iov_iter *from)
mm/filemap.c:generic_perform_write(struct kiocb *iocb, struct iov_iter *i)
fs/libfs.c:simple_empty(struct dentry *dentry)
fs/libfs.c:simple_recursive_removal(struct dentry *dentry, void (*callback)(struct dentry *))
fs/libfs.c:simple_rename(struct user_namespace *mnt_userns, struct inode *old_dir, struct dentry *old_dentry, struct inode *new_dir, struct dentry *new_dentry, unsigned int flags)
fs/coredump.c:__dump_emit(struct coredump_params *cprm, const void *addr, int nr)
fs/coredump.c:do_coredump(const kernel_siginfo_t *siginfo)
fs/coredump.c:dump_emit_page(struct coredump_params *cprm, struct page *page)
fs/read_write.c:__kernel_write(struct file *file, const void *buf, size_t count, loff_t *pos)
fs/read_write.c:__kernel_write_iter(struct file *file, struct iov_iter *from, loff_t *pos)
fs/read_write.c:kernel_write(struct file *file, const void *buf, size_t count, loff_t *pos)
func for case 7e9494b8b399902e994e
fs/xfs/libxfs/xfs_btree.c:__xfs_btree_check_lblock(struct xfs_btree_cur *cur, struct xfs_btree_block *block, int level, struct xfs_buf *bp)
fs/xfs/libxfs/xfs_btree.c:__xfs_btree_check_sblock(struct xfs_btree_cur *cur, struct xfs_btree_block *block, int level, struct xfs_buf *bp)
get_buf_block()
read_buf_block()
fs/xfs/libxfs/xfs_btree.c:xfs_btree_check_ptr(struct xfs_btree_cur *cur, const union xfs_btree_ptr *ptr, int index, int level)
fs/xfs/libxfs/xfs_btree.c:xfs_btree_del_cursor(struct xfs_btree_cur *cur, /* btree cursor */ int error)
fs/xfs/libxfs/xfs_btree.c:xfs_btree_dup_cursor(struct xfs_btree_cur *cur, /* input cursor */ struct xfs_btree_cur **ncur)
fs/xfs/libxfs/xfs_btree.c:xfs_btree_get_buf_block(struct xfs_btree_cur *cur, const union xfs_btree_ptr *ptr, struct xfs_btree_block **block, struct xfs_buf **bpp)
fs/xfs/libxfs/xfs_btree.c:xfs_btree_get_sibling(struct xfs_btree_cur *cur, struct xfs_btree_block *block, union xfs_btree_ptr *ptr, int lr)
fs/xfs/libxfs/xfs_btree.c:xfs_btree_init_block_cur(struct xfs_btree_cur *cur, struct xfs_buf *bp, int level, int numrecs)
fs/xfs/libxfs/xfs_btree.c:xfs_btree_init_block_int(struct xfs_mount *mp, struct xfs_btree_block *buf, xfs_daddr_t blkno, xfs_btnum_t btnum, __u16 level, __u16 numrecs, __u64 owner, unsigned int flags)
fs/xfs/libxfs/xfs_btree.c:xfs_btree_lookup(struct xfs_btree_cur *cur, /* btree cursor */ xfs_lookup_t dir, /* <=, ==, or >= */ int *stat)
fs/xfs/libxfs/xfs_btree.c:xfs_btree_lookup_get_block(struct xfs_btree_cur *cur, /* btree cursor */ int level, /* level in the btree */ const union xfs_btree_ptr *pp, /* ptr to btree block */ struct xfs_btree_block **blkp)
fs/xfs/libxfs/xfs_btree.c:xfs_btree_ptr_to_daddr(struct xfs_btree_cur *cur, const union xfs_btree_ptr *ptr, xfs_daddr_t *daddr)
fs/xfs/libxfs/xfs_btree.c:xfs_btree_read_buf_block(struct xfs_btree_cur *cur, const union xfs_btree_ptr *ptr, int flags, struct xfs_btree_block **block, struct xfs_buf **bpp)
fs/xfs/libxfs/xfs_btree.c:xfs_btree_set_sibling(struct xfs_btree_cur *cur, struct xfs_btree_block *block, const union xfs_btree_ptr *ptr, int lr)
fs/xfs/libxfs/xfs_btree.c:xfs_btree_setbuf(struct xfs_btree_cur *cur, /* btree cursor */ int lev, /* level in btree */ struct xfs_buf *bp)
xfs_refcount()
fs/xfs/libxfs/xfs_refcount.c:xfs_refcount_adjust(struct xfs_btree_cur *cur, xfs_agblock_t agbno, xfs_extlen_t aglen, xfs_agblock_t *new_agbno, xfs_extlen_t *new_aglen, enum xfs_refc_adjust_op adj)
fs/xfs/libxfs/xfs_refcount.c:xfs_refcount_adjust_cow(struct xfs_btree_cur *cur, xfs_agblock_t agbno, xfs_extlen_t aglen, enum xfs_refc_adjust_op adj)
fs/xfs/libxfs/xfs_refcount.c:xfs_refcount_adjust_cow_extents(struct xfs_btree_cur *cur, xfs_agblock_t agbno, xfs_extlen_t aglen, enum xfs_refc_adjust_op adj)
fs/xfs/libxfs/xfs_refcount.c:xfs_refcount_adjust_extents(struct xfs_btree_cur *cur, xfs_agblock_t *agbno, xfs_extlen_t *aglen, enum xfs_refc_adjust_op adj)
fs/xfs/libxfs/xfs_refcount.c:xfs_refcount_find_left_extents(struct xfs_btree_cur *cur, struct xfs_refcount_irec *left, struct xfs_refcount_irec *cleft, enum xfs_refc_domain domain, xfs_agblock_t agbno, xfs_extlen_t aglen)
fs/xfs/libxfs/xfs_refcount.c:xfs_refcount_find_right_extents(struct xfs_btree_cur *cur, struct xfs_refcount_irec *right, struct xfs_refcount_irec *cright, enum xfs_refc_domain domain, xfs_agblock_t agbno, xfs_extlen_t aglen)
fs/xfs/libxfs/xfs_refcount.c:xfs_refcount_find_shared(struct xfs_btree_cur *cur, xfs_agblock_t agbno, xfs_extlen_t aglen, xfs_agblock_t *fbno, xfs_extlen_t *flen, bool find_end_of_shared)
fs/xfs/libxfs/xfs_refcount.c:xfs_refcount_insert(struct xfs_btree_cur *cur, struct xfs_refcount_irec *irec, int *i)
fs/xfs/libxfs/xfs_refcount.c:xfs_refcount_merge_center_extents(struct xfs_btree_cur *cur, struct xfs_refcount_irec *left, struct xfs_refcount_irec *center, struct xfs_refcount_irec *right, unsigned long long extlen, xfs_extlen_t *aglen)
fs/xfs/libxfs/xfs_refcount.c:xfs_refcount_merge_extents(struct xfs_btree_cur *cur, enum xfs_refc_domain domain, xfs_agblock_t *agbno, xfs_extlen_t *aglen, enum xfs_refc_adjust_op adjust, bool *shape_changed)
fs/xfs/libxfs/xfs_refcount.c:xfs_refcount_merge_left_extent(struct xfs_btree_cur *cur, struct xfs_refcount_irec *left, struct xfs_refcount_irec *cleft, xfs_agblock_t *agbno, xfs_extlen_t *aglen)
fs/xfs/libxfs/xfs_refcount.c:xfs_refcount_merge_right_extent(struct xfs_btree_cur *cur, struct xfs_refcount_irec *right, struct xfs_refcount_irec *cright, xfs_extlen_t *aglen)
fs/xfs/libxfs/xfs_refcount.c:xfs_refcount_recover_cow_leftovers(struct xfs_mount *mp, struct xfs_perag *pag)
fs/xfs/libxfs/xfs_refcount.c:xfs_refcount_split_extent(struct xfs_btree_cur *cur, enum xfs_refc_domain domain, xfs_agblock_t agbno, bool *shape_changed)
fs/xfs/libxfs/xfs_refcount.c:xfs_refcount_update(struct xfs_btree_cur *cur, struct xfs_refcount_irec *irec)
fs/xfs/libxfs/xfs_refcount_btree.c:xfs_refcountbt_alloc_block(struct xfs_btree_cur *cur, const union xfs_btree_ptr *start, union xfs_btree_ptr *new, int *stat)
fs/xfs/libxfs/xfs_refcount_btree.c:xfs_refcountbt_calc_reserves(struct xfs_mount *mp, struct xfs_trans *tp, struct xfs_perag *pag, xfs_extlen_t *ask, xfs_extlen_t *used)
fs/xfs/libxfs/xfs_refcount_btree.c:xfs_refcountbt_commit_staged_btree(struct xfs_btree_cur *cur, struct xfs_trans *tp, struct xfs_buf *agbp)
fs/xfs/libxfs/xfs_refcount_btree.c:xfs_refcountbt_compute_maxlevels(struct xfs_mount *mp)
fs/xfs/libxfs/xfs_refcount_btree.c:xfs_refcountbt_free_block(struct xfs_btree_cur *cur, struct xfs_buf *bp)
fs/xfs/libxfs/xfs_refcount_btree.c:xfs_refcountbt_init_common()
fs/xfs/libxfs/xfs_refcount_btree.c:xfs_refcountbt_init_cursor()
fs/xfs/libxfs/xfs_refcount_btree.c:xfs_refcountbt_init_high_key_from_rec(union xfs_btree_key *key, const union xfs_btree_rec *rec)
fs/xfs/libxfs/xfs_refcount_btree.c:xfs_refcountbt_init_rec_from_cur(struct xfs_btree_cur *cur, union xfs_btree_rec *rec)
fs/xfs/libxfs/xfs_refcount_btree.c:xfs_refcountbt_key_diff(struct xfs_btree_cur *cur, const union xfs_btree_key *key)
fs/xfs/libxfs/xfs_refcount_btree.c:xfs_refcountbt_max_size(struct xfs_mount *mp, xfs_agblock_t agblocks)
fs/xfs/libxfs/xfs_refcount_btree.c:xfs_refcountbt_read_verify(struct xfs_buf *bp)
fs/xfs/libxfs/xfs_refcount_btree.c:xfs_refcountbt_set_root(struct xfs_btree_cur *cur, const union xfs_btree_ptr *ptr, int inc)
fs/xfs/libxfs/xfs_refcount_btree.c:xfs_refcountbt_verify(struct xfs_buf *bp)
fs/xfs/libxfs/xfs_refcount_btree.c:xfs_refcountbt_write_verify(struct xfs_buf *bp)
fs/xfs/xfs_log_recover.c:xlog_do_recover(struct xlog *log, xfs_daddr_t head_blk, xfs_daddr_t tail_blk)
fs/xfs/xfs_log_recover.c:xlog_recover_commit_trans(struct xlog *log, struct xlog_recover *trans, int pass, struct list_head *buffer_list)
fs/xfs/xfs_log_recover.c:xlog_recover_finish(struct xlog *log)
fs/xfs/xfs_log_recover.c:xlog_recover_items_pass2(struct xlog *log, struct xlog_recover *trans, struct list_head *buffer_list, struct list_head *item_list)
fs/xfs/xfs_log_recover.c:xlog_recover_process_data(struct xlog *log, struct hlist_head rhash[], struct xlog_rec_header *rhead, char *dp, int pass, struct list_head *buffer_list)
fs/xfs/xfs_log_recover.c:xlog_recover_process_ophdr(struct xlog *log, struct hlist_head rhash[], struct xlog_rec_header *rhead, struct xlog_op_header *ohead, char *dp, char *end, int pass, struct list_head *buffer_list)
xlog_recover_process_trans()
fs/xfs/xfs_log_recover.c:xlog_recover_reorder_trans(struct xlog *log, struct xlog_recover *trans, int pass)
fs/xfs/xfs_reflink.c:xfs_reflink_allocate_cow(struct xfs_inode *ip, struct xfs_bmbt_irec *imap, struct xfs_bmbt_irec *cmap, bool *shared, uint *lockmode, bool convert_now)
fs/xfs/xfs_reflink.c:xfs_reflink_cancel_cow_blocks(struct xfs_inode *ip, struct xfs_trans **tpp, xfs_fileoff_t offset_fsb, xfs_fileoff_t end_fsb, bool cancel_real)
fs/xfs/xfs_reflink.c:xfs_reflink_cancel_cow_range(struct xfs_inode *ip, xfs_off_t offset, xfs_off_t count, bool cancel_real)
fs/xfs/xfs_reflink.c:xfs_reflink_convert_cow_locked(struct xfs_inode *ip, xfs_fileoff_t offset_fsb, xfs_filblks_t count_fsb)
fs/xfs/xfs_reflink.c:xfs_reflink_end_cow(struct xfs_inode *ip, xfs_off_t offset, xfs_off_t count)
fs/xfs/xfs_reflink.c:xfs_reflink_fill_cow_hole(struct xfs_inode *ip, struct xfs_bmbt_irec *imap, struct xfs_bmbt_irec *cmap, bool *shared, uint *lockmode, bool convert_now)
fs/xfs/xfs_reflink.c:xfs_reflink_recover_cow(struct xfs_mount *mp)
fs/xfs/xfs_reflink.c:xfs_reflink_trim_around_shared(struct xfs_inode *ip, struct xfs_bmbt_irec *irec, bool *shared)
fs/xfs/xfs_mount.c:xfs_check_sizes(struct xfs_mount *mp)
fs/xfs/xfs_mount.c:xfs_check_summary_counts(struct xfs_mount *mp)
xfs_mount()
fs/xfs/xfs_mount.c:xfs_mountfs(struct xfs_mount *mp)
fs/xfs/xfs_mount.c:xfs_readsb(struct xfs_mount *mp, int flags)
fs/xfs/xfs_mount.c:xfs_sb_validate_fsb_count(xfs_sb_t *sbp, uint64_t nblocks)
fs/xfs/xfs_mount.c:xfs_set_low_space_thresholds(struct xfs_mount *mp)
fs/xfs/xfs_mount.c:xfs_unmountfs(struct xfs_mount *mp)
fs/xfs/xfs_mount.c:xfs_update_alignment(struct xfs_mount *mp)
fs/xfs/xfs_super.c:xfs_finish_flags(struct xfs_mount *mp)
fs/xfs/xfs_super.c:xfs_fs_fill_super(struct super_block *sb, struct fs_context *fc)
fs/xfs/xfs_super.c:xfs_fs_put_super(struct super_block *sb)
fs/xfs/xfs_super.c:xfs_fs_validate_params(struct xfs_mount *mp)
fs/xfs/xfs_super.c:xfs_init_mount_workqueues(struct xfs_mount *mp)
fs/xfs/xfs_super.c:xfs_open_devices(struct xfs_mount *mp)
fs/xfs/xfs_super.c:xfs_set_inode_alloc(struct xfs_mount *mp, xfs_agnumber_t agcount)
fs/xfs/xfs_super.c:xfs_setup_devices(struct xfs_mount *mp)
xfs_super()
xfs_btree()
fs/xfs/libxfs/xfs_btree.h:xfs_btree_islastblock(struct xfs_btree_cur *cur, int level)
fs/xfs/libxfs/xfs_btree.c:xfs_btree_lookup_get_block(struct xfs_btree_cur *cur, /* btree cursor */ int level, /* level in the btree */ const union xfs_btree_ptr *pp, /* ptr to btree block */ struct xfs_btree_block **blkp)
xfs_refcount()
fs/xfs/xfs_trans.c:__xfs_trans_commit(struct xfs_trans *tp, bool regrant)
fs/xfs/libxfs/xfs_btree.c:xfs_btree_lookup_get_block(struct xfs_btree_cur *cur, /* btree cursor */ int level, /* level in the btree */ const union xfs_btree_ptr *pp, /* ptr to btree block */ struct xfs_btree_block **blkp)
fs/xfs/xfs_trans.c:xfs_trans_alloc(struct xfs_mount *mp, struct xfs_trans_res *resp, uint blocks, uint rtextents, uint flags, struct xfs_trans **tpp)
fs/xfs/xfs_trans.c:xfs_trans_reserve(struct xfs_trans *tp, struct xfs_trans_res *resp, uint blocks, uint rtextents)
func for case a3fcd59df1b372066f5a
mm/gup.c:__get_user_pages(struct mm_struct *mm, unsigned long start, unsigned long nr_pages, unsigned int gup_flags, struct page **pages, struct vm_area_struct **vmas, int *locked)
mm/gup.c:__get_user_pages_locked(struct mm_struct *mm, unsigned long start, unsigned long nr_pages, struct page **pages, struct vm_area_struct **vmas, int *locked, unsigned int foll_flags)
_range()
follow_()
mm/gup.c:follow_p4d_mask()
mm/gup.c:follow_page_mask()
mm/gup.c:follow_page_pte()
mm/gup.c:follow_pmd_mask()
mm/gup.c:follow_pud_mask()
mm/gup.c:get_user_pages_locked(unsigned long start, unsigned long nr_pages, unsigned int gup_flags, struct page **pages, int *locked)
mm/gup.c:get_user_pages_unlocked(unsigned long start, unsigned long nr_pages, struct page **pages, unsigned int gup_flags)
gup_()
mm/gup.c:gup_pmd_range(pud_t *pudp, pud_t pud, unsigned long addr, unsigned long end, unsigned int flags, struct page **pages, int *nr)
mm/gup.c:gup_pte_range(pmd_t pmd, unsigned long addr, unsigned long end, unsigned int flags, struct page **pages, int *nr)
mm/gup.c:gup_pud_range(p4d_t *p4dp, p4d_t p4d, unsigned long addr, unsigned long end, unsigned int flags, struct page **pages, int *nr)
mm/gup.c:try_get_compound_head()
mm/gup.c:try_grab_compound_head()
mm/gup.c:try_grab_page(struct page *page, unsigned int flags)
IORING_REGISTER_BUFFERS()
fs/io_uring.c:__io_account_mem(struct user_struct *user, unsigned long nr_pages)
fs/io_uring.c:__io_sqe_buffers_unregister(struct io_ring_ctx *ctx)
fs/io_uring.c:__io_sqe_buffers_update(struct io_ring_ctx *ctx, struct io_uring_rsrc_update2 *up, unsigned int nr_args)
fs/io_uring.c:io_account_mem(struct io_ring_ctx *ctx, unsigned long nr_pages)
fs/io_uring.c:io_allocate_scq_urings(struct io_ring_ctx *ctx, struct io_uring_params *p)
fs/io_uring.c:io_buffer_account_pin(struct io_ring_ctx *ctx, struct page **pages, int nr_pages, struct io_mapped_ubuf *imu, struct page **last_hpage)
fs/io_uring.c:io_buffer_unmap(struct io_ring_ctx *ctx, struct io_mapped_ubuf **slot)
fs/io_uring.c:io_buffer_validate(struct iovec *iov)
fs/io_uring.c:io_copy_iov(struct io_ring_ctx *ctx, struct iovec *dst, void __user *arg, unsigned index)
fs/io_uring.c:io_provide_buffers(struct io_kiocb *req, unsigned int issue_flags)
fs/io_uring.c:io_remove_buffers(struct io_kiocb *req, unsigned int issue_flags)
fs/io_uring.c:io_sqe_buffer_register(struct io_ring_ctx *ctx, struct iovec *iov, struct io_mapped_ubuf **pimu, struct page **last_hpage)
fs/io_uring.c:io_sqe_buffers_register(struct io_ring_ctx *ctx, void __user *arg, unsigned int nr_args, u64 __user *tags)
io_uring()
fs/io_uring.c:io_uring_mmap(struct file *file, struct vm_area_struct *vma)
io_uring_register()
fs/io_uring.c:io_uring_validate_mmap_request()
mm/hugetlb.c:alloc_huge_page()
mm/hugetlb.c:alloc_huge_page_nodemask()
mm/hugetlb.c:alloc_huge_page_vma()
mm/hugetlb.c:follow_hugetlb_page(struct mm_struct *mm, struct vm_area_struct *vma, struct page **pages, struct vm_area_struct **vmas, unsigned long *position, unsigned long *nr_pages, long i, unsigned int flags, int *locked)
mm/hugetlb.c:free_huge_page(struct page *page)
mm/hugetlb.c:huge_add_to_page_cache(struct page *page, struct address_space *mapping, pgoff_t idx)
mm/hugetlb.c:hugetlb_change_protection(struct vm_area_struct *vma, unsigned long address, unsigned long end, pgprot_t newprot)
mm/hugetlb.c:hugetlb_cow(struct mm_struct *mm, struct vm_area_struct *vma, unsigned long address, pte_t *ptep, struct page *pagecache_page, spinlock_t *ptl)
mm/hugetlb.c:hugetlb_fault(struct mm_struct *mm, struct vm_area_struct *vma, unsigned long address, unsigned int flags)
mm/hugetlb.c:hugetlb_handle_userfault(struct vm_area_struct *vma, struct address_space *mapping, pgoff_t idx, unsigned int flags, unsigned long haddr, unsigned long reason)
mm/hugetlb.c:hugetlb_mcopy_atomic_pte(struct mm_struct *dst_mm, pte_t *dst_pte, struct vm_area_struct *dst_vma, unsigned long dst_addr, unsigned long src_addr, enum mcopy_atomic_mode mode, struct page **pagep)
mm/hugetlb.c:hugetlb_no_page(struct mm_struct *mm, struct vm_area_struct *vma, struct address_space *mapping, pgoff_t idx, unsigned long address, pte_t *ptep, unsigned int flags)
mm/hugetlb.c:hugetlb_reserve_pages(struct inode *inode, long from, long to, struct vm_area_struct *vma, vm_flags_t vm_flags)
mm/gup.c:try_grab_compound_head()
mm/hugetlb.c:update_and_free_page(struct hstate *h, struct page *page)
include/linux/mm.h:get_page(struct page *page)
include/linux/mm.h:is_device_private_page(const struct page *page)
include/linux/mm.h:is_pci_p2pdma_page(const struct page *page)
include/linux/mm.h:page_is_pfmemalloc(const struct page *page)
include/linux/mm.h:page_maybe_dma_pinned(struct page *page)
include/linux/mm.h:page_needs_cow_for_dma(struct vm_area_struct *vma, struct page *page)
include/linux/mm.h:put_page(struct page *page)
include/linux/mm.h:try_get_page(struct page *page)
mm/gup.c:try_grab_compound_head()
mm/mprotect.c:change_p4d_range(struct vm_area_struct *vma, pgd_t *pgd, unsigned long addr, unsigned long end, pgprot_t newprot, unsigned long cp_flags)
mm/mprotect.c:change_pmd_range(struct vm_area_struct *vma, pud_t *pud, unsigned long addr, unsigned long end, pgprot_t newprot, unsigned long cp_flags)
mm/mprotect.c:change_protection_range(struct vm_area_struct *vma, unsigned long addr, unsigned long end, pgprot_t newprot, unsigned long cp_flags)
mm/mprotect.c:change_pte_range(struct vm_area_struct *vma, pmd_t *pmd, unsigned long addr, unsigned long end, pgprot_t newprot, unsigned long cp_flags)
mm/mprotect.c:change_pud_range(struct vm_area_struct *vma, p4d_t *p4d, unsigned long addr, unsigned long end, pgprot_t newprot, unsigned long cp_flags)
mm/mprotect.c:do_mprotect_pkey(unsigned long start, size_t len, unsigned long prot, int pkey)
mm/mprotect.c:mprotect_fixup(struct vm_area_struct *vma, struct vm_area_struct **pprev, unsigned long start, unsigned long end, unsigned long newflags)
mm/mmap.c:__do_munmap(struct mm_struct *mm, unsigned long start, size_t len, struct list_head *uf, bool downgrade)
mm/mmap.c:do_brk_flags(unsigned long addr, unsigned long len, unsigned long flags, struct list_head *uf)
mm/mmap.c:do_mmap(struct file *file, unsigned long addr, unsigned long len, unsigned long prot, unsigned long flags, unsigned long pgoff, unsigned long *populate, struct list_head *uf)
mm/mmap.c:find_vma()
mm/mmap.c:insert_vm_struct(struct mm_struct *mm, struct vm_area_struct *vma)
mm/mmap.c:ksys_mmap_pgoff(unsigned long addr, unsigned long len, unsigned long prot, unsigned long flags, unsigned long fd, unsigned long pgoff)
mm/mmap.c:mmap_region(struct file *file, unsigned long addr, unsigned long len, vm_flags_t vm_flags, unsigned long pgoff, struct list_head *uf)
mm/mmap.c:unmap_region(struct mm_struct *mm, struct vm_area_struct *vma, struct vm_area_struct *prev, unsigned long start, unsigned long end)
mm/mmap.c:vm_brk_flags(unsigned long addr, unsigned long request, unsigned long flags)
mm/mmap.c:vma_merge()
mm/huge_memory.c:__do_huge_pmd_anonymous_page(struct vm_fault *vmf, struct page *page, gfp_t gfp)
mm/gup.c:__get_user_pages(struct mm_struct *mm, unsigned long start, unsigned long nr_pages, unsigned int gup_flags, struct page **pages, struct vm_area_struct **vmas, int *locked)
mm/huge_memory.c:__split_huge_page(struct page *page, struct list_head *list, pgoff_t end)
mm/huge_memory.c:__split_huge_pmd(struct vm_area_struct *vma, pmd_t *pmd, unsigned long address, bool freeze, struct page *page)
mm/huge_memory.c:defrag_store(struct kobject *kobj, struct kobj_attribute *attr, const char *buf, size_t count)
mm/huge_memory.c:do_huge_pmd_anonymous_page(struct vm_fault *vmf)
mm/huge_memory.c:do_huge_pmd_wp_page(struct vm_fault *vmf, pmd_t orig_pmd)
mm/hugetlb.c:follow_hugetlb_page(struct mm_struct *mm, struct vm_area_struct *vma, struct page **pages, struct vm_area_struct **vmas, unsigned long *position, unsigned long *nr_pages, long i, unsigned int flags, int *locked)
huge_memory()
mm/huge_memory.c:huge_pmd_set_accessed(struct vm_fault *vmf, pmd_t orig_pmd)
mm/huge_memory.c:hugepage_init(void)
split_huge_()
mm/huge_memory.c:split_huge_page_to_list(struct page *page, struct list_head *list)
mm/huge_memory.c:split_huge_pmd_address(struct vm_area_struct *vma, unsigned long address, bool freeze, struct page *page)
mm/gup.c:__get_user_pages(struct mm_struct *mm, unsigned long start, unsigned long nr_pages, unsigned int gup_flags, struct page **pages, struct vm_area_struct **vmas, int *locked)
mm/memory.c:__handle_mm_fault(struct vm_area_struct *vma, unsigned long address, unsigned int flags)
mm/memory.c:do_fault(struct vm_fault *vmf)
mm/hugetlb.c:follow_hugetlb_page(struct mm_struct *mm, struct vm_area_struct *vma, struct page **pages, struct vm_area_struct **vmas, unsigned long *position, unsigned long *nr_pages, long i, unsigned int flags, int *locked)
mm/memory.c:handle_mm_fault(struct vm_area_struct *vma, unsigned long address, unsigned int flags, struct pt_regs *regs)
mm/gup.c:try_grab_compound_head()
fs/io_uring.c:io_sqe_buffer_register(struct io_ring_ctx *ctx, struct iovec *iov, struct io_mapped_ubuf **pimu, struct page **last_hpage)
fs/io_uring.c:io_sqe_buffers_register(struct io_ring_ctx *ctx, void __user *arg, unsigned int nr_args, u64 __user *tags)
io_uring()
mm/gup.c:try_grab_compound_head()
mm/page_alloc.c:is_free_buddy_page(struct page *page)
page_alloc()
mm/page_alloc.c:prep_compound_page(struct page *page, unsigned int order)
mm/page_alloc.c:take_page_off_buddy(struct page *page)
mm/gup.c:try_grab_compound_head()
func for case cbff7a52b6f99059e67f
fs/nilfs2/dat.c:nilfs_dat_abort_end(struct inode *dat, struct nilfs_palloc_req *req)
fs/nilfs2/dat.c:nilfs_dat_commit_alloc(struct inode *dat, struct nilfs_palloc_req *req)
fs/nilfs2/dat.c:nilfs_dat_commit_end(struct inode *dat, struct nilfs_palloc_req *req, int dead)
fs/nilfs2/dat.c:nilfs_dat_commit_free(struct inode *dat, struct nilfs_palloc_req *req)
fs/nilfs2/dat.c:nilfs_dat_commit_start(struct inode *dat, struct nilfs_palloc_req *req, sector_t blocknr)
fs/nilfs2/dat.c:nilfs_dat_get_vinfo(struct inode *dat, void *buf, unsigned int visz, size_t nvi)
fs/nilfs2/dat.c:nilfs_dat_move(struct inode *dat, __u64 vblocknr, sector_t blocknr)
fs/nilfs2/dat.c:nilfs_dat_prepare_alloc(struct inode *dat, struct nilfs_palloc_req *req)
fs/nilfs2/dat.c:nilfs_dat_prepare_end(struct inode *dat, struct nilfs_palloc_req *req)
fs/nilfs2/dat.c:nilfs_dat_read(struct super_block *sb, size_t entry_size, struct nilfs_inode *raw_inode, struct inode **inodep)
fs/nilfs2/dat.c:nilfs_dat_translate(struct inode *dat, __u64 vblocknr, sector_t *blocknrp)
fs/nilfs2/bmap.c:nilfs_bmap_propagate(struct nilfs_bmap *bmap, struct buffer_head *bh)
nilfs_check_page()
fs/nilfs2/segment.c:nilfs_collect_file_data(struct nilfs_sc_info *sci, struct buffer_head *bh, struct inode *inode)
fs/nilfs2/direct.c:nilfs_direct_propagate(struct nilfs_bmap *bmap, struct buffer_head *bh)
fs/nilfs2/segment.c:nilfs_segctor_add_file_block(struct nilfs_sc_info *sci, struct buffer_head *bh, struct inode *inode, unsigned int binfo_size)
fs/nilfs2/segment.c:nilfs_segctor_apply_buffers(struct nilfs_sc_info *sci, struct inode *inode, struct list_head *listp, int (*collect)(struct nilfs_sc_info *, struct buffer_head *, struct inode *))
fs/nilfs2/segment.c:nilfs_segctor_begin_finfo(struct nilfs_sc_info *sci, struct inode *inode)
fs/nilfs2/segment.c:nilfs_segctor_collect(struct nilfs_sc_info *sci, struct the_nilfs *nilfs, int mode)
fs/nilfs2/segment.c:nilfs_segctor_collect_blocks(struct nilfs_sc_info *sci, int mode)
fs/nilfs2/segment.c:nilfs_segctor_complete_write(struct nilfs_sc_info *sci)
fs/nilfs2/segment.c:nilfs_segctor_construct(struct nilfs_sc_info *sci, int mode)
fs/nilfs2/segment.c:nilfs_segctor_destroy(struct nilfs_sc_info *sci)
fs/nilfs2/segment.c:nilfs_segctor_do_construct(struct nilfs_sc_info *sci, int mode)
fs/nilfs2/segment.c:nilfs_segctor_end_finfo(struct nilfs_sc_info *sci, struct inode *inode)
fs/nilfs2/segment.c:nilfs_segctor_prepare_write(struct nilfs_sc_info *sci)
fs/nilfs2/segment.c:nilfs_segctor_scan_file(struct nilfs_sc_info *sci, struct inode *inode, const struct nilfs_sc_operations *sc_ops)
fs/nilfs2/segment.c:nilfs_segctor_truncate_segments(struct nilfs_sc_info *sci, struct nilfs_segment_buffer *last, struct inode *sufile)
fs/nilfs2/segment.c:nilfs_segctor_update_segusage(struct nilfs_sc_info *sci, struct inode *sufile)
fs/nilfs2/direct.c:nilfs_direct_assign(struct nilfs_bmap *bmap, struct buffer_head **bh, sector_t blocknr, union nilfs_binfo *binfo)
fs/nilfs2/direct.c:nilfs_direct_assign_v(struct nilfs_bmap *direct, __u64 key, __u64 ptr, struct buffer_head **bh, sector_t blocknr, union nilfs_binfo *binfo)
fs/nilfs2/direct.c:nilfs_direct_delete(struct nilfs_bmap *bmap, __u64 key)
fs/nilfs2/direct.c:nilfs_direct_delete_and_convert(struct nilfs_bmap *bmap, __u64 key, __u64 *keys, __u64 *ptrs, int n)
fs/nilfs2/direct.c:nilfs_direct_insert(struct nilfs_bmap *bmap, __u64 key, __u64 ptr)
fs/nilfs2/direct.c:nilfs_direct_lookup_contig(const struct nilfs_bmap *direct, __u64 key, __u64 *ptrp, unsigned int maxblocks)
fs/nilfs2/direct.c:nilfs_direct_propagate(struct nilfs_bmap *bmap, struct buffer_head *bh)
fs/nilfs2/direct.c:nilfs_direct_seek_key(const struct nilfs_bmap *direct, __u64 start, __u64 *keyp)
fs/nilfs2/super.c:nilfs_attach_checkpoint(struct super_block *sb, __u64 cno, int curr_mnt, struct nilfs_root **rootp)
fs/nilfs2/super.c:nilfs_commit_super(struct super_block *sb, int flag)
fs/nilfs2/super.c:nilfs_fill_super(struct super_block *sb, void *data, int silent)
fs/nilfs2/super.c:nilfs_put_super(struct super_block *sb)
fs/nilfs2/super.c:nilfs_remount(struct super_block *sb, int *flags, char *data)
fs/nilfs2/super.c:nilfs_setup_super(struct super_block *sb, int is_mount)
fs/nilfs2/super.c:nilfs_store_magic_and_option(struct super_block *sb, struct nilfs_super_block *sbp, char *data)
fs/nilfs2/super.c:nilfs_sync_super(struct super_block *sb, int flag)
fs/nilfs2/inode.c:__nilfs_read_inode(struct super_block *sb, struct nilfs_root *root, unsigned long ino, struct inode *inode)
fs/nilfs2/inode.c:nilfs_iget()
fs/nilfs2/inode.c:nilfs_iget_set(struct inode *inode, void *opaque)
fs/nilfs2/inode.c:nilfs_iget_test(struct inode *inode, void *opaque)
fs/nilfs2/inode.c:nilfs_load_inode_block(struct inode *inode, struct buffer_head **pbh)
fs/nilfs2/inode.c:nilfs_new_inode()
fs/nilfs2/inode.c:nilfs_read_inode_common(struct inode *inode, struct nilfs_inode *raw_inode)
fs/nilfs2/inode.c:nilfs_set_inode_flags(struct inode *inode)
rec_len()
fs/nilfs2/bmap.c:nilfs_bmap_assign(struct nilfs_bmap *bmap, struct buffer_head **bh, unsigned long blocknr, union nilfs_binfo *binfo)
fs/nilfs2/bmap.c:nilfs_bmap_convert_error(struct nilfs_bmap *bmap, const char *fname, int err)
fs/nilfs2/bmap.c:nilfs_bmap_do_delete(struct nilfs_bmap *bmap, __u64 key)
fs/nilfs2/bmap.c:nilfs_bmap_do_insert(struct nilfs_bmap *bmap, __u64 key, __u64 ptr)
fs/nilfs2/bmap.c:nilfs_bmap_do_truncate(struct nilfs_bmap *bmap, __u64 key)
fs/nilfs2/bmap.c:nilfs_bmap_lookup_at_level(struct nilfs_bmap *bmap, __u64 key, int level, __u64 *ptrp)
fs/nilfs2/bmap.c:nilfs_bmap_mark(struct nilfs_bmap *bmap, __u64 key, int level)
fs/nilfs2/bmap.c:nilfs_bmap_propagate(struct nilfs_bmap *bmap, struct buffer_head *bh)
fs/namei.c:do_unlinkat(int dfd, struct filename *name)
fs/namei.c:may_delete(struct user_namespace *mnt_userns, struct inode *dir, struct dentry *victim, bool isdir)
fs/namei.c:vfs_unlink(struct user_namespace *mnt_userns, struct inode *dir, struct dentry *dentry, struct inode **delegated_inode)
fs/nilfs2/the_nilfs.c:load_nilfs(struct the_nilfs *nilfs, struct super_block *sb)
fs/nilfs2/the_nilfs.c:nilfs_load_super_block(struct the_nilfs *nilfs, struct super_block *sb, int blocksize, struct nilfs_super_block **sbpp)
fs/nilfs2/the_nilfs.c:nilfs_store_disk_layout(struct the_nilfs *nilfs, struct nilfs_super_block *sbp)
fs/nilfs2/alloc.c:nilfs_palloc_get_bitmap_block(struct inode *inode, unsigned long group, int create, struct buffer_head **bhp)
fs/nilfs2/alloc.c:nilfs_palloc_get_desc_block(struct inode *inode, unsigned long group, int create, struct buffer_head **bhp)
fs/nilfs2/alloc.c:nilfs_palloc_get_entry_block(struct inode *inode, __u64 nr, int create, struct buffer_head **bhp)
func for case 12e098239d20385264d3
fs/btrfs/send.c:btrfs_ioctl_send(struct inode *inode, struct btrfs_ioctl_send_args *arg)
fs/btrfs/send.c:changed_extent(struct send_ctx *sctx, enum btrfs_compare_tree_result result)
fs/btrfs/send.c:changed_inode(struct send_ctx *sctx, enum btrfs_compare_tree_result result)
fs/btrfs/send.c:close_current_inode(struct send_ctx *sctx)
fs/btrfs/send.c:ensure_commit_roots_uptodate(struct send_ctx *sctx)
fs/btrfs/send.c:flush_delalloc_roots(struct send_ctx *sctx)
fs/btrfs/send.c:process_extent(struct send_ctx *sctx, struct btrfs_path *path, struct btrfs_key *key)
fs/btrfs/send.c:process_recorded_refs(struct send_ctx *sctx, int *pending_move)
fs/btrfs/send.c:send_clone(struct send_ctx *sctx, u64 offset, u32 len, struct clone_root *clone_root)
fs/btrfs/send.c:send_encoded_extent(struct send_ctx *sctx, struct btrfs_path *path, u64 offset, u64 len)
fs/btrfs/send.c:send_encoded_inline_extent(struct send_ctx *sctx, struct btrfs_path *path, u64 offset, u64 len)
fs/btrfs/send.c:send_extent_data(struct send_ctx *sctx, struct btrfs_path *path, const u64 offset, const u64 len)
fs/btrfs/send.c:send_subvol(struct send_ctx *sctx)
fs/btrfs/send.c:send_write(struct send_ctx *sctx, u64 offset, u32 len)
fs/btrfs/send.c:send_write_or_clone(struct send_ctx *sctx, struct btrfs_path *path, struct btrfs_key *key, struct clone_root *clone_root)
fs/btrfs/ioctl.c:_btrfs_ioctl_send(struct inode *inode, void __user *argp, bool compat)
fs/btrfs/ioctl.c:btrfs_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
fs/btrfs/ioctl.c:btrfs_ioctl_add_dev(struct btrfs_fs_info *fs_info, void __user *arg)
fs/btrfs/ioctl.c:btrfs_ioctl_balance(struct file *file, void __user *arg)
fs/btrfs/ioctl.c:btrfs_ioctl_defrag(struct file *file, void __user *argp)
fs/btrfs/ioctl.c:btrfs_ioctl_dev_replace(struct btrfs_fs_info *fs_info, void __user *arg)
fs/btrfs/ioctl.c:btrfs_ioctl_qgroup_assign(struct file *file, void __user *arg)
fs/btrfs/ioctl.c:btrfs_ioctl_quota_ctl(struct file *file, void __user *arg)
fs/btrfs/ioctl.c:btrfs_ioctl_resize(struct file *file, void __user *arg)
fs/btrfs/ioctl.c:btrfs_ioctl_rm_dev(struct file *file, void __user *arg)
fs/btrfs/ioctl.c:btrfs_ioctl_rm_dev_v2(struct file *file, void __user *arg)
fs/btrfs/ioctl.c:btrfs_ioctl_scrub(struct file *file, void __user *arg)
fs/btrfs/ioctl.c:btrfs_ioctl_snap_create(struct file *file, void __user *arg, int subvol)
fs/btrfs/ioctl.c:btrfs_ioctl_snap_create_v2(struct file *file, void __user *arg, int subvol)
fs/btrfs/ioctl.c:btrfs_ioctl_snap_destroy(struct file *file, void __user *arg, bool destroy_v2)
fs/read_write.c:__kernel_write_iter(struct file *file, struct iov_iter *from, loff_t *pos)
do_copy_file_range()
fs/read_write.c:do_iter_write(struct file *file, struct iov_iter *iter, loff_t *pos, rwf_t flags)
fs/read_write.c:do_pwritev(unsigned long fd, const struct iovec __user *vec, unsigned long vlen, loff_t pos, rwf_t flags)
fs/read_write.c:do_writev(unsigned long fd, const struct iovec __user *vec, unsigned long vlen, rwf_t flags)
fs/read_write.c:generic_file_rw_checks(struct file *file_in, struct file *file_out)
fs/read_write.c:generic_write_check_limits(struct file *file, loff_t pos, loff_t *count)
fs/read_write.c:generic_write_checks_count(struct kiocb *iocb, loff_t *count)
fs/read_write.c:ksys_write(unsigned int fd, const char __user *buf, size_t count)
fs/read_write.c:new_sync_write(struct file *filp, const char __user *buf, size_t len, loff_t *ppos)
fs/read_write.c:rw_verify_area(int read_write, struct file *file, const loff_t *ppos, size_t count)
fs/read_write.c:vfs_copy_file_range(struct file *file_in, loff_t pos_in, struct file *file_out, loff_t pos_out, size_t len, unsigned int flags)
fs/read_write.c:vfs_iocb_iter_write(struct file *file, struct kiocb *iocb, struct iov_iter *iter)
fs/read_write.c:vfs_write(struct file *file, const char __user *buf, size_t count, loff_t *pos)
fs/read_write.c:vfs_writev(struct file *file, const struct iovec __user *vec, unsigned long vlen, loff_t *pos, rwf_t flags)
fs/btrfs/volumes.c:__btrfs_balance(struct btrfs_fs_info *fs_info)
fs/btrfs/volumes.c:btrfs_balance(struct btrfs_fs_info *fs_info, struct btrfs_balance_control *bctl, struct btrfs_ioctl_balance_args *bargs)
fs/btrfs/send.c:btrfs_ioctl_send(struct inode *inode, struct btrfs_ioctl_send_args *arg)
btrfs_map_bio()
btrfs_map_block()
fs/btrfs/send.c:send_header(struct send_ctx *sctx)
fs/btrfs/send.c:send_subvol(struct send_ctx *sctx)
fs/btrfs/send.c:write_buf(struct file *filp, const void *buf, u32 len, loff_t *off)
fs/btrfs/extent-tree.c:__btrfs_free_extent(struct btrfs_trans_handle *trans, struct btrfs_delayed_ref_node *node, u64 parent, u64 root_objectid, u64 owner_objectid, u64 owner_offset, int refs_to_drop, struct btrfs_delayed_extent_op *extent_op)
fs/btrfs/extent-tree.c:__btrfs_run_delayed_refs(struct btrfs_trans_handle *trans, unsigned long nr)
fs/btrfs/extent-tree.c:btrfs_alloc_tree_block()
fs/btrfs/extent-tree.c:btrfs_free_extent(struct btrfs_trans_handle *trans, struct btrfs_ref *ref)
fs/btrfs/extent-tree.c:btrfs_inc_extent_ref(struct btrfs_trans_handle *trans, struct btrfs_ref *generic_ref)
fs/btrfs/extent-tree.c:btrfs_reserve_extent(struct btrfs_root *root, u64 ram_bytes, u64 num_bytes, u64 min_alloc_size, u64 empty_size, u64 hint_byte, struct btrfs_key *ins, int is_data, int delalloc)
fs/btrfs/extent-tree.c:btrfs_run_delayed_refs(struct btrfs_trans_handle *trans, unsigned long count)
fs/btrfs/extent-tree.c:find_free_extent(struct btrfs_root *root, struct btrfs_key *ins, struct find_free_extent_ctl *ffe_ctl)
fs/read_write.c:__kernel_write_iter(struct file *file, struct iov_iter *from, loff_t *pos)
fs/btrfs/disk-io.c:btrfs_commit_super(struct btrfs_fs_info *fs_info)
fs/btrfs/disk-io.c:btrfs_end_super_write(struct bio *bio)
fs/btrfs/disk-io.c:btrfs_read_dev_one_super()
fs/btrfs/disk-io.c:btrfs_read_dev_super()
fs/btrfs/disk-io.c:btrfs_validate_write_super(struct btrfs_fs_info *fs_info, struct btrfs_super_block *sb)
validate_super()
fs/btrfs/disk-io.c:write_all_supers(struct btrfs_fs_info *fs_info, int max_mirrors)
fs/btrfs/disk-io.c:write_dev_supers(struct btrfs_device *device, struct btrfs_super_block *sb, int max_mirrors)
BTRFS_IOC_SEND()
fs/btrfs/inode.c:btrfs_delete_subvolume(struct inode *dir, struct dentry *dentry)
fs/btrfs/send.c:btrfs_ioctl_send(struct inode *inode, struct btrfs_ioctl_send_args *arg)
fs/btrfs/inode.c:btrfs_rename(struct user_namespace *mnt_userns, struct inode *old_dir, struct dentry *old_dentry, struct inode *new_dir, struct dentry *new_dentry, unsigned int flags)
fs/btrfs/inode.c:btrfs_rename2(struct user_namespace *mnt_userns, struct inode *old_dir, struct dentry *old_dentry, struct inode *new_dir, struct dentry *new_dentry, unsigned int flags)
fs/btrfs/inode.c:btrfs_rename_exchange(struct inode *old_dir, struct dentry *old_dentry, struct inode *new_dir, struct dentry *new_dentry)
fs/btrfs/inode.c:btrfs_rmdir(struct inode *dir, struct dentry *dentry)
fs/btrfs/inode.c:btrfs_unlink(struct inode *dir, struct dentry *dentry)
fs/btrfs/inode.c:btrfs_unlink_subvol(struct btrfs_trans_handle *trans, struct inode *dir, struct dentry *dentry)
fs/ioctl.c:do_vfs_ioctl(struct file *filp, unsigned int fd, unsigned int cmd, unsigned long arg)
fs/ioctl.c:ioctl_fionbio(struct file *filp, int __user *argp)
fs/ioctl.c:ioctl_fsfreeze(struct file *filp)
BTRFS_IOC_BALANCE_V2()
fs/btrfs/ctree.h:btrfs_cpu_balance_args_to_disk(struct btrfs_disk_balance_args *disk, const struct btrfs_balance_args *cpu)
fs/btrfs/ctree.h:btrfs_disk_balance_args_to_cpu(struct btrfs_balance_args *cpu, const struct btrfs_disk_balance_args *disk)
fs/btrfs/ctree.h:btrfs_set_device_total_bytes(const struct extent_buffer *eb, struct btrfs_dev_item *s, u64 val)
fs/btrfs/transaction.c:btrfs_commit_transaction(struct btrfs_trans_handle *trans)
fs/btrfs/send.c:btrfs_ioctl_send(struct inode *inode, struct btrfs_ioctl_send_args *arg)
fs/btrfs/transaction.c:btrfs_write_and_wait_transaction(struct btrfs_trans_handle *trans)
func for case 68223fe9f6c95ad43bed
fs/ext4/mballoc.c:ext4_mb_check_limits(struct ext4_allocation_context *ac, struct ext4_buddy *e4b, int finish_group)
fs/ext4/mballoc.c:ext4_mb_complex_scan_group(struct ext4_allocation_context *ac, struct ext4_buddy *e4b)
fs/ext4/mballoc.c:ext4_mb_find_by_goal(struct ext4_allocation_context *ac, struct ext4_buddy *e4b)
fs/ext4/mballoc.c:ext4_mb_good_group(struct ext4_allocation_context *ac, ext4_group_t group, int cr)
fs/ext4/mballoc.c:ext4_mb_good_group_nolock(struct ext4_allocation_context *ac, ext4_group_t group, int cr)
fs/ext4/mballoc.c:ext4_mb_mark_bb(struct super_block *sb, ext4_fsblk_t block, int len, int state)
fs/ext4/mballoc.c:ext4_mb_mark_diskspace_used(struct ext4_allocation_context *ac, handle_t *handle, unsigned int reserv_clstrs)
fs/ext4/mballoc.c:ext4_mb_measure_extent(struct ext4_allocation_context *ac, struct ext4_free_extent *ex, struct ext4_buddy *e4b)
fs/ext4/mballoc.c:ext4_mb_new_blocks(handle_t *handle, struct ext4_allocation_request *ar, int *errp)
fs/ext4/mballoc.c:ext4_mb_regular_allocator(struct ext4_allocation_context *ac)
fs/ext4/mballoc.c:ext4_mb_simple_scan_group(struct ext4_allocation_context *ac, struct ext4_buddy *e4b)
fs/ext4/mballoc.c:ext4_mb_try_best_found(struct ext4_allocation_context *ac, struct ext4_buddy *e4b)
fs/ext4/mballoc.c:ext4_mb_use_best_found(struct ext4_allocation_context *ac, struct ext4_buddy *e4b)
fs/ext4/mballoc.c:mb_find_extent(struct ext4_buddy *e4b, int block, int needed, struct ext4_free_extent *ex)
fs/ext4/mballoc.c:mb_mark_used(struct ext4_buddy *e4b, struct ext4_free_extent *ex)
fs/ext4/super.c:ext4_acquire_dquot(struct dquot *dquot)
fs/ext4/super.c:ext4_blkdev_get()
fs/ext4/super.c:ext4_commit_super(struct super_block *sb)
fs/ext4/super.c:ext4_enable_quotas(struct super_block *sb)
fs/ext4/super.c:ext4_fill_super(struct super_block *sb, struct fs_context *fc)
fs/ext4/super.c:ext4_load_journal(struct super_block *sb, struct ext4_super_block *es, unsigned long journal_devnum)
fs/ext4/orphan.c:ext4_orphan_cleanup(struct super_block *sb, struct ext4_super_block *es)
fs/ext4/super.c:ext4_put_super(struct super_block *sb)
fs/ext4/super.c:ext4_quota_enable(struct super_block *sb, int type, int format_id, unsigned int flags)
fs/ext4/super.c:ext4_quota_off(struct super_block *sb, int type)
fs/ext4/super.c:ext4_quota_off_umount(struct super_block *sb)
fs/ext4/super.c:ext4_quota_on(struct super_block *sb, int type, int format_id, const struct path *path)
fs/ext4/super.c:ext4_quota_write(struct super_block *sb, int type, const char *data, size_t len, loff_t off)
ext4_sb_bread()
fs/ext4/super.c:ext4_setup_super(struct super_block *sb, struct ext4_super_block *es, int read_only)
fs/quota/quota_tree.c:do_insert_tree(struct qtree_mem_dqinfo *info, struct dquot *dquot, uint *treeblk, int depth)
fs/quota/quota_tree.c:find_free_dqentry(struct qtree_mem_dqinfo *info, struct dquot *dquot, int *err)
fs/quota/quota_tree.c:find_tree_dqentry(struct qtree_mem_dqinfo *info, struct dquot *dquot, uint blk, int depth)
fs/quota/quota_tree.c:free_dqentry(struct qtree_mem_dqinfo *info, struct dquot *dquot, uint blk)
fs/quota/quota_tree.c:get_free_dqblk(struct qtree_mem_dqinfo *info)
fs/quota/quota_tree.c:qtree_write_dquot(struct qtree_mem_dqinfo *info, struct dquot *dquot)
fs/quota/quota_tree.c:remove_tree(struct qtree_mem_dqinfo *info, struct dquot *dquot, uint *blk, int depth)
fs/quota/quota_tree.c:write_blk(struct qtree_mem_dqinfo *info, uint blk, char *buf)
fs/ext4/extents.c:ext4_ext_convert_to_initialized(handle_t *handle, struct inode *inode, struct ext4_map_blocks *map, struct ext4_ext_path **ppath, int flags)
fs/ext4/extents.c:ext4_ext_create_new_leaf(handle_t *handle, struct inode *inode, unsigned int mb_flags, unsigned int gb_flags, struct ext4_ext_path **ppath, struct ext4_extent *newext)
fs/ext4/extents.c:ext4_ext_handle_unwritten_extents(handle_t *handle, struct inode *inode, struct ext4_map_blocks *map, struct ext4_ext_path **ppath, int flags, unsigned int allocated, ext4_fsblk_t newblock)
fs/ext4/extents.c:ext4_ext_insert_extent(handle_t *handle, struct inode *inode, struct ext4_ext_path **ppath, struct ext4_extent *newext, int gb_flags)
fs/ext4/extents.c:ext4_ext_map_blocks(handle_t *handle, struct inode *inode, struct ext4_map_blocks *map, int flags)
fs/ext4/extents.c:ext4_ext_search_right(struct inode *inode, struct ext4_ext_path *path, ext4_lblk_t *logical, ext4_fsblk_t *phys, struct ext4_extent *ret_ex)
fs/ext4/extents.c:ext4_ext_split(handle_t *handle, struct inode *inode, unsigned int flags, struct ext4_ext_path *path, struct ext4_extent *newext, int at)
fs/ext4/extents.c:ext4_ext_try_to_merge(handle_t *handle, struct inode *inode, struct ext4_ext_path *path, struct ext4_extent *ex)
fs/ext4/mballoc.c:ext4_mb_complex_scan_group(struct ext4_allocation_context *ac, struct ext4_buddy *e4b)
fs/ext4/mballoc.c:ext4_mb_regular_allocator(struct ext4_allocation_context *ac)
fs/ext4/mballoc.c:mb_find_extent(struct ext4_buddy *e4b, int block, int needed, struct ext4_free_extent *ex)
fs/ext4/inode.c:ext4_bread()
fs/ext4/inode.c:ext4_da_get_block_prep(struct inode *inode, sector_t iblock, struct buffer_head *bh, int create)
fs/ext4/inode.c:ext4_da_map_blocks(struct inode *inode, sector_t iblock, struct ext4_map_blocks *map, struct buffer_head *bh)
fs/ext4/inode.c:ext4_getblk()
fs/ext4/inode.c:ext4_map_blocks(handle_t *handle, struct inode *inode, struct ext4_map_blocks *map, int flags)
fs/ext4/inode.c:ext4_write_begin(struct file *file, struct address_space *mapping, loff_t pos, unsigned len, struct page **pagep, void **fsdata)
fs/ext4/inode.c:ext4_write_end(struct file *file, struct address_space *mapping, loff_t pos, unsigned len, unsigned copied, struct page *page, void *fsdata)
fs/ext4/inode.c:ext4_writepage(struct page *page, struct writeback_control *wbc)
fs/namespace.c:do_add_mount(struct mount *newmnt, struct mountpoint *mp, const struct path *path, int mnt_flags)
fs/namespace.c:do_mount(const char *dev_name, const char __user *dir_name, const char *type_page, unsigned long flags, void *data_page)
fs/namespace.c:do_move_mount(struct path *old_path, struct path *new_path)
fs/namespace.c:do_new_mount(struct path *path, const char *fstype, int sb_flags, int mnt_flags, const char *name, void *data)
fs/namespace.c:do_reconfigure_mnt(struct path *path, unsigned int mnt_flags)
fs/namespace.c:do_remount(struct path *path, int ms_flags, int sb_flags, int mnt_flags, void *data)
fs/namespace.c:do_umount(struct mount *mnt, int flags)
fs/namespace.c:do_umount_root(struct super_block *sb)
syz_mount_image()
fs/super.c:get_tree_bdev(struct fs_context *fc, int (*fill_super)(struct super_block *, struct fs_context *)))
fs/super.c:mount_bdev()
fs/super.c:vfs_get_tree(struct fs_context *fc))
fs/quota/dquot.c:__dquot_initialize(struct inode *inode, int type)
fs/quota/dquot.c:dquot_acquire(struct dquot *dquot)
fs/jbd2/journal.c:jbd2_journal_abort(journal_t *journal, int errno)
fs/jbd2/journal.c:jbd2_journal_flush(journal_t *journal, unsigned int flags)
fs/jbd2/journal.c:jbd2_journal_wipe(journal_t *journal, int write)
func for case 5925509f78293baa7331
alloc_streams()
drivers/usb/gadget/udc/dummy_hcd.c:dummy_alloc_streams(struct usb_hcd *hcd, struct usb_device *udev, struct usb_host_endpoint **eps, unsigned int num_eps, unsigned int num_streams, gfp_t mem_flags)
drivers/usb/gadget/udc/dummy_hcd.c:dummy_dequeue(struct usb_ep *_ep, struct usb_request *_req)
drivers/usb/gadget/udc/dummy_hcd.c:dummy_free_streams(struct usb_hcd *hcd, struct usb_device *udev, struct usb_host_endpoint **eps, unsigned int num_eps, gfp_t mem_flags)
drivers/usb/gadget/udc/dummy_hcd.c:dummy_hub_control(struct usb_hcd *hcd, u16 typeReq, u16 wValue, u16 wIndex, char *buf, u16 wLength)
drivers/usb/gadget/udc/dummy_hcd.c:dummy_perform_transfer(struct urb *urb, struct dummy_request *req, u32 len)
drivers/usb/gadget/udc/dummy_hcd.c:dummy_queue(struct usb_ep *_ep, struct usb_request *_req, gfp_t mem_flags)
drivers/usb/gadget/udc/dummy_hcd.c:dummy_set_halt_and_wedge(struct usb_ep *_ep, int value, int wedged)
drivers/usb/gadget/udc/dummy_hcd.c:dummy_setup(struct usb_hcd *hcd)
drivers/usb/gadget/udc/dummy_hcd.c:dummy_start(struct usb_hcd *hcd)
drivers/usb/gadget/udc/dummy_hcd.c:dummy_start_ss(struct dummy_hcd *dum_hcd)
drivers/usb/gadget/udc/dummy_hcd.c:dummy_urb_dequeue(struct usb_hcd *hcd, struct urb *urb, int status)
drivers/usb/gadget/udc/dummy_hcd.c:dummy_urb_enqueue(struct usb_hcd *hcd, struct urb *urb, gfp_t mem_flags)
drivers/usb/gadget/udc/dummy_hcd.c:dummy_validate_stream(struct dummy_hcd *dum_hcd, struct urb *urb)
free_streams()
drivers/usb/gadget/udc/dummy_hcd.c:handle_control_request(struct dummy_hcd *dum_hcd, struct urb *urb, struct usb_ctrlrequest *setup, int *status)
set_max_streams()
drivers/usb/gadget/udc/dummy_hcd.c:set_max_streams_for_pipe(struct dummy_hcd *dum_hcd, unsigned int pipe, unsigned int streams)
start_ss()
validate_stream()
USBDEVFS_CONTROL()
dummy_hcd()
drivers/usb/core/message.c:usb_bulk_msg(struct usb_device *usb_dev, unsigned int pipe, void *data, int len, int *actual_length, int timeout)
drivers/usb/core/message.c:usb_control_msg(struct usb_device *dev, unsigned int pipe, __u8 request, __u8 requesttype, __u16 value, __u16 index, void *data, __u16 size, int timeout)
drivers/usb/core/message.c:usb_control_msg_recv(struct usb_device *dev, __u8 endpoint, __u8 request, __u8 requesttype, __u16 value, __u16 index, void *driver_data, __u16 size, int timeout, gfp_t memflags)
drivers/usb/core/message.c:usb_get_descriptor(struct usb_device *dev, unsigned char type, unsigned char index, void *buf, int size)
drivers/usb/core/message.c:usb_get_device_descriptor(struct usb_device *dev, unsigned int size)
drivers/usb/core/message.c:usb_get_langid(struct usb_device *dev, unsigned char *tbuf)
drivers/usb/core/message.c:usb_get_status(struct usb_device *dev, int recip, int type, int target, void *data)
drivers/usb/core/message.c:usb_get_string(struct usb_device *dev, unsigned short langid, unsigned char index, void *buf, int size)
drivers/usb/core/message.c:usb_internal_control_msg(struct usb_device *usb_dev, unsigned int pipe, struct usb_ctrlrequest *cmd, void *data, int len, int timeout)
drivers/usb/core/message.c:usb_sg_init(struct usb_sg_request *io, struct usb_device *dev, unsigned pipe, unsigned period, struct scatterlist *sg, int nents, size_t length, gfp_t mem_flags)
drivers/usb/core/message.c:usb_sg_wait(struct usb_sg_request *io)
drivers/usb/core/message.c:usb_start_wait_urb(struct urb *urb, int timeout, int *actual_length)
drivers/usb/core/message.c:usb_string(struct usb_device *dev, int index, char *buf, size_t size)
drivers/usb/core/message.c:usb_string_sub(struct usb_device *dev, unsigned int langid, unsigned int index, unsigned char *buf)
drivers/usb/core/message.c:usb_try_string_workarounds(unsigned char *buf, int *length)
USBDEVFS_CONTROL()
drivers/usb/core/hcd.c:register_root_hub(struct usb_hcd *hcd)
drivers/usb/core/hcd.c:rh_call_control(struct usb_hcd *hcd, struct urb *urb)
drivers/usb/core/hcd.c:rh_queue_status(struct usb_hcd *hcd, struct urb *urb)
drivers/usb/core/hcd.c:usb_hcd_alloc_bandwidth(struct usb_device *udev, struct usb_host_config *new_config, struct usb_host_interface *cur_alt, struct usb_host_interface *new_alt)
drivers/usb/core/hcd.c:usb_hcd_check_unlink_urb(struct usb_hcd *hcd, struct urb *urb, int status)
drivers/usb/core/hcd.c:usb_hcd_disable_endpoint(struct usb_device *udev, struct usb_host_endpoint *ep)
drivers/usb/core/hcd.c:usb_hcd_flush_endpoint(struct usb_device *udev, struct usb_host_endpoint *ep)
drivers/usb/core/hcd.c:usb_hcd_giveback_urb(struct usb_hcd *hcd, struct urb *urb, int status)
drivers/usb/core/hcd.c:usb_hcd_link_urb_to_ep(struct usb_hcd *hcd, struct urb *urb)
drivers/usb/core/hcd.c:usb_hcd_map_urb_for_dma(struct usb_hcd *hcd, struct urb *urb, gfp_t mem_flags)
drivers/usb/core/hcd.c:usb_hcd_reset_endpoint(struct usb_device *udev, struct usb_host_endpoint *ep)
drivers/usb/core/hcd.c:usb_hcd_submit_urb(struct urb *urb, gfp_t mem_flags)
drivers/usb/core/hcd.c:usb_hcd_unlink_urb(struct urb *urb, int status)
drivers/usb/core/hcd.c:usb_hcd_unmap_urb_for_dma(struct usb_hcd *hcd, struct urb *urb)
drivers/usb/core/hcd.c:usb_rh_urb_dequeue(struct usb_hcd *hcd, struct urb *urb, int status)
drivers/usb/core/devio.c:check_ctrlrecip(struct usb_dev_state *ps, unsigned int requesttype, unsigned int request, unsigned int index)
drivers/usb/core/devio.c:do_proc_control(struct usb_dev_state *ps, struct usbdevfs_ctrltransfer *ctrl)
drivers/usb/core/devio.c:proc_control_compat(struct usb_dev_state *ps, struct usbdevfs_ctrltransfer32 __user *p32)
drivers/usb/core/devio.c:proc_ioctl(struct usb_dev_state *ps, struct usbdevfs_ioctl *ctl)
drivers/usb/core/devio.c:proc_ioctl_compat(struct usb_dev_state *ps, compat_uptr_t arg)
drivers/usb/core/devio.c:proc_submiturb(struct usb_dev_state *ps, void __user *arg)
drivers/usb/core/devio.c:usbdev_do_ioctl(struct file *file, unsigned int cmd, void __user *p)
usbfs_start_wait_urb()
drivers/usb/core/hub.c:get_port_status(struct usb_device *hdev, int port1, void *data, u16 value, u16 length)
drivers/usb/core/hub.c:hub_event(struct work_struct *work)
drivers/usb/core/hub.c:hub_ioctl(struct usb_interface *intf, unsigned int code, void *user_data)
drivers/usb/core/hub.c:hub_port_connect(struct usb_hub *hub, int port1, u16 portstatus, u16 portchange)
drivers/usb/core/hub.c:hub_port_debounce(struct usb_hub *hub, int port1, bool must_be_connected)
drivers/usb/core/hub.c:hub_port_init(struct usb_hub *hub, struct usb_device *udev, int port1, int retry_counter)
drivers/usb/core/hub.c:hub_port_reset(struct usb_hub *hub, int port1, struct usb_device *udev, unsigned int delay, bool warm)
drivers/usb/core/hub.c:hub_port_wait_reset(struct usb_hub *hub, int port1, struct usb_device *udev, unsigned int delay, bool warm)
drivers/usb/core/urb.c:usb_alloc_urb()
drivers/usb/core/urb.c:usb_anchor_urb(struct urb *urb, struct usb_anchor *anchor)
drivers/usb/core/urb.c:usb_init_urb(struct urb *urb)
drivers/usb/core/urb.c:usb_kill_urb(struct urb *urb)
drivers/usb/core/urb.c:usb_poison_urb(struct urb *urb)
drivers/usb/core/urb.c:usb_submit_urb(struct urb *urb, gfp_t mem_flags)
drivers/usb/core/urb.c:usb_unanchor_urb(struct urb *urb)
drivers/usb/core/urb.c:usb_unlink_urb(struct urb *urb)
dummy_hcd()
drivers/usb/gadget/udc/dummy_hcd.c:dummy_hub_control(struct usb_hcd *hcd, u16 typeReq, u16 wValue, u16 wIndex, char *buf, u16 wLength)
drivers/usb/core/hcd.c:rh_call_control(struct usb_hcd *hcd, struct urb *urb)
drivers/usb/core/hcd.c:rh_urb_enqueue(struct usb_hcd *hcd, struct urb *urb)
drivers/usb/core/message.c:usb_control_msg(struct usb_device *dev, unsigned int pipe, __u8 request, __u8 requesttype, __u16 value, __u16 index, void *data, __u16 size, int timeout)
drivers/usb/core/hcd.c:usb_hcd_submit_urb(struct urb *urb, gfp_t mem_flags)
drivers/usb/core/message.c:usb_internal_control_msg(struct usb_device *usb_dev, unsigned int pipe, struct usb_ctrlrequest *cmd, void *data, int len, int timeout)
drivers/usb/core/message.c:usb_start_wait_urb(struct urb *urb, int timeout, int *actual_length)
drivers/usb/core/urb.c:usb_submit_urb(struct urb *urb, gfp_t mem_flags)
dummy_hcd()
drivers/usb/gadget/udc/dummy_hcd.c:dummy_hub_control(struct usb_hcd *hcd, u16 typeReq, u16 wValue, u16 wIndex, char *buf, u16 wLength)
usbdevice_fs()
lib/ubsan.c:__ubsan_handle_shift_out_of_bounds(void *_data, void *lhs, void *rhs)
lib/ubsan.c:ubsan_epilogue(void)
lib/ubsan.c:ubsan_prologue(struct source_location *loc, const char *reason)
func for case b308f5fd049fbbc6e74f
include/linux/fb.h:__fb_pad_aligned_buffer(u8 *dst, u32 d_pitch, u8 *src, u32 s_pitch, u32 height)
drivers/video/fbdev/core/bitblit.c:bit_bmove(struct vc_data *vc, struct fb_info *info, int sy, int sx, int dy, int dx, int height, int width)
drivers/video/fbdev/core/bitblit.c:bit_clear(struct vc_data *vc, struct fb_info *info, int sy, int sx, int height, int width)
drivers/video/fbdev/core/bitblit.c:bit_clear_margins(struct vc_data *vc, struct fb_info *info, int color, int bottom_only)
drivers/video/fbdev/core/bitblit.c:bit_cursor(struct vc_data *vc, struct fb_info *info, int mode, int fg, int bg)
drivers/video/fbdev/core/bitblit.c:bit_putcs(struct vc_data *vc, struct fb_info *info, const unsigned short *s, int count, int yy, int xx, int fg, int bg)
drivers/video/fbdev/core/bitblit.c:bit_putcs_aligned(struct vc_data *vc, struct fb_info *info, const u16 *s, u32 attr, u32 cnt, u32 d_pitch, u32 s_pitch, u32 cellsize, struct fb_image *image, u8 *buf, u8 *dst)
drivers/video/fbdev/core/bitblit.c:bit_putcs_unaligned(struct vc_data *vc, struct fb_info *info, const u16 *s, u32 attr, u32 cnt, u32 d_pitch, u32 s_pitch, u32 cellsize, struct fb_image *image, u8 *buf, u8 *dst)
drivers/tty/vt/vt.c:con_flush(struct vc_data *vc, struct vc_draw_region *draw)
drivers/tty/vt/vt.c:con_write(struct tty_struct *tty, const unsigned char *buf, int count)
drivers/tty/vt/vt.c:do_con_write(struct tty_struct *tty, const unsigned char *buf, int count)
drivers/video/fbdev/core/fbcon.c:fbcon_putcs(struct vc_data *vc, const unsigned short *s, int count, int ypos, int xpos)
drivers/tty/n_tty.c:n_tty_write(struct tty_struct *tty, struct file *file, const unsigned char *buf, size_t nr)
drivers/tty/n_tty.c:process_output_block(struct tty_struct *tty, const unsigned char *buf, unsigned int nr)
drivers/video/fbdev/core/bitblit.c:update_attr(u8 *dst, u8 *src, int attribute, struct vc_data *vc)
drivers/tty/vt/vt.c:con_flush_chars(struct tty_struct *tty)
drivers/tty/vt/vt.c:con_install(struct tty_driver *driver, struct tty_struct *tty)
drivers/tty/vt/vt.c:do_con_write(struct tty_struct *tty, const unsigned char *buf, int count)
drivers/tty/vt/vt.c:vc_allocate(unsigned int currcons)
drivers/tty/vt/vt.c:vc_con_write_normal(struct vc_data *vc, int tc, int c, struct vc_draw_region *draw)
drivers/tty/vt/vt.c:vc_deallocate()
drivers/tty/vt/vt.c:vc_init(struct vc_data *vc, unsigned int rows, unsigned int cols, int do_clear)
drivers/tty/vt/vt.c:vc_uniscr_alloc()
drivers/tty/vt/vt.c:vc_uniscr_check(struct vc_data *vc)
drivers/tty/vt/vt.c:vc_uniscr_copy_area(struct uni_screen *dst, unsigned int dst_cols, unsigned int dst_rows, struct uni_screen *src, unsigned int src_cols, unsigned int src_top_row, unsigned int src_bot_row)
drivers/tty/vt/vt.c:vc_uniscr_copy_line(struct vc_data *vc, void *dest, int viewed, unsigned int row, unsigned int col, unsigned int nr)
drivers/tty/vt/vt.c:vc_uniscr_debug_check(struct vc_data *vc)
drivers/tty/vt/vt.c:vc_uniscr_delete(struct vc_data *vc, unsigned int nr)
drivers/tty/vt/vt.c:vc_uniscr_insert(struct vc_data *vc, unsigned int nr)
drivers/tty/vt/vt.c:vc_uniscr_scroll(struct vc_data *vc, unsigned int t, unsigned int b, enum con_scroll dir, unsigned int nr)
VT_RESIZEX()
drivers/tty/vt/vt_ioctl.c:change_console(struct vc_data *new_vc))
drivers/tty/vt/vt_ioctl.c:complete_change_console(struct vc_data *vc))
drivers/tty/vt/vt_ioctl.c:reset_vc(struct vc_data *vc))
drivers/tty/vt/vt_ioctl.c:vt_compat_ioctl(struct tty_struct *tty, unsigned int cmd, unsigned long arg))
drivers/tty/vt/vt_ioctl.c:vt_disallocate_all(void))
drivers/tty/vt/vt_ioctl.c:vt_event_wait_ioctl(struct vt_event __user *event)
drivers/tty/vt/vt_ioctl.c:vt_io_ioctl(struct vc_data *vc, unsigned int cmd, void __user *up, bool perm))
drivers/tty/vt/vt_ioctl.c:vt_ioctl(struct tty_struct *tty, unsigned int cmd, unsigned long arg))
drivers/tty/vt/vt_ioctl.c:vt_k_ioctl(struct tty_struct *tty, unsigned int cmd, unsigned long arg, bool perm)
drivers/tty/vt/vt_ioctl.c:vt_kdsetmode(struct vc_data *vc, unsigned long mode)
drivers/tty/vt/vt_ioctl.c:vt_move_to_console(unsigned int vt, int alloc))
drivers/tty/vt/vt_ioctl.c:vt_reldisp(struct vc_data *vc, unsigned int swtch))
drivers/tty/vt/vt_ioctl.c:vt_resizex(struct vc_data *vc, struct vt_consize __user *cs))
drivers/tty/vt/vt_ioctl.c:vt_setactivate(struct vt_setactivate __user *sa))
drivers/tty/vt/vt_ioctl.c:vt_waitactive(int n)
drivers/video/fbdev/core/fbcon.c:fbcon_bmove(struct vc_data *vc, int sy, int sx, int dy, int dx, int height, int width)
drivers/video/fbdev/core/fbcon.c:fbcon_putcs(struct vc_data *vc, const unsigned short *s, int count, int ypos, int xpos)
drivers/video/fbdev/core/fbcon.c:fbcon_redraw(struct vc_data *vc, struct fbcon_display *p, int line, int count, int offset)
drivers/video/fbdev/core/fbcon.c:fbcon_redraw_blit(struct vc_data *vc, struct fb_info *info, struct fbcon_display *p, int line, int count, int ycount)
drivers/video/fbdev/core/fbcon.c:fbcon_redraw_move(struct vc_data *vc, struct fbcon_display *p, int line, int count, int dy)
drivers/video/fbdev/core/fbcon.c:fbcon_scroll(struct vc_data *vc, unsigned int t, unsigned int b, enum con_scroll dir, unsigned int count)
drivers/video/fbdev/core/fbcon.c:fbcon_set_disp(struct fb_info *info, struct fb_var_screeninfo *var, int unit)
drivers/video/fbdev/core/fbcon.c:fbcon_switch(struct vc_data *vc)
drivers/tty/tty_io.c:do_tty_write(ssize_t (*write)(struct tty_struct *, struct file *, const unsigned char *, size_t), struct tty_struct *tty, struct file *file, const char __user *buf, size_t count)
drivers/tty/tty_io.c:tty_fasync(int fd, struct file *filp, int on)
drivers/tty/tty_io.c:tty_init_dev()
tty_io()
drivers/tty/tty_io.c:tty_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
drivers/tty/tty_io.c:tty_open(struct inode *inode, struct file *filp)
drivers/tty/tty_io.c:tty_release(struct inode *inode, struct file *filp)
drivers/tty/tty_io.c:tty_release_struct(struct tty_struct *tty, int idx)
drivers/tty/tty_io.c:tty_write(struct file *file, const char __user *buf, size_t count, loff_t *ppos)
drivers/tty/vt/selection.c:clear_selection(void)
drivers/tty/vt/selection.c:paste_selection(struct tty_struct *tty)
drivers/tty/vt/selection.c:sel_loadlut(char __user *p)
drivers/tty/vt/selection.c:store_utf8(u32 c, char *p)
drivers/tty/vt/selection.c:vc_do_selection(struct vc_data *vc, unsigned short mode, int ps, int pe)
drivers/tty/vt/selection.c:vc_selection(struct vc_data *vc, struct tiocl_selection *v, struct tty_struct *tty)
drivers/tty/vt/selection.c:vc_selection_store_chars(struct vc_data *vc, bool unicode)
include/linux/fb.h:__fb_pad_aligned_buffer(u8 *dst, u32 d_pitch, u8 *src, u32 s_pitch, u32 height)
include/linux/fb.h:fb_be_math(struct fb_info *info)
drivers/tty/n_tty.c:do_output_char(unsigned char c, struct tty_struct *tty, int space)
drivers/tty/n_tty.c:n_tty_write(struct tty_struct *tty, struct file *file, const unsigned char *buf, size_t nr)
drivers/tty/n_tty.c:process_output_block(struct tty_struct *tty, const unsigned char *buf, unsigned int nr)
drivers/tty/tty_ioctl.c:set_termios(struct tty_struct *tty, void __user *arg, int opt)
drivers/tty/tty_ioctl.c:tty_mode_ioctl(struct tty_struct *tty, struct file *file, unsigned int cmd, unsigned long arg)
drivers/tty/tty_ioctl.c:tty_set_termios(struct tty_struct *tty, struct ktermios *new_termios)
mm/slab.c:__cache_free(struct kmem_cache *cachep, void *objp, unsigned long caller)
mm/slab.c:cache_free_debugcheck()
mm/slab.c:kfree_debugcheck(const void *objp)
func for case 348331f63b034f89b622
drivers/usb/core/urb.c:__usb_unanchor_urb(struct urb *urb, struct usb_anchor *anchor)
drivers/usb/core/urb.c:usb_alloc_urb()
drivers/usb/core/urb.c:usb_anchor_resume_wakeups(struct usb_anchor *anchor)
drivers/usb/core/urb.c:usb_anchor_urb(struct urb *urb, struct usb_anchor *anchor)
drivers/usb/core/urb.c:usb_get_from_anchor()
drivers/usb/core/urb.c:usb_init_urb(struct urb *urb)
drivers/usb/core/urb.c:usb_kill_anchored_urbs(struct usb_anchor *anchor)
drivers/usb/core/urb.c:usb_kill_urb(struct urb *urb)
drivers/usb/core/urb.c:usb_pipe_type_check(struct usb_device *dev, unsigned int pipe)
drivers/usb/core/urb.c:usb_poison_anchored_urbs(struct usb_anchor *anchor)
drivers/usb/core/urb.c:usb_poison_urb(struct urb *urb)
drivers/usb/core/urb.c:usb_submit_urb(struct urb *urb, gfp_t mem_flags)
drivers/usb/core/urb.c:usb_unanchor_urb(struct urb *urb)
drivers/usb/core/urb.c:usb_unlink_urb(struct urb *urb)
drivers/usb/core/urb.c:usb_unpoison_anchored_urbs(struct usb_anchor *anchor)
drivers/input/mouse/bcm5974.c:bcm5974_disconnect(struct usb_interface *iface)
drivers/input/mouse/bcm5974.c:bcm5974_get_config()
drivers/input/mouse/bcm5974.c:bcm5974_irq_button(struct urb *urb)
drivers/input/mouse/bcm5974.c:bcm5974_irq_trackpad(struct urb *urb)
drivers/input/mouse/bcm5974.c:bcm5974_open(struct input_dev *input)
drivers/input/mouse/bcm5974.c:bcm5974_probe(struct usb_interface *iface, const struct usb_device_id *id)
drivers/input/mouse/bcm5974.c:bcm5974_start_traffic(struct bcm5974 *dev)
drivers/input/mouse/bcm5974.c:bcm5974_wellspring_mode(struct bcm5974 *dev, bool on)
drivers/input/mouse/bcm5974.c:report_bt_state(struct bcm5974 *dev, int size)
drivers/input/mouse/bcm5974.c:report_finger_data(struct input_dev *input, int slot, const struct input_mt_pos *pos, const struct tp_finger *f)
drivers/input/mouse/bcm5974.c:report_synaptics_data(struct input_dev *input, const struct bcm5974_config *cfg, const struct tp_finger *f, int raw_n)
drivers/input/mouse/bcm5974.c:report_tp_state(struct bcm5974 *dev, int size)
drivers/input/mouse/bcm5974.c:setup_events_to_report(struct input_dev *input_dev, const struct bcm5974_config *cfg)
drivers/usb/core/message.c:usb_bulk_msg(struct usb_device *usb_dev, unsigned int pipe, void *data, int len, int *actual_length, int timeout)
drivers/usb/core/message.c:usb_clear_halt(struct usb_device *dev, int pipe)
drivers/usb/core/message.c:usb_control_msg(struct usb_device *dev, unsigned int pipe, __u8 request, __u8 requesttype, __u16 value, __u16 index, void *data, __u16 size, int timeout)
drivers/usb/core/message.c:usb_control_msg_recv(struct usb_device *dev, __u8 endpoint, __u8 request, __u8 requesttype, __u16 value, __u16 index, void *driver_data, __u16 size, int timeout, gfp_t memflags)
drivers/usb/core/message.c:usb_disable_device(struct usb_device *dev, int skip_ep0)
drivers/usb/core/message.c:usb_disable_device_endpoints(struct usb_device *dev, int skip_ep0)
drivers/usb/core/message.c:usb_disable_endpoint(struct usb_device *dev, unsigned int epaddr, bool reset_hardware)
drivers/usb/core/message.c:usb_enable_endpoint(struct usb_device *dev, struct usb_host_endpoint *ep, bool reset_ep)
drivers/usb/core/message.c:usb_get_descriptor(struct usb_device *dev, unsigned char type, unsigned char index, void *buf, int size)
drivers/usb/core/message.c:usb_get_string(struct usb_device *dev, unsigned short langid, unsigned char index, void *buf, int size)
drivers/usb/core/message.c:usb_internal_control_msg(struct usb_device *usb_dev, unsigned int pipe, struct usb_ctrlrequest *cmd, void *data, int len, int timeout)
drivers/usb/core/message.c:usb_reset_endpoint(struct usb_device *dev, unsigned int epaddr)
drivers/usb/core/message.c:usb_set_configuration(struct usb_device *dev, int configuration)
drivers/usb/core/message.c:usb_set_interface(struct usb_device *dev, int interface, int alternate)
drivers/usb/core/message.c:usb_start_wait_urb(struct urb *urb, int timeout, int *actual_length)
drivers/usb/core/hub.c:hub_configure(struct usb_hub *hub, struct usb_endpoint_descriptor *endpoint)
drivers/usb/core/hub.c:hub_event(struct work_struct *work)
drivers/usb/core/hub.c:hub_port_connect(struct usb_hub *hub, int port1, u16 portstatus, u16 portchange)
drivers/usb/core/hub.c:hub_port_init(struct usb_hub *hub, struct usb_device *udev, int port1, int retry_counter)
drivers/usb/core/hub.c:hub_port_reset(struct usb_hub *hub, int port1, struct usb_device *udev, unsigned int delay, bool warm)
drivers/usb/core/hub.c:hub_port_wait_reset(struct usb_hub *hub, int port1, struct usb_device *udev, unsigned int delay, bool warm)
drivers/usb/core/hub.c:usb_new_device(struct usb_device *udev)
drivers/usb/core/hub.c:usb_reset_device(struct usb_device *udev)
include/linux/usb.h:init_usb_anchor(struct usb_anchor *anchor)
include/linux/usb.h:usb_fill_control_urb(struct urb *urb, struct usb_device *dev, unsigned int pipe, unsigned char *setup_packet, void *transfer_buffer, int buffer_length, usb_complete_t complete_fn, void *context)
include/linux/usb.h:usb_fill_int_urb(struct urb *urb, struct usb_device *dev, unsigned int pipe, void *transfer_buffer, int buffer_length, usb_complete_t complete_fn, void *context, int interval)
include/linux/usb.h:usb_make_path(struct usb_device *dev, char *buf, size_t size)
include/linux/usb.h:usb_maxpacket(struct usb_device *udev, int pipe)
drivers/usb/core/usb.c:usb_alloc_dev()
drivers/usb/core/usb.c:usb_altnum_to_altsetting()
drivers/usb/core/usb.c:usb_dev_authorized(struct usb_device *dev, struct usb_hcd *hcd)
drivers/usb/core/usb.c:usb_find_common_endpoints(struct usb_host_interface *alt, struct usb_endpoint_descriptor **bulk_in, struct usb_endpoint_descriptor **bulk_out, struct usb_endpoint_descriptor **int_in, struct usb_endpoint_descriptor **int_out)
drivers/usb/core/usb.c:usb_find_common_endpoints_reverse(struct usb_host_interface *alt, struct usb_endpoint_descriptor **bulk_in, struct usb_endpoint_descriptor **bulk_out, struct usb_endpoint_descriptor **int_in, struct usb_endpoint_descriptor **int_out)
drivers/usb/core/usb.c:usb_find_interface()
drivers/usb/core/usb.c:usb_ifnum_to_if()
drivers/usb/core/usb.c:usb_lock_device_for_reset(struct usb_device *udev, const struct usb_interface *iface)
drivers/input/input.c:input_attach_handler(struct input_dev *dev, struct input_handler *handler)
drivers/input/input.c:input_close_device(struct input_handle *handle)
drivers/input/input.c:input_open_device(struct input_handle *handle)
drivers/input/mousedev.c:mousedev_connect(struct input_handler *handler, struct input_dev *dev, const struct input_device_id *id)
drivers/input/mousedev.c:mousedev_open(struct inode *inode, struct file *file)
drivers/input/mousedev.c:mousedev_open_device(struct mousedev *mousedev)
func for case 9b658439133becd38da1
block/genhd.c:device_add_disk(struct device *parent, struct gendisk *disk, const struct attribute_group **groups)
drivers/block/nbd.c:nbd_add_socket(struct nbd_device *nbd, unsigned long arg, bool netlink)
drivers/block/nbd.c:nbd_alloc_config()
drivers/block/nbd.c:nbd_config_put(struct nbd_device *nbd)
drivers/block/nbd.c:nbd_connect_reply(struct genl_info *info, int index)
drivers/block/nbd.c:nbd_dev_add()
drivers/block/nbd.c:nbd_disconnect(struct nbd_device *nbd)
drivers/block/nbd.c:nbd_disconnect_and_put(struct nbd_device *nbd)
drivers/block/nbd.c:nbd_genl_connect(struct sk_buff *skb, struct genl_info *info)
drivers/block/nbd.c:nbd_handle_cmd(struct nbd_cmd *cmd, int index)
drivers/block/nbd.c:nbd_mark_nsock_dead(struct nbd_device *nbd, struct nbd_sock *nsock, int notify)
drivers/block/nbd.c:nbd_parse_flags(struct nbd_device *nbd)
drivers/block/nbd.c:nbd_reconnect_socket(struct nbd_device *nbd, unsigned long arg)
drivers/block/nbd.c:nbd_send_cmd(struct nbd_device *nbd, struct nbd_cmd *cmd, int index)
drivers/block/nbd.c:nbd_set_size(struct nbd_device *nbd, loff_t bytesize, loff_t blksize)
drivers/block/nbd.c:nbd_start_device(struct nbd_device *nbd)
block/genhd.c:__alloc_disk_node()
block/genhd.c:__blk_alloc_disk()
block/genhd.c:blk_lookup_devt(const char *name, int partno)
block/genhd.c:blk_request_module(dev_t devt)
block/genhd.c:del_gendisk(struct gendisk *disk)
block/genhd.c:device_add_disk(struct device *parent, struct gendisk *disk, const struct attribute_group **groups)
block/genhd.c:disk_hidden_show(struct device *dev, struct device_attribute *attr, char *buf)
block/genhd.c:disk_release(struct device *dev)
block/genhd.c:disk_scan_partitions(struct gendisk *disk)
block/genhd.c:disk_uevent(struct gendisk *disk, enum kobject_action action)
block/genhd.c:disk_visible(struct kobject *kobj, struct attribute *a, int n)
block/genhd.c:part_in_flight(struct block_device *part)
block/genhd.c:part_stat_read_all(struct block_device *part, struct disk_stats *stat)
block/genhd.c:set_capacity_and_notify(struct gendisk *disk, sector_t size)
block/genhd.c:set_disk_ro_uevent(struct gendisk *gd, int ro)
ctrl_()
net/netlink/genetlink.c:ctrl_dumpfamily(struct sk_buff *skb, struct netlink_callback *cb)
net/netlink/genetlink.c:ctrl_getfamily(struct sk_buff *skb, struct genl_info *info)
net/netlink/genetlink.c:genl_family_rcv_msg(const struct genl_family *family, struct sk_buff *skb, struct nlmsghdr *nlh, struct netlink_ext_ack *extack)
net/netlink/genetlink.c:genl_family_rcv_msg_doit(const struct genl_family *family, struct sk_buff *skb, struct nlmsghdr *nlh, struct netlink_ext_ack *extack, const struct genl_ops *ops, int hdrlen, struct net *net)
net/netlink/genetlink.c:genl_family_rcv_msg_dumpit(const struct genl_family *family, struct sk_buff *skb, struct nlmsghdr *nlh, struct netlink_ext_ack *extack, const struct genl_ops *ops, int hdrlen, struct net *net)
genl_header_check()
net/netlink/genetlink.c:genl_lock_dumpit(struct sk_buff *skb, struct netlink_callback *cb)
net/netlink/genetlink.c:genl_notify(const struct genl_family *family, struct sk_buff *skb, struct genl_info *info, u32 group, gfp_t flags)
net/netlink/genetlink.c:genl_rcv_msg(struct sk_buff *skb, struct nlmsghdr *nlh, struct netlink_ext_ack *extack)
net/netlink/genetlink.c:genl_register_family(struct genl_family *family)
net/netlink/genetlink.c:genl_start(struct netlink_callback *cb)
net/netlink/genetlink.c:genl_unregister_family(const struct genl_family *family)
net/netlink/genetlink.c:genl_validate_assign_mc_groups(struct genl_family *family)
net/netlink/genetlink.c:genl_validate_ops(const struct genl_family *family)
net/netlink/genetlink.c:genlmsg_mcast(struct sk_buff *skb, u32 portid, unsigned long group, gfp_t flags)
rcv_msg()
block/blk-core.c:__submit_bio(struct bio *bio)
block/blk-core.c:__submit_bio_noacct(struct bio *bio)
block/blk-core.c:bio_check_ro(struct bio *bio)
block/blk-core.c:blk_check_zone_append(struct request_queue *q, struct bio *bio)
block/blk-core.c:blk_partition_remap(struct bio *bio)
block/blk-core.c:blk_queue_enter(struct request_queue *q, blk_mq_req_flags_t flags)
block/blk-core.c:submit_bio(struct bio *bio)
block/blk-core.c:submit_bio_noacct(struct bio *bio)
net/netlink/af_netlink.c:netlink_alloc_large_skb()
net/netlink/af_netlink.c:netlink_getsockbyportid()
net/netlink/af_netlink.c:netlink_insert(struct sock *sk, u32 portid)
net/netlink/af_netlink.c:netlink_rcv_skb(struct sk_buff *skb, int (*cb)(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *))
net/netlink/af_netlink.c:netlink_sendmsg(struct socket *sock, struct msghdr *msg, size_t len)
net/netlink/af_netlink.c:netlink_trim()
net/netlink/af_netlink.c:netlink_unicast(struct sock *ssk, struct sk_buff *skb, u32 portid, int nonblock)
net/netlink/af_netlink.c:netlink_unicast_kernel(struct sock *sk, struct sk_buff *skb, struct sock *ssk)
net/socket.c:____sys_sendmsg(struct socket *sock, struct msghdr *msg_sys, unsigned int flags, struct used_address *used_address, unsigned int allowed_msghdr_flags)
net/socket.c:___sys_sendmsg(struct socket *sock, struct user_msghdr __user *msg, struct msghdr *msg_sys, unsigned int flags, struct used_address *used_address, unsigned int allowed_msghdr_flags)
net/socket.c:__sys_sendmsg(int fd, struct user_msghdr __user *msg, unsigned int flags, bool forbid_cmsg_compat)
block/genhd.c:device_add_disk(struct device *parent, struct gendisk *disk, const struct attribute_group **groups)
drivers/block/nbd.c:nbd_dev_add()
drivers/block/nbd.c:nbd_genl_connect(struct sk_buff *skb, struct genl_info *info)
block/genhd.c:device_add_disk(struct device *parent, struct gendisk *disk, const struct attribute_group **groups)
arch/x86/entry/common.c:do_int80_syscall_32(struct pt_regs *regs)
arch/x86/entry/common.c:do_syscall_64(struct pt_regs *regs, int nr)
net/netlink/genetlink.c:genl_rcv_msg(struct sk_buff *skb, struct nlmsghdr *nlh, struct netlink_ext_ack *extack)
drivers/block/nbd.c:nbd_dev_add()
drivers/block/nbd.c:nbd_genl_connect(struct sk_buff *skb, struct genl_info *info)
func for case 0d5b462a6f07447991b3
mm/page-writeback.c:__set_page_dirty(struct page *page, struct address_space *mapping, int warn)
apply_buffers()
collect_blocks()
collect_dat_data()
complete_write()
do_construct()
fs/nilfs2/btree.c:nilfs_btree_propagate(struct nilfs_bmap *btree, struct buffer_head *bh)
fs/nilfs2/segment.c:nilfs_collect_dat_data(struct nilfs_sc_info *sci, struct buffer_head *bh, struct inode *inode)
fs/nilfs2/segment.c:nilfs_segctor_add_file_block(struct nilfs_sc_info *sci, struct buffer_head *bh, struct inode *inode, unsigned int binfo_size)
fs/nilfs2/segment.c:nilfs_segctor_apply_buffers(struct nilfs_sc_info *sci, struct inode *inode, struct list_head *listp, int (*collect)(struct nilfs_sc_info *, struct buffer_head *, struct inode *))
fs/nilfs2/segment.c:nilfs_segctor_collect_blocks(struct nilfs_sc_info *sci, int mode)
fs/nilfs2/segment.c:nilfs_segctor_complete_write(struct nilfs_sc_info *sci)
fs/nilfs2/segment.c:nilfs_segctor_construct(struct nilfs_sc_info *sci, int mode)
fs/nilfs2/segment.c:nilfs_segctor_do_construct(struct nilfs_sc_info *sci, int mode)
fs/nilfs2/segment.c:nilfs_segctor_feed_segment(struct nilfs_sc_info *sci)
fs/nilfs2/segment.c:nilfs_segctor_prepare_write(struct nilfs_sc_info *sci)
fs/nilfs2/segment.c:nilfs_segctor_reset_segment_buffer(struct nilfs_sc_info *sci)
fs/nilfs2/segment.c:nilfs_segctor_scan_file(struct nilfs_sc_info *sci, struct inode *inode, const struct nilfs_sc_operations *sc_ops)
fs/nilfs2/segment.c:nilfs_segctor_thread_construct(struct nilfs_sc_info *sci, int mode)
fs/nilfs2/segment.c:nilfs_segctor_truncate_segments(struct nilfs_sc_info *sci, struct nilfs_segment_buffer *last, struct inode *sufile)
fs/nilfs2/segment.c:nilfs_segctor_update_segusage(struct nilfs_sc_info *sci, struct inode *sufile)
fs/nilfs2/segment.c:nilfs_segctor_write_out(struct nilfs_sc_info *sci)
scan_file()
write_out()
fs/nilfs2/btree.c:__nilfs_btree_get_block(const struct nilfs_bmap *btree, __u64 ptr, struct buffer_head **bhp, const struct nilfs_btree_readahead_info *ra)
get_block()
fs/nilfs2/btree.c:nilfs_btree_add_dirty_buffer(struct nilfs_bmap *btree, struct list_head *lists, struct buffer_head *bh)
fs/nilfs2/btree.c:nilfs_btree_assign(struct nilfs_bmap *btree, struct buffer_head **bh, sector_t blocknr, union nilfs_binfo *binfo)
fs/nilfs2/btree.c:nilfs_btree_assign_p(struct nilfs_bmap *btree, struct nilfs_btree_path *path, int level, struct buffer_head **bh, sector_t blocknr, union nilfs_binfo *binfo)
fs/nilfs2/btree.c:nilfs_btree_assign_v(struct nilfs_bmap *btree, struct nilfs_btree_path *path, int level, struct buffer_head **bh, sector_t blocknr, union nilfs_binfo *binfo)
fs/nilfs2/btree.c:nilfs_btree_commit_insert(struct nilfs_bmap *btree, struct nilfs_btree_path *path, int maxlevel, __u64 key, __u64 ptr)
fs/nilfs2/btree.c:nilfs_btree_commit_update_v(struct nilfs_bmap *btree, struct nilfs_btree_path *path, int level, struct inode *dat)
fs/nilfs2/btree.c:nilfs_btree_do_insert(struct nilfs_bmap *btree, struct nilfs_btree_path *path, int level, __u64 *keyp, __u64 *ptrp)
fs/nilfs2/btree.c:nilfs_btree_lookup_dirty_buffers(struct nilfs_bmap *btree, struct list_head *listp)
fs/nilfs2/btree.c:nilfs_btree_mark(struct nilfs_bmap *btree, __u64 key, int level)
fs/nilfs2/btree.c:nilfs_btree_prepare_insert(struct nilfs_bmap *btree, struct nilfs_btree_path *path, int *levelp, __u64 key, __u64 ptr, struct nilfs_bmap_stats *stats)
fs/nilfs2/btree.c:nilfs_btree_prepare_propagate_v(struct nilfs_bmap *btree, struct nilfs_btree_path *path, int minlevel, int *maxlevelp, struct inode *dat)
fs/nilfs2/btree.c:nilfs_btree_prepare_update_v(struct nilfs_bmap *btree, struct nilfs_btree_path *path, int level, struct inode *dat)
fs/nilfs2/btree.c:nilfs_btree_propagate(struct nilfs_bmap *btree, struct buffer_head *bh)
fs/nilfs2/btree.c:nilfs_btree_propagate_v(struct nilfs_bmap *btree, struct nilfs_btree_path *path, int level, struct buffer_head *bh)
do_()
fs/nilfs2/bmap.c:nilfs_bmap_assign(struct nilfs_bmap *bmap, struct buffer_head **bh, unsigned long blocknr, union nilfs_binfo *binfo)
fs/nilfs2/bmap.c:nilfs_bmap_do_delete(struct nilfs_bmap *bmap, __u64 key)
fs/nilfs2/bmap.c:nilfs_bmap_do_insert(struct nilfs_bmap *bmap, __u64 key, __u64 ptr)
fs/nilfs2/bmap.c:nilfs_bmap_do_truncate(struct nilfs_bmap *bmap, __u64 key)
fs/nilfs2/bmap.c:nilfs_bmap_init_gc(struct nilfs_bmap *bmap)
fs/nilfs2/bmap.c:nilfs_bmap_last_key(struct nilfs_bmap *bmap, __u64 *keyp)
fs/nilfs2/bmap.c:nilfs_bmap_lookup_at_level(struct nilfs_bmap *bmap, __u64 key, int level, __u64 *ptrp)
fs/nilfs2/bmap.c:nilfs_bmap_lookup_contig(struct nilfs_bmap *bmap, __u64 key, __u64 *ptrp, unsigned int maxblocks)
fs/nilfs2/bmap.c:nilfs_bmap_mark(struct nilfs_bmap *bmap, __u64 key, int level)
fs/nilfs2/bmap.c:nilfs_bmap_propagate(struct nilfs_bmap *bmap, struct buffer_head *bh)
fs/nilfs2/bmap.c:nilfs_bmap_read(struct nilfs_bmap *bmap, struct nilfs_inode *raw_inode)
fs/nilfs2/bmap.c:nilfs_bmap_restore(struct nilfs_bmap *bmap, const struct nilfs_bmap_store *store)
fs/nilfs2/bmap.c:nilfs_bmap_save(const struct nilfs_bmap *bmap, struct nilfs_bmap_store *store)
fs/nilfs2/bmap.c:nilfs_bmap_seek_key(struct nilfs_bmap *bmap, __u64 start, __u64 *keyp)
fs/nilfs2/bmap.c:nilfs_bmap_write(struct nilfs_bmap *bmap, struct nilfs_inode *raw_inode)
mm/page-writeback.c:__set_page_dirty_nobuffers(struct page *page)
mm/page-writeback.c:account_page_dirtied(struct page *page, struct address_space *mapping)
mm/page-writeback.c:balance_dirty_pages(struct bdi_writeback *wb, unsigned long pages_dirtied)
mm/page-writeback.c:domain_dirty_limits(struct dirty_throttle_control *dtc)
mm/page-writeback.c:global_dirty_limits(unsigned long *pbackground, unsigned long *pdirty)
mm/page-writeback.c:set_page_dirty(struct page *page)
mm/page-writeback.c:wb_dirty_limits(struct dirty_throttle_control *dtc)
mm/page-writeback.c:wb_update_dirty_ratelimit(struct dirty_throttle_control *dtc, unsigned long dirtied, unsigned long elapsed)
include/linux/backing-dev.h:bdi_has_dirty_io(struct backing_dev_info *bdi)
include/linux/backing-dev.h:inode_cgwb_enabled(struct inode *inode)
include/linux/backing-dev.h:inode_to_bdi()
include/linux/backing-dev.h:inode_to_wb()
include/linux/backing-dev.h:wb_find_current()
include/linux/backing-dev.h:wb_get_create_current()
fs/nilfs2/super.c:nilfs_attach_checkpoint(struct super_block *sb, __u64 cno, int curr_mnt, struct nilfs_root **rootp)
fs/nilfs2/super.c:nilfs_attach_snapshot(struct super_block *s, __u64 cno, struct dentry **root_dentry)
fs/nilfs2/super.c:nilfs_commit_super(struct super_block *sb, int flag)
fs/nilfs2/super.c:nilfs_fill_super(struct super_block *sb, void *data, int silent)
fs/nilfs2/super.c:nilfs_read_super_block()
fs/nilfs2/super.c:nilfs_remount(struct super_block *sb, int *flags, char *data)
fs/nilfs2/super.c:nilfs_setup_super(struct super_block *sb, int is_mount)
fs/nilfs2/super.c:nilfs_store_magic_and_option(struct super_block *sb, struct nilfs_super_block *sbp, char *data)
fs/nilfs2/inode.c:__nilfs_mark_inode_dirty(struct inode *inode, int flags)
fs/nilfs2/inode.c:nilfs_dirty_inode(struct inode *inode, int flags)
fs/nilfs2/inode.c:nilfs_evict_inode(struct inode *inode)
fs/nilfs2/inode.c:nilfs_set_page_dirty(struct page *page)
fs/nilfs2/inode.c:nilfs_setattr(struct user_namespace *mnt_userns, struct dentry *dentry, struct iattr *iattr)
fs/nilfs2/inode.c:nilfs_truncate(struct inode *inode)
fs/nilfs2/inode.c:nilfs_write_begin(struct file *file, struct address_space *mapping, loff_t pos, unsigned len, unsigned flags, struct page **pagep, void **fsdata)
fs/nilfs2/inode.c:nilfs_write_end(struct file *file, struct address_space *mapping, loff_t pos, unsigned len, unsigned copied, struct page *page, void *fsdata)
mm/page-writeback.c:__set_page_dirty(struct page *page, struct address_space *mapping, int warn)
fs/buffer.c:__set_page_dirty_buffers(struct page *page)
fs/buffer.c:mark_buffer_dirty(struct buffer_head *bh)
fs/nilfs2/the_nilfs.c:init_nilfs(struct the_nilfs *nilfs, struct super_block *sb, char *data)
fs/nilfs2/the_nilfs.c:load_nilfs(struct the_nilfs *nilfs, struct super_block *sb)
fs/nilfs2/the_nilfs.c:nilfs_store_disk_layout(struct the_nilfs *nilfs, struct nilfs_super_block *sbp)
fs/nilfs2/alloc.c:nilfs_palloc_get_bitmap_block(struct inode *inode, unsigned long group, int create, struct buffer_head **bhp)
fs/nilfs2/alloc.c:nilfs_palloc_get_desc_block(struct inode *inode, unsigned long group, int create, struct buffer_head **bhp)
fs/nilfs2/alloc.c:nilfs_palloc_get_entry_block(struct inode *inode, __u64 nr, int create, struct buffer_head **bhp)
func for case dcf33a7aae997956fe06
fs/gfs2/ops_fstype.c:gfs2_check_sb(struct gfs2_sbd *sdp, int silent)
fs/gfs2/ops_fstype.c:gfs2_fill_super(struct super_block *sb, struct fs_context *fc)
fs/gfs2/ops_fstype.c:gfs2_jindex_hold(struct gfs2_sbd *sdp, struct gfs2_holder *ji_gh)
fs/gfs2/ops_fstype.c:gfs2_lm_mount(struct gfs2_sbd *sdp, int silent)
fs/gfs2/ops_fstype.c:gfs2_lookup_root(struct super_block *sb, struct dentry **dptr, u64 no_addr, const char *name)
fs/gfs2/ops_fstype.c:gfs2_read_sb(struct gfs2_sbd *sdp, int silent)
fs/gfs2/ops_fstype.c:gfs2_read_super(struct gfs2_sbd *sdp, sector_t sector, int silent)
fs/gfs2/ops_fstype.c:gfs2_sb_in(struct gfs2_sbd *sdp, const void *buf)
fs/gfs2/ops_fstype.c:init_inodes(struct gfs2_sbd *sdp, int undo)
fs/gfs2/ops_fstype.c:init_journal(struct gfs2_sbd *sdp, int undo)
fs/gfs2/ops_fstype.c:init_locking(struct gfs2_sbd *sdp, struct gfs2_holder *mount_gh, int undo)
fs/gfs2/ops_fstype.c:init_per_node(struct gfs2_sbd *sdp, int undo)
fs/gfs2/ops_fstype.c:init_sb(struct gfs2_sbd *sdp, int silent)
fs/gfs2/ops_fstype.c:init_statfs(struct gfs2_sbd *sdp)
fs/gfs2/ops_fstype.c:init_threads(struct gfs2_sbd *sdp)
fs/gfs2/ops_fstype.c:gfs2_check_sb(struct gfs2_sbd *sdp, int silent)
fs/gfs2/ops_fstype.c:gfs2_fill_super(struct super_block *sb, struct fs_context *fc)
gfs2_freeze_fs()
fs/gfs2/ops_fstype.c:gfs2_get_tree(struct fs_context *fc)
fs/gfs2/ops_fstype.c:gfs2_jindex_hold(struct gfs2_sbd *sdp, struct gfs2_holder *ji_gh)
fs/gfs2/ops_fstype.c:gfs2_lookup_root(struct super_block *sb, struct dentry **dptr, u64 no_addr, const char *name)
gfs2_meta_syncfs()
gfs2_mount()
fs/gfs2/ops_fstype.c:gfs2_read_sb(struct gfs2_sbd *sdp, int silent)
gfs2_rindex_update()
fs/gfs2/ops_fstype.c:gfs2_sb_in(struct gfs2_sbd *sdp, const void *buf)
gfs2_statfs_init()
gfs2_statfs_sync()
gfs2_unfreeze_fs()
fs/gfs2/ops_fstype.c:init_sb(struct gfs2_sbd *sdp, int silent)
fs/gfs2/glock.c:__gfs2_glock_dq(struct gfs2_holder *gh)
fs/gfs2/glock.c:do_promote(struct gfs2_glock *gl)
fs/gfs2/glock.c:finish_xmote(struct gfs2_glock *gl, unsigned int ret)
fs/gfs2/glock.c:gfs2_glock_cb(struct gfs2_glock *gl, unsigned int state)
fs/gfs2/glock.c:gfs2_glock_complete(struct gfs2_glock *gl, int ret)
fs/gfs2/glock.c:gfs2_glock_dealloc(struct rcu_head *rcu)
fs/gfs2/glock.c:gfs2_glock_dq(struct gfs2_holder *gh)
fs/gfs2/glock.c:gfs2_glock_free(struct gfs2_glock *gl)
fs/gfs2/glock.c:gfs2_glock_get(struct gfs2_sbd *sdp, u64 number, const struct gfs2_glock_operations *glops, int create, struct gfs2_glock **glp)
fs/gfs2/glock.c:gfs2_glock_nq(struct gfs2_holder *gh)
fs/gfs2/glock.c:gfs2_glock_nq_num(struct gfs2_sbd *sdp, u64 number, const struct gfs2_glock_operations *glops, unsigned int state, u16 flags, struct gfs2_holder *gh)
fs/gfs2/glock.c:gfs2_glock_poke(struct gfs2_glock *gl)
fs/gfs2/glock.c:gfs2_glock_update_hold_time(struct gfs2_glock *gl, unsigned long start_time)
fs/gfs2/glock.c:handle_callback(struct gfs2_glock *gl, unsigned int state, unsigned long delay, bool remote)
nq_num()
fs/gfs2/glock.c:state_change(struct gfs2_glock *gl, unsigned int new_state)
data_ordered()
fs/gfs2/log.h:gfs2_ordered_add_inode(struct gfs2_inode *ip)
fs/gfs2/ops_fstype.c:gfs2_read_sb(struct gfs2_sbd *sdp, int silent)
fs/gfs2/ops_fstype.c:init_sb(struct gfs2_sbd *sdp, int silent)
ops_fstype()
fs/super.c:alloc_super()
fs/super.c:generic_shutdown_super(struct super_block *sb))
fs/super.c:get_tree_bdev(struct fs_context *fc, int (*fill_super)(struct super_block *, struct fs_context *)))
fs/super.c:mount_bdev()
fs/super.c:sget_fc()
fs/super.c:super_setup_bdi_name(struct super_block *sb, char *fmt, ...))
fs/super.c:vfs_get_super(struct fs_context *fc, enum vfs_get_super_keying keying, int (*fill_super)(struct super_block *sb, struct fs_context *fc)))
fs/super.c:vfs_get_tree(struct fs_context *fc))
fs/namespace.c:do_mount(const char *dev_name, const char __user *dir_name, const char *type_page, unsigned long flags, void *data_page)
fs/namespace.c:do_new_mount(struct path *path, const char *fstype, int sb_flags, int mnt_flags, const char *name, void *data)
fs/namespace.c:do_new_mount_fc(struct fs_context *fc, struct path *mountpoint, unsigned int mnt_flags)
fs/namespace.c:fc_mount()
fs/super.c:get_tree_bdev(struct fs_context *fc, int (*fill_super)(struct super_block *, struct fs_context *)))
fs/namespace.c:path_mount(const char *dev_name, struct path *path, const char *type_page, unsigned long flags, void *data_page)
fs/namespace.c:vfs_create_mount()
fs/namespace.c:vfs_kern_mount()
fs/gfs2/ops_fstype.c:gfs2_fill_super(struct super_block *sb, struct fs_context *fc)
gfs2_quota_change()
gfs2_quota_check()
gfs2_quota_cleanup()
gfs2_quota_hold()
gfs2_quota_init()
gfs2_quota_sync()
gfs2_quota_unhold()
gfs2_quota_unlock()
quota_off()
fs/gfs2/ops_fstype.c:gfs2_read_sb(struct gfs2_sbd *sdp, int silent)
fs/gfs2/ops_fstype.c:init_sb(struct gfs2_sbd *sdp, int silent)
ops_fstype()
lib/ubsan.c:__ubsan_handle_shift_out_of_bounds(void *_data, void *lhs, void *rhs)
report_ubsan_failure()
lib/ubsan.c:ubsan_prologue(struct source_location *loc, const char *reason)
dump_stack()
lib/dump_stack.c:dump_stack_lvl(const char *log_lvl)
fs/gfs2/ops_fstype.c:gfs2_read_sb(struct gfs2_sbd *sdp, int silent)
fs/gfs2/ops_fstype.c:init_sb(struct gfs2_sbd *sdp, int silent)
ops_fstype()
func for case a7e701c8385bd8543074
nla_type()
net/xfrm/xfrm_compat.c:xfrm_alloc_compat(struct sk_buff *skb, const struct nlmsghdr *nlh_src)
net/xfrm/xfrm_compat.c:xfrm_nlmsg_put_compat()
net/xfrm/xfrm_compat.c:xfrm_user_policy_compat(u8 **pdata32, int optlen)
net/xfrm/xfrm_compat.c:xfrm_user_rcv_msg_compat()
net/xfrm/xfrm_compat.c:xfrm_xlate32(struct nlmsghdr *dst, const struct nlmsghdr *src, struct nlattr *attrs[XFRMA_MAX+1], size_t size, u8 type, struct netlink_ext_ack *extack)
net/xfrm/xfrm_compat.c:xfrm_xlate32_attr(void *dst, const struct nlattr *nla, size_t *pos, size_t size, struct netlink_ext_ack *extack)
net/xfrm/xfrm_compat.c:xfrm_xlate64(struct sk_buff *dst, const struct nlmsghdr *nlh_src)
net/xfrm/xfrm_compat.c:xfrm_xlate64_attr(struct sk_buff *dst, const struct nlattr *src)
net/xfrm/xfrm_user.c:copy_from_user_state(struct xfrm_state *x, struct xfrm_usersa_info *p)
net/xfrm/xfrm_user.c:xfrm_add_sa(struct sk_buff *skb, struct nlmsghdr *nlh, struct nlattr **attrs)
net/xfrm/xfrm_user.c:xfrm_aevent_state_notify(struct xfrm_state *x, const struct km_event *c)
net/xfrm/xfrm_user.c:xfrm_alloc_replay_state_esn(struct xfrm_replay_state_esn **replay_esn, struct xfrm_replay_state_esn **preplay_esn, struct nlattr *rta)
net/xfrm/xfrm_user.c:xfrm_alloc_userspi(struct sk_buff *skb, struct nlmsghdr *nlh, struct nlattr **attrs)
net/xfrm/xfrm_user.c:xfrm_del_sa(struct sk_buff *skb, struct nlmsghdr *nlh, struct nlattr **attrs)
net/xfrm/xfrm_user.c:xfrm_flush_sa(struct sk_buff *skb, struct nlmsghdr *nlh, struct nlattr **attrs)
net/xfrm/xfrm_user.c:xfrm_get_ae(struct sk_buff *skb, struct nlmsghdr *nlh, struct nlattr **attrs)
net/xfrm/xfrm_user.c:xfrm_get_sa(struct sk_buff *skb, struct nlmsghdr *nlh, struct nlattr **attrs)
net/xfrm/xfrm_user.c:xfrm_new_ae(struct sk_buff *skb, struct nlmsghdr *nlh, struct nlattr **attrs)
net/xfrm/xfrm_user.c:xfrm_notify_sa(struct xfrm_state *x, const struct km_event *c)
net/xfrm/xfrm_user.c:xfrm_send_state_notify(struct xfrm_state *x, const struct km_event *c)
net/xfrm/xfrm_user.c:xfrm_state_construct()
net/xfrm/xfrm_user.c:xfrm_update_ae_params(struct xfrm_state *x, struct nlattr **attrs, int update_esn)
net/xfrm/xfrm_user.c:xfrm_user_rcv_msg(struct sk_buff *skb, struct nlmsghdr *nlh, struct netlink_ext_ack *extack)
net/netlink/af_netlink.c:__netlink_sendskb(struct sock *sk, struct sk_buff *skb)
af_netlink()
net/netlink/af_netlink.c:netlink_alloc_large_skb()
net/netlink/af_netlink.c:netlink_attachskb(struct sock *sk, struct sk_buff *skb, long *timeo, struct sock *ssk)
net/netlink/af_netlink.c:netlink_broadcast_filtered(struct sock *ssk, struct sk_buff *skb, u32 portid, u32 group, gfp_t allocation, int (*filter)(struct sock *dsk, struct sk_buff *skb, void *data), void *filter_data)
net/netlink/af_netlink.c:netlink_getsockbyfilp()
net/netlink/af_netlink.c:netlink_getsockbyportid()
net/netlink/af_netlink.c:netlink_insert(struct sock *sk, u32 portid)
net/netlink/af_netlink.c:netlink_rcv_skb(struct sk_buff *skb, int (*cb)(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *))
net/netlink/af_netlink.c:netlink_realloc_groups(struct sock *sk)
net/netlink/af_netlink.c:netlink_sendmsg(struct socket *sock, struct msghdr *msg, size_t len)
net/netlink/af_netlink.c:netlink_skb_set_owner_r(struct sk_buff *skb, struct sock *sk)
net/netlink/af_netlink.c:netlink_trim()
net/netlink/af_netlink.c:netlink_unicast(struct sock *ssk, struct sk_buff *skb, u32 portid, int nonblock)
net/netlink/af_netlink.c:netlink_unicast_kernel(struct sock *sk, struct sk_buff *skb, struct sock *ssk)
net/netlink/af_netlink.c:netlink_update_subscriptions(struct sock *sk, unsigned int subscriptions)
xfrm_compat()
net/xfrm/xfrm_state.c:__xfrm_state_insert(struct xfrm_state *x)
net/xfrm/xfrm_state.c:__xfrm_state_lookup()
net/xfrm/xfrm_compat.c:xfrm_alloc_compat(struct sk_buff *skb, const struct nlmsghdr *nlh_src)
xfrm_compat()
xfrm_state()
net/xfrm/xfrm_state.c:xfrm_state_add(struct xfrm_state *x)
net/xfrm/xfrm_state.c:xfrm_state_alloc()
net/xfrm/xfrm_state.c:xfrm_state_find()
net/xfrm/xfrm_state.c:xfrm_state_insert(struct xfrm_state *x)
net/xfrm/xfrm_state.c:xfrm_state_look_at(struct xfrm_policy *pol, struct xfrm_state *x, const struct flowi *fl, unsigned short family, struct xfrm_state **best, int *acq_in_progress, int *error)
net/xfrm/xfrm_state.c:xfrm_state_lookup_byspi()
net/socket.c:____sys_sendmsg(struct socket *sock, struct msghdr *msg_sys, unsigned int flags, struct used_address *used_address, unsigned int allowed_msghdr_flags)
net/socket.c:___sys_sendmsg(struct socket *sock, struct user_msghdr __user *msg, struct msghdr *msg_sys, unsigned int flags, struct used_address *used_address, unsigned int allowed_msghdr_flags)
__copy_msghdr()
net/socket.c:__sys_sendmmsg(int fd, struct mmsghdr __user *mmsg, unsigned int vlen, unsigned int flags, bool forbid_cmsg_compat)
net/socket.c:__sys_sendmsg(int fd, struct user_msghdr __user *msg, unsigned int flags, bool forbid_cmsg_compat)
net/socket.c:kernel_sendmsg_locked(struct sock *sk, struct msghdr *msg, struct kvec *vec, size_t num, size_t size)
net/socket.c:sock_alloc_file()
net/socket.c:sock_sendmsg_nosec(struct socket *sock, struct msghdr *msg)
net/xfrm/xfrm_policy.c:__xfrm_policy_check(struct sock *sk, int dir, struct sk_buff *skb, unsigned short family)
nla_type()
xfrm_policy()
net/xfrm/xfrm_policy.c:xfrm_policy_alloc()
net/xfrm/xfrm_policy.c:xfrm_policy_eval_candidates()
net/xfrm/xfrm_policy.c:xfrm_policy_insert(int dir, struct xfrm_policy *policy, int excl)
net/xfrm/xfrm_policy.c:xfrm_policy_insert_inexact_list(struct hlist_head *chain, struct xfrm_policy *policy)
net/xfrm/xfrm_policy.c:xfrm_policy_lookup_bytype()
net/xfrm/xfrm_policy.c:xfrm_policy_match(const struct xfrm_policy *pol, const struct flowi *fl, u8 type, u16 family, int dir, u32 if_id)
net/xfrm/xfrm_policy.c:xfrm_tmpl_resolve(struct xfrm_policy **pols, int npols, const struct flowi *fl, struct xfrm_state **xfrm, unsigned short family)
arch/x86/entry/common.c:__do_fast_syscall_32(struct pt_regs *regs)
arch/x86/entry/common.c:do_SYSENTER_32(struct pt_regs *regs)
arch/x86/entry/common.c:do_fast_syscall_32(struct pt_regs *regs)
arch/x86/entry/common.c:do_int80_syscall_32(struct pt_regs *regs)
arch/x86/entry/common.c:do_syscall_32_irqs_on(struct pt_regs *regs, unsigned int nr)
arch/x86/entry/common.c:do_syscall_64(unsigned long nr, struct pt_regs *regs)
do_syscall_x32()
do_syscall_x64()
net/xfrm/xfrm_compat.c:xfrm_alloc_compat(struct sk_buff *skb, const struct nlmsghdr *nlh_src)
xfrm_compat()
net/xfrm/xfrm_input.c:xfrm_input(struct sk_buff *skb, int nexthdr, __be32 spi, int encap_type)
net/xfrm/xfrm_compat.c:xfrm_xlate64(struct sk_buff *dst, const struct nlmsghdr *nlh_src)
net/xfrm/xfrm_compat.c:xfrm_xlate64_attr(struct sk_buff *dst, const struct nlattr *src)
net/xfrm/xfrm_compat.c:xfrm_alloc_compat(struct sk_buff *skb, const struct nlmsghdr *nlh_src)
xfrm_compat()
net/xfrm/xfrm_output.c:xfrm_output(struct sock *sk, struct sk_buff *skb)
net/xfrm/xfrm_compat.c:xfrm_xlate64(struct sk_buff *dst, const struct nlmsghdr *nlh_src)
net/xfrm/xfrm_compat.c:xfrm_xlate64_attr(struct sk_buff *dst, const struct nlattr *src)
xfrm_compat()
func for case e2787430e752a92b8750
fs/hfsplus/inode.c:hfsplus_cat_read_inode(struct inode *inode, struct hfs_find_data *fd)
fs/hfsplus/inode.c:hfsplus_cat_write_inode(struct inode *inode)
fs/hfsplus/inode.c:hfsplus_delete_inode(struct inode *inode)
fs/hfsplus/inode.c:hfsplus_direct_IO(struct kiocb *iocb, struct iov_iter *iter)
fs/hfsplus/inode.c:hfsplus_file_fsync(struct file *file, loff_t start, loff_t end, int datasync)
fs/hfsplus/inode.c:hfsplus_file_release(struct inode *inode, struct file *file)
fs/hfsplus/inode.c:hfsplus_fileattr_set(struct user_namespace *mnt_userns, struct dentry *dentry, struct fileattr *fa)
fs/hfsplus/inode.c:hfsplus_get_perms(struct inode *inode, struct hfsplus_perm *perms, int dir)
fs/hfsplus/inode.c:hfsplus_getattr(struct user_namespace *mnt_userns, const struct path *path, struct kstat *stat, u32 request_mask, unsigned int query_flags)
fs/hfsplus/inode.c:hfsplus_inode_read_fork(struct inode *inode, struct hfsplus_fork_raw *fork)
fs/hfsplus/inode.c:hfsplus_new_inode()
fs/hfsplus/inode.c:hfsplus_release_folio(struct folio *folio, gfp_t mask)
fs/hfsplus/inode.c:hfsplus_setattr(struct user_namespace *mnt_userns, struct dentry *dentry, struct iattr *attr)
fs/hfsplus/inode.c:hfsplus_write_begin(struct file *file, struct address_space *mapping, loff_t pos, unsigned len, struct page **pagep, void **fsdata)
hfsplus_cat_build_()
fs/hfsplus/catalog.c:hfsplus_cat_build_key(struct super_block *sb, hfsplus_btree_key *key, u32 parent, const struct qstr *str)
fs/hfsplus/catalog.c:hfsplus_cat_build_key_uni(hfsplus_btree_key *key, u32 parent, struct hfsplus_unistr *name)
fs/hfsplus/catalog.c:hfsplus_cat_build_record(hfsplus_cat_entry *entry, u32 cnid, struct inode *inode)
fs/hfsplus/inode.c:hfsplus_cat_read_inode(struct inode *inode, struct hfs_find_data *fd)
fs/hfsplus/catalog.c:hfsplus_cat_set_perms(struct inode *inode, struct hfsplus_perm *perms)
fs/hfsplus/catalog.c:hfsplus_create_cat(u32 cnid, struct inode *dir, const struct qstr *str, struct inode *inode)
fs/hfsplus/catalog.c:hfsplus_delete_cat(u32 cnid, struct inode *dir, const struct qstr *str)
fs/hfsplus/catalog.c:hfsplus_fill_cat_thread(struct super_block *sb, hfsplus_cat_entry *entry, int type, u32 parentid, const struct qstr *str)
fs/hfsplus/catalog.c:hfsplus_find_cat(struct super_block *sb, u32 cnid, struct hfs_find_data *fd)
fs/hfsplus/catalog.c:hfsplus_rename_cat(u32 cnid, struct inode *src_dir, const struct qstr *src_name, struct inode *dst_dir, const struct qstr *dst_name)
fs/hfsplus/catalog.c:hfsplus_subfolders_dec(struct inode *dir)
fs/hfsplus/super.c:delayed_sync_fs(struct work_struct *work)
evict_inode()
fs/hfsplus/inode.c:hfsplus_cat_read_inode(struct inode *inode, struct hfs_find_data *fd)
fs/hfsplus/super.c:hfsplus_evict_inode(struct inode *inode)
fs/hfsplus/super.c:hfsplus_fill_super(struct super_block *sb, void *data, int silent)
fs/hfsplus/super.c:hfsplus_iget()
fs/hfsplus/super.c:hfsplus_mark_mdb_dirty(struct super_block *sb)
fs/hfsplus/super.c:hfsplus_put_super(struct super_block *sb)
fs/hfsplus/super.c:hfsplus_remount(struct super_block *sb, int *flags, char *data)
fs/hfsplus/super.c:hfsplus_statfs(struct dentry *dentry, struct kstatfs *buf)
fs/hfsplus/super.c:hfsplus_sync_fs(struct super_block *sb, int wait)
fs/hfsplus/super.c:hfsplus_system_read_inode(struct inode *inode)
fs/hfsplus/super.c:hfsplus_system_write_inode(struct inode *inode)
fs/hfsplus/super.c:init_hfsplus_fs(void)
mark_mdb_dirty()
fs/super.c:put_super(struct super_block *sb))
sync_fs()
system_read_inode()
write_inode()
fs/hfsplus/btree.c:hfs_bmap_alloc()
fs/hfsplus/btree.c:hfs_bmap_free(struct hfs_bnode *node)
fs/hfsplus/btree.c:hfs_bmap_new_bmap()
fs/hfsplus/btree.c:hfs_btree_open()
fs/hfsplus/btree.c:hfs_btree_write(struct hfs_btree *tree)
fs/hfsplus/btree.c:hfsplus_calc_btree_clump_size(u32 block_size, u32 node_size, u64 sectors, int file_id)
fs/hfsplus/options.c:hfsplus_fill_defaults(struct hfsplus_sb_info *opts)
fs/hfsplus/options.c:hfsplus_parse_options(char *input, struct hfsplus_sb_info *sbi)
fs/hfsplus/options.c:hfsplus_parse_options_remount(char *input, int *force)
fs/hfsplus/options.c:hfsplus_show_options(struct seq_file *seq, struct dentry *root)
fs/hfsplus/inode.c:hfsplus_cat_read_inode(struct inode *inode, struct hfs_find_data *fd)
fs/hfsplus/wrapper.c:hfsplus_get_last_session(struct super_block *sb, sector_t *start, sector_t *size)
fs/hfsplus/wrapper.c:hfsplus_read_wrapper(struct super_block *sb)
fs/hfsplus/wrapper.c:hfsplus_submit_bio(struct super_block *sb, sector_t sector, void *buf, void **data, blk_opf_t opf)
syz_mount_image()
fs/hfsplus/extents.c:__hfsplus_ext_cache_extent(struct hfs_find_data *fd, struct inode *inode, u32 block)
fs/hfsplus/extents.c:__hfsplus_ext_read_extent(struct hfs_find_data *fd, struct hfsplus_extent *extent, u32 cnid, u32 block, u8 type)
fs/hfsplus/extents.c:hfsplus_add_extent(struct hfsplus_extent *extent, u32 offset, u32 alloc_block, u32 block_count)
fs/hfsplus/extents.c:hfsplus_ext_read_extent(struct inode *inode, u32 block)
fs/hfsplus/extents.c:hfsplus_file_extend(struct inode *inode, bool zeroout)
fs/hfsplus/extents.c:hfsplus_file_truncate(struct inode *inode)
fs/hfsplus/extents.c:hfsplus_free_extents(struct super_block *sb, struct hfsplus_extent *extent, u32 offset, u32 block_nr)
fs/hfsplus/extents.c:hfsplus_get_block(struct inode *inode, sector_t iblock, struct buffer_head *bh_result, int create)
fs/super.c:get_tree_bdev(struct fs_context *fc, int (*fill_super)(struct super_block *, struct fs_context *)))
fs/super.c:mount_bdev()
fs/super.c:vfs_get_tree(struct fs_context *fc))
fs/namespace.c:do_new_mount(struct path *path, const char *fstype, int sb_flags, int mnt_flags, const char *name, void *data)
fs/super.c:mount_bdev()
fs/namespace.c:path_mount(const char *dev_name, struct path *path, const char *type_page, unsigned long flags, void *data_page)
fs/fs_context.c:legacy_get_tree(struct fs_context *fc)
fs/fs_context.c:legacy_parse_monolithic(struct fs_context *fc, void *data)
fs/fs_context.c:legacy_parse_param(struct fs_context *fc, struct fs_parameter *param)
func for case 1f4ba1e5520762c523c6
fs/io_uring.c:__io_file_put_work(struct fixed_file_ref_node *ref_node)
fs/io_uring.c:__io_sqe_files_scm(struct io_ring_ctx *ctx, int nr, int offset)
fs/io_uring.c:__io_sqe_files_unregister(struct io_ring_ctx *ctx)
fs/io_uring.c:__io_sqe_files_update(struct io_ring_ctx *ctx, struct io_uring_files_update *up, unsigned nr_args)
fs/io_uring.c:alloc_fixed_file_ref_node()
file_data()
fs/io_uring.c:io_file_data_ref_zero(struct percpu_ref *ref)
fs/io_uring.c:io_file_put_work(struct work_struct *work)
fs/io_uring.c:io_queue_file_removal(struct fixed_file_data *data, struct file *file)
fs/io_uring.c:io_ring_file_put(struct io_ring_ctx *ctx, struct file *file)
fs/io_uring.c:io_sqe_alloc_file_tables(struct fixed_file_data *file_data, unsigned nr_tables, unsigned nr_files)
fs/io_uring.c:io_sqe_file_register(struct io_ring_ctx *ctx, struct file *file, int index)
fs/io_uring.c:io_sqe_files_register(struct io_ring_ctx *ctx, void __user *arg, unsigned nr_args)
fs/io_uring.c:io_sqe_files_scm(struct io_ring_ctx *ctx)
fs/io_uring.c:io_sqe_files_unregister(struct io_ring_ctx *ctx)
fs/io_uring.c:io_sqe_files_update(struct io_ring_ctx *ctx, void __user *arg, unsigned nr_args)
io_uring()
kernel/locking/lockdep.c:check_chain_key(struct task_struct *curr)
kernel/locking/lockdep.c:check_irq_usage(struct task_struct *curr, struct held_lock *prev, struct held_lock *next)
kernel/locking/lockdep.c:check_noncircular(struct held_lock *src, struct held_lock *target, struct lock_trace **const trace)
kernel/locking/lockdep.c:check_prev_add(struct task_struct *curr, struct held_lock *prev, struct held_lock *next, u16 distance, struct lock_trace **const trace)
kernel/locking/lockdep.c:check_prevs_add(struct task_struct *curr, struct held_lock *next)
kernel/locking/lockdep.c:lock_acquire(struct lockdep_map *lock, unsigned int subclass, int trylock, int read, int check, struct lockdep_map *nest_lock, unsigned long ip)
kernel/locking/lockdep.c:lock_release(struct lockdep_map *lock, unsigned long ip)
kernel/locking/lockdep.c:mark_lock(struct task_struct *curr, struct held_lock *this, enum lock_usage_bit new_bit)
kernel/locking/lockdep.c:mark_lock_irq(struct task_struct *curr, struct held_lock *this, enum lock_usage_bit new_bit)
kernel/locking/lockdep.c:mark_usage(struct task_struct *curr, struct held_lock *hlock, int check)
kernel/locking/lockdep.c:print_circular_bug(struct lock_list *this, struct lock_list *target, struct held_lock *check_src, struct held_lock *check_tgt)
kernel/locking/lockdep.c:print_deadlock_bug(struct task_struct *curr, struct held_lock *prev, struct held_lock *next)
kernel/locking/lockdep.c:print_irq_inversion_bug(struct task_struct *curr, struct lock_list *root, struct lock_list *other, struct held_lock *this, int forwards, const char *irqclass)
kernel/locking/lockdep.c:print_usage_bug(struct task_struct *curr, struct held_lock *this, enum lock_usage_bit prev_bit, enum lock_usage_bit new_bit)
kernel/locking/lockdep.c:validate_chain(struct task_struct *curr, struct held_lock *hlock, int chain_head, u64 chain_key)
IO_URING()
__do_sys_io_uring_register()
__io_uring_register()
__se_sys_io_uring_register()
_raw_spin_lock()
fs/io_uring.c:io_file_data_ref_zero(struct percpu_ref *ref)
fs/io_uring.c:io_sqe_files_register(struct io_ring_ctx *ctx, void __user *arg, unsigned nr_args)
io_uring()
io_uring_register()
fs/io_uring.c:io_uring_setup(u32 entries, struct io_uring_params __user *params)
iterate_cleanup_work()
percpu_ref_put()
include/linux/percpu-refcount.h:percpu_ref_put_many(struct percpu_ref *ref, unsigned long nr)
process_one_work()
spin_lock()
kernel/workqueue.c:worker_thread(void *__worker)
kernel/softirq.c:__irq_exit_rcu(void)
kernel/softirq.c:__local_bh_enable_ip(unsigned long ip, unsigned int cnt)
kernel/softirq.c:do_softirq(void)
kernel/softirq.c:invoke_softirq(void)
kernel/softirq.c:irq_enter_rcu(void)
kernel/softirq.c:ksoftirqd_running(unsigned long pending)
kernel/softirq.c:raise_softirq_irqoff(unsigned int nr)
kernel/softirq.c:wakeup_softirqd(void)
include/linux/percpu-refcount.h:__ref_is_percpu(struct percpu_ref *ref, unsigned long __percpu **percpu_countp)
include/linux/percpu-refcount.h:percpu_ref_get_many(struct percpu_ref *ref, unsigned long nr)
include/linux/percpu-refcount.h:percpu_ref_put_many(struct percpu_ref *ref, unsigned long nr)
include/linux/percpu-refcount.h:percpu_ref_tryget_live(struct percpu_ref *ref)
kernel/workqueue.c:__queue_work(int cpu, struct workqueue_struct *wq, struct work_struct *work)
kernel/workqueue.c:destroy_workqueue(struct workqueue_struct *wq)
kernel/workqueue.c:flush_workqueue(struct workqueue_struct *wq)
kernel/workqueue.c:insert_work(struct pool_workqueue *pwq, struct work_struct *work, struct list_head *head, unsigned int extra_flags)
process_one_work()
kernel/workqueue.c:worker_clr_flags(struct worker *worker, unsigned int flags)
kernel/workqueue.c:worker_set_flags(struct worker *worker, unsigned int flags)
kernel/workqueue.c:worker_thread(void *__worker)
__raw_spin_lock()
_raw_spin_lock()
_raw_spin_lock_irqsave()
_raw_spin_unlock_irqrestore()
spin_lock()
spin_lock_irq()
spin_trylock_irqsave()
spin_unlock_irq()
include/linux/spinlock_api_smp.h:__raw_spin_lock_irq(raw_spinlock_t *lock)
include/linux/spinlock_api_smp.h:__raw_spin_lock_irqsave(raw_spinlock_t *lock)
include/linux/spinlock_api_smp.h:__raw_spin_trylock_bh(raw_spinlock_t *lock)
kernel/rcu/tree.c:__call_rcu_core(struct rcu_data *rdp, struct rcu_head *head, unsigned long flags)
kernel/rcu/tree.c:rcu_core(void)
kernel/rcu/tree.c:rcu_do_batch(struct rcu_data *rdp)
file_data()
fs/io_uring.c:io_file_data_ref_zero(struct percpu_ref *ref)
fs/io_uring.c:io_sqe_files_register(struct io_ring_ctx *ctx, void __user *arg, unsigned nr_args)
io_uring()
include/linux/rcupdate.h:rcu_read_lock(void)
include/linux/rcupdate.h:rcu_read_unlock(void)
func for case 8357fbef0d7bb602de45
drivers/hid/uhid.c:__uhid_report_queue_and_wait(struct uhid_device *uhid, struct uhid_event *ev, __u32 *report_id)
drivers/hid/uhid.c:uhid_char_release(struct inode *inode, struct file *file)
drivers/hid/uhid.c:uhid_char_write(struct file *file, const char __user *buffer, size_t count, loff_t *ppos)
drivers/hid/uhid.c:uhid_dev_create(struct uhid_device *uhid, struct uhid_event *ev)
drivers/hid/uhid.c:uhid_dev_create2(struct uhid_device *uhid, const struct uhid_event *ev)
drivers/hid/uhid.c:uhid_dev_destroy(struct uhid_device *uhid)
drivers/hid/uhid.c:uhid_event_from_user(const char __user *buffer, size_t len, struct uhid_event *event)
drivers/hid/uhid.c:uhid_hid_get_report(struct hid_device *hid, unsigned char rnum, u8 *buf, size_t count, u8 rtype)
drivers/hid/uhid.c:uhid_hid_output_raw(struct hid_device *hid, __u8 *buf, size_t count, unsigned char report_type)
drivers/hid/uhid.c:uhid_hid_raw_request(struct hid_device *hid, unsigned char reportnum, __u8 *buf, size_t len, unsigned char rtype, int reqtype)
drivers/hid/uhid.c:uhid_hid_set_report(struct hid_device *hid, unsigned char rnum, const u8 *buf, size_t count, u8 rtype)
drivers/hid/uhid.c:uhid_hid_start(struct hid_device *hid)
drivers/hid/uhid.c:uhid_queue(struct uhid_device *uhid, struct uhid_event *ev)
drivers/hid/uhid.c:uhid_queue_event(struct uhid_device *uhid, __u32 event)
drivers/hid/uhid.c:uhid_report_wake_up(struct uhid_device *uhid, u32 id, const struct uhid_event *ev)
kernel/sched/wait.c:__wake_up_common(struct wait_queue_head *wq_head, unsigned int mode, int nr_exclusive, int wake_flags, void *key, wait_queue_entry_t *bookmark)
kernel/sched/wait.c:__wake_up_common_lock(struct wait_queue_head *wq_head, unsigned int mode, int nr_exclusive, int wake_flags, void *key)
kernel/sched/wait.c:add_wait_queue(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry)
kernel/sched/wait.c:add_wait_queue_exclusive(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry)
kernel/sched/wait.c:do_wait_intr(wait_queue_head_t *wq, wait_queue_entry_t *wait)
kernel/sched/wait.c:do_wait_intr_irq(wait_queue_head_t *wq, wait_queue_entry_t *wait)
kernel/sched/wait.c:finish_wait(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry)
kernel/sched/wait.c:prepare_to_wait(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry, int state)
kernel/sched/wait.c:prepare_to_wait_event(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry, int state)
kernel/sched/wait.c:prepare_to_wait_exclusive(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry, int state)
kernel/sched/wait.c:wait_woken(struct wait_queue_entry *wq_entry, unsigned mode, long timeout)
kernel/sched/wait.c:woken_wake_function(struct wait_queue_entry *wq_entry, unsigned mode, int sync, void *key)
kernel/locking/lockdep.c:__lock_acquire(struct lockdep_map *lock, unsigned int subclass, int trylock, int read, int check, int hardirqs_off, struct lockdep_map *nest_lock, unsigned long ip, int references, int pin_count)
kernel/locking/lockdep.c:add_chain_cache(struct task_struct *curr, struct held_lock *hlock, u64 chain_key)
kernel/locking/lockdep.c:check_chain_key(struct task_struct *curr)
kernel/locking/lockdep.c:check_deadlock(struct task_struct *curr, struct held_lock *next)
kernel/locking/lockdep.c:check_irq_usage(struct task_struct *curr, struct held_lock *prev, struct held_lock *next)
kernel/locking/lockdep.c:check_noncircular(struct held_lock *src, struct held_lock *target, struct lock_trace **const trace)
kernel/locking/lockdep.c:check_prev_add(struct task_struct *curr, struct held_lock *prev, struct held_lock *next, int distance, struct lock_trace **const trace)
kernel/locking/lockdep.c:check_prevs_add(struct task_struct *curr, struct held_lock *next)
kernel/locking/lockdep.c:check_usage_backwards(struct task_struct *curr, struct held_lock *this, enum lock_usage_bit bit, const char *irqclass)
kernel/locking/lockdep.c:check_usage_forwards(struct task_struct *curr, struct held_lock *this, enum lock_usage_bit bit, const char *irqclass)
kernel/locking/lockdep.c:lock_acquire(struct lockdep_map *lock, unsigned int subclass, int trylock, int read, int check, struct lockdep_map *nest_lock, unsigned long ip)
kernel/locking/lockdep.c:lookup_chain_cache_add(struct task_struct *curr, struct held_lock *hlock, u64 chain_key)
kernel/locking/lockdep.c:mark_usage(struct task_struct *curr, struct held_lock *hlock, int check)
kernel/locking/lockdep.c:register_lock_class()
kernel/locking/lockdep.c:validate_chain(struct task_struct *curr, struct held_lock *hlock, int chain_head, u64 chain_key)
wake_up()
include/linux/spinlock_api_smp.h:__raw_spin_lock_irq(raw_spinlock_t *lock)
include/linux/spinlock_api_smp.h:__raw_spin_lock_irqsave(raw_spinlock_t *lock)
include/linux/spinlock_api_smp.h:__raw_spin_trylock(raw_spinlock_t *lock)
include/linux/spinlock_api_smp.h:__raw_spin_trylock_bh(raw_spinlock_t *lock)
spinlock_api_smp()
_raw_spin_lock_irqsave()
_raw_spin_unlock_irqrestore()
kernel/locking/spinlock.c:in_lock_functions(unsigned long addr)
spin_is_locked()
spin_lock()
spin_lock_irqsave()
spin_trylock_irqsave()
spin_unlock()
spin_unlock_irqrestore()
fs/file_table.c:__alloc_file()
fs/file_table.c:__fput(struct file *file)
fs/file_table.c:alloc_empty_file()
fs/file_table.c:alloc_file()
fs/file_table.c:alloc_file_clone()
fs/file_table.c:alloc_file_pseudo()
fs/file_table.c:file_free_rcu(struct rcu_head *head)
file_table()
fs/file_table.c:fput_many(struct file *file, unsigned int refs)
kernel/exit.c:__exit_signal(struct task_struct *tsk)
kernel/exit.c:__unhash_process(struct task_struct *p, bool group_dead)
kernel/exit.c:do_exit(long code)
kernel/exit.c:do_group_exit(int exit_code)
kernel/exit.c:exit_notify(struct task_struct *tsk, int group_dead)
kernel/exit.c:find_new_reaper()
kernel/exit.c:forget_original_parent(struct task_struct *father, struct list_head *dead)
kernel/exit.c:release_task(struct task_struct *p)
wake_up()
kernel/sched/wait.c:__wake_up_common(struct wait_queue_head *wq_head, unsigned int mode, int nr_exclusive, int wake_flags, void *key, wait_queue_entry_t *bookmark)
task_work()
kernel/task_work.c:task_work_run(void)
drivers/hid/uhid.c:uhid_char_release(struct inode *inode, struct file *file)
drivers/hid/uhid.c:uhid_dev_destroy(struct uhid_device *uhid)
kernel/task_work.c:task_work_add(struct task_struct *task, struct callback_head *work, int notify)
kernel/task_work.c:task_work_run(void)
kernel/sched/wait.c:__wake_up_common(struct wait_queue_head *wq_head, unsigned int mode, int nr_exclusive, int wake_flags, void *key, wait_queue_entry_t *bookmark)
lib/dump_stack.c:dump_stack(void)
lib/dump_stack.c:dump_stack_print_info(const char *log_lvl)
lib/dump_stack.c:dump_stack_set_arch_desc(const char *fmt, ...)
kernel/locking/lockdep.c:register_lock_class()
drivers/hid/uhid.c:uhid_char_release(struct inode *inode, struct file *file)
drivers/hid/uhid.c:uhid_dev_destroy(struct uhid_device *uhid)
func for case 28a246747e0a465127f3
drivers/net/ieee802154/atusb.c:atusb_alloc_urbs(struct atusb *atusb, int n)
drivers/net/ieee802154/atusb.c:atusb_control_msg(struct atusb *atusb, unsigned int pipe, __u8 request, __u8 requesttype, __u16 value, __u16 index, void *data, __u16 size, int timeout)
drivers/net/ieee802154/atusb.c:atusb_disconnect(struct usb_interface *interface)
drivers/net/ieee802154/atusb.c:atusb_in(struct urb *urb)
drivers/net/ieee802154/atusb.c:atusb_in_good(struct urb *urb)
drivers/net/ieee802154/atusb.c:atusb_probe(struct usb_interface *interface, const struct usb_device_id *id)
drivers/net/ieee802154/atusb.c:atusb_read_reg(struct atusb *atusb, u8 reg)
drivers/net/ieee802154/atusb.c:atusb_set_extended_addr(struct atusb *atusb)
drivers/net/ieee802154/atusb.c:atusb_set_hw_addr_filt(struct ieee802154_hw *hw, struct ieee802154_hw_addr_filt *filt, unsigned long changed)
drivers/net/ieee802154/atusb.c:atusb_start(struct ieee802154_hw *hw)
drivers/net/ieee802154/atusb.c:atusb_submit_rx_urb(struct atusb *atusb, struct urb *urb)
drivers/net/ieee802154/atusb.c:atusb_work_urbs(struct work_struct *work)
drivers/net/ieee802154/atusb.c:atusb_write_reg(struct atusb *atusb, u8 reg, u8 value)
drivers/net/ieee802154/atusb.c:atusb_write_subreg(struct atusb *atusb, u8 reg, u8 mask, u8 shift, u8 value)
drivers/net/ieee802154/atusb.c:atusb_xmit(struct ieee802154_hw *hw, struct sk_buff *skb)
drivers/usb/core/urb.c:__usb_unanchor_urb(struct urb *urb, struct usb_anchor *anchor)
drivers/usb/core/urb.c:usb_alloc_urb()
drivers/usb/core/urb.c:usb_anchor_resume_wakeups(struct usb_anchor *anchor)
drivers/usb/core/urb.c:usb_anchor_urb(struct urb *urb, struct usb_anchor *anchor)
drivers/usb/core/urb.c:usb_get_from_anchor()
drivers/usb/core/urb.c:usb_init_urb(struct urb *urb)
drivers/usb/core/urb.c:usb_kill_anchored_urbs(struct usb_anchor *anchor)
drivers/usb/core/urb.c:usb_kill_urb(struct urb *urb)
drivers/usb/core/urb.c:usb_poison_anchored_urbs(struct usb_anchor *anchor)
drivers/usb/core/urb.c:usb_poison_urb(struct urb *urb)
drivers/usb/core/urb.c:usb_scuttle_anchored_urbs(struct usb_anchor *anchor)
drivers/usb/core/urb.c:usb_submit_urb(struct urb *urb, gfp_t mem_flags)
drivers/usb/core/urb.c:usb_unanchor_urb(struct urb *urb)
drivers/usb/core/urb.c:usb_unlink_urb(struct urb *urb)
drivers/usb/core/urb.c:usb_unpoison_anchored_urbs(struct usb_anchor *anchor)
claim_interface()
release_interface()
drivers/usb/core/driver.c:usb_autopm_put_interface_async(struct usb_interface *intf)
drivers/usb/core/driver.c:usb_driver_claim_interface(struct usb_driver *driver, struct usb_interface *iface, void *priv)
drivers/usb/core/driver.c:usb_driver_release_interface(struct usb_driver *driver, struct usb_interface *iface)
drivers/usb/core/driver.c:usb_forced_unbind_intf(struct usb_interface *intf)
drivers/usb/core/driver.c:usb_match_device(struct usb_device *dev, const struct usb_device_id *id)
drivers/usb/core/driver.c:usb_match_one_id(struct usb_interface *interface, const struct usb_device_id *id)
drivers/usb/core/driver.c:usb_probe_device(struct device *dev)
drivers/usb/core/driver.c:usb_probe_interface(struct device *dev)
drivers/usb/core/driver.c:usb_rebind_intf(struct usb_interface *intf)
drivers/usb/core/driver.c:usb_resume_device(struct usb_device *udev, pm_message_t msg)
drivers/usb/core/driver.c:usb_resume_interface(struct usb_device *udev, struct usb_interface *intf, pm_message_t msg, int reset_resume)
drivers/usb/core/driver.c:usb_suspend_device(struct usb_device *udev, pm_message_t msg)
drivers/usb/core/driver.c:usb_suspend_interface(struct usb_device *udev, struct usb_interface *intf, pm_message_t msg)
drivers/usb/core/driver.c:usb_unbind_device(struct device *dev)
drivers/usb/core/driver.c:usb_unbind_interface(struct device *dev)
drivers/usb/core/hub.c:hub_disconnect(struct usb_interface *intf)
drivers/usb/core/hub.c:hub_event(struct work_struct *work)
drivers/usb/core/hub.c:hub_port_connect(struct usb_hub *hub, int port1, u16 portstatus, u16 portchange)
drivers/usb/core/hub.c:hub_port_init(struct usb_hub *hub, struct usb_device *udev, int port1, int retry_counter)
drivers/usb/core/hub.c:hub_port_reset(struct usb_hub *hub, int port1, struct usb_device *udev, unsigned int delay, bool warm)
drivers/usb/core/hub.c:hub_probe(struct usb_interface *intf, const struct usb_device_id *id)
drivers/usb/core/hub.c:usb_disconnect(struct usb_device **pdev)
drivers/usb/core/hub.c:usb_new_device(struct usb_device *udev)
drivers/usb/core/message.c:usb_clear_halt(struct usb_device *dev, int pipe)
drivers/usb/core/message.c:usb_control_msg(struct usb_device *dev, unsigned int pipe, __u8 request, __u8 requesttype, __u16 value, __u16 index, void *data, __u16 size, int timeout)
drivers/usb/core/message.c:usb_disable_device(struct usb_device *dev, int skip_ep0)
drivers/usb/core/message.c:usb_disable_device_endpoints(struct usb_device *dev, int skip_ep0)
drivers/usb/core/message.c:usb_get_descriptor(struct usb_device *dev, unsigned char type, unsigned char index, void *buf, int size)
drivers/usb/core/message.c:usb_internal_control_msg(struct usb_device *usb_dev, unsigned int pipe, struct usb_ctrlrequest *cmd, void *data, int len, int timeout)
drivers/usb/core/message.c:usb_set_configuration(struct usb_device *dev, int configuration)
drivers/usb/core/message.c:usb_start_wait_urb(struct urb *urb, int timeout, int *actual_length)
drivers/base/dd.c:__device_attach(struct device *dev, bool allow_async)
drivers/base/dd.c:__device_attach_driver(struct device_driver *drv, void *_data)
drivers/base/dd.c:__device_release_driver(struct device *dev, struct device *parent)
drivers/base/dd.c:device_driver_attach(struct device_driver *drv, struct device *dev)
drivers/base/dd.c:device_release_driver_internal(struct device *dev, struct device_driver *drv, struct device *parent)
drivers/base/dd.c:driver_bound(struct device *dev)
drivers/base/dd.c:driver_probe_device(struct device_driver *drv, struct device *dev)
drivers/base/dd.c:really_probe(struct device *dev, struct device_driver *drv)
drivers/usb/core/generic.c:usb_choose_configuration(struct usb_device *udev)
drivers/usb/core/generic.c:usb_generic_driver_probe(struct usb_device *udev)
include/linux/slab.h:kmalloc_array()
include/linux/slab.h:kmalloc_index(size_t size)
include/linux/slab.h:kmalloc_node()
func for case f3e749d4c662818ae439
BPF_BTF_LOAD()
kernel/bpf/verifier.c:adjust_btf_func(struct bpf_verifier_env *env)
kernel/bpf/verifier.c:bpf_check(struct bpf_prog **prog, union bpf_attr *attr, bpfptr_t uattr)
kernel/bpf/verifier.c:check_btf_func(struct bpf_verifier_env *env, const union bpf_attr *attr, bpfptr_t uattr)
kernel/bpf/verifier.c:check_btf_info(struct bpf_verifier_env *env, const union bpf_attr *attr, bpfptr_t uattr)
kernel/bpf/verifier.c:check_btf_line(struct bpf_verifier_env *env, const union bpf_attr *attr, bpfptr_t uattr)
kernel/bpf/verifier.c:check_func_call(struct bpf_verifier_env *env, struct bpf_insn *insn, int *insn_idx)
kernel/bpf/verifier.c:check_helper_call(struct bpf_verifier_env *env, struct bpf_insn *insn, int *insn_idx_p)
kernel/bpf/verifier.c:check_helper_mem_access(struct bpf_verifier_env *env, int regno, int access_size, bool zero_size_allowed, struct bpf_call_arg_meta *meta)
kernel/bpf/verifier.c:check_map_access(struct bpf_verifier_env *env, u32 regno, int off, int size, bool zero_size_allowed)
kernel/bpf/verifier.c:check_map_prog_compatibility(struct bpf_verifier_env *env, struct bpf_map *map, struct bpf_prog *prog)
kernel/bpf/verifier.c:check_mem_access(struct bpf_verifier_env *env, int insn_idx, u32 regno, int off, int bpf_size, enum bpf_access_type t, int value_regno, bool strict_alignment_once)
kernel/bpf/verifier.c:check_pseudo_btf_id(struct bpf_verifier_env *env, struct bpf_insn *insn, struct bpf_insn_aux_data *aux)
kernel/bpf/verifier.c:check_ptr_to_btf_access(struct bpf_verifier_env *env, struct bpf_reg_state *regs, int regno, int off, int size, enum bpf_access_type atype, int value_regno)
kernel/bpf/verifier.c:check_stack_access_within_bounds(struct bpf_verifier_env *env, int regno, int off, int access_size, enum stack_access_src src, enum bpf_access_type type)
kernel/bpf/verifier.c:find_btf_percpu_datasec(struct btf *btf)
mm/util.c:kvmalloc_node()
BPF_BTF_LOAD()
_resolve()
kernel/bpf/btf.c:btf_add_type(struct btf_verifier_env *env, struct btf_type *t)
kernel/bpf/btf.c:btf_alloc_id(struct btf *btf)
kernel/bpf/btf.c:btf_array_resolve(struct btf_verifier_env *env, const struct resolve_vertex *v)
btf_check()
kernel/bpf/btf.c:btf_check_all_metas(struct btf_verifier_env *env)
kernel/bpf/btf.c:btf_check_all_types(struct btf_verifier_env *env)
kernel/bpf/btf.c:btf_check_meta(struct btf_verifier_env *env, const struct btf_type *t, u32 meta_left)
kernel/bpf/btf.c:btf_check_sec_info(struct btf_verifier_env *env, u32 btf_data_size)
kernel/bpf/btf.c:btf_free_id(struct btf *btf)
kernel/bpf/btf.c:btf_parse()
kernel/bpf/btf.c:btf_parse_hdr(struct btf_verifier_env *env)
kernel/bpf/btf.c:btf_parse_str_sec(struct btf_verifier_env *env)
kernel/bpf/btf.c:btf_parse_type_sec(struct btf_verifier_env *env)
kernel/bpf/btf.c:btf_ptr_resolve(struct btf_verifier_env *env, const struct resolve_vertex *v)
kernel/bpf/btf.c:btf_resolve(struct btf_verifier_env *env, const struct btf_type *t, u32 type_id)
kernel/bpf/btf.c:btf_struct_resolve(struct btf_verifier_env *env, const struct resolve_vertex *v)
mm/util.c:kvmalloc_node()
mm/util.c:__account_locked_vm(struct mm_struct *mm, unsigned long pages, bool inc, struct task_struct *task, bool bypass_rlim)
mm/util.c:__vm_enough_memory(struct mm_struct *mm, long pages, int cap_sys_admin)
__vmalloc_array()
mm/util.c:account_locked_vm(struct mm_struct *mm, unsigned long pages, bool inc)
mm/util.c:arch_pick_mmap_layout(struct mm_struct *mm, struct rlimit *rlim_stack)
folio_copy()
mm/util.c:kmemdup_nul()
mm/util.c:kvmalloc_node()
mm/util.c:memdup_user()
mm/util.c:memdup_user_nul()
mm/util.c:mmap_base(unsigned long rnd, struct rlimit *rlim_stack)
mm/util.c:strndup_user()
mm/util.c:vm_mmap(struct file *file, unsigned long addr, unsigned long len, unsigned long prot, unsigned long flag, unsigned long offset)
mm/util.c:vm_mmap_pgoff(struct file *file, unsigned long addr, unsigned long len, unsigned long prot, unsigned long flag, unsigned long pgoff)
mm/util.c:vmemdup_user()
kernel/bpf/syscall.c:__sys_bpf(int cmd, bpfptr_t uattr, unsigned int size)
kernel/bpf/syscall.c:bpf_btf_load(const union bpf_attr *attr, bpfptr_t uattr)
bpf_map_create()
kernel/bpf/syscall.c:bpf_prog_attach(const union bpf_attr *attr)
kernel/bpf/syscall.c:bpf_prog_load(union bpf_attr *attr, bpfptr_t uattr)
kernel/bpf/syscall.c:bpf_prog_query(const union bpf_attr *attr, union bpf_attr __user *uattr)
kernel/bpf/syscall.c:bpf_prog_test_run(const union bpf_attr *attr, union bpf_attr __user *uattr)
kernel/bpf/syscall.c:bpf_raw_tracepoint_open(const union bpf_attr *attr)
mm/util.c:kvmalloc_node()
include/linux/mm.h:__mm_zero_struct_page(struct page *page)
folio_maybe_dma_pinned()
folio_set_compound_order()
include/linux/mm.h:free_initmem_default(int poison)
mm/util.c:kvmalloc_node()
include/linux/mm.h:page_is_pfmemalloc(const struct page *page)
put_devmap_managed_page_refs()
include/linux/mm.h:vma_init(struct vm_area_struct *vma, struct mm_struct *mm)
include/linux/mm.h:vmf_insert_page(struct vm_area_struct *vma, unsigned long addr, struct page *page)
BPF_BTF_LOAD()
BPF_PROG_RAW_TRACEPOINT_LOAD()
kernel/bpf/core.c:bpf_jit_add_poke_descriptor(struct bpf_prog *prog, struct bpf_jit_poke_descriptor *poke)
bpf_jit_binary()
kernel/bpf/core.c:bpf_jit_binary_alloc()
bpf_jit_binary_pack_alloc()
kernel/bpf/core.c:bpf_prog_alloc()
kernel/bpf/core.c:bpf_prog_alloc_no_stats()
kernel/bpf/core.c:bpf_prog_clone_create()
bpf_prog_pack_alloc()
kernel/bpf/core.c:bpf_prog_realloc()
mm/util.c:kvmalloc_node()
mm/page_alloc.c:__alloc_pages()
mm/page_alloc.c:get_page_from_freelist()
mm/util.c:kvmalloc_node()
func for case deb631beeb93bdb2df4c
fs/ntfs3/file.c:ntfs3_setattr(struct user_namespace *mnt_userns, struct dentry *dentry, struct iattr *attr)
fs/ntfs3/file.c:ntfs_compress_write(struct kiocb *iocb, struct iov_iter *from)
fs/ntfs3/file.c:ntfs_extend(struct inode *inode, loff_t pos, size_t count, struct file *file)
fs/ntfs3/file.c:ntfs_extend_initialized_size(struct file *file, struct ntfs_inode *ni, const loff_t valid, const loff_t new_valid)
fs/ntfs3/file.c:ntfs_fallocate(struct file *file, int mode, loff_t vbo, loff_t len)
fs/ntfs3/file.c:ntfs_file_mmap(struct file *file, struct vm_area_struct *vma)
fs/ntfs3/file.c:ntfs_file_read_iter(struct kiocb *iocb, struct iov_iter *iter)
fs/ntfs3/file.c:ntfs_file_release(struct inode *inode, struct file *file)
fs/ntfs3/file.c:ntfs_file_write_iter(struct kiocb *iocb, struct iov_iter *from)
fs/ntfs3/file.c:ntfs_get_frame_pages(struct address_space *mapping, pgoff_t index, struct page **pages, u32 pages_per_frame, bool *frame_uptodate)
fs/ntfs3/file.c:ntfs_ioctl_fitrim(struct ntfs_sb_info *sbi, unsigned long arg)
fs/ntfs3/file.c:ntfs_sparse_cluster(struct inode *inode, struct page *page0, CLST vcn, CLST len)
fs/ntfs3/file.c:ntfs_truncate(struct inode *inode, loff_t new_size)
fs/ntfs3/file.c:ntfs_zero_range(struct inode *inode, u64 vbo, u64 vbo_to)
fs/ntfs3/bitmap.c:rb_insert_count(struct rb_root *root, struct e_node *e)
fs/ntfs3/bitmap.c:rb_insert_start(struct rb_root *root, struct e_node *e)
fs/ntfs3/bitmap.c:wnd_add_free_ext(struct wnd_bitmap *wnd, size_t bit, size_t len, bool build)
fs/ntfs3/bitmap.c:wnd_extend(struct wnd_bitmap *wnd, size_t new_bits)
fs/ntfs3/bitmap.c:wnd_find(struct wnd_bitmap *wnd, size_t to_alloc, size_t hint, size_t flags, size_t *allocated)
fs/ntfs3/bitmap.c:wnd_init(struct wnd_bitmap *wnd, struct super_block *sb, size_t nbits)
fs/ntfs3/bitmap.c:wnd_is_free(struct wnd_bitmap *wnd, size_t bit, size_t bits)
fs/ntfs3/bitmap.c:wnd_is_free_hlp(struct wnd_bitmap *wnd, size_t bit, size_t bits)
fs/ntfs3/bitmap.c:wnd_is_used(struct wnd_bitmap *wnd, size_t bit, size_t bits)
fs/ntfs3/bitmap.c:wnd_map()
fs/ntfs3/bitmap.c:wnd_remove_free_ext(struct wnd_bitmap *wnd, size_t bit, size_t len)
fs/ntfs3/bitmap.c:wnd_rescan(struct wnd_bitmap *wnd)
fs/ntfs3/bitmap.c:wnd_scan(const ulong *buf, size_t wbit, u32 wpos, u32 wend, size_t to_alloc, size_t *prev_tail, size_t *b_pos, size_t *b_len)
fs/ntfs3/bitmap.c:wnd_set_free(struct wnd_bitmap *wnd, size_t bit, size_t bits)
fs/ntfs3/bitmap.c:wnd_set_used(struct wnd_bitmap *wnd, size_t bit, size_t bits)
fs/ntfs3/attrib.c:attr_allocate_clusters(struct ntfs_sb_info *sbi, struct runs_tree *run, CLST vcn, CLST lcn, CLST len, CLST *pre_alloc, enum ALLOCATE_OPT opt, CLST *alen, const size_t fr, CLST *new_lcn)
fs/ntfs3/attrib.c:attr_data_get_block(struct ntfs_inode *ni, CLST vcn, CLST clen, CLST *lcn, CLST *len, bool *new)
fs/ntfs3/attrib.c:attr_insert_range(struct ntfs_inode *ni, u64 vbo, u64 bytes)
fs/ntfs3/attrib.c:attr_load_runs_vcn(struct ntfs_inode *ni, enum ATTR_TYPE type, const __le16 *name, u8 name_len, struct runs_tree *run, CLST vcn)
fs/ntfs3/attrib.c:attr_make_nonresident(struct ntfs_inode *ni, struct ATTRIB *attr, struct ATTR_LIST_ENTRY *le, struct mft_inode *mi, u64 new_size, struct runs_tree *run, struct ATTRIB **ins_attr, struct page *page)
fs/ntfs3/attrib.c:attr_punch_hole(struct ntfs_inode *ni, u64 vbo, u64 bytes, u32 *frame_size)
fs/ntfs3/attrib.c:attr_set_size(struct ntfs_inode *ni, enum ATTR_TYPE type, const __le16 *name, u8 name_len, struct runs_tree *run, u64 new_size, const u64 *new_valid, bool keep_prealloc, struct ATTRIB **ret)
fs/ntfs3/attrib.c:attr_set_size_res(struct ntfs_inode *ni, struct ATTRIB *attr, struct ATTR_LIST_ENTRY *le, struct mft_inode *mi, u64 new_size, struct runs_tree *run, struct ATTRIB **ins_attr)
fs/ntfs3/inode.c:ntfs_create_inode()
fs/ntfs3/inode.c:ntfs_direct_IO(struct kiocb *iocb, struct iov_iter *iter)
fs/ntfs3/file.c:ntfs_fallocate(struct file *file, int mode, loff_t vbo, loff_t len)
fs/ntfs3/inode.c:ntfs_get_block_vbo(struct inode *inode, u64 vbo, struct buffer_head *bh, int create, enum get_block_ctx ctx)
fs/ntfs3/inode.c:ntfs_iget5()
fs/ntfs3/inode.c:ntfs_read_mft()
fs/ntfs3/inode.c:ntfs_set_size(struct inode *inode, u64 new_size)
fs/ntfs3/inode.c:ntfs_write_begin(struct file *file, struct address_space *mapping, loff_t pos, u32 len, struct page **pagep, void **fsdata)
fs/ntfs3/inode.c:ntfs_write_end(struct file *file, struct address_space *mapping, loff_t pos, u32 len, u32 copied, struct page *page, void *fsdata)
fs/ntfs3/super.c:ntfs_fill_super(struct super_block *sb, struct fs_context *fc)
fs/ntfs3/super.c:ntfs_init_from_boot(struct super_block *sb, u32 sector_size, u64 dev_size)
fs/ntfs3/super.c:ntfs_put_super(struct super_block *sb)
fs/open.c:do_sys_ftruncate(unsigned int fd, loff_t length, int small)
fs/open.c:do_truncate(struct user_namespace *mnt_userns, struct dentry *dentry, loff_t length, unsigned int time_attrs, struct file *filp)
fs/open.c:vfs_fallocate(struct file *file, int mode, loff_t offset, loff_t len)
fs/read_write.c:do_sendfile(int out_fd, int in_fd, loff_t *ppos, size_t count, loff_t max)
fs/read_write.c:generic_copy_file_checks(struct file *file_in, loff_t pos_in, struct file *file_out, loff_t pos_out, size_t *req_count, unsigned int flags)
fs/read_write.c:vfs_copy_file_range(struct file *file_in, loff_t pos_in, struct file *file_out, loff_t pos_out, size_t len, unsigned int flags)
func for case 28207acc70bbf3d85b74
fs/ntfs3/record.c:mi_enum_attr()
fs/ntfs3/record.c:mi_find_attr()
fs/ntfs3/record.c:mi_format_new(struct mft_inode *mi, struct ntfs_sb_info *sbi, CLST rno, __le16 flags, bool is_mft)
fs/ntfs3/record.c:mi_get(struct ntfs_sb_info *sbi, CLST rno, struct mft_inode **mi)
fs/ntfs3/record.c:mi_insert_attr()
fs/ntfs3/record.c:mi_new_attt_id(struct mft_inode *mi)
fs/ntfs3/record.c:mi_pack_runs(struct mft_inode *mi, struct ATTRIB *attr, struct runs_tree *run, CLST len)
fs/ntfs3/record.c:mi_read(struct mft_inode *mi, bool is_mft)
fs/ntfs3/record.c:mi_remove_attr(struct ntfs_inode *ni, struct mft_inode *mi, struct ATTRIB *attr)
fs/ntfs3/record.c:mi_resize_attr(struct mft_inode *mi, struct ATTRIB *attr, int bytes)
fs/ntfs3/record.c:mi_enum_attr()
fs/ntfs3/frecord.c:ni_clear(struct ntfs_inode *ni)
fs/ntfs3/frecord.c:ni_create_attr_list(struct ntfs_inode *ni)
fs/ntfs3/frecord.c:ni_delete_all(struct ntfs_inode *ni)
fs/ntfs3/frecord.c:ni_enum_attr_ex()
fs/ntfs3/frecord.c:ni_find_attr()
fs/ntfs3/frecord.c:ni_ins_attr_ext(struct ntfs_inode *ni, struct ATTR_LIST_ENTRY *le, enum ATTR_TYPE type, const __le16 *name, u8 name_len, u32 asize, CLST svcn, u16 name_off, bool force_ext, struct ATTRIB **ins_attr, struct mft_inode **ins_mi, struct ATTR_LIST_ENTRY **ins_le)
fs/ntfs3/frecord.c:ni_insert_attr(struct ntfs_inode *ni, enum ATTR_TYPE type, const __le16 *name, u8 name_len, u32 asize, u16 name_off, CLST svcn, struct ATTRIB **ins_attr, struct mft_inode **ins_mi, struct ATTR_LIST_ENTRY **ins_le)
fs/ntfs3/frecord.c:ni_insert_nonresident(struct ntfs_inode *ni, enum ATTR_TYPE type, const __le16 *name, u8 name_len, const struct runs_tree *run, CLST svcn, CLST len, __le16 flags, struct ATTRIB **new_attr, struct mft_inode **mi, struct ATTR_LIST_ENTRY **le)
fs/ntfs3/frecord.c:ni_insert_resident(struct ntfs_inode *ni, u32 data_size, enum ATTR_TYPE type, const __le16 *name, u8 name_len, struct ATTRIB **new_attr, struct mft_inode **mi, struct ATTR_LIST_ENTRY **le)
fs/ntfs3/frecord.c:ni_load_attr()
fs/ntfs3/frecord.c:ni_new_attr_flags(struct ntfs_inode *ni, enum FILE_ATTRIBUTE new_fa)
fs/ntfs3/frecord.c:ni_parse_reparse(struct ntfs_inode *ni, struct ATTRIB *attr, struct REPARSE_DATA_BUFFER *buffer)
fs/ntfs3/frecord.c:ni_read_frame(struct ntfs_inode *ni, u64 frame_vbo, struct page **pages, u32 pages_per_frame)
fs/ntfs3/frecord.c:ni_remove_attr(struct ntfs_inode *ni, enum ATTR_TYPE type, const __le16 *name, size_t name_len, bool base_only, const __le16 *id)
fs/ntfs3/frecord.c:ni_repack(struct ntfs_inode *ni)
fs/ntfs3/frecord.c:ni_try_remove_attr_list(struct ntfs_inode *ni)
fs/ntfs3/frecord.c:ni_write_frame(struct ntfs_inode *ni, struct page **pages, u32 pages_per_frame)
direct_IO()
fs/ntfs3/inode.c:inode_write_data(struct inode *inode, const void *data, size_t bytes)
fs/ntfs3/record.c:mi_enum_attr()
fs/ntfs3/inode.c:ntfs_create_inode()
fs/ntfs3/inode.c:ntfs_create_reparse_buffer()
fs/ntfs3/inode.c:ntfs_direct_IO(struct kiocb *iocb, struct iov_iter *iter)
fs/ntfs3/inode.c:ntfs_flush_inodes(struct super_block *sb, struct inode *i1, struct inode *i2)
fs/ntfs3/inode.c:ntfs_get_block_vbo(struct inode *inode, u64 vbo, struct buffer_head *bh, int create, enum get_block_ctx ctx)
fs/ntfs3/inode.c:ntfs_iget5()
fs/ntfs3/inode.c:ntfs_read_folio(struct file *file, struct folio *folio)
fs/ntfs3/inode.c:ntfs_read_mft()
fs/ntfs3/inode.c:ntfs_readahead(struct readahead_control *rac)
fs/ntfs3/inode.c:ntfs_set_size(struct inode *inode, u64 new_size)
fs/ntfs3/inode.c:ntfs_unlink_inode(struct inode *dir, const struct dentry *dentry)
fs/ntfs3/inode.c:ntfs_write_begin(struct file *file, struct address_space *mapping, loff_t pos, u32 len, struct page **pagep, void **fsdata)
fs/ntfs3/inode.c:ntfs_write_end(struct file *file, struct address_space *mapping, loff_t pos, u32 len, u32 copied, struct page *page, void *fsdata)
fs/ntfs3/inode.c:ntfs_writepage(struct page *page, struct writeback_control *wbc)
fs/ntfs3/super.c:ntfs_fill_super(struct super_block *sb, struct fs_context *fc)
fs/ntfs3/super.c:ntfs_fs_parse_param(struct fs_context *fc, struct fs_parameter *param)
fs/ntfs3/super.c:ntfs_fs_reconfigure(struct fs_context *fc)
fs/ntfs3/super.c:ntfs_init_from_boot(struct super_block *sb, u32 sector_size, u64 dev_size)
fs/ntfs3/super.c:ntfs_init_fs_context(struct fs_context *fc)
fs/ntfs3/super.c:ntfs_put_super(struct super_block *sb)
fs/ntfs3/super.c:ntfs_show_options(struct seq_file *m, struct dentry *root)
fs/ntfs3/super.c:put_ntfs(struct ntfs_sb_info *sbi)
fs/namespace.c:attach_recursive_mnt(struct mount *source_mnt, struct mount *dest_mnt, struct mountpoint *dest_mp, bool moving)
fs/namespace.c:do_add_mount(struct mount *newmnt, struct mountpoint *mp, const struct path *path, int mnt_flags)
fs/namespace.c:do_mount(const char *dev_name, const char __user *dir_name, const char *type_page, unsigned long flags, void *data_page)
fs/namespace.c:do_new_mount(struct path *path, const char *fstype, int sb_flags, int mnt_flags, const char *name, void *data)
fs/namespace.c:graft_tree(struct mount *mnt, struct mount *p, struct mountpoint *mp)
fs/namespace.c:mount_setattr_prepare(struct mount_kattr *kattr, struct mount *mnt)
fs/namespace.c:path_mount(const char *dev_name, struct path *path, const char *type_page, unsigned long flags, void *data_page)
fs/namespace.c:vfs_kern_mount()
fs/super.c:alloc_super()
fs/super.c:deactivate_locked_super(struct super_block *s))
fs/super.c:generic_shutdown_super(struct super_block *sb))
fs/super.c:get_tree_bdev(struct fs_context *fc, int (*fill_super)(struct super_block *, struct fs_context *)))
fs/super.c:mount_bdev()
fs/super.c:sget_fc()
fs/super.c:super_setup_bdi_name(struct super_block *sb, char *fmt, ...))
fs/super.c:vfs_get_tree(struct fs_context *fc))
func for case 298c5d8fb4a128bc27b0
fs/ext4/xattr.c:ext4_expand_extra_isize_ea(struct inode *inode, int new_extra_isize, struct ext4_inode *raw_inode, handle_t *handle)
fs/ext4/xattr.c:ext4_xattr_block_set(handle_t *handle, struct inode *inode, struct ext4_xattr_info *i, struct ext4_xattr_block_find *bs)
fs/ext4/xattr.c:ext4_xattr_free_space(struct ext4_xattr_entry *last, size_t *min_offs, void *base, int *total)
fs/ext4/xattr.c:ext4_xattr_ibody_set(handle_t *handle, struct inode *inode, struct ext4_xattr_info *i, struct ext4_xattr_ibody_find *is)
fs/ext4/xattr.c:ext4_xattr_inode_dec_ref_all(handle_t *handle, struct inode *parent, struct buffer_head *bh, struct ext4_xattr_entry *first, bool block_csum, struct ext4_xattr_inode_array **ea_inode_array, int extra_credits, bool skip_quota)
fs/ext4/xattr.c:ext4_xattr_inode_iget(struct inode *parent, unsigned long ea_ino, u32 ea_inode_hash, struct inode **ea_inode)
fs/ext4/xattr.c:ext4_xattr_inode_inc_ref_all(handle_t *handle, struct inode *parent, struct ext4_xattr_entry *first)
fs/ext4/xattr.c:ext4_xattr_inode_lookup_create(handle_t *handle, struct inode *inode, const void *value, size_t value_len, struct inode **ret_inode)
fs/ext4/xattr.c:ext4_xattr_inode_update_ref(handle_t *handle, struct inode *ea_inode, int ref_change)
fs/ext4/xattr.c:ext4_xattr_inode_write(handle_t *handle, struct inode *ea_inode, const void *buf, int bufsize)
fs/ext4/xattr.c:ext4_xattr_make_inode_space(handle_t *handle, struct inode *inode, struct ext4_inode *raw_inode, int isize_diff, size_t ifree, size_t bfree, int *total_ino)
fs/ext4/xattr.c:ext4_xattr_move_to_block(handle_t *handle, struct inode *inode, struct ext4_inode *raw_inode, struct ext4_xattr_entry *entry)
fs/ext4/xattr.c:ext4_xattr_release_block(handle_t *handle, struct inode *inode, struct buffer_head *bh, struct ext4_xattr_inode_array **ea_inode_array, int extra_credits)
fs/ext4/xattr.c:ext4_xattr_set_entry(struct ext4_xattr_info *i, struct ext4_xattr_search *s, handle_t *handle, struct inode *inode, bool is_block)
fs/ext4/xattr.c:ext4_xattr_set_handle(handle_t *handle, struct inode *inode, int name_index, const char *name, const void *value, size_t value_len, int flags)
fs/ext4/inode.c:__ext4_expand_extra_isize(struct inode *inode, unsigned int new_extra_isize, struct ext4_iloc *iloc, handle_t *handle, int *no_expand)
fs/ext4/inode.c:__ext4_mark_inode_dirty(handle_t *handle, struct inode *inode, const char *func, unsigned int line)
fs/ext4/inode.c:ext4_expand_extra_isize(struct inode *inode, unsigned int new_extra_isize, struct ext4_iloc *iloc)
fs/ext4/inode.c:ext4_mark_iloc_dirty(handle_t *handle, struct inode *inode, struct ext4_iloc *iloc)
fs/ext4/inode.c:ext4_reserve_inode_write(handle_t *handle, struct inode *inode, struct ext4_iloc *iloc)
fs/ext4/inode.c:ext4_setattr(struct mnt_idmap *idmap, struct dentry *dentry, struct iattr *attr)
fs/ext4/inode.c:ext4_try_to_expand_extra_isize(struct inode *inode, unsigned int new_extra_isize, struct ext4_iloc iloc, handle_t *handle)
fs/ext4/ext4.h:ext4_update_i_disksize(struct inode *inode, loff_t newsize)
fs/ext4/xattr.c:ext4_xattr_inode_get(struct inode *inode, struct ext4_xattr_entry *entry, void *buffer, size_t size)
fs/ext4/xattr.c:ext4_xattr_inode_iget(struct inode *parent, unsigned long ea_ino, u32 ea_inode_hash, struct inode **ea_inode)
fs/ext4/xattr.c:ext4_xattr_inode_lookup_create(handle_t *handle, struct inode *inode, const void *value, size_t value_len, struct inode **ret_inode)
fs/ext4/xattr.c:ext4_xattr_inode_write(handle_t *handle, struct inode *ea_inode, const void *buf, int bufsize)
fs/ext4/xattr.c:ext4_xattr_make_inode_space(handle_t *handle, struct inode *inode, struct ext4_inode *raw_inode, int isize_diff, size_t ifree, size_t bfree, int *total_ino)
fs/ext4/xattr.c:ext4_xattr_move_to_block(handle_t *handle, struct inode *inode, struct ext4_inode *raw_inode, struct ext4_xattr_entry *entry)
fs/ext4/xattr.c:ext4_xattr_set_entry(struct ext4_xattr_info *i, struct ext4_xattr_search *s, handle_t *handle, struct inode *inode, bool is_block)
i_data_sem()
i_rwsem()
fs/ext4/super.c:__ext4_fill_super(struct fs_context *fc, struct super_block *sb)
fs/ext4/super.c:ext4_alloc_flex_bg_array(struct super_block *sb, ext4_group_t ngroup)
fs/ext4/super.c:ext4_check_descriptors(struct super_block *sb, ext4_fsblk_t sb_block, ext4_group_t *first_not_zeroed)
fs/ext4/super.c:ext4_check_feature_compatibility(struct super_block *sb, struct ext4_super_block *es, int silent)
fs/ext4/super.c:ext4_commit_super(struct super_block *sb)
fs/ext4/super.c:ext4_fast_commit_init(struct super_block *sb)
fs/ext4/super.c:ext4_fill_flex_info(struct super_block *sb)
fs/ext4/super.c:ext4_fill_super(struct super_block *sb, struct fs_context *fc)
fs/ext4/super.c:ext4_group_desc_csum(struct super_block *sb, __u32 block_group, struct ext4_group_desc *gdp)
fs/ext4/super.c:ext4_handle_error(struct super_block *sb, bool force_ro, int error, __u32 ino, __u64 block, const char *func, unsigned int line)
fs/ext4/super.c:ext4_init_metadata_csum(struct super_block *sb, struct ext4_super_block *es)
fs/ext4/super.c:ext4_inode_info_init(struct super_block *sb, struct ext4_super_block *es)
fs/ext4/super.c:ext4_load_and_init_journal(struct super_block *sb, struct ext4_super_block *es, struct ext4_fs_context *ctx)
fs/ext4/super.c:ext4_setup_super(struct super_block *sb, struct ext4_super_block *es, int read_only)
fs/ext4/super.c:ext4_update_super(struct super_block *sb)
fs/ext4/ext4.h:ext4_chksum(struct ext4_sb_info *sbi, u32 crc, const void *address, unsigned int length)
fs/ext4/ext4.h:ext4_dir_rec_len(__u8 name_len, const struct inode *dir)
fs/ext4/ext4.h:ext4_fname_setup_filename(struct inode *dir, const struct qstr *iname, int lookup, struct ext4_filename *fname)
fs/ext4/ext4.h:ext4_has_metadata_csum(struct super_block *sb)
fs/ext4/ext4.h:ext4_isize(struct super_block *sb, struct ext4_inode *raw_inode)
fs/ext4/ext4.h:ext4_update_dx_flag(struct inode *inode)
fs/ext4/ext4.h:ext4_update_i_disksize(struct inode *inode, loff_t newsize)
fs/ext4/ext4.h:ext4_update_inode_size(struct inode *inode, loff_t newsize)
fs/xattr.c:__vfs_getxattr(struct dentry *dentry, struct inode *inode, const char *name, void *value, size_t size)
fs/xattr.c:__vfs_setxattr(struct mnt_idmap *idmap, struct dentry *dentry, struct inode *inode, const char *name, const void *value, size_t size, int flags)
fs/xattr.c:__vfs_setxattr_locked(struct mnt_idmap *idmap, struct dentry *dentry, const char *name, const void *value, size_t size, int flags, struct inode **delegated_inode)
fs/xattr.c:__vfs_setxattr_noperm(struct mnt_idmap *idmap, struct dentry *dentry, const char *name, const void *value, size_t size, int flags)
i_data_sem()
i_rwsem()
fs/xattr.c:path_setxattr(const char __user *pathname, const char __user *name, const void __user *value, size_t size, int flags, unsigned int lookup_flags)
simple_xattr_()
fs/xattr.c:vfs_getxattr(struct mnt_idmap *idmap, struct dentry *dentry, const char *name, void *value, size_t size)
fs/xattr.c:vfs_setxattr(struct mnt_idmap *idmap, struct dentry *dentry, const char *name, const void *value, size_t size, int flags)
fs/xattr.c:xattr_permission(struct mnt_idmap *idmap, struct inode *inode, const char *name, int mask)
fs/attr.c:chgrp_ok(struct mnt_idmap *idmap, const struct inode *inode, vfsgid_t ia_vfsgid)
fs/attr.c:chown_ok(struct mnt_idmap *idmap, const struct inode *inode, vfsuid_t ia_vfsuid)
fs/attr.c:inode_newsize_ok(const struct inode *inode, loff_t offset)
fs/attr.c:may_setattr(struct mnt_idmap *idmap, struct inode *inode, unsigned int ia_valid)
fs/attr.c:notify_change(struct mnt_idmap *idmap, struct dentry *dentry, struct iattr *attr, struct inode **delegated_inode)
fs/attr.c:setattr_copy(struct mnt_idmap *idmap, struct inode *inode, const struct iattr *attr)
fs/attr.c:setattr_prepare(struct mnt_idmap *idmap, struct dentry *dentry, struct iattr *attr)
fs/open.c:dentry_open()
fs/open.c:do_dentry_open(struct file *f, struct inode *inode, int (*open)(struct inode *, struct file *))
fs/open.c:do_sys_openat2(int dfd, const char __user *filename, struct open_how *how)
fs/open.c:do_sys_truncate(const char __user *pathname, loff_t length)
fs/open.c:do_truncate(struct mnt_idmap *idmap, struct dentry *dentry, loff_t length, unsigned int time_attrs, struct file *filp)
fs/open.c:filp_open()
fs/open.c:finish_open(struct file *file, struct dentry *dentry, int (*open)(struct inode *, struct file *))
fs/open.c:vfs_truncate(const struct path *path, loff_t length)
fs/namei.c:do_open(struct nameidata *nd, struct file *file, const struct open_flags *op)
fs/namei.c:handle_truncate(struct mnt_idmap *idmap, struct file *filp)
fs/namei.c:path_openat()
kernel/locking/lockdep.c:check_noncircular(struct held_lock *src, struct held_lock *target, struct lock_trace **const trace)
kernel/locking/lockdep.c:check_prev_add(struct task_struct *curr, struct held_lock *prev, struct held_lock *next, u16 distance, struct lock_trace **const trace)
kernel/locking/lockdep.c:check_prevs_add(struct task_struct *curr, struct held_lock *next)
fs/ext4/inode.c:ext4_setattr(struct mnt_idmap *idmap, struct dentry *dentry, struct iattr *attr)
fs/ext4/xattr.c:ext4_xattr_inode_iget(struct inode *parent, unsigned long ea_ino, u32 ea_inode_hash, struct inode **ea_inode)
func for case e5fd3e65515b48c02a30
FBIOPUT_VSCREENINFO()
drivers/video/fbdev/core/sysfillrect.c:bitfill_aligned(struct fb_info *p, unsigned long *dst, int dst_idx, unsigned long pat, unsigned n, int bits)
drivers/video/fbdev/core/sysfillrect.c:bitfill_aligned_rev(struct fb_info *p, unsigned long *dst, int dst_idx, unsigned long pat, unsigned n, int bits)
drivers/video/fbdev/core/sysfillrect.c:bitfill_unaligned(struct fb_info *p, unsigned long *dst, int dst_idx, unsigned long pat, int left, int right, unsigned n, int bits)
drivers/video/fbdev/core/sysfillrect.c:bitfill_unaligned_rev(struct fb_info *p, unsigned long *dst, int dst_idx, unsigned long pat, int left, int right, unsigned n, int bits)
drivers/video/fbdev/core/sysfillrect.c:sys_fillrect(struct fb_info *p, const struct fb_fillrect *rect)
drivers/video/fbdev/core/fbcon.c:fbcon_bmove(struct vc_data *vc, int sy, int sx, int dy, int dx, int height, int width)
drivers/video/fbdev/core/fbcon.c:fbcon_bmove_rec(struct vc_data *vc, struct fbcon_display *p, int sy, int sx, int dy, int dx, int height, int width, u_int y_break)
drivers/video/fbdev/core/fbcon.c:fbcon_clear(struct vc_data *vc, int sy, int sx, int height, int width)
drivers/video/fbdev/core/fbcon.c:fbcon_clear_margins(struct vc_data *vc, int bottom_only)
drivers/video/fbdev/core/fbcon.c:fbcon_copy_font(struct vc_data *vc, int con)
drivers/video/fbdev/core/fbcon.c:fbcon_do_set_font(struct vc_data *vc, int w, int h, const u8 * data, int userfont)
drivers/video/fbdev/core/fbcon.c:fbcon_modechanged(struct fb_info *info)
drivers/video/fbdev/core/fbcon.c:fbcon_putcs(struct vc_data *vc, const unsigned short *s, int count, int ypos, int xpos)
drivers/video/fbdev/core/fbcon.c:fbcon_redraw(struct vc_data *vc, struct fbcon_display *p, int line, int count, int offset)
drivers/video/fbdev/core/fbcon.c:fbcon_redraw_blit(struct vc_data *vc, struct fb_info *info, struct fbcon_display *p, int line, int count, int ycount)
drivers/video/fbdev/core/fbcon.c:fbcon_redraw_move(struct vc_data *vc, struct fbcon_display *p, int line, int count, int dy)
drivers/video/fbdev/core/fbcon.c:fbcon_scroll(struct vc_data *vc, unsigned int t, unsigned int b, enum con_scroll dir, unsigned int count)
drivers/video/fbdev/core/fbcon.c:fbcon_set_disp(struct fb_info *info, struct fb_var_screeninfo *var, int unit)
drivers/video/fbdev/core/fbcon.c:fbcon_set_font(struct vc_data *vc, struct console_font *font, unsigned int flags)
drivers/video/fbdev/core/fbcon.c:fbcon_switch(struct vc_data *vc)
drivers/video/fbdev/core/bitblit.c:bit_bmove(struct vc_data *vc, struct fb_info *info, int sy, int sx, int dy, int dx, int height, int width)
drivers/video/fbdev/core/bitblit.c:bit_clear(struct vc_data *vc, struct fb_info *info, int sy, int sx, int height, int width)
drivers/video/fbdev/core/bitblit.c:bit_clear_margins(struct vc_data *vc, struct fb_info *info, int color, int bottom_only)
drivers/video/fbdev/core/bitblit.c:bit_cursor(struct vc_data *vc, struct fb_info *info, int mode, int softback_lines, int fg, int bg)
drivers/video/fbdev/core/bitblit.c:bit_putcs(struct vc_data *vc, struct fb_info *info, const unsigned short *s, int count, int yy, int xx, int fg, int bg)
drivers/video/fbdev/core/bitblit.c:bit_putcs_aligned(struct vc_data *vc, struct fb_info *info, const u16 *s, u32 attr, u32 cnt, u32 d_pitch, u32 s_pitch, u32 cellsize, struct fb_image *image, u8 *buf, u8 *dst)
drivers/video/fbdev/core/bitblit.c:bit_putcs_unaligned(struct vc_data *vc, struct fb_info *info, const u16 *s, u32 attr, u32 cnt, u32 d_pitch, u32 s_pitch, u32 cellsize, struct fb_image *image, u8 *buf, u8 *dst)
drivers/video/fbdev/core/bitblit.c:update_attr(u8 *dst, u8 *src, int attribute, struct vc_data *vc)
FBIOPUT_VSCREENINFO()
drivers/video/fbdev/core/fbmem.c:do_fb_ioctl(struct fb_info *info, unsigned int cmd, unsigned long arg)
drivers/video/fbdev/core/fbmem.c:fb_check_caps(struct fb_info *info, struct fb_var_screeninfo *var, u32 activate)
drivers/video/fbdev/core/fbmem.c:fb_check_foreignness(struct fb_info *fi)
drivers/video/fbdev/core/fbmem.c:fb_compat_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
drivers/video/fbdev/core/fbmem.c:fb_getput_cmap(struct fb_info *info, unsigned int cmd, unsigned long arg)
drivers/video/fbdev/core/fbmem.c:fb_mmap(struct file *file, struct vm_area_struct * vma)
drivers/video/fbdev/core/fbmem.c:fb_pan_display(struct fb_info *info, struct fb_var_screeninfo *var)
drivers/video/fbdev/core/fbmem.c:fb_set_var(struct fb_info *info, struct fb_var_screeninfo *var)
drivers/gpu/drm/drm_fb_helper.c:drm_fb_helper_check_var(struct fb_var_screeninfo *var, struct fb_info *info)
drivers/gpu/drm/drm_fb_helper.c:drm_fb_helper_fill_fix(struct fb_info *info, uint32_t pitch, uint32_t depth)
drivers/gpu/drm/drm_fb_helper.c:drm_fb_helper_fill_info(struct fb_info *info, struct drm_fb_helper *fb_helper, struct drm_fb_helper_surface_size *sizes)
drivers/gpu/drm/drm_fb_helper.c:drm_fb_helper_fill_var(struct fb_info *info, struct drm_fb_helper *fb_helper, uint32_t fb_width, uint32_t fb_height)
drivers/gpu/drm/drm_fb_helper.c:drm_fb_helper_ioctl(struct fb_info *info, unsigned int cmd, unsigned long arg)
drivers/gpu/drm/drm_fb_helper.c:drm_fb_helper_set_par(struct fb_info *info)
drivers/gpu/drm/drm_fb_helper.c:drm_fb_helper_setcmap(struct fb_cmap *cmap, struct fb_info *info)
drm_fb_helper_sys_fillrect()
FBIOPUT_VSCREENINFO()
drivers/video/fbdev/core/fb_defio.c:fb_deferred_io_cleanup(struct fb_info *info)
drivers/video/fbdev/core/fb_defio.c:fb_deferred_io_fault(struct vm_fault *vmf)
drivers/video/fbdev/core/fb_defio.c:fb_deferred_io_fsync(struct file *file, loff_t start, loff_t end, int datasync)
drivers/video/fbdev/core/fb_defio.c:fb_deferred_io_init(struct fb_info *info)
drivers/video/fbdev/core/fb_defio.c:fb_deferred_io_mkwrite(struct vm_fault *vmf)
drivers/video/fbdev/core/fb_defio.c:fb_deferred_io_work(struct work_struct *work)
fb_defio()
include/linux/fb.h:__fb_pad_aligned_buffer(u8 *dst, u32 d_pitch, u8 *src, u32 s_pitch, u32 height)
drivers/video/fbdev/core/sysfillrect.c:bitfill_aligned(struct fb_info *p, unsigned long *dst, int dst_idx, unsigned long pat, unsigned n, int bits)
include/linux/fb.h:fb_be_math(struct fb_info *info)
drivers/tty/vt/vt.c:redraw_screen(struct vc_data *vc, int is_switch)
drivers/tty/vt/vt.c:vc_allocate(unsigned int currcons)
drivers/tty/vt/vt.c:vc_init(struct vc_data *vc, unsigned int rows, unsigned int cols, int do_clear)
func for case 46a4ad33f345d1dd346e
net/netfilter/nf_conntrack_proto_dccp.c:dccp_error(const struct dccp_hdr *dh, struct sk_buff *skb, unsigned int dataoff, const struct nf_hook_state *state)
net/netfilter/nf_conntrack_proto_dccp.c:dccp_new(struct nf_conn *ct, const struct sk_buff *skb, const struct dccp_hdr *dh)
net/netfilter/nf_conntrack_proto_dccp.c:dccp_timeout_nlattr_to_obj(struct nlattr *tb[], struct net *net, void *data)
net/netfilter/nf_conntrack_proto_dccp.c:dccp_timeout_obj_to_nlattr(struct sk_buff *skb, const void *data)
net/netfilter/nf_conntrack_proto_dccp.c:dccp_to_nlattr(struct sk_buff *skb, struct nlattr *nla, struct nf_conn *ct)
net/netfilter/nf_conntrack_proto_dccp.c:nf_conntrack_dccp_init_net(struct net *net)
net/netfilter/nf_conntrack_proto_dccp.c:nf_conntrack_dccp_packet(struct nf_conn *ct, struct sk_buff *skb, unsigned int dataoff, enum ip_conntrack_info ctinfo, const struct nf_hook_state *state)
net/netfilter/nf_conntrack_proto_dccp.c:nlattr_to_dccp(struct nlattr *cda[], struct nf_conn *ct)
net/netfilter/nfnetlink_cttimeout.c:ctnl_timeout_dump(struct sk_buff *skb, struct netlink_callback *cb)
net/netfilter/nfnetlink_cttimeout.c:ctnl_timeout_fill_info(struct sk_buff *skb, u32 portid, u32 seq, u32 type, int event, struct ctnl_timeout *timeout)
net/netfilter/nfnetlink_cttimeout.c:ctnl_timeout_find_get()
net/netfilter/nfnetlink_cttimeout.c:ctnl_timeout_parse_policy(void *timeout, const struct nf_conntrack_l4proto *l4proto, struct net *net, const struct nlattr *attr)
net/netfilter/nfnetlink_cttimeout.c:ctnl_timeout_try_del(struct net *net, struct ctnl_timeout *timeout)
net/netfilter/nfnetlink_cttimeout.c:cttimeout_default_fill_info(struct net *net, struct sk_buff *skb, u32 portid, u32 seq, u32 type, int event, u16 l3num, const struct nf_conntrack_l4proto *l4proto, const unsigned int *timeouts)
net/netfilter/nfnetlink_cttimeout.c:cttimeout_default_get(struct net *net, struct sock *ctnl, struct sk_buff *skb, const struct nlmsghdr *nlh, const struct nlattr * const cda[], struct netlink_ext_ack *extack)
net/netfilter/nfnetlink_cttimeout.c:cttimeout_default_set(struct net *net, struct sock *ctnl, struct sk_buff *skb, const struct nlmsghdr *nlh, const struct nlattr * const cda[], struct netlink_ext_ack *extack)
net/netfilter/nfnetlink_cttimeout.c:cttimeout_del_timeout(struct net *net, struct sock *ctnl, struct sk_buff *skb, const struct nlmsghdr *nlh, const struct nlattr * const cda[], struct netlink_ext_ack *extack)
net/netfilter/nfnetlink_cttimeout.c:cttimeout_get_timeout(struct net *net, struct sock *ctnl, struct sk_buff *skb, const struct nlmsghdr *nlh, const struct nlattr * const cda[], struct netlink_ext_ack *extack)
net/netfilter/nfnetlink_cttimeout.c:cttimeout_init(void)
cttimeout_net_init()
net/netfilter/nfnetlink_cttimeout.c:cttimeout_new_timeout(struct net *net, struct sock *ctnl, struct sk_buff *skb, const struct nlmsghdr *nlh, const struct nlattr * const cda[], struct netlink_ext_ack *extack)
net/netfilter/nf_conntrack_proto_dccp.c:dccp_timeout_nlattr_to_obj(struct nlattr *tb[], struct net *net, void *data)
net/netfilter/nf_conntrack_timeout.c:__nf_ct_timeout_put(struct nf_ct_timeout *timeout)
net/netfilter/nf_conntrack_proto_dccp.c:dccp_timeout_nlattr_to_obj(struct nlattr *tb[], struct net *net, void *data)
net/netfilter/nf_conntrack_timeout.c:nf_ct_destroy_timeout(struct nf_conn *ct)
net/netfilter/nf_conntrack_timeout.c:nf_ct_set_timeout(struct net *net, struct nf_conn *ct, u8 l3num, u8 l4num, const char *timeout_name)
net/netfilter/nf_conntrack_core.c:hash_conntrack_raw(const struct nf_conntrack_tuple *tuple, const struct net *net)
net/netfilter/nf_conntrack_core.c:nf_conntrack_alter_reply(struct nf_conn *ct, const struct nf_conntrack_tuple *newreply)
nf_conntrack_core()
net/netfilter/nf_conntrack_core.c:nf_conntrack_handle_packet(struct nf_conn *ct, struct sk_buff *skb, unsigned int dataoff, enum ip_conntrack_info ctinfo, const struct nf_hook_state *state)
net/netfilter/nf_conntrack_core.c:nf_conntrack_in(struct sk_buff *skb, const struct nf_hook_state *state)
net/netfilter/nf_conntrack_core.c:nf_conntrack_tuple_taken(const struct nf_conntrack_tuple *tuple, const struct nf_conn *ignored_conntrack)
net/netfilter/nf_conntrack_core.c:nf_ct_get_tuple(const struct sk_buff *skb, unsigned int nhoff, unsigned int dataoff, u_int16_t l3num, u_int8_t protonum, struct net *net, struct nf_conntrack_tuple *tuple)
net/netfilter/nf_conntrack_core.c:nf_ct_get_tuple_ports(const struct sk_buff *skb, unsigned int dataoff, struct nf_conntrack_tuple *tuple)
net/netfilter/nf_conntrack_core.c:nf_ct_port_nlattr_to_tuple(struct nlattr *tb[], struct nf_conntrack_tuple *t)
net/netfilter/nfnetlink.c:nfnetlink_bind(struct net *net, int group)
net/netfilter/nfnetlink.c:nfnetlink_init(void)
net/netfilter/nfnetlink.c:nfnetlink_rcv(struct sk_buff *skb)
net/netfilter/nfnetlink.c:nfnetlink_rcv_batch(struct sk_buff *skb, struct nlmsghdr *nlh, u16 subsys_id, u32 genid)
net/netfilter/nfnetlink.c:nfnetlink_rcv_msg(struct sk_buff *skb, struct nlmsghdr *nlh, struct netlink_ext_ack *extack)
net/netfilter/nfnetlink.c:nfnetlink_rcv_skb_batch(struct sk_buff *skb, struct nlmsghdr *nlh)
net/netfilter/nfnetlink.c:nfnetlink_subsys_register(const struct nfnetlink_subsystem *n)
nfnetlink_unicast()
nf_conntrack()
include/net/netfilter/nf_conntrack.h:nf_conntrack_get_ht(struct hlist_nulls_head **hash, unsigned int *hsize)
net/netfilter/nf_conntrack_core.c:nf_ct_get_tuple(const struct sk_buff *skb, unsigned int nhoff, unsigned int dataoff, u_int16_t l3num, u_int8_t protonum, struct net *net, struct nf_conntrack_tuple *tuple)
nf_ct_helper_ext_add()
net/netfilter/nf_conntrack_core.c:nf_ct_invert_tuple(struct nf_conntrack_tuple *inverse, const struct nf_conntrack_tuple *orig)
nf_ct_is_dying()
nf_ct_kill()
nf_ct_seqadj_init()
nf_ct_set_dying()
net/netlink/af_netlink.c:netlink_rcv_skb(struct sk_buff *skb, int (*cb)(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *))
net/netlink/af_netlink.c:netlink_sendmsg(struct socket *sock, struct msghdr *msg, size_t len)
net/netlink/af_netlink.c:netlink_unicast(struct sock *ssk, struct sk_buff *skb, u32 portid, int nonblock)
net/socket.c:kernel_sendmsg_locked(struct sock *sk, struct msghdr *msg, struct kvec *vec, size_t num, size_t size)
net/socket.c:sock_sendmsg(struct socket *sock, struct msghdr *msg)
net/socket.c:sock_sendmsg_nosec(struct socket *sock, struct msghdr *msg)
func for case 4d99a966fd74bdeeec36
mm/page_alloc.c:__alloc_pages()
fs/ext4/xattr.c:ext4_expand_extra_isize_ea(struct inode *inode, int new_extra_isize, struct ext4_inode *raw_inode, handle_t *handle)
fs/ext4/xattr.c:ext4_xattr_block_cache_insert(struct mb_cache *ea_block_cache, struct buffer_head *bh)
fs/ext4/xattr.c:ext4_xattr_block_set(handle_t *handle, struct inode *inode, struct ext4_xattr_info *i, struct ext4_xattr_block_find *bs)
fs/ext4/xattr.c:ext4_xattr_ibody_set(handle_t *handle, struct inode *inode, struct ext4_xattr_info *i, struct ext4_xattr_ibody_find *is)
fs/ext4/xattr.c:ext4_xattr_inode_create()
fs/ext4/xattr.c:ext4_xattr_inode_dec_ref_all(handle_t *handle, struct inode *parent, struct buffer_head *bh, struct ext4_xattr_entry *first, bool block_csum, struct ext4_xattr_inode_array **ea_inode_array, int extra_credits, bool skip_quota)
fs/ext4/xattr.c:ext4_xattr_inode_inc_ref_all(handle_t *handle, struct inode *parent, struct ext4_xattr_entry *first)
fs/ext4/xattr.c:ext4_xattr_inode_lookup_create(handle_t *handle, struct inode *inode, const void *value, size_t value_len, struct inode **ret_inode)
fs/ext4/xattr.c:ext4_xattr_inode_update_ref(handle_t *handle, struct inode *ea_inode, int ref_change)
fs/ext4/xattr.c:ext4_xattr_inode_write(handle_t *handle, struct inode *ea_inode, const void *buf, int bufsize)
fs/ext4/xattr.c:ext4_xattr_make_inode_space(handle_t *handle, struct inode *inode, struct ext4_inode *raw_inode, int isize_diff, size_t ifree, size_t bfree, int *total_ino)
fs/ext4/xattr.c:ext4_xattr_move_to_block(handle_t *handle, struct inode *inode, struct ext4_inode *raw_inode, struct ext4_xattr_entry *entry)
fs/ext4/xattr.c:ext4_xattr_release_block(handle_t *handle, struct inode *inode, struct buffer_head *bh, struct ext4_xattr_inode_array **ea_inode_array, int extra_credits)
fs/ext4/xattr.c:ext4_xattr_set_entry(struct ext4_xattr_info *i, struct ext4_xattr_search *s, handle_t *handle, struct inode *inode, bool is_block)
fs/ext4/xattr.c:ext4_xattr_set_handle(handle_t *handle, struct inode *inode, int name_index, const char *name, const void *value, size_t value_len, int flags)
mm/page_alloc.c:__alloc_pages()
fs/ext4/inode.c:__ext4_expand_extra_isize(struct inode *inode, unsigned int new_extra_isize, struct ext4_iloc *iloc, handle_t *handle, int *no_expand)
fs/ext4/inode.c:__ext4_mark_inode_dirty(handle_t *handle, struct inode *inode, const char *func, unsigned int line)
fs/ext4/inode.c:_ext4_get_block(struct inode *inode, sector_t iblock, struct buffer_head *bh, int flags)
expand_extra_isize()
fs/ext4/inode.c:ext4_block_write_begin(struct page *page, loff_t pos, unsigned len, get_block_t *get_block)
fs/ext4/inode.c:ext4_da_write_begin(struct file *file, struct address_space *mapping, loff_t pos, unsigned len, struct page **pagep, void **fsdata)
fs/ext4/inode.c:ext4_da_write_end(struct file *file, struct address_space *mapping, loff_t pos, unsigned len, unsigned copied, struct page *page, void *fsdata)
fs/ext4/inode.c:ext4_do_update_inode(handle_t *handle, struct inode *inode, struct ext4_iloc *iloc)
fs/ext4/inode.c:ext4_evict_inode(struct inode *inode)
fs/ext4/inode.c:ext4_expand_extra_isize(struct inode *inode, unsigned int new_extra_isize, struct ext4_iloc *iloc)
fs/ext4/inode.c:ext4_map_blocks(handle_t *handle, struct inode *inode, struct ext4_map_blocks *map, int flags)
fs/ext4/inode.c:ext4_truncate(struct inode *inode)
fs/ext4/inode.c:ext4_try_to_expand_extra_isize(struct inode *inode, unsigned int new_extra_isize, struct ext4_iloc iloc, handle_t *handle)
fs/ext4/inode.c:ext4_write_begin(struct file *file, struct address_space *mapping, loff_t pos, unsigned len, struct page **pagep, void **fsdata)
fs/ext4/inode.c:ext4_write_end(struct file *file, struct address_space *mapping, loff_t pos, unsigned len, unsigned copied, struct page *page, void *fsdata)
fs/ext4/inode.c:ext4_writepage(struct page *page, struct writeback_control *wbc)
fs/ext4/xattr.c:ext4_xattr_move_to_block(handle_t *handle, struct inode *inode, struct ext4_inode *raw_inode, struct ext4_xattr_entry *entry)
mm/page_alloc.c:__alloc_pages()
fs/ext4/inline.c:ext4_convert_inline_data(struct inode *inode)
fs/ext4/inline.c:ext4_convert_inline_data_nolock(handle_t *handle, struct inode *inode, struct ext4_iloc *iloc)
fs/ext4/inline.c:ext4_convert_inline_data_to_extent(struct address_space *mapping, struct inode *inode)
fs/ext4/inline.c:ext4_create_inline_data(handle_t *handle, struct inode *inode, unsigned len)
fs/ext4/inline.c:ext4_da_write_inline_data_begin(struct address_space *mapping, struct inode *inode, loff_t pos, unsigned len, struct page **pagep, void **fsdata)
fs/ext4/inline.c:ext4_destroy_inline_data_nolock(handle_t *handle, struct inode *inode)
fs/ext4/inline.c:ext4_inline_data_truncate(struct inode *inode, int *has_inline)
fs/ext4/inline.c:ext4_prepare_inline_data(handle_t *handle, struct inode *inode, unsigned int len)
fs/ext4/inline.c:ext4_read_inline_data(struct inode *inode, void *buffer, unsigned int len, struct ext4_iloc *iloc)
fs/ext4/inline.c:ext4_read_inline_page(struct inode *inode, struct page *page)
fs/ext4/inline.c:ext4_readpage_inline(struct inode *inode, struct page *page)
fs/ext4/inline.c:ext4_try_to_write_inline_data(struct address_space *mapping, struct inode *inode, loff_t pos, unsigned len, struct page **pagep)
fs/ext4/inline.c:ext4_update_inline_data(handle_t *handle, struct inode *inode, unsigned int len)
fs/ext4/inline.c:ext4_write_inline_data(struct inode *inode, struct ext4_iloc *iloc, void *buffer, loff_t pos, unsigned int len)
fs/ext4/inline.c:ext4_write_inline_data_end(struct inode *inode, loff_t pos, unsigned len, unsigned copied, struct page *page)
fs/ext4/orphan.c:ext4_init_orphan_info(struct super_block *sb)
fs/ext4/orphan.c:ext4_orphan_add(handle_t *handle, struct inode *inode)
fs/ext4/orphan.c:ext4_orphan_cleanup(struct super_block *sb, struct ext4_super_block *es)
fs/ext4/orphan.c:ext4_orphan_del(handle_t *handle, struct inode *inode)
fs/ext4/orphan.c:ext4_orphan_file_add(handle_t *handle, struct inode *inode)
fs/ext4/orphan.c:ext4_orphan_file_block_csum_verify(struct super_block *sb, struct buffer_head *bh)
fs/ext4/orphan.c:ext4_orphan_file_del(handle_t *handle, struct inode *inode)
fs/ext4/orphan.c:ext4_process_orphan(struct inode *inode, int *nr_truncates, int *nr_orphans)
mm/slab_common.c:__do_kmalloc_node()
mm/slab_common.c:__kmalloc_large_node()
mm/slab_common.c:calculate_alignment(slab_flags_t flags, unsigned int align, unsigned int size)
mm/slab_common.c:create_cache()
mm/slab_common.c:create_kmalloc_cache()
mm/slab_common.c:kmalloc_size_roundup(size_t size)
mm/slab_common.c:kmalloc_slab()
mm/slab_common.c:kmem_cache_create_usercopy()
fs/ext4/super.c:__ext4_fill_super(struct fs_context *fc, struct super_block *sb)
debug_want_extra_isize()
fs/ext4/super.c:ext4_apply_options(struct fs_context *fc, struct super_block *sb)
fs/ext4/super.c:ext4_commit_super(struct super_block *sb)
fs/ext4/super.c:ext4_fill_super(struct super_block *sb, struct fs_context *fc)
fs/ext4/super.c:ext4_handle_error(struct super_block *sb, bool force_ro, int error, __u32 ino, __u64 block, const char *func, unsigned int line)
fs/ext4/super.c:ext4_load_and_init_journal(struct super_block *sb, struct ext4_super_block *es, struct ext4_fs_context *ctx)
fs/ext4/super.c:ext4_setup_super(struct super_block *sb, struct ext4_super_block *es, int read_only)
fs/ext4/super.c:ext4_validate_options(struct fs_context *fc)
include/linux/gfp.h:__alloc_pages_node()
include/linux/gfp.h:__folio_alloc_node()
include/linux/gfp.h:alloc_pages_bulk_array_node(gfp_t gfp, int nid, unsigned long nr_pages, struct page **page_array)
include/linux/gfp.h:alloc_pages_node()
include/linux/gfp.h:gfp_migratetype(const gfp_t gfp_flags)
include/linux/gfp.h:gfp_zone(gfp_t flags)
fs/ext4/ext4.h:ext4_isize(struct super_block *sb, struct ext4_inode *raw_inode)
fs/ext4/ext4.h:ext4_update_i_disksize(struct inode *inode, loff_t newsize)
fs/ext4/ext4.h:ext4_update_inode_size(struct inode *inode, loff_t newsize)
mm/page_alloc.c:__alloc_pages()
mm/page_alloc.c:should_compact_retry(struct alloc_context *ac, unsigned int order, int alloc_flags, enum compact_result compact_result, enum compact_priority *compact_priority, int *compaction_retries)
mm/page_alloc.c:warn_alloc(gfp_t gfp_mask, nodemask_t *nodemask, const char *fmt, ...)
fs/super.c:generic_shutdown_super(struct super_block *sb))
fs/super.c:get_tree_bdev(struct fs_context *fc, int (*fill_super)(struct super_block *, struct fs_context *)))
fs/super.c:vfs_get_tree(struct fs_context *fc))
func for case e2eae5639e7203360018
advance_cbs()
check_qs()
do_batch()
gp_kthread()
kernel/rcu/tree.c:note_gp_changes(struct rcu_data *rdp)
kernel/rcu/tree.c:rcu_accelerate_cbs(struct rcu_node *rnp, struct rcu_data *rdp)
kernel/rcu/tree.c:rcu_advance_cbs(struct rcu_node *rnp, struct rcu_data *rdp)
kernel/rcu/tree.c:rcu_check_quiescent_state(struct rcu_data *rdp)
kernel/rcu/tree.c:rcu_core(void)
kernel/rcu/tree.c:rcu_do_batch(struct rcu_data *rdp)
kernel/rcu/tree.c:rcu_gp_cleanup(void)
kernel/rcu/tree.c:rcu_gp_fqs(bool first_time)
kernel/rcu/tree.c:rcu_gp_fqs_loop(void)
kernel/rcu/tree.c:rcu_gp_init(void)
kernel/rcu/tree.c:rcu_gp_kthread(void *unused)
kernel/rcu/tree.c:rcu_implicit_dynticks_qs(struct rcu_data *rdp)
kernel/rcu/tree.c:rcu_pending(int user)
kernel/rcu/tree.c:rcu_report_qs_rdp(struct rcu_data *rdp)
kernel/rcu/tree.c:rcu_sched_clock_irq(int user)
report_qs()
net/sched/sch_fq_codel.c:dequeue_func()
net/sched/sch_fq_codel.c:flow_queue_add(struct fq_codel_flow *flow, struct sk_buff *skb)
net/sched/sch_fq_codel.c:fq_codel_change(struct Qdisc *sch, struct nlattr *opt, struct netlink_ext_ack *extack)
net/sched/sch_fq_codel.c:fq_codel_classify(struct sk_buff *skb, struct Qdisc *sch, int *qerr)
net/sched/sch_fq_codel.c:fq_codel_dequeue()
net/sched/sch_fq_codel.c:fq_codel_drop(struct Qdisc *sch, unsigned int max_packets, struct sk_buff **to_free)
net/sched/sch_fq_codel.c:fq_codel_dump(struct Qdisc *sch, struct sk_buff *skb)
net/sched/sch_fq_codel.c:fq_codel_dump_class_stats(struct Qdisc *sch, unsigned long cl, struct gnet_dump *d)
net/sched/sch_fq_codel.c:fq_codel_dump_stats(struct Qdisc *sch, struct gnet_dump *d)
net/sched/sch_fq_codel.c:fq_codel_enqueue(struct sk_buff *skb, struct Qdisc *sch, struct sk_buff **to_free)
net/sched/sch_fq_codel.c:fq_codel_init(struct Qdisc *sch, struct nlattr *opt, struct netlink_ext_ack *extack)
net/sched/sch_fq_codel.c:fq_codel_reset(struct Qdisc *sch)
net/sched/sch_fq_codel.c:fq_codel_walk(struct Qdisc *sch, struct qdisc_walker *arg)
net/core/dev.c:__dev_queue_xmit(struct sk_buff *skb, struct net_device *sb_dev)
net/core/dev.c:__dev_xmit_skb(struct sk_buff *skb, struct Qdisc *q, struct net_device *dev, struct netdev_queue *txq)
net/core/dev.c:__napi_poll(struct napi_struct *n, bool *repoll)
net/core/dev.c:__netif_receive_skb(struct sk_buff *skb)
net/core/dev.c:__netif_receive_skb_core(struct sk_buff **pskb, bool pfmemalloc, struct packet_type **ppt_prev)
net/core/dev.c:dev_gro_receive(struct napi_struct *napi, struct sk_buff *skb)
net/core/dev.c:dev_hard_start_xmit()
net/core/dev.c:enqueue_to_backlog(struct sk_buff *skb, int cpu, unsigned int *qtail)
net/sched/sch_fq_codel.c:fq_codel_dequeue()
net/core/dev.c:napi_complete_done(struct napi_struct *n, int work_done)
net/core/dev.c:napi_gro_receive(struct napi_struct *napi, struct sk_buff *skb)
net/core/dev.c:napi_poll(struct napi_struct *n, struct list_head *repoll)
net/core/dev.c:net_rx_action(struct softirq_action *h)
net/core/dev.c:net_tx_action(struct softirq_action *h)
net/core/dev.c:netif_receive_skb_internal(struct sk_buff *skb)
nl_route_sched()
net/core/dev.c:process_backlog(struct napi_struct *napi, int quota)
aoe_tx0()
drivers/block/aoe/aoenet.c:aoenet_init(void)
drivers/block/aoe/aoenet.c:aoenet_rcv(struct sk_buff *skb, struct net_device *ifp, struct packet_type *pt, struct net_device *orig_dev)
drivers/block/aoe/aoenet.c:is_aoe_netif(struct net_device *ifp)
drivers/block/aoe/aoenet.c:set_aoe_iflist(const char __user *user_str, size_t size)
kernel/time/timer.c:__run_timers(struct timer_base *base)
kernel/time/timer.c:call_timer_fn(struct timer_list *timer, void (*fn)(struct timer_list *), unsigned long baseclk)
kernel/time/timer.c:detach_if_pending(struct timer_list *timer, struct timer_base *base, bool clear_pending)
kernel/time/timer.c:expire_timers(struct timer_base *base, struct hlist_head *head)
kernel/time/timer.c:forward_timer_base(struct timer_base *base)
kernel/time/timer.c:run_local_timers(void)
kernel/time/timer.c:run_timer_softirq(struct softirq_action *h)
kernel/time/timer.c:update_process_times(int user_tick)
net/sched/sch_generic.c:__qdisc_run(struct Qdisc *q)
net/sched/sch_generic.c:dequeue_skb()
net/sched/sch_generic.c:dev_requeue_skb(struct sk_buff *skb, struct Qdisc *q)
net/sched/sch_generic.c:dev_watchdog(struct timer_list *t)
fq_codel()
net/sched/sch_generic.c:qdisc_restart(struct Qdisc *q, int *packets)
net/sched/sch_generic.c:sch_direct_xmit(struct sk_buff *skb, struct Qdisc *q, struct net_device *dev, struct netdev_queue *txq, spinlock_t *root_lock, bool validate)
sch_generic()
net/sched/sch_generic.c:try_bulk_dequeue_skb(struct Qdisc *q, struct sk_buff *skb, const struct netdev_queue *txq, int *packets)
net/sched/sch_generic.c:try_bulk_dequeue_skb_slow(struct Qdisc *q, struct sk_buff *skb, int *packets)
kernel/time/hrtimer.c:__hrtimer_reprogram(struct hrtimer_cpu_base *cpu_base, struct hrtimer *next_timer, ktime_t expires_next)
kernel/time/hrtimer.c:__hrtimer_run_queues(struct hrtimer_cpu_base *cpu_base, ktime_t now, unsigned long flags, unsigned int active_mask)
kernel/time/hrtimer.c:hrtimer_active(const struct hrtimer *timer)
kernel/time/hrtimer.c:hrtimer_interrupt(struct clock_event_device *dev)
kernel/time/hrtimer.c:hrtimer_reprogram(struct hrtimer *timer, bool reprogram)
kernel/time/hrtimer.c:hrtimer_run_queues(void)
kernel/time/hrtimer.c:hrtimer_update_base(struct hrtimer_cpu_base *base)
kernel/time/hrtimer.c:hrtimer_update_next_event(struct hrtimer_cpu_base *cpu_base)
kernel/rcu/tree_stall.h:check_cpu_stall(struct rcu_data *rdp)
kernel/rcu/tree_stall.h:print_cpu_stall(unsigned long gps)
kernel/rcu/tree_stall.h:rcu_dump_cpu_stacks(void)
lib/nmi_backtrace.c:nmi_trigger_cpumask_backtrace(const cpumask_t *mask, bool exclude_self, void (*raise)(cpumask_t *mask))
__sysvec_apic_timer_interrupt()
arch/x86/kernel/apic/apic.c:local_apic_timer_interrupt(void)
arch/x86/kernel/apic/apic.c:sysvec_apic_timer_interrupt()
func for case 05139c4039d0679e19ff
fs/f2fs/dir.c:__f2fs_find_entry()
fs/f2fs/dir.c:__f2fs_setup_filename(const struct inode *dir, const struct fscrypt_name *crypt_name, struct f2fs_filename *fname)
fs/f2fs/dir.c:f2fs_add_regular_entry(struct inode *dir, const struct f2fs_filename *fname, struct inode *inode, nid_t ino, umode_t mode)
fs/f2fs/dir.c:f2fs_d_hash(const struct dentry *dentry, struct qstr *str)
fs/f2fs/dir.c:f2fs_delete_entry(struct f2fs_dir_entry *dentry, struct page *page, struct inode *dir, struct inode *inode)
fs/f2fs/dir.c:f2fs_do_add_link(struct inode *dir, const struct qstr *name, struct inode *inode, nid_t ino, umode_t mode)
fs/f2fs/dir.c:f2fs_find_entry()
fs/f2fs/dir.c:f2fs_init_casefolded_name(const struct inode *dir, struct f2fs_filename *fname)
fs/f2fs/dir.c:f2fs_inode_by_name(struct inode *dir, const struct qstr *qstr, struct page **page)
fs/f2fs/dir.c:f2fs_match_ci_name(const struct inode *dir, const struct qstr *name, const u8 *de_name, u32 de_name_len)
fs/f2fs/dir.c:f2fs_room_for_filename(const void *bitmap, int slots, int max_slots)
fs/f2fs/dir.c:f2fs_set_link(struct inode *dir, struct f2fs_dir_entry *de, struct page *page, struct inode *inode)
fs/f2fs/dir.c:f2fs_update_dentry(nid_t ino, umode_t mode, struct f2fs_dentry_ptr *d, const struct fscrypt_str *name, f2fs_hash_t name_hash, unsigned int bit_pos)
fs/f2fs/dir.c:find_in_block()
fs/f2fs/dir.c:find_in_level()
fs/unicode/utf8-core.c:utf8_casefold(const struct unicode_map *um, const struct qstr *str, unsigned char *dest, size_t dlen)
fs/unicode/utf8-core.c:utf8_casefold(const struct unicode_map *um, const struct qstr *str, unsigned char *dest, size_t dlen)
fs/unicode/utf8-core.c:utf8_load()
fs/unicode/utf8-core.c:utf8_normalize(const struct unicode_map *um, const struct qstr *str, unsigned char *dest, size_t dlen)
fs/unicode/utf8-core.c:utf8_strncasecmp(const struct unicode_map *um, const struct qstr *s1, const struct qstr *s2)
fs/unicode/utf8-core.c:utf8_strncasecmp_folded(const struct unicode_map *um, const struct qstr *cf, const struct qstr *s1)
fs/unicode/utf8-core.c:utf8_strncmp(const struct unicode_map *um, const struct qstr *s1, const struct qstr *s2)
fs/f2fs/namei.c:__f2fs_tmpfile(struct inode *dir, struct dentry *dentry, umode_t mode, struct inode **whiteout)
fs/f2fs/namei.c:__recover_dot_dentries(struct inode *dir, nid_t pino)
fs/f2fs/namei.c:f2fs_create(struct inode *dir, struct dentry *dentry, umode_t mode, bool excl)
fs/f2fs/namei.c:f2fs_cross_rename(struct inode *old_dir, struct dentry *old_dentry, struct inode *new_dir, struct dentry *new_dentry)
fs/f2fs/namei.c:f2fs_get_parent()
fs/f2fs/namei.c:f2fs_link(struct dentry *old_dentry, struct inode *dir, struct dentry *dentry)
fs/f2fs/namei.c:f2fs_lookup()
fs/f2fs/namei.c:f2fs_mkdir(struct inode *dir, struct dentry *dentry, umode_t mode)
fs/f2fs/namei.c:f2fs_mknod(struct inode *dir, struct dentry *dentry, umode_t mode, dev_t rdev)
fs/f2fs/namei.c:f2fs_new_inode()
fs/f2fs/namei.c:f2fs_rename(struct inode *old_dir, struct dentry *old_dentry, struct inode *new_dir, struct dentry *new_dentry, unsigned int flags)
fs/f2fs/namei.c:f2fs_rename2(struct inode *old_dir, struct dentry *old_dentry, struct inode *new_dir, struct dentry *new_dentry, unsigned int flags)
fs/f2fs/namei.c:f2fs_symlink(struct inode *dir, struct dentry *dentry, const char *symname)
fs/f2fs/namei.c:f2fs_unlink(struct inode *dir, struct dentry *dentry)
fs/f2fs/namei.c:set_compress_inode(struct f2fs_sb_info *sbi, struct inode *inode, const unsigned char *name)
crc_offset()
fs/f2fs/super.c:f2fs_commit_super(struct f2fs_sb_info *sbi, bool recover)
fs/f2fs/super.c:f2fs_fill_super(struct super_block *sb, void *data, int silent)
fs/f2fs/super.c:f2fs_setup_casefold(struct f2fs_sb_info *sbi)
fs/f2fs/super.c:init_sb_info(struct f2fs_sb_info *sbi)
fs/f2fs/super.c:parse_options(struct super_block *sb, char *options, bool is_remount)
fs/f2fs/super.c:read_raw_super_block(struct f2fs_sb_info *sbi, struct f2fs_super_block **raw_super, int *valid_super_block, int *recovery)
fs/f2fs/super.c:sanity_check_area_boundary(struct f2fs_sb_info *sbi, struct buffer_head *bh)
fs/f2fs/super.c:sanity_check_raw_super(struct f2fs_sb_info *sbi, struct buffer_head *bh)
fs/f2fs/inode.c:__written_first_block(struct f2fs_sb_info *sbi, struct f2fs_inode *ri)
fs/f2fs/inode.c:do_read_inode(struct inode *inode)
fs/f2fs/inode.c:f2fs_evict_inode(struct inode *inode)
fs/f2fs/inode.c:f2fs_iget()
fs/f2fs/inode.c:f2fs_inode_chksum_verify(struct f2fs_sb_info *sbi, struct page *page)
fs/f2fs/inode.c:f2fs_set_inode_flags(struct inode *inode)
fs/f2fs/inode.c:f2fs_update_inode(struct inode *inode, struct page *node_page)
fs/f2fs/inode.c:sanity_check_inode(struct inode *inode, struct page *node_page)
fs/namei.c:__lookup_hash()
fs/namei.c:do_filp_open()
fs/namei.c:do_mkdirat(int dfd, const char __user *pathname, umode_t mode)
fs/namei.c:filename_create()
fs/namei.c:lookup_open()
fs/namei.c:path_openat()
fs/namei.c:vfs_mkdir(struct inode *dir, struct dentry *dentry, umode_t mode)
fs/namei.c:vfs_path_lookup(struct dentry *dentry, struct vfsmount *mnt, const char *name, unsigned int flags, struct path *path)
fs/f2fs/file.c:f2fs_do_truncate_blocks(struct inode *inode, u64 from, bool lock)
fs/f2fs/file.c:f2fs_fallocate(struct file *file, int mode, loff_t offset, loff_t len)
fs/f2fs/file.c:f2fs_file_flush(struct file *file, fl_owner_t id)
fs/f2fs/file.c:f2fs_file_write_iter(struct kiocb *iocb, struct iov_iter *from)
fs/f2fs/file.c:f2fs_release_file(struct inode *inode, struct file *filp)
fs/f2fs/file.c:f2fs_setattr(struct dentry *dentry, struct iattr *attr)
fs/f2fs/file.c:f2fs_truncate(struct inode *inode)
fs/f2fs/file.c:f2fs_truncate_blocks(struct inode *inode, u64 from, bool lock)
fs/f2fs/segment.c:build_sit_entries(struct f2fs_sb_info *sbi)
fs/f2fs/segment.c:build_sit_info(struct f2fs_sb_info *sbi)
fs/f2fs/segment.c:f2fs_build_segment_manager(struct f2fs_sb_info *sbi)
crc_offset()
fs/f2fs/checkpoint.c:f2fs_get_valid_checkpoint(struct f2fs_sb_info *sbi)
fs/f2fs/checkpoint.c:get_checkpoint_version(struct f2fs_sb_info *sbi, block_t cp_addr, struct f2fs_checkpoint **cp_block, struct page **cp_page, unsigned long long *version)
fs/f2fs/checkpoint.c:validate_checkpoint()
fs/unicode/utf8-core.c:utf8_casefold(const struct unicode_map *um, const struct qstr *str, unsigned char *dest, size_t dlen)
func for case a84b8783366ecb1c65d0
fs/io_uring.c:__io_account_mem(struct user_struct *user, unsigned long nr_pages)
fs/io_uring.c:__io_register_rsrc_update(struct io_ring_ctx *ctx, unsigned type, struct io_uring_rsrc_update2 *up, unsigned nr_args)
fs/io_uring.c:io_allocate_scq_urings(struct io_ring_ctx *ctx, struct io_uring_params *p)
fs/io_uring.c:io_register_rsrc(struct io_ring_ctx *ctx, void __user *arg, unsigned int size)
fs/io_uring.c:io_register_rsrc_update(struct io_ring_ctx *ctx, void __user *arg, unsigned size)
fs/io_uring.c:io_sq_offload_create(struct io_ring_ctx *ctx, struct io_uring_params *p)
io_uring()
fs/io_uring.c:io_uring_alloc_task_context(struct task_struct *task, struct io_ring_ctx *ctx)
fs/io_uring.c:io_uring_create(unsigned entries, struct io_uring_params *p, struct io_uring_params __user *params)
fs/io_uring.c:io_uring_get_file()
fs/io_uring.c:io_uring_init(void)
fs/io_uring.c:io_uring_mmap(struct file *file, struct vm_area_struct *vma)
fs/io_uring.c:io_uring_setup(u32 entries, struct io_uring_params __user *params)
fs/io_uring.c:io_uring_show_cred(struct seq_file *m, unsigned int id, const struct cred *cred)
fs/io_uring.c:io_uring_validate_mmap_request()
fs/io_uring.c:rings_size(unsigned sq_entries, unsigned cq_entries, size_t *sq_offset)
mm/memory.c:__handle_mm_fault(struct vm_area_struct *vma, unsigned long address, unsigned int flags)
mm/memory.c:copy_user_huge_page(struct page *dst, struct page *src, unsigned long addr_hint, struct vm_area_struct *vma, unsigned int pages_per_huge_page)
mm/memory.c:do_anonymous_page(struct vm_fault *vmf)
mm/memory.c:do_fault(struct vm_fault *vmf)
mm/memory.c:do_swap_page(struct vm_fault *vmf)
mm/memory.c:handle_mm_fault(struct vm_area_struct *vma, unsigned long address, unsigned int flags, struct pt_regs *regs)
mm/memory.c:handle_pte_fault(struct vm_fault *vmf)
mm/memory.c:wp_page_copy(struct vm_fault *vmf)
arch/x86/mm/init_64.c:fill_pte()
arch/x86/mm/init_64.c:mem_init(void)
arch/x86/mm/init_64.c:paging_init(void)
arch/x86/mm/init_64.c:phys_pmd_init(pmd_t *pmd_page, unsigned long paddr, unsigned long paddr_end, unsigned long page_size_mask, pgprot_t prot, bool init)
arch/x86/mm/init_64.c:phys_pte_init(pte_t *pte_page, unsigned long paddr, unsigned long paddr_end, pgprot_t prot, bool init)
arch/x86/mm/init_64.c:remove_pagetable(unsigned long start, unsigned long end, bool direct, struct vmem_altmap *altmap)
arch/x86/mm/init_64.c:remove_pmd_table(pmd_t *pmd_start, unsigned long addr, unsigned long end, bool direct, struct vmem_altmap *altmap)
arch/x86/mm/init_64.c:remove_pte_table(pte_t *pte_start, unsigned long addr, unsigned long end, bool direct)
arch/x86/mm/init_64.c:set_pte_vaddr(unsigned long vaddr, pte_t pteval)
arch/x86/mm/init_64.c:vmemmap_populate(unsigned long start, unsigned long end, int node, struct vmem_altmap *altmap)
arch/x86/mm/init_64.c:vmemmap_populate_hugepages(unsigned long start, unsigned long end, int node, struct vmem_altmap *altmap)
io_uring()
arch/x86/include/asm/pgtable.h:pmd_modify(pmd_t pmd, pgprot_t newprot)
arch/x86/include/asm/pgtable.h:pte_flags_pkey(unsigned long pte_flags)
arch/x86/include/asm/pgtable.h:pte_modify(pte_t pte, pgprot_t newprot)
func for case 0c601d7fbb8122d39093
drivers/hid/uhid.c:__uhid_report_queue_and_wait(struct uhid_device *uhid, struct uhid_event *ev, __u32 *report_id)
raw_request()
set_report()
drivers/hid/uhid.c:uhid_char_release(struct inode *inode, struct file *file)
drivers/hid/uhid.c:uhid_dev_create(struct uhid_device *uhid, struct uhid_event *ev)
drivers/hid/uhid.c:uhid_dev_create2(struct uhid_device *uhid, const struct uhid_event *ev)
drivers/hid/uhid.c:uhid_dev_destroy(struct uhid_device *uhid)
drivers/hid/uhid.c:uhid_dev_input2(struct uhid_device *uhid, struct uhid_event *ev)
drivers/hid/uhid.c:uhid_device_add_worker(struct work_struct *work)
drivers/hid/uhid.c:uhid_hid_get_report(struct hid_device *hid, unsigned char rnum, u8 *buf, size_t count, u8 rtype)
drivers/hid/uhid.c:uhid_hid_output_raw(struct hid_device *hid, __u8 *buf, size_t count, unsigned char report_type)
drivers/hid/uhid.c:uhid_hid_raw_request(struct hid_device *hid, unsigned char reportnum, __u8 *buf, size_t len, unsigned char rtype, int reqtype)
drivers/hid/uhid.c:uhid_hid_set_report(struct hid_device *hid, unsigned char rnum, const u8 *buf, size_t count, u8 rtype)
drivers/hid/uhid.c:uhid_hid_start(struct hid_device *hid)
drivers/hid/uhid.c:uhid_queue(struct uhid_device *uhid, struct uhid_event *ev)
drivers/hid/uhid.c:uhid_queue_event(struct uhid_device *uhid, __u32 event)
drivers/hid/uhid.c:uhid_report_wake_up(struct uhid_device *uhid, u32 id, const struct uhid_event *ev)
wake_up()
kernel/sched/wait.c:__wake_up_common(struct wait_queue_head *wq_head, unsigned int mode, int nr_exclusive, int wake_flags, void *key, wait_queue_entry_t *bookmark)
kernel/sched/wait.c:__wake_up_common_lock(struct wait_queue_head *wq_head, unsigned int mode, int nr_exclusive, int wake_flags, void *key)
kernel/sched/wait.c:add_wait_queue(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry)
kernel/sched/wait.c:add_wait_queue_exclusive(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry)
kernel/sched/wait.c:do_wait_intr(wait_queue_head_t *wq, wait_queue_entry_t *wait)
kernel/sched/wait.c:do_wait_intr_irq(wait_queue_head_t *wq, wait_queue_entry_t *wait)
kernel/sched/wait.c:finish_wait(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry)
kernel/sched/wait.c:prepare_to_wait(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry, int state)
kernel/sched/wait.c:prepare_to_wait_event(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry, int state)
kernel/sched/wait.c:prepare_to_wait_exclusive(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry, int state)
kernel/sched/wait.c:wait_woken(struct wait_queue_entry *wq_entry, unsigned mode, long timeout)
kernel/sched/wait.c:woken_wake_function(struct wait_queue_entry *wq_entry, unsigned mode, int sync, void *key)
kernel/locking/lockdep.c:__lock_acquire(struct lockdep_map *lock, unsigned int subclass, int trylock, int read, int check, int hardirqs_off, struct lockdep_map *nest_lock, unsigned long ip, int references, int pin_count)
kernel/locking/lockdep.c:__lockdep_reset_lock(struct pending_free *pf, struct lockdep_map *lock)
kernel/locking/lockdep.c:assign_lock_key(struct lockdep_map *lock)
kernel/locking/lockdep.c:check_flags(unsigned long flags)
kernel/locking/lockdep.c:is_dynamic_key(const struct lock_class_key *key)
kernel/locking/lockdep.c:lock_acquire(struct lockdep_map *lock, unsigned int subclass, int trylock, int read, int check, struct lockdep_map *nest_lock, unsigned long ip)
kernel/locking/lockdep.c:lock_class_cache_is_registered(struct lockdep_map *lock)
kernel/locking/lockdep.c:lockdep_init(void)
lockdep_init_map_type()
kernel/locking/lockdep.c:lockdep_register_key(struct lock_class_key *key)
kernel/locking/lockdep.c:lockdep_reset_lock_reg(struct lockdep_map *lock)
kernel/locking/lockdep.c:lockdep_unregister_key(struct lock_class_key *key)
kernel/locking/lockdep.c:look_up_lock_class()
kernel/locking/lockdep.c:register_lock_class()
kernel/locking/lockdep.c:verify_lock_unused(struct lockdep_map *lock, struct held_lock *hlock, int subclass)
task_work_cancel_match()
kernel/task_work.c:task_work_run(void)
fs/file_table.c:__alloc_file()
fs/file_table.c:__fput(struct file *file)
fs/file_table.c:alloc_empty_file()
fs/file_table.c:alloc_empty_file_noaccount()
fs/file_table.c:alloc_file()
fs/file_table.c:alloc_file_clone()
fs/file_table.c:alloc_file_pseudo()
fs/file_table.c:file_free_rcu(struct rcu_head *head)
fs/file_table.c:files_maxfiles_init(void)
fs/file_table.c:fput_many(struct file *file, unsigned int refs)
init_fs_stat_sysctls()
kernel/exit.c:__exit_signal(struct task_struct *tsk)
kernel/exit.c:__unhash_process(struct task_struct *p, bool group_dead)
kernel/exit.c:do_exit(long code)
kernel/exit.c:do_group_exit(int exit_code)
kernel/exit.c:exit_notify(struct task_struct *tsk, int group_dead)
kernel/exit.c:forget_original_parent(struct task_struct *father, struct list_head *dead)
kernel/exit.c:release_task(struct task_struct *p)
kernel/exit.c:reparent_leader(struct task_struct *father, struct task_struct *p, struct list_head *dead)
include/linux/spinlock_api_smp.h:__raw_spin_lock_irq(raw_spinlock_t *lock)
include/linux/spinlock_api_smp.h:__raw_spin_lock_irqsave(raw_spinlock_t *lock)
include/linux/spinlock_api_smp.h:__raw_spin_trylock(raw_spinlock_t *lock)
include/linux/spinlock_api_smp.h:__raw_spin_trylock_bh(raw_spinlock_t *lock)
spinlock_api_smp()
kernel/sched/wait.c:__wake_up_common(struct wait_queue_head *wq_head, unsigned int mode, int nr_exclusive, int wake_flags, void *key, wait_queue_entry_t *bookmark)
kernel/locking/spinlock.c:in_lock_functions(unsigned long addr)
drivers/hid/uhid.c:uhid_dev_destroy(struct uhid_device *uhid)
kernel/sched/wait.c:__wake_up_common(struct wait_queue_head *wq_head, unsigned int mode, int nr_exclusive, int wake_flags, void *key, wait_queue_entry_t *bookmark)
lib/dump_stack.c:dump_stack(void)
dump_stack_lvl()
lib/dump_stack.c:dump_stack_print_info(const char *log_lvl)
drivers/hid/uhid.c:uhid_char_release(struct inode *inode, struct file *file)
drivers/hid/uhid.c:uhid_dev_destroy(struct uhid_device *uhid)
kernel/sched/wait.c:__wake_up_common(struct wait_queue_head *wq_head, unsigned int mode, int nr_exclusive, int wake_flags, void *key, wait_queue_entry_t *bookmark)
exit_task_work()
register_nonstatic_key()
task_work()
drivers/hid/uhid.c:uhid_char_release(struct inode *inode, struct file *file)
drivers/hid/uhid.c:uhid_dev_destroy(struct uhid_device *uhid)
func for case b33c1cb0a30ebdc8a5f9
net/sched/sch_api.c:qdisc_alloc_handle(struct net_device *dev)
net/sched/sch_api.c:qdisc_block_indexes_set(struct Qdisc *sch, struct nlattr **tca, struct netlink_ext_ack *extack)
net/sched/sch_api.c:qdisc_change(struct Qdisc *sch, struct nlattr **tca, struct netlink_ext_ack *extack)
net/sched/sch_api.c:qdisc_class_hash_grow(struct Qdisc *sch, struct Qdisc_class_hash *clhash)
net/sched/sch_api.c:qdisc_class_hash_insert(struct Qdisc_class_hash *clhash, struct Qdisc_class_common *cl)
net/sched/sch_api.c:qdisc_create()
net/sched/sch_api.c:qdisc_graft(struct net_device *dev, struct Qdisc *parent, struct sk_buff *skb, struct nlmsghdr *n, u32 classid, struct Qdisc *new, struct Qdisc *old, struct netlink_ext_ack *extack)
net/sched/sch_api.c:qdisc_hash_add(struct Qdisc *q, bool invisible)
net/sched/sch_api.c:qdisc_leaf()
net/sched/sch_api.c:qdisc_lookup()
net/sched/sch_api.c:qdisc_lookup_rcu()
net/sched/sch_api.c:qdisc_notify(struct net *net, struct sk_buff *oskb, struct nlmsghdr *n, u32 clid, struct Qdisc *old, struct Qdisc *new)
net/sched/sch_generic.c:qdisc_put(struct Qdisc *qdisc)
net/sched/sch_api.c:qdisc_tree_reduce_backlog(struct Qdisc *sch, int n, int len)
net/sched/sch_api.c:tc_modify_qdisc(struct sk_buff *skb, struct nlmsghdr *n, struct netlink_ext_ack *extack)
net/sched/sch_generic.c:attach_default_qdiscs(struct net_device *dev)
net/sched/sch_generic.c:attach_one_default_qdisc(struct net_device *dev, struct netdev_queue *dev_queue, void *_unused)
net/sched/sch_generic.c:dev_deactivate_many(struct list_head *head)
net/sched/sch_generic.c:dev_deactivate_queue(struct net_device *dev, struct netdev_queue *dev_queue, void *_qdisc_default)
net/sched/sch_generic.c:dev_graft_qdisc()
net/sched/sch_generic.c:dev_init_scheduler(struct net_device *dev)
net/sched/sch_generic.c:dev_shutdown(struct net_device *dev)
net/sched/sch_generic.c:pfifo_fast_destroy(struct Qdisc *sch)
net/sched/sch_generic.c:qdisc_alloc()
net/sched/sch_api.c:qdisc_create()
net/sched/sch_generic.c:qdisc_deactivate(struct Qdisc *qdisc)
net/sched/sch_generic.c:qdisc_destroy(struct Qdisc *qdisc)
net/sched/sch_generic.c:qdisc_put(struct Qdisc *qdisc)
net/sched/sch_generic.c:qdisc_reset(struct Qdisc *qdisc)
net/sched/sch_generic.c:shutdown_scheduler_queue(struct net_device *dev, struct netdev_queue *dev_queue, void *_qdisc_default)
net/core/rtnetlink.c:__rtnl_link_register(struct rtnl_link_ops *ops)
net/core/rtnetlink.c:do_setlink(const struct sk_buff *skb, struct net_device *dev, struct ifinfomsg *ifm, struct netlink_ext_ack *extack, struct nlattr **tb, char *ifname, int status)
net/sched/sch_generic.c:qdisc_put(struct Qdisc *qdisc)
refcount_dec_and_test()
refcount_t()
net/core/rtnetlink.c:rtnetlink_rcv_msg(struct sk_buff *skb, struct nlmsghdr *nlh, struct netlink_ext_ack *extack)
net/core/rtnetlink.c:rtnetlink_send(struct sk_buff *skb, struct net *net, u32 pid, unsigned int group, int echo)
net/core/rtnetlink.c:rtnl_configure_link(struct net_device *dev, const struct ifinfomsg *ifm)
net/core/rtnetlink.c:rtnl_create_link()
net/core/rtnetlink.c:rtnl_delete_link(struct net_device *dev)
net/core/rtnetlink.c:rtnl_dellink(struct sk_buff *skb, struct nlmsghdr *nlh, struct netlink_ext_ack *extack)
net/core/rtnetlink.c:rtnl_fill_ifinfo(struct sk_buff *skb, struct net_device *dev, struct net *src_net, int type, u32 pid, u32 seq, u32 change, unsigned int flags, u32 ext_filter_mask, u32 event, int *new_nsid, int new_ifindex, int tgt_netnsid, gfp_t gfp)
net/core/rtnetlink.c:rtnl_link_fill(struct sk_buff *skb, const struct net_device *dev)
net/core/rtnetlink.c:rtnl_link_register(struct rtnl_link_ops *ops)
net/core/rtnetlink.c:rtnl_notify(struct sk_buff *skb, struct net *net, u32 pid, u32 group, struct nlmsghdr *nlh, gfp_t flags)
net/core/rtnetlink.c:rtnl_setlink(struct sk_buff *skb, struct nlmsghdr *nlh, struct netlink_ext_ack *extack)
net/core/rtnetlink.c:rtnl_unregister(int protocol, int msgtype)
net/core/rtnetlink.c:rtnl_unregister_all(int protocol)
af_netlink()
net/netlink/af_netlink.c:netlink_alloc_large_skb()
net/netlink/af_netlink.c:netlink_attachskb(struct sock *sk, struct sk_buff *skb, long *timeo, struct sock *ssk)
netlink_broadcast()
net/netlink/af_netlink.c:netlink_rcv_skb(struct sk_buff *skb, int (*cb)(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *))
net/netlink/af_netlink.c:netlink_recvmsg(struct socket *sock, struct msghdr *msg, size_t len, int flags)
net/netlink/af_netlink.c:netlink_sendmsg(struct socket *sock, struct msghdr *msg, size_t len)
net/netlink/af_netlink.c:netlink_unicast(struct sock *ssk, struct sk_buff *skb, u32 portid, int nonblock)
net/netlink/af_netlink.c:netlink_unicast_kernel(struct sock *sk, struct sk_buff *skb, struct sock *ssk)
sk_buff()
__dev_change_net_namespace()
net/core/dev.c:dev_change_flags(struct net_device *dev, unsigned int flags, struct netlink_ext_ack *extack)
net/core/dev.c:dev_close_many(struct list_head *head, bool unlink)
net/core/dev.c:dev_get_by_index_rcu()
net/core/dev.c:dev_xdp_uninstall(struct net_device *dev)
net/core/dev.c:free_netdev(struct net_device *dev)
netdev_wait_allrefs_any()
net/core/dev.c:unregister_netdevice_queue(struct net_device *dev, struct list_head *head)
lib/refcount.c:refcount_dec_and_lock_irqsave(refcount_t *r, spinlock_t *lock, unsigned long *flags)
lib/refcount.c:refcount_dec_and_mutex_lock(refcount_t *r, struct mutex *lock)
lib/refcount.c:refcount_dec_not_one(refcount_t *r)
lib/refcount.c:refcount_warn_saturate(refcount_t *r, enum refcount_saturation_type t)
__refcount_add()
__refcount_add_not_zero()
__refcount_dec()
__refcount_sub_and_test()
net/socket.c:____sys_sendmsg(struct socket *sock, struct msghdr *msg_sys, unsigned int flags, struct used_address *used_address, unsigned int allowed_msghdr_flags)
net/socket.c:___sys_sendmsg(struct socket *sock, struct user_msghdr __user *msg, struct msghdr *msg_sys, unsigned int flags, struct used_address *used_address, unsigned int allowed_msghdr_flags)
net/socket.c:sendmsg_copy_msghdr(struct msghdr *msg, struct user_msghdr __user *umsg, unsigned flags, struct iovec **iov)
net/core/sock.c:__sk_destruct(struct rcu_head *head)
net/core/sock.c:sk_destruct(struct sock *sk)
net/core/sock.c:sk_free(struct sock *sk)
ifreq_SIOCGIFINDEX_team()
net/sched/sch_generic.c:qdisc_put(struct Qdisc *qdisc)
drivers/net/team/team_mode_roundrobin.c:rr_transmit(struct team *team, struct sk_buff *skb)
func for case a8e049cd3abd342936b6
fs/iomap/iter.c:iomap_iter(struct iomap_iter *iter, const struct iomap_ops *ops)
fs/iomap/iter.c:iomap_iter_advance(struct iomap_iter *iter)
fs/iomap/iter.c:iomap_iter_done(struct iomap_iter *iter)
fs/erofs/data.c:erofs_bread()
fs/erofs/data.c:erofs_fiemap(struct inode *inode, struct fiemap_extent_info *fieinfo, u64 start, u64 len)
fs/erofs/data.c:erofs_file_mmap(struct file *file, struct vm_area_struct *vma)
fs/erofs/data.c:erofs_file_read_iter(struct kiocb *iocb, struct iov_iter *to)
fs/erofs/data.c:erofs_iomap_begin(struct inode *inode, loff_t offset, loff_t length, unsigned int flags, struct iomap *iomap, struct iomap *srcmap)
fs/erofs/data.c:erofs_iomap_end(struct inode *inode, loff_t pos, loff_t length, ssize_t written, unsigned int flags, struct iomap *iomap)
fs/erofs/data.c:erofs_map_blocks(struct inode *inode, struct erofs_map_blocks *map, int flags)
fs/erofs/data.c:erofs_map_blocks_flatmode(struct inode *inode, struct erofs_map_blocks *map, int flags)
fs/erofs/data.c:erofs_map_dev(struct super_block *sb, struct erofs_map_dev *map)
fs/iomap/iter.c:iomap_iter(struct iomap_iter *iter, const struct iomap_ops *ops)
fs/iomap/fiemap.c:iomap_bmap(struct address_space *mapping, sector_t bno, const struct iomap_ops *ops)
fs/iomap/fiemap.c:iomap_fiemap(struct inode *inode, struct fiemap_extent_info *fi, u64 start, u64 len, const struct iomap_ops *ops)
fs/iomap/iter.c:iomap_iter(struct iomap_iter *iter, const struct iomap_ops *ops)
fs/iomap/fiemap.c:iomap_to_fiemap(struct fiemap_extent_info *fi, const struct iomap *iomap, u32 flags)
fs/erofs/super.c:check_layout_compatibility(struct super_block *sb, struct erofs_super_block *dsb)
fs/erofs/super.c:erofs_fc_fill_super(struct super_block *sb, struct fs_context *fc)
fs/erofs/super.c:erofs_init_device(struct erofs_buf *buf, struct super_block *sb, struct erofs_device_info *dif, erofs_off_t *pos)
fs/erofs/super.c:erofs_init_fs_context(struct fs_context *fc)
fs/erofs/super.c:erofs_load_compr_cfgs(struct super_block *sb, struct erofs_super_block *dsb)
fs/erofs/super.c:erofs_read_superblock(struct super_block *sb)
fs/erofs/super.c:erofs_scan_devices(struct super_block *sb, struct erofs_super_block *dsb)
fs/erofs/super.c:erofs_superblock_csum_verify(struct super_block *sb, void *sbdata)
fs/ioctl.c:do_vfs_ioctl(struct file *filp, unsigned int fd, unsigned int cmd, unsigned long arg)
fs/ioctl.c:fiemap_fill_next_extent(struct fiemap_extent_info *fieinfo, u64 logical, u64 phys, u64 len, u32 flags)
fs/ioctl.c:fiemap_prep(struct inode *inode, struct fiemap_extent_info *fieinfo, u64 start, u64 *len, u32 supported_flags)
fs/ioctl.c:ioctl_fibmap(struct file *filp, int __user *p)
fs/ioctl.c:ioctl_fiemap(struct file *filp, struct fiemap __user *ufiemap)
fs/ioctl.c:ioctl_file_clone(struct file *dst_file, unsigned long srcfd, u64 off, u64 olen, u64 destoff)
fs/ioctl.c:ioctl_file_clone_range(struct file *file, struct file_clone_range __user *argp)
fs/ioctl.c:ioctl_preallocate(struct file *filp, int mode, void __user *argp)
fs/erofs/inode.c:erofs_fill_inode(struct inode *inode)
fs/erofs/inode.c:erofs_fill_symlink(struct inode *inode, void *kaddr, unsigned int m_pofs)
fs/erofs/inode.c:erofs_iget()
erofs_iget5_set()
fs/erofs/inode.c:erofs_read_inode()
erofs_squash_ino()
fs/erofs/zmap.c:z_erofs_do_map_blocks(struct inode *inode, struct erofs_map_blocks *map, int flags)
fs/erofs/zmap.c:z_erofs_extent_lookback(struct z_erofs_maprecorder *m, unsigned int lookback_distance)
fs/erofs/zmap.c:z_erofs_get_extent_compressedlen(struct z_erofs_maprecorder *m, unsigned int initial_lcn)
fs/erofs/zmap.c:z_erofs_get_extent_decompressedlen(struct z_erofs_maprecorder *m)
fs/erofs/zmap.c:z_erofs_iomap_begin_report(struct inode *inode, loff_t offset, loff_t length, unsigned int flags, struct iomap *iomap, struct iomap *srcmap)
z_erofs_load_full_lcluster()
z_erofs_load_lcluster_from_disk()
fs/erofs/zmap.c:z_erofs_map_blocks_iter(struct inode *inode, struct erofs_map_blocks *map, int flags)
fs/erofs/data.c:erofs_fiemap(struct inode *inode, struct fiemap_extent_info *fieinfo, u64 start, u64 len)
erofs_iloc()
fs/erofs/internal.h:erofs_vm_map_ram()
fs/iomap/iter.c:iomap_iter(struct iomap_iter *iter, const struct iomap_ops *ops)
fs/erofs/internal.h:z_erofs_load_lz4_config(struct super_block *sb, struct erofs_super_block *dsb, struct z_erofs_lz4_cfgs *lz4, int len)
fs/erofs/internal.h:z_erofs_load_lzma_config(struct super_block *sb, struct erofs_super_block *dsb, struct z_erofs_lzma_cfgs *lzma, int size)
fs/iomap/fiemap.c:iomap_fiemap(struct inode *inode, struct fiemap_extent_info *fi, u64 start, u64 len, const struct iomap_ops *ops)
fs/iomap/iter.c:iomap_iter(struct iomap_iter *iter, const struct iomap_ops *ops)
fs/iomap/iter.c:iomap_iter_done(struct iomap_iter *iter)
erofs_init_inode_xattrs()
erofs_xattr_iter_inline()
erofs_xattr_iter_shared()
func for case 9c37714c07194d816417
fs/btrfs/transaction.c:__btrfs_end_transaction(struct btrfs_trans_handle *trans, int throttle)
fs/btrfs/transaction.c:__btrfs_wait_marked_extents(struct btrfs_fs_info *fs_info, struct extent_io_tree *dirty_pages)
fs/btrfs/transaction.c:btrfs_cleanup_pending_block_groups(struct btrfs_trans_handle *trans)
fs/btrfs/transaction.c:btrfs_commit_transaction(struct btrfs_trans_handle *trans)
fs/btrfs/transaction.c:btrfs_commit_transaction_async(struct btrfs_trans_handle *trans)
fs/btrfs/transaction.c:btrfs_start_delalloc_flush(struct btrfs_fs_info *fs_info)
fs/btrfs/transaction.c:btrfs_trans_release_metadata(struct btrfs_trans_handle *trans)
fs/btrfs/transaction.c:btrfs_wait_extents(struct btrfs_fs_info *fs_info, struct extent_io_tree *dirty_pages)
fs/btrfs/transaction.c:btrfs_write_and_wait_transaction(struct btrfs_trans_handle *trans)
fs/btrfs/transaction.c:btrfs_write_marked_extents(struct btrfs_fs_info *fs_info, struct extent_io_tree *dirty_pages, int mark)
fs/btrfs/transaction.c:cleanup_transaction(struct btrfs_trans_handle *trans, int err)
fs/btrfs/transaction.c:commit_cowonly_roots(struct btrfs_trans_handle *trans)
fs/btrfs/transaction.c:commit_fs_roots(struct btrfs_trans_handle *trans)
fs/btrfs/transaction.c:switch_commit_roots(struct btrfs_trans_handle *trans)
fs/btrfs/transaction.c:update_cowonly_root(struct btrfs_trans_handle *trans, struct btrfs_root *root)
fs/btrfs/super.c:btrfs_calc_avail_data_space(struct btrfs_fs_info *fs_info, u64 *free_bytes)
fs/btrfs/super.c:btrfs_control_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
fs/btrfs/super.c:btrfs_fill_super(struct super_block *sb, struct btrfs_fs_devices *fs_devices, void *data)
fs/btrfs/super.c:btrfs_mount()
fs/btrfs/super.c:btrfs_mount_root()
fs/btrfs/super.c:btrfs_parse_device_options(const char *options, fmode_t flags, void *holder)
fs/btrfs/super.c:btrfs_parse_options(struct btrfs_fs_info *info, char *options, unsigned long new_flags)
fs/btrfs/super.c:btrfs_parse_subvol_options(const char *options, char **subvol_name, u64 *subvol_objectid)
fs/btrfs/super.c:btrfs_remount(struct super_block *sb, int *flags, char *data)
fs/btrfs/super.c:btrfs_remount_begin(struct btrfs_fs_info *fs_info, unsigned long old_opts, int flags)
fs/btrfs/super.c:btrfs_remount_cleanup(struct btrfs_fs_info *fs_info, unsigned long old_opts)
fs/btrfs/super.c:btrfs_resize_thread_pool(struct btrfs_fs_info *fs_info, u32 new_pool_size, u32 old_pool_size)
fs/btrfs/super.c:btrfs_statfs(struct dentry *dentry, struct kstatfs *buf)
fs/btrfs/super.c:btrfs_sync_fs(struct super_block *sb, int wait)
fs/btrfs/super.c:btrfs_unfreeze(struct super_block *sb)
control_ioctl()
parse_options()
fs/btrfs/ctree.h:__btrfs_clear_fs_compat_ro(struct btrfs_fs_info *fs_info, u64 flag, const char *name)
fs/btrfs/ctree.h:__btrfs_clear_fs_incompat(struct btrfs_fs_info *fs_info, u64 flag, const char* name)
fs/btrfs/ctree.h:__btrfs_set_fs_compat_ro(struct btrfs_fs_info *fs_info, u64 flag, const char *name)
fs/btrfs/ctree.h:__btrfs_set_fs_incompat(struct btrfs_fs_info *fs_info, u64 flag, const char* name)
fs/btrfs/ctree.h:btrfs_cpu_balance_args_to_disk(struct btrfs_disk_balance_args *disk, const struct btrfs_balance_args *cpu)
fs/btrfs/ctree.h:btrfs_device_total_bytes(const struct extent_buffer *eb, struct btrfs_dev_item *s)
fs/btrfs/ctree.h:btrfs_disk_balance_args_to_cpu(struct btrfs_balance_args *cpu, const struct btrfs_disk_balance_args *disk)
fs/btrfs/ctree.h:btrfs_fs_closing(struct btrfs_fs_info *fs_info)
fs/btrfs/ctree.h:btrfs_insert_empty_item(struct btrfs_trans_handle *trans, struct btrfs_root *root, struct btrfs_path *path, const struct btrfs_key *key, u32 data_size)
fs/btrfs/ctree.h:btrfs_next_old_item(struct btrfs_root *root, struct btrfs_path *p, u64 time_seq)
fs/btrfs/ctree.h:btrfs_node_ptr_generation(const struct extent_buffer *eb, int nr)
fs/btrfs/ctree.h:btrfs_set_device_total_bytes(const struct extent_buffer *eb, struct btrfs_dev_item *s, u64 val)
fs/btrfs/ctree.h:btrfs_set_node_ptr_generation(const struct extent_buffer *eb, int nr, u64 val)
fs/btrfs/ctree.h:count_max_extents(struct btrfs_fs_info *fs_info, u64 size)
fs/btrfs/ctree.h:leaf_data_end(const struct extent_buffer *leaf)
fs/btrfs/delayed-ref.c:btrfs_add_delayed_data_ref(struct btrfs_trans_handle *trans, struct btrfs_ref *generic_ref, u64 reserved)
fs/btrfs/delayed-ref.c:btrfs_add_delayed_tree_ref(struct btrfs_trans_handle *trans, struct btrfs_ref *generic_ref, struct btrfs_delayed_extent_op *extent_op)
fs/btrfs/delayed-ref.c:btrfs_check_space_for_delayed_refs(struct btrfs_fs_info *fs_info)
fs/btrfs/delayed-ref.c:btrfs_delayed_refs_rsv_refill(struct btrfs_fs_info *fs_info, enum btrfs_reserve_flush_enum flush)
fs/btrfs/delayed-ref.c:btrfs_merge_delayed_refs(struct btrfs_trans_handle *trans, struct btrfs_delayed_ref_root *delayed_refs, struct btrfs_delayed_ref_head *head)
fs/btrfs/delayed-ref.c:btrfs_update_delayed_refs_rsv(struct btrfs_trans_handle *trans)
fs/btrfs/delayed-ref.c:insert_delayed_ref(struct btrfs_trans_handle *trans, struct btrfs_delayed_ref_root *root, struct btrfs_delayed_ref_head *href, struct btrfs_delayed_ref_node *ref)
fs/btrfs/delayed-ref.c:update_existing_head_ref(struct btrfs_trans_handle *trans, struct btrfs_delayed_ref_head *existing, struct btrfs_delayed_ref_head *update)
fs/btrfs/extent-tree.c:__btrfs_free_extent(struct btrfs_trans_handle *trans, struct btrfs_delayed_ref_node *node, u64 parent, u64 root_objectid, u64 owner_objectid, u64 owner_offset, int refs_to_drop, struct btrfs_delayed_extent_op *extent_op)
fs/btrfs/extent-tree.c:__btrfs_run_delayed_refs(struct btrfs_trans_handle *trans, unsigned long nr)
fs/btrfs/extent-tree.c:btrfs_alloc_tree_block()
fs/btrfs/transaction.c:btrfs_commit_transaction(struct btrfs_trans_handle *trans)
fs/btrfs/extent-tree.c:btrfs_drop_snapshot(struct btrfs_root *root, int update_ref, int for_reloc)
fs/btrfs/extent-tree.c:btrfs_free_extent(struct btrfs_trans_handle *trans, struct btrfs_ref *ref)
fs/btrfs/extent-tree.c:btrfs_reserve_extent(struct btrfs_root *root, u64 ram_bytes, u64 num_bytes, u64 min_alloc_size, u64 empty_size, u64 hint_byte, struct btrfs_key *ins, int is_data, int delalloc)
fs/btrfs/extent-tree.c:btrfs_run_delayed_refs(struct btrfs_trans_handle *trans, unsigned long count)
fs/btrfs/tree-log.c:btrfs_log_inode(struct btrfs_trans_handle *trans, struct btrfs_inode *inode, int inode_only, struct btrfs_log_ctx *ctx)
fs/btrfs/tree-log.c:btrfs_log_inode_parent(struct btrfs_trans_handle *trans, struct btrfs_inode *inode, struct dentry *parent, int inode_only, struct btrfs_log_ctx *ctx)
fs/btrfs/tree-log.c:btrfs_sync_log(struct btrfs_trans_handle *trans, struct btrfs_root *root, struct btrfs_log_ctx *ctx)
fs/btrfs/tree-log.c:free_log_tree(struct btrfs_trans_handle *trans, struct btrfs_root *log)
fs/btrfs/tree-log.c:log_inode_item(struct btrfs_trans_handle *trans, struct btrfs_root *log, struct btrfs_path *path, struct btrfs_inode *inode, bool inode_item_dropped)
fs/btrfs/tree-log.c:start_log_trans(struct btrfs_trans_handle *trans, struct btrfs_root *root, struct btrfs_log_ctx *ctx)
fs/btrfs/tree-log.c:update_log_root(struct btrfs_trans_handle *trans, struct btrfs_root *log, struct btrfs_root_item *root_item)
fs/btrfs/tree-log.c:walk_log_tree(struct btrfs_trans_handle *trans, struct btrfs_root *log, struct walk_control *wc)
fs/btrfs/volumes.c:btrfs_commit_device_sizes(struct btrfs_transaction *trans)
fs/btrfs/volumes.c:btrfs_init_devices_late(struct btrfs_fs_info *fs_info)
fs/btrfs/volumes.c:btrfs_read_chunk_tree(struct btrfs_fs_info *fs_info)
fs/btrfs/inode.c:btrfs_dirty_inode(struct inode *inode)
fs/btrfs/inode.c:btrfs_evict_inode(struct inode *inode)
fs/btrfs/inode.c:btrfs_update_inode(struct btrfs_trans_handle *trans, struct btrfs_root *root, struct btrfs_inode *inode)
fs/sync.c:do_sync_work(struct work_struct *work)
fs/sync.c:ksys_sync(void)
fs/sync.c:sync_filesystem(struct super_block *sb)
func for case 5ea725c25d06fb9114c4
net/core/dev.c:__dev_queue_xmit(struct sk_buff *skb, struct net_device *sb_dev)
net/core/dev.c:__dev_xmit_skb(struct sk_buff *skb, struct Qdisc *q, struct net_device *dev, struct netdev_queue *txq)
net/core/dev.c:dev_hard_start_xmit()
net/core/dev.c:dev_queue_xmit_nit(struct sk_buff *skb, struct net_device *dev)
net/core/dev.c:get_xps_queue(struct net_device *dev, struct net_device *sb_dev, struct sk_buff *skb)
net/core/dev.c:gso_features_check(const struct sk_buff *skb, struct net_device *dev, netdev_features_t features)
net/core/dev.c:harmonize_features(struct sk_buff *skb, netdev_features_t features)
net/core/dev.c:illegal_highdma(struct net_device *dev, struct sk_buff *skb)
net/core/dev.c:netdev_pick_tx(struct net_device *dev, struct sk_buff *skb, struct net_device *sb_dev)
net/core/dev.c:netif_skb_features(struct sk_buff *skb)
include/linux/skbuff.h:skb_assert_len(struct sk_buff *skb)
net/core/dev.c:skb_checksum_help(struct sk_buff *skb)
net/core/dev.c:skb_csum_hwoffload_help(struct sk_buff *skb, const netdev_features_t features)
net/core/dev.c:skb_update_prio(struct sk_buff *skb)
net/core/dev.c:skb_warn_bad_offload(const struct sk_buff *skb)
net/core/dev.c:validate_xmit_skb()
_deliver()
_rcv_skb()
dgram_()
net/ieee802154/socket.c:dgram_bind(struct sock *sk, struct sockaddr *uaddr, int len)
net/ieee802154/socket.c:dgram_connect(struct sock *sk, struct sockaddr *uaddr, int len)
net/ieee802154/socket.c:dgram_rcv_skb(struct sock *sk, struct sk_buff *skb)
net/ieee802154/socket.c:dgram_sendmsg(struct sock *sk, struct msghdr *msg, size_t size)
net/ieee802154/socket.c:ieee802154_create(struct net *net, struct socket *sock, int protocol, int kern)
net/ieee802154/socket.c:ieee802154_dgram_deliver(struct net_device *dev, struct sk_buff *skb)
net/ieee802154/socket.c:ieee802154_get_dev()
net/ieee802154/socket.c:ieee802154_raw_deliver(struct net_device *dev, struct sk_buff *skb)
net/ieee802154/socket.c:ieee802154_rcv(struct sk_buff *skb, struct net_device *dev, struct packet_type *pt, struct net_device *orig_dev)
net/ieee802154/socket.c:ieee802154_sock_bind(struct socket *sock, struct sockaddr *uaddr, int addr_len)
net/ieee802154/socket.c:ieee802154_sock_connect(struct socket *sock, struct sockaddr *uaddr, int addr_len, int flags)
net/ieee802154/socket.c:ieee802154_sock_release(struct socket *sock)
raw_()
net/ieee802154/socket.c:raw_bind(struct sock *sk, struct sockaddr *_uaddr, int len)
net/ieee802154/socket.c:raw_rcv_skb(struct sock *sk, struct sk_buff *skb)
net/ieee802154/socket.c:raw_sendmsg(struct sock *sk, struct msghdr *msg, size_t size)
sk_buff()
sock_release()
net/bpf/test_run.c:bpf_ctx_init()
net/bpf/test_run.c:bpf_prog_test_run_raw_tp(struct bpf_prog *prog, const union bpf_attr *kattr, union bpf_attr __user *uattr)
net/bpf/test_run.c:bpf_prog_test_run_skb(struct bpf_prog *prog, const union bpf_attr *kattr, union bpf_attr __user *uattr)
net/bpf/test_run.c:bpf_prog_test_run_syscall(struct bpf_prog *prog, const union bpf_attr *kattr, union bpf_attr __user *uattr)
net/bpf/test_run.c:bpf_prog_test_run_tracing(struct bpf_prog *prog, const union bpf_attr *kattr, union bpf_attr __user *uattr)
net/bpf/test_run.c:bpf_prog_test_run_xdp(struct bpf_prog *prog, const union bpf_attr *kattr, union bpf_attr __user *uattr)
net/bpf/test_run.c:bpf_test_finish(const union bpf_attr *kattr, union bpf_attr __user *uattr, const void *data, struct skb_shared_info *sinfo, u32 size, u32 retval, u32 duration)
net/bpf/test_run.c:bpf_test_run(struct bpf_prog *prog, void *ctx, u32 repeat, u32 *retval, u32 *time, bool xdp)
net/bpf/test_run.c:convert___skb_to_skb(struct sk_buff *skb, struct __sk_buff *__skb)
net/bpf/test_run.c:convert_skb_to___skb(struct sk_buff *skb, struct __sk_buff *__skb)
test_run()
net/bpf/test_run.c:xdp_convert_md_to_buff(struct xdp_md *xdp_md, struct xdp_buff *xdp)
net/bpf/test_run.c:xdp_recv_frames(struct xdp_frame **frames, int nframes, struct sk_buff **skbs, struct net_device *dev)
net/bpf/test_run.c:xdp_test_run_batch(struct xdp_test_data *xdp, struct bpf_prog *prog, u32 repeat)
net/bpf/test_run.c:xdp_test_run_init_page(struct page *page, void *arg)
net/bpf/test_run.c:xdp_test_run_setup(struct xdp_test_data *xdp, struct xdp_buff *orig_ctx)
net/core/filter.c:__bpf_redirect_no_mac(struct sk_buff *skb, struct net_device *dev, u32 flags)
net/core/filter.c:__bpf_skb_change_head(struct sk_buff *skb, u32 head_room, u64 flags)
net/core/filter.c:__bpf_skb_change_tail(struct sk_buff *skb, u32 new_len, u64 flags)
net/core/filter.c:__bpf_tx_skb(struct net_device *dev, struct sk_buff *skb)
net/core/dev.c:__dev_queue_xmit(struct sk_buff *skb, struct net_device *sb_dev)
net/core/filter.c:bpf_skb_generic_pop(struct sk_buff *skb, u32 off, u32 len)
net/core/filter.c:bpf_skb_generic_push(struct sk_buff *skb, u32 off, u32 len)
net/core/filter.c:bpf_skb_proto_xlat(struct sk_buff *skb, __be16 to_proto)
net/core/filter.c:skb_do_redirect(struct sk_buff *skb)
include/linux/skbuff.h:__skb_fill_page_desc(struct sk_buff *skb, int i, struct page *page, int off, int size)
include/linux/skbuff.h:skb_assert_len(struct sk_buff *skb)
include/linux/skbuff.h:skb_header_unclone(struct sk_buff *skb, gfp_t pri)
include/linux/skbuff.h:skb_orphan(struct sk_buff *skb)
include/linux/skbuff.h:skb_orphan_frags(struct sk_buff *skb, gfp_t gfp_mask)
include/linux/skbuff.h:skb_share_check()
include/linux/skbuff.h:skb_unclone(struct sk_buff *skb, gfp_t pri)
include/linux/skbuff.h:skb_unshare()
net/core/skbuff.c:pskb_carve(struct sk_buff *skb, const u32 len, gfp_t gfp)
net/core/skbuff.c:pskb_expand_head(struct sk_buff *skb, int nhead, int ntail, gfp_t gfp_mask)
sk_buff()
sk_buffs()
include/linux/skbuff.h:skb_assert_len(struct sk_buff *skb)
net/core/skbuff.c:skb_attempt_defer_free(struct sk_buff *skb)
net/core/skbuff.c:skb_condense(struct sk_buff *skb)
net/core/skbuff.c:skb_copy_expand()
net/core/skbuff.c:skb_cow_data(struct sk_buff *skb, int tailbits, struct sk_buff **trailer)
net/core/skbuff.c:skb_ensure_writable(struct sk_buff *skb, unsigned int write_len)
net/core/skbuff.c:skb_realloc_headroom()
net/core/dev.c:__dev_queue_xmit(struct sk_buff *skb, struct net_device *sb_dev)
dev_queue_xmit()
include/linux/netdevice.h:netdev_start_xmit(struct sk_buff *skb, struct net_device *dev, struct netdev_queue *txq, bool more)
net/core/dev.c:__dev_queue_xmit(struct sk_buff *skb, struct net_device *sb_dev)
dev_queue_xmit()
include/linux/skbuff.h:skb_assert_len(struct sk_buff *skb)
func for case 27b0b464864741b18b99
kernel/workqueue.c:__flush_work(struct work_struct *work, bool from_cancel)
drivers/usb/core/hub.c:hub_activate(struct usb_hub *hub, enum hub_activation_type type)
drivers/usb/core/hub.c:hub_configure(struct usb_hub *hub, struct usb_endpoint_descriptor *endpoint)
drivers/usb/core/hub.c:hub_disconnect(struct usb_interface *intf)
drivers/usb/core/hub.c:hub_disconnect_children(struct usb_device *udev)
drivers/usb/core/hub.c:hub_event(struct work_struct *work)
drivers/usb/core/hub.c:hub_free_dev(struct usb_device *udev)
drivers/usb/core/hub.c:hub_port_connect(struct usb_hub *hub, int port1, u16 portstatus, u16 portchange)
drivers/usb/core/hub.c:hub_port_debounce(struct usb_hub *hub, int port1, bool must_be_connected)
drivers/usb/core/hub.c:hub_port_disable(struct usb_hub *hub, int port1, int set_state)
drivers/usb/core/hub.c:hub_port_init(struct usb_hub *hub, struct usb_device *udev, int port1, int retry_counter)
drivers/usb/core/hub.c:hub_port_logical_disconnect(struct usb_hub *hub, int port1)
drivers/usb/core/hub.c:hub_port_reset(struct usb_hub *hub, int port1, struct usb_device *udev, unsigned int delay, bool warm)
drivers/usb/core/hub.c:hub_port_wait_reset(struct usb_hub *hub, int port1, struct usb_device *udev, unsigned int delay, bool warm)
drivers/usb/core/hub.c:hub_quiesce(struct usb_hub *hub, enum hub_quiescing_type type)
drivers/usb/core/hub.c:usb_disconnect(struct usb_device **pdev)
kernel/workqueue.c:__flush_work(struct work_struct *work, bool from_cancel)
kernel/workqueue.c:__flush_workqueue(struct workqueue_struct *wq)
kernel/workqueue.c:alloc_worker()
kernel/workqueue.c:check_flush_dependency(struct workqueue_struct *target_wq, struct work_struct *target_work)
kernel/workqueue.c:create_worker()
kernel/workqueue.c:drain_workqueue(struct workqueue_struct *wq)
kernel/workqueue.c:flush_workqueue_prep_pwqs(struct workqueue_struct *wq, int flush_color, int work_color)
kernel/workqueue.c:get_unbound_pool()
kernel/workqueue.c:insert_wq_barrier(struct pool_workqueue *pwq, struct wq_barrier *barr, struct work_struct *target, struct worker *worker)
kernel/workqueue.c:manage_workers(struct worker *worker)
kernel/workqueue.c:put_unbound_pool(struct worker_pool *pool)
kernel/workqueue.c:start_flush_work(struct work_struct *work, struct wq_barrier *barr, bool from_cancel)
kernel/workqueue.c:worker_attach_to_pool(struct worker *worker, struct worker_pool *pool)
kernel/workqueue.c:worker_detach_from_pool(struct worker *worker)
kernel/workqueue.c:worker_thread(void *__worker)
drivers/usb/core/hub.c:hub_event(struct work_struct *work)
smsusb_probe()
drivers/usb/core/driver.c:usb_autopm_get_interface(struct usb_interface *intf)
drivers/usb/core/driver.c:usb_autopm_put_interface_async(struct usb_interface *intf)
drivers/usb/core/driver.c:usb_autoresume_device(struct usb_device *udev)
drivers/usb/core/driver.c:usb_driver_claim_interface(struct usb_driver *driver, struct usb_interface *iface, void *data)
drivers/usb/core/driver.c:usb_driver_release_interface(struct usb_driver *driver, struct usb_interface *iface)
drivers/usb/core/driver.c:usb_match_device(struct usb_device *dev, const struct usb_device_id *id)
drivers/usb/core/driver.c:usb_match_one_id(struct usb_interface *interface, const struct usb_device_id *id)
drivers/usb/core/driver.c:usb_probe_device(struct device *dev)
drivers/usb/core/driver.c:usb_probe_interface(struct device *dev)
drivers/usb/core/driver.c:usb_resume_both(struct usb_device *udev, pm_message_t msg)
drivers/usb/core/driver.c:usb_resume_interface(struct usb_device *udev, struct usb_interface *intf, pm_message_t msg, int reset_resume)
drivers/usb/core/driver.c:usb_suspend_both(struct usb_device *udev, pm_message_t msg)
drivers/usb/core/driver.c:usb_suspend_interface(struct usb_device *udev, struct usb_interface *intf, pm_message_t msg)
drivers/usb/core/driver.c:usb_unbind_device(struct device *dev)
drivers/usb/core/driver.c:usb_unbind_interface(struct device *dev)
drivers/usb/core/usb.c:usb_alloc_dev()
drivers/usb/core/usb.c:usb_bus_notify(struct notifier_block *nb, unsigned long action, void *data)
drivers/usb/core/usb.c:usb_dev_authorized(struct usb_device *dev, struct usb_hcd *hcd)
drivers/usb/core/usb.c:usb_find_common_endpoints(struct usb_host_interface *alt, struct usb_endpoint_descriptor **bulk_in, struct usb_endpoint_descriptor **bulk_out, struct usb_endpoint_descriptor **int_in, struct usb_endpoint_descriptor **int_out)
drivers/usb/core/usb.c:usb_find_common_endpoints_reverse(struct usb_host_interface *alt, struct usb_endpoint_descriptor **bulk_in, struct usb_endpoint_descriptor **bulk_out, struct usb_endpoint_descriptor **int_in, struct usb_endpoint_descriptor **int_out)
drivers/usb/core/usb.c:usb_intf_get_dma_device()
drivers/usb/core/usb.c:usb_lock_device_for_reset(struct usb_device *udev, const struct usb_interface *iface)
drivers/usb/core/usb.c:usb_release_dev(struct device *dev)
kernel/workqueue.c:__flush_work(struct work_struct *work, bool from_cancel)
kernel/workqueue.c:alloc_workqueue()
kernel/workqueue.c:destroy_workqueue(struct workqueue_struct *wq)
flush_work()
flush_workqueue()
queue_work()
schedule_work()
kernel/workqueue.c:workqueue_init(void)
include/linux/usb.h:init_usb_anchor(struct usb_anchor *anchor)
include/linux/usb.h:usb_fill_control_urb(struct urb *urb, struct usb_device *dev, unsigned int pipe, unsigned char *setup_packet, void *transfer_buffer, int buffer_length, usb_complete_t complete_fn, void *context)
include/linux/usb.h:usb_fill_int_urb(struct urb *urb, struct usb_device *dev, unsigned int pipe, void *transfer_buffer, int buffer_length, usb_complete_t complete_fn, void *context, int interval)
include/linux/usb.h:usb_make_path(struct usb_device *dev, char *buf, size_t size)
include/linux/usb.h:usb_maxpacket(struct usb_device *udev, int pipe)
drivers/usb/core/urb.c:__usb_unanchor_urb(struct urb *urb, struct usb_anchor *anchor)
drivers/usb/core/urb.c:usb_anchor_urb(struct urb *urb, struct usb_anchor *anchor)
drivers/usb/core/urb.c:usb_kill_anchored_urbs(struct usb_anchor *anchor)
drivers/usb/core/urb.c:usb_kill_urb(struct urb *urb)
drivers/usb/core/urb.c:usb_poison_anchored_urbs(struct usb_anchor *anchor)
drivers/usb/core/urb.c:usb_submit_urb(struct urb *urb, gfp_t mem_flags)
drivers/usb/core/urb.c:usb_unanchor_urb(struct urb *urb)
drivers/usb/core/urb.c:usb_unlink_urb(struct urb *urb)
kernel/workqueue.c:__flush_work(struct work_struct *work, bool from_cancel)
smsusb_probe()
usb_hub_wq()
kernel/softirq.c:tasklet_action_common(struct softirq_action *a, struct tasklet_head *tl_head, unsigned int softirq_nr)
kernel/softirq.c:tasklet_kill(struct tasklet_struct *t)
kernel/softirq.c:tasklet_unlock(struct tasklet_struct *t)
func for case 3db80bbf66b88d68af9d
fs/reiserfs/xattr.c:create_privroot(struct dentry *dentry)
fs/reiserfs/xattr.c:fill_with_dentries(struct dir_context *ctx, const char *name, int namelen, loff_t offset, u64 ino, unsigned int d_type)
get_page()
fs/reiserfs/xattr.c:lookup_and_delete_xattr(struct inode *inode, const char *name)
mount_check()
fs/reiserfs/xattr.c:open_xa_dir()
fs/reiserfs/xattr.c:open_xa_root()
fs/reiserfs/xattr.c:reiserfs_for_each_xattr(struct inode *inode, int (*action)(struct dentry *, void *), void *data)
fs/reiserfs/xattr.c:reiserfs_get_page()
fs/reiserfs/xattr.c:reiserfs_lookup_privroot(struct super_block *s)
fs/reiserfs/xattr.c:reiserfs_xattr_init(struct super_block *s, int mount_flags)
fs/reiserfs/xattr.c:reiserfs_xattr_set(struct inode *inode, const char *name, const void *buffer, size_t buffer_size, int flags)
fs/reiserfs/xattr.c:reiserfs_xattr_set_handle(struct reiserfs_transaction_handle *th, struct inode *inode, const char *name, const void *buffer, size_t buffer_size, int flags)
xattr_init()
fs/reiserfs/xattr.c:xattr_lookup()
fs/reiserfs/xattr.c:xattr_mount_check(struct super_block *s)
fs/reiserfs/xattr.c:xattr_rmdir(struct inode *dir, struct dentry *dentry)
fs/reiserfs/xattr.c:xattr_unlink(struct inode *dir, struct dentry *dentry)
fs/reiserfs/super.c:finish_unfinished(struct super_block *s)
fs/reiserfs/super.c:handle_attrs(struct super_block *s)
fs/reiserfs/super.c:handle_barrier_mode(struct super_block *s, unsigned long bits)
fs/reiserfs/super.c:handle_data_mode(struct super_block *s, unsigned long mount_options)
fs/reiserfs/super.c:handle_quota_files(struct super_block *s, char **qf_names, unsigned int *qfmt)
kill_sb()
put_super()
fs/reiserfs/super.c:read_super_block(struct super_block *s, int offset)
fs/reiserfs/super.c:reiserfs_alloc_inode()
fs/reiserfs/super.c:reiserfs_fill_super(struct super_block *s, void *data, int silent)
fs/reiserfs/super.c:reiserfs_freeze(struct super_block *s)
fs/reiserfs/super.c:reiserfs_kill_sb(struct super_block *s)
fs/reiserfs/super.c:reiserfs_parse_options(struct super_block *s, /* string given via mount's -o */ char *options, /* * after the parsing phase, contains the * collection of bitflags defining what * mount options were selected. */ unsigned long *mount_options, /* strtol-ed from NNN of resize=NNN */ unsigned long *blocks, char **jdev_name, unsigned int *commit_max_age, char **qf_names, unsigned int *qfmt)
fs/reiserfs/super.c:reiserfs_put_super(struct super_block *s)
fs/reiserfs/super.c:reiserfs_remount(struct super_block *s, int *mount_flags, char *arg)
fs/reiserfs/super.c:reiserfs_sync_fs(struct super_block *s, int wait)
fs/reiserfs/super.c:remove_save_link_only(struct super_block *s, struct reiserfs_key *key, int oid_free)
buffer_head()
fs/reiserfs/journal.c:do_journal_end(struct reiserfs_transaction_handle *th, int flags)
fs/reiserfs/journal.c:flush_journal_list(struct super_block *s, struct reiserfs_journal_list *jl, int flushall)
fs/reiserfs/journal.c:journal_begin(struct reiserfs_transaction_handle *th, struct super_block *sb, unsigned long nblocks)
fs/reiserfs/journal.c:journal_end(struct reiserfs_transaction_handle *th)
fs/reiserfs/journal.c:journal_init(struct super_block *sb, const char *j_dev_name, int old_format, unsigned int commit_max_age)
fs/reiserfs/journal.c:journal_read(struct super_block *sb)
fs/reiserfs/journal.c:journal_transaction_is_valid(struct super_block *sb, struct buffer_head *d_bh, unsigned int *oldest_invalid_trans_id, unsigned long *newest_mount_id)
fs/reiserfs/journal.c:reiserfs_abort_journal(struct super_block *sb, int errno)
fs/reiserfs/inode.c:reiserfs_evict_inode(struct inode *inode)
fs/reiserfs/inode.c:reiserfs_get_block(struct inode *inode, sector_t block, struct buffer_head *bh_result, int create)
fs/reiserfs/inode.c:reiserfs_iget()
fs/reiserfs/inode.c:reiserfs_new_inode(struct reiserfs_transaction_handle *th, struct inode *dir, umode_t mode, const char *symname, /* 0 for regular, EMTRY_DIR_SIZE for dirs, strlen (symname) for symlinks) */ loff_t i_size, struct dentry *dentry, struct inode *inode, struct reiserfs_security_handle *security)
fs/reiserfs/inode.c:reiserfs_read_locked_inode(struct inode *inode, struct reiserfs_iget_args *args)
fs/reiserfs/inode.c:reiserfs_setattr(struct dentry *dentry, struct iattr *attr)
fs/reiserfs/inode.c:reiserfs_truncate_file(struct inode *inode, int update_timestamps)
fs/reiserfs/inode.c:reiserfs_write_inode(struct inode *inode, struct writeback_control *wbc)
fs/reiserfs/objectid.c:reiserfs_convert_objectid_map_v1(struct super_block *s)
fs/reiserfs/objectid.c:reiserfs_get_unused_objectid(struct reiserfs_transaction_handle *th)
fs/reiserfs/xattr.c:reiserfs_lookup_privroot(struct super_block *s)
fs/reiserfs/objectid.c:reiserfs_release_objectid(struct reiserfs_transaction_handle *th, __u32 objectid_to_release)
fs/reiserfs/stree.c:prepare_for_delete_or_cut(struct reiserfs_transaction_handle *th, struct inode *inode, struct treepath *path, const struct cpu_key *item_key, /* * Number of unformatted nodes * which were removed from end * of the file. */ int *removed, int *cut_size, /* MAX_KEY_OFFSET in case of delete. */ unsigned long long new_file_length)
fs/reiserfs/stree.c:reiserfs_delete_item(struct reiserfs_transaction_handle *th, struct treepath *path, const struct cpu_key *item_key, struct inode *inode, struct buffer_head *un_bh)
fs/reiserfs/stree.c:reiserfs_delete_solid_item(struct reiserfs_transaction_handle *th, struct inode *inode, struct reiserfs_key *key)
fs/reiserfs/stree.c:reiserfs_do_truncate(struct reiserfs_transaction_handle *th, struct inode *inode, /* ->i_size contains new size */ struct page *page, /* up to date for last block */ /* * when it is called by file_release to convert * the tail - no timestamps should be updated */ int update_timestamps)
fs/reiserfs/stree.c:reiserfs_insert_item(struct reiserfs_transaction_handle *th, struct treepath *path, const struct cpu_key *key, struct item_head *ih, struct inode *inode, const char *body)
fs/reiserfs/stree.c:reiserfs_paste_into_item(struct reiserfs_transaction_handle *th, /* Path to the pasted item. */ struct treepath *search_path, /* Key to search for the needed item. */ const struct cpu_key *key, /* Inode item belongs to */ struct inode *inode, /* Pointer to the bytes to paste. */ const char *body, /* Size of pasted bytes. */ int pasted_size)
fs/reiserfs/stree.c:search_by_key(struct super_block *sb, const struct cpu_key *key, struct treepath *search_path, int stop_level)
fs/reiserfs/stree.c:search_for_position_by_key(struct super_block *sb, /* Key to search (cpu variable) */ const struct cpu_key *p_cpu_key, /* Filled up by this function. */ struct treepath *search_path)
fs/namei.c:__lookup_slow()
lookup_one()
lookup_one_common()
fs/namei.c:__lookup_slow()
fs/reiserfs/namei.c:linear_search_in_dir_item(struct cpu_key *key, struct reiserfs_dir_entry *de, const char *name, int namelen)
fs/namei.c:lookup_one_len()
fs/reiserfs/namei.c:reiserfs_find_entry(struct inode *dir, const char *name, int namelen, struct treepath *path_to_entry, struct reiserfs_dir_entry *de)
fs/reiserfs/namei.c:reiserfs_lookup()
fs/reiserfs/xattr.c:reiserfs_lookup_privroot(struct super_block *s)
fs/namespace.c:do_mount(const char *dev_name, const char __user *dir_name, const char *type_page, unsigned long flags, void *data_page)
fs/namespace.c:do_new_mount(struct path *path, const char *fstype, int sb_flags, int mnt_flags, const char *name, void *data)
fs/namespace.c:path_mount(const char *dev_name, struct path *path, const char *type_page, unsigned long flags, void *data_page)
func for case a8f26a403c169b7593fe
fs/ntfs3/dir.c:_utf8s_to_utf16s(const u8 *s, int inlen, enum utf16_endian endian, wchar_t *pwcs, int maxout)
fs/ntfs3/dir.c:dir_search_u()
fs/ntfs3/dir.c:ntfs_dir_count(struct inode *dir, bool *is_empty, size_t *dirs, size_t *files)
fs/ntfs3/dir.c:ntfs_filldir(struct ntfs_sb_info *sbi, struct ntfs_inode *ni, const struct NTFS_DE *e, u8 *name, struct dir_context *ctx)
fs/ntfs3/dir.c:ntfs_nls_to_utf16(struct ntfs_sb_info *sbi, const u8 *name, u32 name_len, struct cpu_str *uni, u32 max_ulen, enum utf16_endian endian)
fs/ntfs3/dir.c:ntfs_read_hdr(struct ntfs_sb_info *sbi, struct ntfs_inode *ni, const struct INDEX_HDR *hdr, u64 vbo, u64 pos, u8 *name, struct dir_context *ctx)
fs/ntfs3/dir.c:ntfs_readdir(struct file *file, struct dir_context *ctx)
fs/ntfs3/dir.c:ntfs_utf16_to_nls(struct ntfs_sb_info *sbi, const __le16 *name, u32 len, u8 *buf, int buf_len)
create_inode()
fs/dcache.c:d_splice_alias()
get_block()
fs/ntfs3/inode.c:inode_write_data(struct inode *inode, const void *data, size_t bytes)
fs/ntfs3/inode.c:ntfs_create_inode()
fs/ntfs3/inode.c:ntfs_create_reparse_buffer()
fs/ntfs3/inode.c:ntfs_direct_IO(struct kiocb *iocb, struct iov_iter *iter)
fs/ntfs3/inode.c:ntfs_flush_inodes(struct super_block *sb, struct inode *i1, struct inode *i2)
fs/ntfs3/inode.c:ntfs_get_block_vbo(struct inode *inode, u64 vbo, struct buffer_head *bh, int create, enum get_block_ctx ctx)
fs/ntfs3/inode.c:ntfs_iget5()
fs/ntfs3/inode.c:ntfs_read_folio(struct file *file, struct folio *folio)
fs/ntfs3/inode.c:ntfs_read_mft()
fs/ntfs3/inode.c:ntfs_readahead(struct readahead_control *rac)
fs/ntfs3/inode.c:ntfs_set_size(struct inode *inode, u64 new_size)
fs/ntfs3/inode.c:ntfs_write_begin(struct file *file, struct address_space *mapping, loff_t pos, u32 len, struct page **pagep, void **fsdata)
fs/ntfs3/inode.c:ntfs_write_end(struct file *file, struct address_space *mapping, loff_t pos, u32 len, u32 copied, struct page *page, void *fsdata)
fs/ntfs3/inode.c:ntfs_writepage(struct page *page, struct writeback_control *wbc)
read_mft()
fs/ntfs3/inode.c:reset_log_file(struct inode *inode)
set_size()
fs/ntfs3/super.c:init_ntfs_fs(void)
fs/ntfs3/super.c:ntfs_discard(struct ntfs_sb_info *sbi, CLST lcn, CLST len)
fs/ntfs3/super.c:ntfs_export_get_inode()
fs/ntfs3/super.c:ntfs_fill_super(struct super_block *sb, struct fs_context *fc)
fs/ntfs3/super.c:ntfs_fs_parse_param(struct fs_context *fc, struct fs_parameter *param)
fs/ntfs3/super.c:ntfs_fs_reconfigure(struct fs_context *fc)
fs/ntfs3/super.c:ntfs_init_from_boot(struct super_block *sb, u32 sector_size, u64 dev_size)
fs/ntfs3/super.c:ntfs_init_fs_context(struct fs_context *fc)
fs/ntfs3/super.c:ntfs_load_nls()
fs/ntfs3/super.c:ntfs_put_super(struct super_block *sb)
fs/ntfs3/super.c:ntfs_show_options(struct seq_file *m, struct dentry *root)
fs/ntfs3/super.c:ntfs_statfs(struct dentry *dentry, struct kstatfs *buf)
fs/ntfs3/super.c:ntfs_sync_fs(struct super_block *sb, int wait)
fs/ntfs3/super.c:ntfs_unmap_meta(struct super_block *sb, CLST lcn, CLST len)
fs/ntfs3/super.c:put_ntfs(struct ntfs_sb_info *sbi)
fs/dcache.c:__d_add(struct dentry *dentry, struct inode *inode)
fs/dcache.c:__d_instantiate(struct dentry *dentry, struct inode *inode)
fs/dcache.c:__d_lookup()
fs/dcache.c:d_alloc()
fs/dcache.c:d_flags_for_inode(struct inode *inode)
fs/dcache.c:d_hash_and_lookup()
fs/dcache.c:d_instantiate(struct dentry *entry, struct inode * inode)
fs/dcache.c:d_splice_alias()
fs/namei.c:do_filp_open()
fs/namei.c:lookup_open()
fs/namei.c:open_last_lookups()
fs/namei.c:path_openat()
vfs_()
fs/namei.c:vfs_create(struct user_namespace *mnt_userns, struct inode *dir, struct dentry *dentry, umode_t mode, bool want_excl)
fs/namei.c:vfs_mkdir(struct user_namespace *mnt_userns, struct inode *dir, struct dentry *dentry, umode_t mode)
fs/namei.c:vfs_symlink(struct user_namespace *mnt_userns, struct inode *dir, struct dentry *dentry, const char *oldname)
fs/namei.c:vfs_unlink(struct user_namespace *mnt_userns, struct inode *dir, struct dentry *dentry, struct inode **delegated_inode)
fs/ntfs3/file.c:ntfs3_setattr(struct user_namespace *mnt_userns, struct dentry *dentry, struct iattr *attr)
fs/ntfs3/file.c:ntfs_compress_write(struct kiocb *iocb, struct iov_iter *from)
fs/ntfs3/file.c:ntfs_extend(struct inode *inode, loff_t pos, size_t count, struct file *file)
fs/ntfs3/file.c:ntfs_extend_initialized_size(struct file *file, struct ntfs_inode *ni, const loff_t valid, const loff_t new_valid)
fs/ntfs3/file.c:ntfs_fallocate(struct file *file, int mode, loff_t vbo, loff_t len)
fs/ntfs3/file.c:ntfs_file_release(struct inode *inode, struct file *file)
fs/ntfs3/file.c:ntfs_file_write_iter(struct kiocb *iocb, struct iov_iter *from)
fs/ntfs3/file.c:ntfs_truncate(struct inode *inode, loff_t new_size)
fs/open.c:dentry_open()
fs/open.c:do_sys_openat2(int dfd, const char __user *filename, struct open_how *how)
fs/open.c:filp_open()
fs/super.c:get_tree_bdev(struct fs_context *fc, int (*fill_super)(struct super_block *, struct fs_context *)))
fs/super.c:mount_bdev()
fs/super.c:vfs_get_tree(struct fs_context *fc))
func for case f816042a7ae2225f25ba
fs/quota/dquot.c:__dquot_alloc_space(struct inode *inode, qsize_t number, int flags)
fs/quota/dquot.c:__dquot_drop(struct inode *inode)
fs/quota/dquot.c:__dquot_free_space(struct inode *inode, qsize_t number, int flags)
fs/quota/dquot.c:dquot_acquire(struct dquot *dquot)
fs/quota/dquot.c:dquot_alloc_inode(struct inode *inode)
fs/quota/dquot.c:dquot_commit(struct dquot *dquot)
fs/quota/dquot.c:dquot_drop(struct inode *inode)
fs/quota/dquot.c:dquot_free_inode(struct inode *inode)
dquot_initialize()
fs/quota/dquot.c:dquot_release(struct dquot *dquot)
fs/quota/dquot.c:dquot_transfer(struct inode *inode, struct iattr *iattr)
fs/quota/dquot.c:dquot_writeback_dquots(struct super_block *sb, int type)
fs/quota/dquot.c:find_dquot()
fs/quota/dquot.c:mark_all_dquot_dirty(struct dquot * const *dquot)
fs/ext4/ialloc.c:__ext4_new_inode()
fs/ext4/ialloc.c:ext4_count_free_inodes(struct super_block *sb)
fs/ext4/ialloc.c:ext4_free_inode(handle_t *handle, struct inode *inode)
fs/ext4/ialloc.c:ext4_init_inode_table(struct super_block *sb, ext4_group_t group, int barrier)
fs/ext4/ialloc.c:ext4_orphan_get()
fs/ext4/ialloc.c:ext4_read_inode_bitmap()
fs/ext4/ialloc.c:find_group_orlov(struct super_block *sb, struct inode *parent, ext4_group_t *group, umode_t mode, const struct qstr *qstr)
fs/ext4/ialloc.c:find_group_other(struct super_block *sb, struct inode *parent, ext4_group_t *group, umode_t mode)
fs/ext4/ialloc.c:find_inode_bit(struct super_block *sb, ext4_group_t group, struct buffer_head *bitmap, unsigned long *ino)
fs/ext4/ialloc.c:get_orlov_stats(struct super_block *sb, ext4_group_t g, int flex_size, struct orlov_stats *stats)
fs/ext4/ialloc.c:recently_deleted(struct super_block *sb, ext4_group_t group, int ino)
fs/quota/quota_tree.c:do_insert_tree(struct qtree_mem_dqinfo *info, struct dquot *dquot, uint *treeblk, int depth)
fs/quota/quota_tree.c:find_block_dqentry(struct qtree_mem_dqinfo *info, struct dquot *dquot, uint blk)
fs/quota/quota_tree.c:find_free_dqentry(struct qtree_mem_dqinfo *info, struct dquot *dquot, int *err)
fs/quota/quota_tree.c:find_tree_dqentry(struct qtree_mem_dqinfo *info, struct dquot *dquot, uint blk, int depth)
fs/quota/quota_tree.c:free_dqentry(struct qtree_mem_dqinfo *info, struct dquot *dquot, uint blk)
fs/quota/quota_tree.c:get_free_dqblk(struct qtree_mem_dqinfo *info)
fs/quota/quota_tree.c:insert_free_dqentry(struct qtree_mem_dqinfo *info, char *buf, uint blk)
fs/quota/quota_tree.c:put_free_dqblk(struct qtree_mem_dqinfo *info, char *buf, uint blk)
fs/quota/quota_tree.c:qtree_get_next_id(struct qtree_mem_dqinfo *info, struct kqid *qid)
fs/quota/quota_tree.c:qtree_read_dquot(struct qtree_mem_dqinfo *info, struct dquot *dquot)
fs/quota/quota_tree.c:qtree_write_dquot(struct qtree_mem_dqinfo *info, struct dquot *dquot)
quota_tree()
fs/quota/quota_tree.c:read_blk(struct qtree_mem_dqinfo *info, uint blk, char *buf)
fs/quota/quota_tree.c:remove_free_dqentry(struct qtree_mem_dqinfo *info, char *buf, uint blk)
fs/quota/quota_tree.c:remove_tree(struct qtree_mem_dqinfo *info, struct dquot *dquot, uint *blk, int depth)
fs/quota/quota_tree.c:write_blk(struct qtree_mem_dqinfo *info, uint blk, char *buf)
fs/ext4/ialloc.c:__ext4_new_inode()
fs/ext4/namei.c:ext4_add_entry(handle_t *handle, struct dentry *dentry, struct inode *inode)
fs/ext4/namei.c:ext4_create(struct inode *dir, struct dentry *dentry, umode_t mode, bool excl)
fs/ext4/namei.c:ext4_delete_entry(handle_t *handle, struct inode *dir, struct ext4_dir_entry_2 *de_del, struct buffer_head *bh)
fs/ext4/namei.c:ext4_mknod(struct inode *dir, struct dentry *dentry, umode_t mode, dev_t rdev)
fs/ext4/namei.c:ext4_orphan_add(handle_t *handle, struct inode *inode)
fs/ext4/namei.c:ext4_orphan_del(handle_t *handle, struct inode *inode)
fs/ext4/namei.c:ext4_tmpfile(struct inode *dir, struct dentry *dentry, umode_t mode)
fs/quota/quota.c:copy_from_xfs_dqblk(struct qc_dqblk *dst, struct fs_disk_quota *src)
fs/quota/quota.c:do_quotactl(struct super_block *sb, int type, int cmd, qid_t id, void __user *addr, const struct path *path)
fs/quota/quota_tree.c:qtree_write_dquot(struct qtree_mem_dqinfo *info, struct dquot *dquot)
fs/quota/quota.c:quota_getquota(struct super_block *sb, int type, qid_t id, void __user *addr)
fs/quota/quota.c:quota_getxquota(struct super_block *sb, int type, qid_t id, void __user *addr)
fs/quota/quota.c:quota_quotaoff(struct super_block *sb, int type)
fs/quota/quota.c:quota_quotaon(struct super_block *sb, int type, qid_t id, const struct path *path)
fs/quota/quota.c:quota_setquota(struct super_block *sb, int type, qid_t id, void __user *addr)
fs/quota/quota.c:quota_setxquota(struct super_block *sb, int type, qid_t id, void __user *addr)
fs/ext4/ialloc.c:__ext4_new_inode()
fs/ext4/super.c:ext4_acquire_dquot(struct dquot *dquot)
fs/ext4/super.c:ext4_enable_quotas(struct super_block *sb)
fs/ext4/super.c:ext4_quota_off(struct super_block *sb, int type)
fs/ext4/super.c:ext4_quota_on(struct super_block *sb, int type, int format_id, const struct path *path)
fs/ext4/super.c:ext4_quota_read(struct super_block *sb, int type, char *data, size_t len, loff_t off)
fs/ext4/super.c:ext4_quota_write(struct super_block *sb, int type, const char *data, size_t len, loff_t off)
fs/ext4/super.c:ext4_release_dquot(struct dquot *dquot)
fs/ext4/super.c:ext4_write_dquot(struct dquot *dquot)
fs/quota/quota_tree.c:qtree_write_dquot(struct qtree_mem_dqinfo *info, struct dquot *dquot)
fs/quota/quota_v2.c:v2_check_quota_file(struct super_block *sb, int type)
fs/quota/quota_v2.c:v2_read_file_info(struct super_block *sb, int type)
fs/quota/quota_v2.c:v2_write_dquot(struct dquot *dquot)
fs/quota/dquot.c:__dquot_drop(struct inode *inode)
fs/ext4/ialloc.c:__ext4_new_inode()
fs/ext4/namei.c:ext4_tmpfile(struct inode *dir, struct dentry *dentry, umode_t mode)
make_kqid_()
func for case 55cc72f8cc3a549119df
fs/xfs/xfs_file.c:__xfs_filemap_fault(struct vm_fault *vmf, unsigned int order, bool write_fault)
fs/xfs/xfs_file.c:xfs_dio_write_end_io(struct kiocb *iocb, ssize_t size, int error, unsigned flags)
fs/xfs/xfs_file.c:xfs_file_buffered_write(struct kiocb *iocb, struct iov_iter *from)
fs/xfs/xfs_file.c:xfs_file_dax_write(struct kiocb *iocb, struct iov_iter *from)
fs/xfs/xfs_file.c:xfs_file_dio_write(struct kiocb *iocb, struct iov_iter *from)
fs/xfs/xfs_file.c:xfs_file_dio_write_aligned(struct xfs_inode *ip, struct kiocb *iocb, struct iov_iter *from)
fs/xfs/xfs_file.c:xfs_file_dio_write_unaligned(struct xfs_inode *ip, struct kiocb *iocb, struct iov_iter *from)
fs/xfs/xfs_file.c:xfs_file_fallocate(struct file *file, int mode, loff_t offset, loff_t len)
fs/xfs/xfs_file.c:xfs_file_fsync(struct file *file, loff_t start, loff_t end, int datasync)
fs/xfs/xfs_file.c:xfs_file_mmap(struct file *file, struct vm_area_struct *vma)
fs/xfs/xfs_file.c:xfs_file_remap_range(struct file *file_in, loff_t pos_in, struct file *file_out, loff_t pos_out, loff_t len, unsigned int remap_flags)
fs/xfs/xfs_file.c:xfs_file_write_checks(struct kiocb *iocb, struct iov_iter *from, unsigned int *iolock)
fs/xfs/xfs_file.c:xfs_file_write_iter(struct kiocb *iocb, struct iov_iter *from)
fs/xfs/xfs_file.c:xfs_filemap_fault(struct vm_fault *vmf)
fs/xfs/xfs_file.c:xfs_filemap_huge_fault(struct vm_fault *vmf, unsigned int order)
mm/filemap.c:__filemap_add_folio(struct address_space *mapping, struct folio *folio, pgoff_t index, gfp_t gfp, void **shadowp)
mm/filemap.c:do_read_cache_folio()
mm/filemap.c:filemap_add_folio(struct address_space *mapping, struct folio *folio, pgoff_t index, gfp_t gfp)
mm/filemap.c:filemap_alloc_folio()
mm/filemap.c:filemap_fault(struct vm_fault *vmf)
mm/filemap.c:filemap_free_folio(struct address_space *mapping, struct folio *folio)
filemap_get_folio()
mm/filemap.c:filemap_map_folio_range(struct vm_fault *vmf, struct folio *folio, unsigned long start, unsigned long addr, unsigned int nr_pages)
mm/filemap.c:filemap_map_pages(struct vm_fault *vmf, pgoff_t start_pgoff, pgoff_t end_pgoff)
mm/filemap.c:filemap_page_mkwrite(struct vm_fault *vmf)
mm/filemap.c:filemap_release_folio(struct folio *folio, gfp_t gfp)
mm/filemap.c:filemap_remove_folio(struct folio *folio)
mm/filemap.c:filemap_unaccount_folio(struct address_space *mapping, struct folio *folio)
mm/filemap.c:filemap_update_page(struct kiocb *iocb, struct address_space *mapping, size_t count, struct folio *folio, bool need_uptodate)
mm/filemap.c:page_cache_delete(struct address_space *mapping, struct folio *folio, void *shadow)
mm/memory.c:__handle_mm_fault(struct vm_area_struct *vma, unsigned long address, unsigned int flags)
mm/memory.c:copy_nonpresent_pte(struct mm_struct *dst_mm, struct mm_struct *src_mm, pte_t *dst_pte, pte_t *src_pte, struct vm_area_struct *dst_vma, struct vm_area_struct *src_vma, unsigned long addr, int *rss)
mm/memory.c:copy_present_pte(struct vm_area_struct *dst_vma, struct vm_area_struct *src_vma, pte_t *dst_pte, pte_t *src_pte, unsigned long addr, int *rss, struct folio **prealloc)
mm/memory.c:do_fault(struct vm_fault *vmf)
mm/memory.c:do_read_fault(struct vm_fault *vmf)
mm/memory.c:free_p4d_range(struct mmu_gather *tlb, pgd_t *pgd, unsigned long addr, unsigned long end, unsigned long floor, unsigned long ceiling)
free_pg()
mm/memory.c:free_pgd_range(struct mmu_gather *tlb, unsigned long addr, unsigned long end, unsigned long floor, unsigned long ceiling)
mm/memory.c:free_pgtables(struct mmu_gather *tlb, struct ma_state *mas, struct vm_area_struct *vma, unsigned long floor, unsigned long ceiling, bool mm_wr_locked)
mm/memory.c:free_pmd_range(struct mmu_gather *tlb, pud_t *pud, unsigned long addr, unsigned long end, unsigned long floor, unsigned long ceiling)
mm/memory.c:free_pud_range(struct mmu_gather *tlb, p4d_t *p4d, unsigned long addr, unsigned long end, unsigned long floor, unsigned long ceiling)
mm/memory.c:handle_mm_fault(struct vm_area_struct *vma, unsigned long address, unsigned int flags, struct pt_regs *regs)
mm/memory.c:handle_pte_fault(struct vm_fault *vmf)
mm/memory.c:print_bad_pte(struct vm_area_struct *vma, unsigned long addr, pte_t pte, struct page *page)
mm/memory.c:unmap_page_range(struct mmu_gather *tlb, struct vm_area_struct *vma, unsigned long addr, unsigned long end, struct zap_details *details)
mm/memory.c:zap_pte_range(struct mmu_gather *tlb, struct vm_area_struct *vma, pmd_t *pmd, unsigned long addr, unsigned long end, struct zap_details *details)
fs/xfs/xfs_inode.c:xfs_iflush(struct xfs_inode *ip, struct xfs_buf *bp)
fs/xfs/xfs_inode.c:xfs_ilock(xfs_inode_t *ip, uint lock_flags)
fs/xfs/xfs_inode.c:xfs_ilock2_io_mmap(struct xfs_inode *ip1, struct xfs_inode *ip2)
fs/xfs/xfs_inode.c:xfs_inactive(xfs_inode_t *ip)
xfs_inode()
fs/xfs/xfs_inode.c:xfs_itruncate_extents_flags(struct xfs_trans **tpp, struct xfs_inode *ip, int whichfork, xfs_fsize_t new_size, int flags)
fs/xfs/xfs_inode.c:xfs_iunlock(xfs_inode_t *ip, uint lock_flags)
fs/xfs/xfs_inode.c:xfs_iunlock2_io_mmap(struct xfs_inode *ip1, struct xfs_inode *ip2)
fs/xfs/xfs_inode.c:xfs_release(xfs_inode_t *ip)
xfs_aops()
fs/xfs/xfs_aops.c:xfs_convert_blocks(struct iomap_writepage_ctx *wpc, struct xfs_inode *ip, int whichfork, loff_t offset)
fs/xfs/xfs_aops.c:xfs_discard_folio(struct folio *folio, loff_t pos)
fs/xfs/xfs_aops.c:xfs_end_ioend(struct iomap_ioend *ioend)
fs/xfs/xfs_aops.c:xfs_imap_valid(struct iomap_writepage_ctx *wpc, struct xfs_inode *ip, loff_t offset)
fs/xfs/xfs_aops.c:xfs_map_blocks(struct iomap_writepage_ctx *wpc, struct inode *inode, loff_t offset)
fs/xfs/xfs_aops.c:xfs_setfilesize(struct xfs_inode *ip, xfs_off_t offset, size_t size)
fs/xfs/xfs_aops.c:xfs_vm_bmap(struct address_space *mapping, sector_t block)
fs/xfs/xfs_aops.c:xfs_vm_writepages(struct address_space *mapping, struct writeback_control *wbc)
mm/gup.c:__get_user_pages(struct mm_struct *mm, unsigned long start, unsigned long nr_pages, unsigned int gup_flags, struct page **pages, int *locked)
mm/gup.c:faultin_page(struct vm_area_struct *vma, unsigned long address, unsigned int *flags, bool unshare, int *locked)
mm/gup.c:get_user_pages_fast(unsigned long start, int nr_pages, unsigned int gup_flags, struct page **pages)
mm/gup.c:gup_p4d_range(pgd_t *pgdp, pgd_t pgd, unsigned long addr, unsigned long end, unsigned int flags, struct page **pages, int *nr)
mm/gup.c:gup_pmd_range(pud_t *pudp, pud_t pud, unsigned long addr, unsigned long end, unsigned int flags, struct page **pages, int *nr)
mm/gup.c:gup_pte_range(pmd_t pmd, pmd_t *pmdp, unsigned long addr, unsigned long end, unsigned int flags, struct page **pages, int *nr)
mm/gup.c:gup_pud_range(p4d_t *p4dp, p4d_t p4d, unsigned long addr, unsigned long end, unsigned int flags, struct page **pages, int *nr)
pin_user_pages_fast()
__do_munmap()
detach_vmas_to_be_unmapped()
mm/mmap.c:do_mmap(struct file *file, unsigned long addr, unsigned long len, unsigned long prot, unsigned long flags, vm_flags_t vm_flags, unsigned long pgoff, unsigned long *populate, struct list_head *uf)
mm/mmap.c:exit_mmap(struct mm_struct *mm)
mm/mmap.c:mmap_region(struct file *file, unsigned long addr, unsigned long len, vm_flags_t vm_flags, unsigned long pgoff, struct list_head *uf)
mm/mmap.c:unmap_region(struct mm_struct *mm, struct ma_state *mas, struct vm_area_struct *vma, struct vm_area_struct *prev, struct vm_area_struct *next, unsigned long start, unsigned long end, unsigned long tree_end, bool mm_wr_locked)
mm/mmap.c:vm_stat_account(struct mm_struct *mm, vm_flags_t flags, long npages)
mm/mmap.c:vma_merge()
mm/page_alloc.c:free_pages_prepare(struct page *page, unsigned int order, fpi_t fpi_flags)
mm/page_alloc.c:free_unref_page_prepare(struct page *page, unsigned long pfn, unsigned int order)
mm/page_alloc.c:post_alloc_hook(struct page *page, unsigned int order, gfp_t gfp_flags)
mm/readahead.c:do_page_cache_ra(struct readahead_control *ractl, unsigned long nr_to_read, unsigned long lookahead_size)
mm/readahead.c:ondemand_readahead(struct readahead_control *ractl, struct folio *folio, unsigned long req_size)
mm/readahead.c:page_cache_ra_unbounded(struct readahead_control *ractl, unsigned long nr_to_read, unsigned long lookahead_size)
func for case 02c44c7f92e70a73730a
fs/bfs/inode.c:bfs_dump_imap(const char *prefix, struct super_block *s)
fs/bfs/inode.c:bfs_evict_inode(struct inode *inode)
fs/bfs/inode.c:bfs_fill_super(struct super_block *s, void *data, int silent)
fs/bfs/inode.c:bfs_iget()
fs/bfs/inode.c:bfs_statfs(struct dentry *dentry, struct kstatfs *buf)
fs/bfs/inode.c:bfs_write_inode(struct inode *inode, struct writeback_control *wbc)
fs/bfs/inode.c:find_inode()
fs/bfs/inode.c:init_bfs_fs(void)
fs/bfs/inode.c:init_inodecache(void)
fs/bfs/inode.c:bfs_alloc_inode()
bfs_destroy_inode()
fs/bfs/inode.c:bfs_fill_super(struct super_block *s, void *data, int silent)
fs/bfs/inode.c:bfs_iget()
bfs_mount()
fs/bfs/inode.c:bfs_put_super(struct super_block *s)
bfs_read_inode()
fs/bfs/inode.c:bfs_statfs(struct dentry *dentry, struct kstatfs *buf)
fs/bfs/inode.c:bfs_fill_super(struct super_block *s, void *data, int silent)
fs/bfs/file.c:bfs_get_block(struct inode *inode, sector_t block, struct buffer_head *bh_result, int create)
fs/bfs/file.c:bfs_move_block(unsigned long from, unsigned long to, struct super_block *sb)
fs/bfs/file.c:bfs_move_blocks(struct super_block *sb, unsigned long start, unsigned long end, unsigned long where)
fs/bfs/file.c:bfs_write_failed(struct address_space *mapping, loff_t to)
fs/bfs/dir.c:bfs_add_entry(struct inode *dir, const struct qstr *child, int ino)
fs/bfs/dir.c:bfs_create(struct inode *dir, struct dentry *dentry, umode_t mode, bool excl)
fs/bfs/dir.c:bfs_find_entry()
func for case 560e6a32d484d7293e37
fs/btrfs/extent-tree.c:__btrfs_free_extent(struct btrfs_trans_handle *trans, struct btrfs_delayed_ref_node *node, u64 parent, u64 root_objectid, u64 owner_objectid, u64 owner_offset, int refs_to_drop, struct btrfs_delayed_extent_op *extent_op)
fs/btrfs/extent-tree.c:__btrfs_run_delayed_refs(struct btrfs_trans_handle *trans, unsigned long nr)
fs/btrfs/extent-tree.c:alloc_reserved_tree_block(struct btrfs_trans_handle *trans, struct btrfs_delayed_ref_node *node, struct btrfs_delayed_extent_op *extent_op)
fs/btrfs/transaction.c:btrfs_commit_transaction(struct btrfs_trans_handle *trans)
fs/btrfs/extent-tree.c:btrfs_free_extent(struct btrfs_trans_handle *trans, struct btrfs_ref *ref)
fs/btrfs/extent-tree.c:btrfs_free_tree_block(struct btrfs_trans_handle *trans, u64 root_id, struct extent_buffer *buf, u64 parent, int last_ref)
fs/btrfs/extent-tree.c:btrfs_reserve_extent(struct btrfs_root *root, u64 ram_bytes, u64 num_bytes, u64 min_alloc_size, u64 empty_size, u64 hint_byte, struct btrfs_key *ins, int is_data, int delalloc)
fs/btrfs/extent-tree.c:btrfs_run_delayed_refs(struct btrfs_trans_handle *trans, unsigned long count)
fs/btrfs/extent-tree.c:btrfs_run_delayed_refs_for_head(struct btrfs_trans_handle *trans, struct btrfs_delayed_ref_head *locked_ref, unsigned long *run_refs)
fs/btrfs/extent-tree.c:do_free_extent_accounting(struct btrfs_trans_handle *trans, u64 bytenr, u64 num_bytes, bool is_data)
fs/btrfs/extent-tree.c:find_free_extent(struct btrfs_root *root, struct btrfs_key *ins, struct find_free_extent_ctl *ffe_ctl)
fs/btrfs/extent-tree.c:insert_inline_extent_backref(struct btrfs_trans_handle *trans, struct btrfs_path *path, u64 bytenr, u64 num_bytes, u64 parent, u64 root_objectid, u64 owner, u64 offset, int refs_to_add, struct btrfs_delayed_extent_op *extent_op)
fs/btrfs/extent-tree.c:remove_extent_backref(struct btrfs_trans_handle *trans, struct btrfs_root *root, struct btrfs_path *path, struct btrfs_extent_inline_ref *iref, int refs_to_drop, int is_data)
fs/btrfs/extent-tree.c:run_delayed_tree_ref(struct btrfs_trans_handle *trans, struct btrfs_delayed_ref_node *node, struct btrfs_delayed_extent_op *extent_op, int insert_reserved)
fs/btrfs/extent-tree.c:run_one_delayed_ref(struct btrfs_trans_handle *trans, struct btrfs_delayed_ref_node *node, struct btrfs_delayed_extent_op *extent_op, int insert_reserved)
fs/btrfs/transaction.c:__btrfs_end_transaction(struct btrfs_trans_handle *trans, int throttle)
fs/btrfs/transaction.c:__btrfs_wait_marked_extents(struct btrfs_fs_info *fs_info, struct extent_io_tree *dirty_pages)
_extents()
fs/btrfs/transaction.c:btrfs_cleanup_pending_block_groups(struct btrfs_trans_handle *trans)
fs/btrfs/transaction.c:btrfs_commit_transaction(struct btrfs_trans_handle *trans)
fs/btrfs/transaction.c:btrfs_put_transaction(struct btrfs_transaction *transaction)
fs/btrfs/transaction.c:btrfs_record_root_in_trans(struct btrfs_trans_handle *trans, struct btrfs_root *root)
fs/btrfs/transaction.c:btrfs_trans_release_metadata(struct btrfs_trans_handle *trans)
fs/btrfs/transaction.c:btrfs_wait_extents(struct btrfs_fs_info *fs_info, struct extent_io_tree *dirty_pages)
btrfs_write_()
fs/btrfs/transaction.c:btrfs_write_and_wait_transaction(struct btrfs_trans_handle *trans)
fs/btrfs/transaction.c:btrfs_write_marked_extents(struct btrfs_fs_info *fs_info, struct extent_io_tree *dirty_pages, int mark)
fs/btrfs/transaction.c:cleanup_transaction(struct btrfs_trans_handle *trans, int err)
fs/btrfs/transaction.c:join_transaction(struct btrfs_fs_info *fs_info, unsigned int type)
fs/btrfs/transaction.c:start_transaction()
fs/btrfs/transaction.c:switch_commit_roots(struct btrfs_trans_handle *trans)
fs/btrfs/transaction.c:wait_current_trans(struct btrfs_fs_info *fs_info)
fs/btrfs/extent-tree.c:__btrfs_run_delayed_refs(struct btrfs_trans_handle *trans, unsigned long nr)
fs/btrfs/disk-io.c:btrfs_cleanup_bg_io(struct btrfs_block_group *cache)
fs/btrfs/disk-io.c:btrfs_cleanup_dirty_bgs(struct btrfs_transaction *cur_trans, struct btrfs_fs_info *fs_info)
fs/btrfs/disk-io.c:btrfs_cleanup_fs_roots(struct btrfs_fs_info *fs_info)
fs/btrfs/disk-io.c:btrfs_cleanup_one_transaction(struct btrfs_transaction *cur_trans, struct btrfs_fs_info *fs_info)
fs/btrfs/disk-io.c:btrfs_cleanup_transaction(struct btrfs_fs_info *fs_info)
fs/btrfs/transaction.c:btrfs_commit_transaction(struct btrfs_trans_handle *trans)
fs/btrfs/disk-io.c:btrfs_destroy_delayed_refs(struct btrfs_transaction *trans, struct btrfs_fs_info *fs_info)
fs/btrfs/disk-io.c:btrfs_destroy_marked_extents(struct btrfs_fs_info *fs_info, struct extent_io_tree *dirty_pages, int mark)
fs/btrfs/disk-io.c:btrfs_destroy_pinned_extent(struct btrfs_fs_info *fs_info, struct extent_io_tree *unpin)
fs/btrfs/disk-io.c:btrfs_drop_and_free_fs_root(struct btrfs_fs_info *fs_info, struct btrfs_root *root)
fs/btrfs/disk-io.c:btrfs_free_fs_info(struct btrfs_fs_info *fs_info)
fs/btrfs/extent-tree.c:btrfs_run_delayed_refs(struct btrfs_trans_handle *trans, unsigned long count)
fs/btrfs/disk-io.c:close_ctree(struct btrfs_fs_info *fs_info)
fs/btrfs/extent-tree.c:do_free_extent_accounting(struct btrfs_trans_handle *trans, u64 bytenr, u64 num_bytes, bool is_data)
fs/btrfs/disk-io.c:transaction_kthread(void *arg)
fs/btrfs/locking.c:btrfs_drew_read_lock(struct btrfs_drew_lock *lock)
fs/btrfs/locking.c:btrfs_drew_read_unlock(struct btrfs_drew_lock *lock)
fs/btrfs/locking.c:btrfs_drew_try_write_lock(struct btrfs_drew_lock *lock)
fs/btrfs/locking.c:btrfs_lock_root_node()
fs/btrfs/locking.c:btrfs_read_lock_root_node()
fs/btrfs/locking.c:btrfs_try_read_lock_root_node()
fs/btrfs/locking.c:btrfs_try_tree_write_lock(struct extent_buffer *eb)
fs/btrfs/locking.c:btrfs_unlock_up_safe(struct btrfs_path *path, int level)
fs/btrfs/ctree.h:btrfs_cpu_balance_args_to_disk(struct btrfs_disk_balance_args *disk, const struct btrfs_balance_args *cpu)
fs/btrfs/ctree.h:btrfs_device_total_bytes(const struct extent_buffer *eb, struct btrfs_dev_item *s)
fs/btrfs/ctree.h:btrfs_disk_balance_args_to_cpu(struct btrfs_balance_args *cpu, const struct btrfs_disk_balance_args *disk)
fs/btrfs/ctree.h:btrfs_extent_inline_ref_size(int type)
fs/btrfs/ctree.h:btrfs_insert_empty_item(struct btrfs_trans_handle *trans, struct btrfs_root *root, struct btrfs_path *path, const struct btrfs_key *key, u32 data_size)
fs/btrfs/ctree.h:btrfs_next_old_item(struct btrfs_root *root, struct btrfs_path *p, u64 time_seq)
fs/btrfs/ctree.h:btrfs_set_device_total_bytes(const struct extent_buffer *eb, struct btrfs_dev_item *s, u64 val)
fs/btrfs/ctree.h:count_max_extents(struct btrfs_fs_info *fs_info, u64 size)
fs/btrfs/relocation.c:btrfs_relocate_block_group(struct btrfs_fs_info *fs_info, u64 group_start)
fs/btrfs/relocation.c:btrfs_update_reloc_root(struct btrfs_trans_handle *trans, struct btrfs_root *root)
fs/btrfs/relocation.c:do_relocation(struct btrfs_trans_handle *trans, struct reloc_control *rc, struct btrfs_backref_node *node, struct btrfs_key *key, struct btrfs_path *path, int lowest)
fs/btrfs/relocation.c:merge_reloc_roots(struct reloc_control *rc)
fs/btrfs/relocation.c:relocate_block_group(struct reloc_control *rc)
fs/btrfs/relocation.c:relocate_tree_block(struct btrfs_trans_handle *trans, struct reloc_control *rc, struct btrfs_backref_node *node, struct btrfs_key *key, struct btrfs_path *path)
fs/btrfs/relocation.c:relocate_tree_blocks(struct btrfs_trans_handle *trans, struct reloc_control *rc, struct rb_root *blocks)
fs/btrfs/relocation.c:replace_path(struct btrfs_trans_handle *trans, struct reloc_control *rc, struct btrfs_root *dest, struct btrfs_root *src, struct btrfs_path *path, struct btrfs_key *next_key, int lowest_level, int max_level)
btrfs_alloc_dev_extent()
fs/btrfs/volumes.c:btrfs_commit_device_sizes(struct btrfs_transaction *trans)
fs/btrfs/volumes.c:btrfs_free_dev_extent(struct btrfs_trans_handle *trans, struct btrfs_device *device, u64 start, u64 *dev_extent_len)
fs/btrfs/volumes.c:btrfs_get_chunk_map()
btrfs_map_block()
fs/btrfs/volumes.c:btrfs_remove_chunk(struct btrfs_trans_handle *trans, u64 chunk_offset)
fs/btrfs/volumes.c:btrfs_run_dev_stats(struct btrfs_trans_handle *trans)
fs/btrfs/volumes.c:btrfs_update_device(struct btrfs_trans_handle *trans, struct btrfs_device *device)
fs/btrfs/inode.c:btrfs_setattr(struct user_namespace *mnt_userns, struct dentry *dentry, struct iattr *attr)
fs/btrfs/inode.c:btrfs_truncate(struct inode *inode, bool skip_writeback)
btrfs_truncate_inode_items()
__sync_filesystem()
fs/sync.c:sync_filesystem(struct super_block *sb)
fs/sync.c:vfs_fsync_range(struct file *file, loff_t start, loff_t end, int datasync)
fs/btrfs/extent-tree.c:__btrfs_free_extent(struct btrfs_trans_handle *trans, struct btrfs_delayed_ref_node *node, u64 parent, u64 root_objectid, u64 owner_objectid, u64 owner_offset, int refs_to_drop, struct btrfs_delayed_extent_op *extent_op)
func for case 244acf6996ae0b9122ac763d3099922258c9bd43
net/core/stream.c:sk_stream_kill_queues(struct sock *sk)
net/core/stream.c:sk_stream_wait_connect(struct sock *sk, long *timeo_p)
net/core/stream.c:sk_stream_wait_memory(struct sock *sk, long *timeo_p)
net/core/stream.c:sk_stream_write_space(struct sock *sk)
net/ipv4/inet_connection_sock.c:inet_csk_accept()
net/ipv4/inet_connection_sock.c:inet_csk_bind_conflict(const struct sock *sk, const struct inet_bind_bucket *tb, bool relax, bool reuseport_ok)
net/ipv4/inet_connection_sock.c:inet_csk_clear_xmit_timers(struct sock *sk)
net/ipv4/inet_connection_sock.c:inet_csk_clone_lock()
net/ipv4/inet_connection_sock.c:inet_csk_destroy_sock(struct sock *sk)
net/ipv4/inet_connection_sock.c:inet_csk_find_open_port()
net/ipv4/inet_connection_sock.c:inet_csk_get_port(struct sock *sk, unsigned short snum)
net/ipv4/inet_connection_sock.c:inet_csk_init_xmit_timers(struct sock *sk, void (*retransmit_handler)(struct timer_list *t), void (*delack_handler)(struct timer_list *t), void (*keepalive_handler)(struct timer_list *t))
net/ipv4/inet_connection_sock.c:inet_csk_listen_start(struct sock *sk, int backlog)
net/ipv4/inet_connection_sock.c:inet_csk_listen_stop(struct sock *sk)
net/ipv4/inet_connection_sock.c:inet_csk_rebuild_route()
net/ipv4/inet_connection_sock.c:inet_csk_route_child_sock()
net/ipv4/inet_connection_sock.c:inet_csk_route_req()
net/ipv4/inet_connection_sock.c:inet_csk_update_fastreuse(struct inet_bind_bucket *tb, struct sock *sk)
net/ipv4/inet_connection_sock.c:inet_csk_wait_for_connect(struct sock *sk, long timeo)
net/ipv4/tcp.c:__tcp_close(struct sock *sk, long timeout)
net/ipv4/inet_connection_sock.c:inet_csk_destroy_sock(struct sock *sk)
net/core/stream.c:sk_stream_kill_queues(struct sock *sk)
net/ipv4/tcp.c:tcp_abort(struct sock *sk, int err)
net/ipv4/tcp.c:tcp_check_oom(struct sock *sk, int shift)
net/ipv4/tcp.c:tcp_cleanup_rbuf(struct sock *sk, int copied)
net/ipv4/tcp.c:tcp_disconnect(struct sock *sk, int flags)
net/ipv4/tcp.c:tcp_done(struct sock *sk)
net/ipv4/tcp.c:tcp_init_sock(struct sock *sk)
net/ipv4/tcp.c:tcp_push(struct sock *sk, int flags, int mss_now, int nonagle, int size_goal)
net/ipv4/tcp.c:tcp_remove_empty_skb(struct sock *sk)
net/ipv4/tcp.c:tcp_rtx_queue_purge(struct sock *sk)
net/ipv4/tcp.c:tcp_set_state(struct sock *sk, int state)
net/ipv4/tcp.c:tcp_shutdown(struct sock *sk, int how)
net/ipv4/tcp.c:tcp_skb_entail(struct sock *sk, struct sk_buff *skb)
net/ipv4/tcp.c:tcp_stream_alloc_skb()
net/ipv4/tcp.c:tcp_write_queue_purge(struct sock *sk)
net/ipv4/tcp.c:__tcp_close(struct sock *sk, long timeout)
net/ipv4/tcp_output.c:__tcp_retransmit_skb(struct sock *sk, struct sk_buff *skb, int segs)
net/ipv4/tcp.c:tcp_close(struct sock *sk, long timeout)
net/ipv4/tcp_output.c:tcp_fragment(struct sock *sk, enum tcp_queue tcp_queue, struct sk_buff *skb, u32 len, unsigned int mss_now, gfp_t gfp)
net/ipv4/tcp_output.c:tcp_retransmit_skb(struct sock *sk, struct sk_buff *skb, int segs)
net/ipv4/tcp_output.c:tcp_send_loss_probe(struct sock *sk)
net/ipv4/tcp_output.c:tcp_write_xmit(struct sock *sk, unsigned int mss_now, int nonagle, int push_one, gfp_t gfp)
net/ipv4/tcp_output.c:tcp_xmit_retransmit_queue(struct sock *sk)
net/ipv4/af_inet.c:__inet_bind(struct sock *sk, struct sockaddr *uaddr, int addr_len, u32 flags)
net/ipv4/af_inet.c:__inet_stream_connect(struct socket *sock, struct sockaddr *uaddr, int addr_len, int flags, int is_sendmsg)
net/ipv4/af_inet.c:inet_accept(struct socket *sock, struct socket *newsock, int flags, bool kern)
net/ipv4/af_inet.c:inet_bind(struct socket *sock, struct sockaddr *uaddr, int addr_len)
net/ipv4/af_inet.c:inet_create(struct net *net, struct socket *sock, int protocol, int kern)
net/ipv4/af_inet.c:inet_listen(struct socket *sock, int backlog)
net/ipv4/af_inet.c:inet_release(struct socket *sock)
net/ipv4/af_inet.c:inet_sock_destruct(struct sock *sk)
net/socket.c:____sys_sendmsg(struct socket *sock, struct msghdr *msg_sys, unsigned int flags, struct used_address *used_address, unsigned int allowed_msghdr_flags)
net/socket.c:___sys_sendmsg(struct socket *sock, struct user_msghdr __user *msg, struct msghdr *msg_sys, unsigned int flags, struct used_address *used_address, unsigned int allowed_msghdr_flags)
net/socket.c:__sock_create(struct net *net, int family, int type, int protocol, struct socket **res, int kern)
net/socket.c:__sock_release(struct socket *sock, struct inode *inode)
net/socket.c:__sys_sendmmsg(int fd, struct mmsghdr __user *mmsg, unsigned int vlen, unsigned int flags, bool forbid_cmsg_compat)
net/socket.c:__sys_sendmsg(int fd, struct user_msghdr __user *msg, unsigned int flags, bool forbid_cmsg_compat)
net/socket.c:__sys_setsockopt(int fd, int level, int optname, char __user *user_optval, int optlen)
net/socket.c:__sys_socket(int family, int type, int protocol)
include/net/sock.h:sk_mem_reclaim(struct sock *sk)
include/net/sock.h:sk_mem_reclaim_partial(struct sock *sk)
include/net/sock.h:sk_stream_moderate_sndbuf(struct sock *sk)
net/ipv4/tcp_input.c:tcp_data_queue(struct sock *sk, struct sk_buff *skb)
net/ipv4/tcp_input.c:tcp_rcv_established(struct sock *sk, struct sk_buff *skb)
net/ipv4/tcp_input.c:tcp_rcv_state_process(struct sock *sk, struct sk_buff *skb)
func for case d43608d061e8847ec9f3
net/tipc/socket.c:__tipc_sendmsg(struct socket *sock, struct msghdr *m, size_t dlen)
net/tipc/socket.c:__tipc_sendstream(struct socket *sock, struct msghdr *m, size_t dlen)
lib/iov_iter.c:_copy_from_iter(void *addr, size_t bytes, struct iov_iter *i)
net/tipc/socket.c:tipc_connect(struct socket *sock, struct sockaddr *dest, int destlen, int flags)
net/tipc/socket.c:tipc_recvmsg(struct socket *sock, struct msghdr *m, size_t buflen, int flags)
net/tipc/socket.c:tipc_recvstream(struct socket *sock, struct msghdr *m, size_t buflen, int flags)
net/tipc/socket.c:tipc_release(struct socket *sock)
net/tipc/socket.c:tipc_sk_backlog_rcv(struct sock *sk, struct sk_buff *skb)
net/tipc/socket.c:tipc_sk_conn_proto_rcv(struct tipc_sock *tsk, struct sk_buff *skb, struct sk_buff_head *inputq, struct sk_buff_head *xmitq)
net/tipc/socket.c:tipc_sk_create(struct net *net, struct socket *sock, int protocol, int kern)
net/tipc/socket.c:tipc_sk_enqueue(struct sk_buff_head *inputq, struct sock *sk, u32 dport, struct sk_buff_head *xmitq)
net/tipc/socket.c:tipc_sk_filter_rcv(struct sock *sk, struct sk_buff *skb, struct sk_buff_head *xmitq)
net/tipc/socket.c:tipc_sk_finish_conn(struct tipc_sock *tsk, u32 peer_port, u32 peer_node)
net/tipc/socket.c:tipc_sk_proto_rcv(struct sock *sk, struct sk_buff_head *inputq, struct sk_buff_head *xmitq)
net/tipc/socket.c:tipc_sk_rcv(struct net *net, struct sk_buff_head *inputq)
net/tipc/socket.c:tipc_sk_respond(struct sock *sk, struct sk_buff *skb, int err)
lib/iov_iter.c:__iov_iter_get_pages_alloc(struct iov_iter *i, struct page ***pages, size_t maxsize, unsigned int maxpages, size_t *start, unsigned int gup_flags)
lib/iov_iter.c:_copy_from_iter(void *addr, size_t bytes, struct iov_iter *i)
lib/iov_iter.c:_copy_from_iter_flushcache(void *addr, size_t bytes, struct iov_iter *i)
lib/iov_iter.c:_copy_from_iter_nocache(void *addr, size_t bytes, struct iov_iter *i)
_pages()
lib/iov_iter.c:copy_mc_pipe_to_iter(const void *addr, size_t bytes, struct iov_iter *i)
lib/iov_iter.c:copy_page_from_iter(struct page *page, size_t offset, size_t bytes, struct iov_iter *i)
lib/iov_iter.c:copy_page_from_iter_atomic(struct page *page, unsigned offset, size_t bytes, struct iov_iter *i)
lib/iov_iter.c:copy_page_to_iter(struct page *page, size_t offset, size_t bytes, struct iov_iter *i)
lib/iov_iter.c:copy_pipe_to_iter(const void *addr, size_t bytes, struct iov_iter *i)
lib/iov_iter.c:iov_iter_advance(struct iov_iter *i, size_t size)
lib/iov_iter.c:iov_iter_pipe(struct iov_iter *i, unsigned int direction, struct pipe_inode_info *pipe, size_t count)
lib/iov_iter.c:iov_iter_restore(struct iov_iter *i, struct iov_iter_state *state)
lib/iov_iter.c:iov_iter_revert(struct iov_iter *i, size_t unroll)
lib/iov_iter.c:pipe_advance(struct iov_iter *i, size_t size)
lib/iov_iter.c:pipe_get_pages(struct iov_iter *i, struct page ***pages, size_t maxsize, unsigned maxpages, size_t *start)
copy_from_iter()
drivers/scsi/sg.c:sg_add_request()
drivers/scsi/sg.c:sg_build_indirect(Sg_scatter_hold * schp, Sg_fd * sfp, int buff_size)
drivers/scsi/sg.c:sg_build_reserve(Sg_fd * sfp, int req_size)
drivers/scsi/sg.c:sg_common_write(Sg_fd * sfp, Sg_request * srp, unsigned char *cmnd, int timeout, int blocking)
drivers/scsi/sg.c:sg_finish_rem_req(Sg_request *srp)
drivers/scsi/sg.c:sg_ioctl_common(struct file *filp, Sg_device *sdp, Sg_fd *sfp, unsigned int cmd_in, void __user *p)
drivers/scsi/sg.c:sg_link_reserve(Sg_fd * sfp, Sg_request * srp, int size)
drivers/scsi/sg.c:sg_new_write(Sg_fd *sfp, struct file *file, const char __user *buf, size_t count, int blocking, int read_only, int sg_io_owned, Sg_request **o_srp)
drivers/scsi/sg.c:sg_read_oxfer(Sg_request * srp, char __user *outp, int num_read_xfer)
drivers/scsi/sg.c:sg_remove_request(Sg_fd * sfp, Sg_request * srp)
drivers/scsi/sg.c:sg_remove_scat(Sg_fd * sfp, Sg_scatter_hold * schp)
drivers/scsi/sg.c:sg_rq_end_io(struct request *rq, blk_status_t status)
drivers/scsi/sg.c:sg_start_req(Sg_request *srp, unsigned char *cmd)
drivers/scsi/sg.c:sg_unlink_reserve(Sg_fd * sfp, Sg_request * srp)
drivers/scsi/sg.c:sg_write(struct file *filp, const char __user *buf, size_t count, loff_t * ppos)
block/blk-map.c:bio_alloc_map_data()
block/blk-map.c:bio_copy_to_iter(struct bio *bio, struct iov_iter iter)
block/blk-map.c:bio_copy_user_iov(struct request *rq, struct rq_map_data *map_data, struct iov_iter *iter, gfp_t gfp_mask)
block/blk-map.c:bio_map_user_iov(struct request *rq, struct iov_iter *iter, gfp_t gfp_mask)
block/blk-map.c:bio_uncopy_user(struct bio *bio)
block/blk-map.c:blk_rq_append_bio(struct request *rq, struct bio *bio)
block/blk-map.c:blk_rq_map_user_iov(struct request_queue *q, struct request *rq, struct rq_map_data *map_data, const struct iov_iter *iter, gfp_t gfp_mask)
block/blk-map.c:blk_rq_unmap_user(struct bio *bio)
copy_from_iter()
iov_iter()
net/tipc/msg.c:tipc_buf_append(struct sk_buff **headbuf, struct sk_buff **buf)
net/tipc/msg.c:tipc_msg_append(struct tipc_msg *_hdr, struct msghdr *m, int dlen, int mss, struct sk_buff_head *txq)
net/tipc/msg.c:tipc_msg_assemble(struct sk_buff_head *list)
net/tipc/msg.c:tipc_msg_build(struct tipc_msg *mhdr, struct msghdr *m, int offset, int dsz, int pktmax, struct sk_buff_head *list)
net/tipc/msg.c:tipc_msg_create()
net/tipc/msg.c:tipc_msg_fragment(struct sk_buff *skb, const struct tipc_msg *hdr, int pktmax, struct sk_buff_head *frags)
net/tipc/msg.c:tipc_msg_lookup_dest(struct net *net, struct sk_buff *skb, int *err)
net/tipc/msg.c:tipc_msg_reassemble(struct sk_buff_head *list, struct sk_buff_head *rcvq)
net/tipc/msg.c:tipc_msg_reverse(u32 own_node, struct sk_buff **skb, int err)
net/tipc/msg.c:tipc_msg_validate(struct sk_buff **_skb)
lib/iov_iter.c:_copy_from_iter(void *addr, size_t bytes, struct iov_iter *i)
fs/read_write.c:do_iter_write(struct file *file, struct iov_iter *iter, loff_t *pos, rwf_t flags)
fs/read_write.c:do_loop_readv_writev(struct file *filp, struct iov_iter *iter, loff_t *ppos, int type, rwf_t flags)
fs/read_write.c:do_writev(unsigned long fd, const struct iovec __user *vec, unsigned long vlen, rwf_t flags)
fs/read_write.c:generic_write_checks_count(struct kiocb *iocb, loff_t *count)
fs/read_write.c:new_sync_write(struct file *filp, const char __user *buf, size_t len, loff_t *ppos)
fs/read_write.c:vfs_iocb_iter_write(struct file *file, struct kiocb *iocb, struct iov_iter *iter)
fs/read_write.c:vfs_write(struct file *file, const char __user *buf, size_t count, loff_t *pos)
fs/read_write.c:vfs_writev(struct file *file, const struct iovec __user *vec, unsigned long vlen, loff_t *pos, rwf_t flags)
lib/iov_iter.c:_copy_from_iter(void *addr, size_t bytes, struct iov_iter *i)
include/linux/uio.h:copy_from_iter_full(void *addr, size_t bytes, struct iov_iter *i)
include/linux/uio.h:copy_from_iter_full_nocache(void *addr, size_t bytes, struct iov_iter *i)
include/linux/uio.h:csum_and_copy_from_iter_full(void *addr, size_t bytes, __wsum *csum, struct iov_iter *i)
iov_iter()
include/linux/uio.h:iov_iter_iovec(const struct iov_iter *iter)
include/linux/uio.h:iov_iter_npages_cap(struct iov_iter *i, int maxpages, size_t max_bytes)
include/linux/uio.h:iov_iter_truncate(struct iov_iter *i, u64 count)
arch/x86/entry/common.c:do_syscall_64(struct pt_regs *regs, int nr)
arch/x86/entry/common.c:do_syscall_x32(struct pt_regs *regs, int nr)
arch/x86/entry/common.c:do_syscall_x64(struct pt_regs *regs, int nr)
func for case 91edf9178386a07d06a7
anon_vma_name()
mm/madvise.c:anon_vma_name_alloc()
mm/madvise.c:do_madvise(struct mm_struct *mm, unsigned long start, size_t len_in, int behavior)
mm/madvise.c:force_shm_swapin_readahead(struct vm_area_struct *vma, unsigned long start, unsigned long end, struct address_space *mapping)
mm/madvise.c:madvise_cold(struct vm_area_struct *vma, struct vm_area_struct **prev, unsigned long start_addr, unsigned long end_addr)
mm/madvise.c:madvise_dontneed_free(struct vm_area_struct *vma, struct vm_area_struct **prev, unsigned long start, unsigned long end, int behavior)
mm/madvise.c:madvise_free_single_vma(struct vm_area_struct *vma, unsigned long start_addr, unsigned long end_addr)
mm/madvise.c:madvise_pageout(struct vm_area_struct *vma, struct vm_area_struct **prev, unsigned long start_addr, unsigned long end_addr)
mm/madvise.c:madvise_populate(struct vm_area_struct *vma, struct vm_area_struct **prev, unsigned long start, unsigned long end, int behavior)
mm/madvise.c:madvise_remove(struct vm_area_struct *vma, struct vm_area_struct **prev, unsigned long start, unsigned long end)
mm/madvise.c:madvise_set_anon_name(struct mm_struct *mm, unsigned long start, unsigned long len_in, struct anon_vma_name *anon_name)
mm/madvise.c:madvise_update_vma(struct vm_area_struct *vma, struct vm_area_struct **prev, unsigned long start, unsigned long end, unsigned long new_flags, struct anon_vma_name *anon_name)
mm/madvise.c:madvise_vma_anon_name(struct vm_area_struct *vma, struct vm_area_struct **prev, unsigned long start, unsigned long end, unsigned long anon_name)
mm/madvise.c:madvise_walk_vmas(struct mm_struct *mm, unsigned long start, unsigned long end, unsigned long arg, int (*visit)(struct vm_area_struct *vma, struct vm_area_struct **prev, unsigned long start, unsigned long end, unsigned long arg))
mm/madvise.c:madvise_willneed(struct vm_area_struct *vma, struct vm_area_struct **prev, unsigned long start, unsigned long end)
mm/madvise.c:replace_anon_vma_name(struct vm_area_struct *vma, struct anon_vma_name *anon_name)
PR_SET_VMA()
__sys_set()
kernel/sys.c:__sys_setfsgid(gid_t gid))
kernel/sys.c:__sys_setfsuid(uid_t uid)
kernel/sys.c:__sys_setgid(gid_t gid)
kernel/sys.c:__sys_setregid(gid_t rgid, gid_t egid)
kernel/sys.c:__sys_setresgid(gid_t rgid, gid_t egid, gid_t sgid)
kernel/sys.c:__sys_setresuid(uid_t ruid, uid_t euid, uid_t suid)
kernel/sys.c:__sys_setreuid(uid_t ruid, uid_t euid)
kernel/sys.c:__sys_setuid(uid_t uid)
kernel/sys.c:check_prlimit_permission(struct task_struct *task, unsigned int flags))
kernel/sys.c:do_getpgid(pid_t pid))
kernel/sys.c:do_prlimit(struct task_struct *tsk, unsigned int resource, struct rlimit *new_rlim, struct rlimit *old_rlim))
kernel/sys.c:do_sys_times(struct tms *tms))
kernel/sys.c:ksys_setsid(void))
kernel/sys.c:override_release(char __user *release, size_t len))
prctl_set_vma()
kernel/sys.c:rlim64_to_rlim(const struct rlimit64 *rlim64, struct rlimit *rlim))
mm/slab_common.c:__do_kmalloc_node()
mm/slab_common.c:__kmalloc_large_node()
mm/slab_common.c:__ksize(const void *object)
mm/slab_common.c:create_boot_cache(struct kmem_cache *s, const char *name, unsigned int size, slab_flags_t flags, unsigned int useroffset, unsigned int usersize)
mm/slab_common.c:create_cache()
mm/slab_common.c:create_kmalloc_cache()
mm/slab_common.c:create_kmalloc_caches(slab_flags_t flags)
mm/slab_common.c:free_large_kmalloc(struct folio *folio, void *object)
mm/slab_common.c:kfree_sensitive(const void *p)
mm/slab_common.c:kmalloc_fix_flags(gfp_t flags)
mm/slab_common.c:kmem_cache_create_usercopy()
mm/slab_common.c:kmem_cache_destroy(struct kmem_cache *s)
mm/slab_common.c:kmem_dump_obj(void *object)
mm/slab_common.c:new_kmalloc_cache(int idx, enum kmalloc_cache_type type, slab_flags_t flags)
mm/slab_common.c:shutdown_cache(struct kmem_cache *s)
__kmalloc()
include/linux/slab.h:__kmalloc_index(size_t size, bool size_is_constant)
include/linux/slab.h:kmalloc_type(gfp_t flags)
PR_SET_VMA()
mm/memory.c:copy_page_range(struct vm_area_struct *dst_vma, struct vm_area_struct *src_vma)
mm/memory.c:free_pgd_range(struct mmu_gather *tlb, unsigned long addr, unsigned long end, unsigned long floor, unsigned long ceiling)
mm/memory.c:free_pgtables(struct mmu_gather *tlb, struct maple_tree *mt, struct vm_area_struct *vma, unsigned long floor, unsigned long ceiling)
mm/memory.c:insert_pages(struct vm_area_struct *vma, unsigned long addr, struct page **pages, unsigned long *num, pgprot_t prot)
mm/memory.c:unmap_single_vma(struct mmu_gather *tlb, struct vm_area_struct *vma, unsigned long start_addr, unsigned long end_addr, struct zap_details *details)
mm/memory.c:unmap_vmas(struct mmu_gather *tlb, struct maple_tree *mt, struct vm_area_struct *vma, unsigned long start_addr, unsigned long end_addr)
mm/memory.c:vm_insert_page(struct vm_area_struct *vma, unsigned long addr, struct page *page)
mm/memory.c:zap_page_range_single(struct vm_area_struct *vma, unsigned long address, unsigned long size, struct zap_details *details)
PR_SET_VMA()
mm/rmap.c:__anon_vma_prepare(struct vm_area_struct *vma)
anon_vma()
mm/rmap.c:anon_vma_alloc()
mm/rmap.c:anon_vma_clone(struct vm_area_struct *dst, struct vm_area_struct *src)
mm/rmap.c:anon_vma_fork(struct vm_area_struct *vma, struct vm_area_struct *pvma)
mm/rmap.c:anon_vma_free(struct anon_vma *anon_vma)
mm/madvise.c:anon_vma_name_alloc()
mm/rmap.c:folio_get_anon_vma()
mm/rmap.c:folio_lock_anon_vma_read()
mm/rmap.c:unlink_anon_vmas(struct vm_area_struct *vma)
__do_sys_prctl()
mm/madvise.c:anon_vma_name_alloc()
mm/mmap.c:do_mmap(struct file *file, unsigned long addr, unsigned long len, unsigned long prot, unsigned long flags, unsigned long pgoff, unsigned long *populate, struct list_head *uf)
mm/mmap.c:mmap_region(struct file *file, unsigned long addr, unsigned long len, vm_flags_t vm_flags, unsigned long pgoff, struct list_head *uf)
prctl_set_vma()
mm/mmap.c:unmap_region(struct mm_struct *mm, struct maple_tree *mt, struct vm_area_struct *vma, struct vm_area_struct *prev, struct vm_area_struct *next, unsigned long start, unsigned long end)
mm/mmap.c:vma_link(struct mm_struct *mm, struct vm_area_struct *vma)
mm/mmap.c:vma_merge()
include/linux/mm.h:vma_init(struct vm_area_struct *vma, struct mm_struct *mm)
include/linux/mm.h:vma_is_foreign(struct vm_area_struct *vma)
include/linux/mm.h:vma_is_temporary_stack(struct vm_area_struct *vma)
anon_vma_name()
mm/madvise.c:anon_vma_name_alloc()
mm_cid()
mm_types()
prctl_set_vma()
mm/madvise.c:anon_vma_name_alloc()
prctl_set_vma()
func for case 5e70d01ee8985ae62a3b
net/ipv6/addrconf.c:addrconf_add_dev()
net/ipv6/addrconf.c:addrconf_add_mroute(struct net_device *dev)
net/ipv6/addrconf.c:addrconf_dad_begin(struct inet6_ifaddr *ifp)
net/ipv6/addrconf.c:addrconf_dad_completed(struct inet6_ifaddr *ifp, bool bump_id, bool send_na)
net/ipv6/addrconf.c:addrconf_dad_failure(struct sk_buff *skb, struct inet6_ifaddr *ifp)
net/ipv6/addrconf.c:addrconf_dad_kick(struct inet6_ifaddr *ifp)
net/ipv6/addrconf.c:addrconf_dad_work(struct work_struct *w)
net/ipv6/addrconf.c:addrconf_ifdown(struct net_device *dev, bool unregister)
net/ipv6/addrconf.c:addrconf_notify(struct notifier_block *this, unsigned long event, void *ptr)
net/ipv6/addrconf.c:addrconf_prefix_route(struct in6_addr *pfx, int plen, u32 metric, struct net_device *dev, unsigned long expires, u32 flags, gfp_t gfp_flags)
net/ipv6/addrconf.c:inet6_ifa_finish_destroy(struct inet6_ifaddr *ifp)
net/ipv6/addrconf.c:ipv6_add_addr()
net/ipv6/addrconf.c:ipv6_add_addr_hash(struct net_device *dev, struct inet6_ifaddr *ifa)
net/ipv6/addrconf.c:ipv6_add_dev()
net/ipv6/addrconf.c:ipv6_link_dev_addr(struct inet6_dev *idev, struct inet6_ifaddr *ifp)
drivers/net/loopback.c:blackhole_netdev_init(void)
drivers/net/loopback.c:dev_lstats_read(struct net_device *dev, u64 *packets, u64 *bytes)
drivers/net/loopback.c:gen_lo_setup(struct net_device *dev, unsigned int mtu, const struct ethtool_ops *eth_ops, const struct header_ops *hdr_ops, const struct net_device_ops *dev_ops, void (*dev_destructor)(struct net_device *dev))
drivers/net/loopback.c:loopback_net_init(struct net *net)
drivers/net/loopback.c:loopback_xmit(struct sk_buff *skb, struct net_device *dev)
net/core/dev.c:__dev_alloc_name(struct net *net, const char *name, char *buf)
net/core/dev.c:dev_alloc_name_ns(struct net *net, struct net_device *dev, const char *name)
net/core/dev.c:dev_change_name(struct net_device *dev, const char *newname)
net/core/dev.c:dev_get_valid_name(struct net *net, struct net_device *dev, const char *name)
net/core/dev.c:dev_valid_name(const char *name)
net/core/dev.c:free_netdev(struct net_device *dev)
net/core/dev.c:list_netdevice(struct net_device *dev)
net/core/dev.c:netdev_name_node_alt_destroy(struct net_device *dev, const char *name)
net/core/dev.c:netdev_name_node_alt_flush(struct net_device *dev)
net/core/dev.c:netdev_run_todo(void)
net/core/dev.c:netdev_wait_allrefs_any()
net/core/dev.c:register_netdevice(struct net_device *dev)
net/core/dev.c:unlist_netdevice(struct net_device *dev, bool lock)
net/core/dev.c:unregister_netdevice_many_notify(struct list_head *head, u32 portid, const struct nlmsghdr *nlh)
net/core/dev.c:unregister_netdevice_queue(struct net_device *dev, struct list_head *head)
net/core/net_namespace.c:cleanup_net(struct work_struct *work)
net/core/net_namespace.c:copy_net_ns()
net/core/net_namespace.c:net_alloc()
net/core/net_namespace.c:net_free(struct net *net)
net/core/net_namespace.c:ops_init(const struct pernet_operations *ops, struct net *net)
net/core/net_namespace.c:register_pernet_device(struct pernet_operations *ops)
net/core/net_namespace.c:setup_net(struct net *net, struct user_namespace *user_ns)
net/core/net_namespace.c:unhash_nsid(struct net *net, struct net *last)
include/linux/netdevice.h:__dev_hold(struct net_device *dev)
include/linux/netdevice.h:__dev_put(struct net_device *dev)
__netdev_tracker_alloc()
include/linux/netdevice.h:netdev_hold(struct net_device *dev, netdevice_tracker *tracker, gfp_t gfp)
include/linux/netdevice.h:netdev_ref_replace(struct net_device *odev, struct net_device *ndev, netdevice_tracker *tracker, gfp_t gfp)
include/linux/netdevice.h:netdev_reg_state()
include/linux/netdevice.h:netdev_tracker_alloc(struct net_device *dev, netdevice_tracker *tracker, gfp_t gfp)
include/linux/netdevice.h:netif_addr_lock(struct net_device *dev)
net/core/rtnetlink.c:do_setlink(const struct sk_buff *skb, struct net_device *dev, struct ifinfomsg *ifm, struct netlink_ext_ack *extack, struct nlattr **tb, int status)
net/core/rtnetlink.c:rtnl_configure_link(struct net_device *dev, const struct ifinfomsg *ifm, u32 portid, const struct nlmsghdr *nlh)
net/core/rtnetlink.c:rtnl_create_link()
net/core/rtnetlink.c:rtnl_delete_link(struct net_device *dev, u32 portid, const struct nlmsghdr *nlh)
net/core/rtnetlink.c:rtnl_dellink(struct sk_buff *skb, struct nlmsghdr *nlh, struct netlink_ext_ack *extack)
net/core/rtnetlink.c:rtnl_link_fill(struct sk_buff *skb, const struct net_device *dev)
net/core/rtnetlink.c:rtnl_newlink_create(struct sk_buff *skb, struct ifinfomsg *ifm, const struct rtnl_link_ops *ops, const struct nlmsghdr *nlh, struct nlattr **tb, struct nlattr **data, struct netlink_ext_ack *extack)
net/core/rtnetlink.c:rtnl_setlink(struct sk_buff *skb, struct nlmsghdr *nlh, struct netlink_ext_ack *extack)
kernel/nsproxy.c:copy_namespaces(unsigned long flags, struct task_struct *tsk)
kernel/nsproxy.c:create_new_namespaces()
kernel/nsproxy.c:free_nsproxy(struct nsproxy *ns)
kernel/nsproxy.c:prepare_nsset(unsigned flags, struct nsset *nsset)
kernel/nsproxy.c:unshare_nsproxy_namespaces(unsigned long unshare_flags, struct nsproxy **new_nsp, struct cred *new_cred, struct fs_struct *new_fs)
kernel/nsproxy.c:validate_nsset(struct nsset *nsset, struct pid *pid)
kernel/notifier.c:blocking_notifier_call_chain(struct blocking_notifier_head *nh, unsigned long val, void *v)
kernel/notifier.c:notifier_call_chain(struct notifier_block **nl, unsigned long val, void *v, int nr_to_call, int *nr_calls)
kernel/notifier.c:notifier_call_chain_robust(struct notifier_block **nl, unsigned long val_up, unsigned long val_down, void *v)
net/ipv6/ndisc.c:ndisc_constructor(struct neighbour *neigh)
net/ipv6/ndisc.c:ndisc_netdev_event(struct notifier_block *this, unsigned long event, void *ptr)
net/ipv6/ndisc.c:ndisc_rcv(struct sk_buff *skb)
net/ipv6/af_inet6.c:inet6_init(void)
net/ipv6/af_inet6.c:inet6_net_exit(struct net *net)
net/ipv6/af_inet6.c:inet6_net_init(struct net *net)
func for case 54b10a5da9e59f1ed979
fs/bfs/inode.c:bfs_dump_imap(const char *prefix, struct super_block *s)
fs/bfs/inode.c:bfs_evict_inode(struct inode *inode)
fs/bfs/inode.c:bfs_fill_super(struct super_block *s, void *data, int silent)
fs/bfs/inode.c:bfs_iget()
fs/bfs/inode.c:bfs_statfs(struct dentry *dentry, struct kstatfs *buf)
fs/bfs/inode.c:bfs_write_inode(struct inode *inode, struct writeback_control *wbc)
fs/bfs/inode.c:find_inode()
fs/bfs/inode.c:init_bfs_fs(void)
fs/bfs/inode.c:init_inodecache(void)
fs/bfs/inode.c:bfs_alloc_inode()
bfs_destroy_inode()
fs/bfs/inode.c:bfs_fill_super(struct super_block *s, void *data, int silent)
bfs_mount()
fs/bfs/inode.c:bfs_put_super(struct super_block *s)
bfs_remount()
fs/bfs/inode.c:bfs_statfs(struct dentry *dentry, struct kstatfs *buf)
bfs_umount()
fs/super.c:alloc_super()
fs/super.c:generic_shutdown_super(struct super_block *sb))
fs/super.c:get_tree_bdev(struct fs_context *fc, int (*fill_super)(struct super_block *, struct fs_context *)))
fs/super.c:mount_bdev()
fs/super.c:reconfigure_super(struct fs_context *fc))
fs/super.c:sget_fc()
fs/super.c:vfs_get_super(struct fs_context *fc, enum vfs_get_super_keying keying, int (*fill_super)(struct super_block *sb, struct fs_context *fc)))
fs/super.c:vfs_get_tree(struct fs_context *fc))
fs/namespace.c:do_add_mount(struct mount *newmnt, struct mountpoint *mp, struct path *path, int mnt_flags)
fs/namespace.c:do_mount(const char *dev_name, const char __user *dir_name, const char *type_page, unsigned long flags, void *data_page)
fs/namespace.c:do_new_mount(struct path *path, const char *fstype, int sb_flags, int mnt_flags, const char *name, void *data)
fs/namespace.c:do_new_mount_fc(struct fs_context *fc, struct path *mountpoint, unsigned int mnt_flags)
fs/namespace.c:do_reconfigure_mnt(struct path *path, unsigned int mnt_flags)
fs/namespace.c:do_remount(struct path *path, int ms_flags, int sb_flags, int mnt_flags, void *data)
fs/namespace.c:path_mount(const char *dev_name, struct path *path, const char *type_page, unsigned long flags, void *data_page)
fs/namespace.c:vfs_kern_mount()
fs/fs_context.c:alloc_fs_context()
fs/fs_context.c:generic_parse_monolithic(struct fs_context *fc, void *data)
fs/fs_context.c:legacy_get_tree(struct fs_context *fc)
fs/fs_context.c:legacy_parse_monolithic(struct fs_context *fc, void *data)
fs/fs_context.c:legacy_parse_param(struct fs_context *fc, struct fs_parameter *param)
fs/fs_context.c:legacy_reconfigure(struct fs_context *fc)
fs/fs_context.c:vfs_parse_fs_param(struct fs_context *fc, struct fs_parameter *param)
fs/fs_context.c:vfs_parse_fs_string(struct fs_context *fc, const char *key, const char *value, size_t v_size)
fs/bfs/dir.c:bfs_add_entry(struct inode *dir, const struct qstr *child, int ino)
fs/bfs/dir.c:bfs_create(struct inode *dir, struct dentry *dentry, umode_t mode, bool excl)
fs/bfs/dir.c:bfs_find_entry()
device_add_disk()
set_capacity()
set_capacity_and_notify()
func for case f1faa20eec55e0c8644c
fs/jfs/xattr.c:__jfs_xattr_set(struct inode *inode, const char *name, const void *value, size_t size, int flags)
fs/jfs/jfs_txnmgr.c:jfs_lazycommit(void *arg)
fs/jfs/jfs_txnmgr.c:jfs_sync(void *arg)
fs/jfs/jfs_txnmgr.c:jfs_txanchor_proc_show(struct seq_file *m, void *v)
fs/jfs/jfs_txnmgr.c:jfs_txstats_proc_show(struct seq_file *m, void *v)
fs/jfs/xattr.c:__jfs_getxattr(struct inode *inode, const char *name, void *data, size_t buf_size)
fs/jfs/xattr.c:__jfs_setxattr(tid_t tid, struct inode *inode, const char *name, const void *value, size_t value_len, int flags)
fs/jfs/xattr.c:__jfs_xattr_set(struct inode *inode, const char *name, const void *value, size_t size, int flags)
fs/jfs/xattr.c:copy_name(char *buffer, struct jfs_ea *ea)
fs/jfs/xattr.c:ea_get(struct inode *inode, struct ea_buffer *ea_buf, int min_size)
fs/jfs/xattr.c:ea_put(tid_t tid, struct inode *inode, struct ea_buffer *ea_buf, int new_size)
fs/jfs/xattr.c:ea_read(struct inode *ip, struct jfs_ea_list *ealist)
fs/jfs/xattr.c:ea_read_inline(struct inode *ip, struct jfs_ea_list *ealist)
fs/jfs/xattr.c:ea_write(struct inode *ip, struct jfs_ea_list *ealist, int size, dxd_t * ea)
fs/jfs/xattr.c:ea_write_inline(struct inode *ip, struct jfs_ea_list *ealist, int size, dxd_t * ea)
fs/jfs/xattr.c:jfs_initxattrs(struct inode *inode, const struct xattr *xattr_array, void *fs_info)
fs/jfs/xattr.c:jfs_listxattr(struct dentry * dentry, char *data, size_t buf_size)
fs/jfs/jfs_mount.c:jfs_mount(struct super_block *sb)
fs/jfs/super.c:jfs_fill_super(struct super_block *sb, void *data, int silent)
fs/jfs/super.c:jfs_handle_error(struct super_block *sb)
fs/jfs/super.c:jfs_put_super(struct super_block *sb)
fs/jfs/super.c:jfs_remount(struct super_block *sb, int *flags, char *data)
fs/jfs/super.c:jfs_show_options(struct seq_file *seq, struct dentry *root)
fs/jfs/super.c:jfs_statfs(struct dentry *dentry, struct kstatfs *buf)
fs/jfs/super.c:jfs_sync_fs(struct super_block *sb, int wait)
fs/jfs/super.c:parse_options(char *options, struct super_block *sb, s64 *newLVSize, int *flag)
fs/jfs/jfs_logmgr.c:jfs_flush_journal(struct jfs_log *log, int wait)
fs/jfs/jfs_logmgr.c:jfs_lmstats_proc_show(struct seq_file *m, void *v)
fs/jfs/jfs_logmgr.c:open_dummy_log(struct super_block *sb)
fs/jfs/jfs_logmgr.c:open_inline_log(struct super_block *sb)
fs/jfs/inode.c:jfs_commit_inode(struct inode *inode, int wait)
fs/jfs/inode.c:jfs_dirty_inode(struct inode *inode, int flags)
fs/jfs/inode.c:jfs_evict_inode(struct inode *inode)
fs/jfs/inode.c:jfs_get_block(struct inode *ip, sector_t lblock, struct buffer_head *bh_result, int create)
fs/jfs/inode.c:jfs_iget()
fs/jfs/inode.c:jfs_truncate(struct inode *ip)
fs/jfs/inode.c:jfs_truncate_nolock(struct inode *ip, loff_t length)
fs/jfs/inode.c:jfs_write_inode(struct inode *inode, struct writeback_control *wbc)
fs/xattr.c:__vfs_setxattr(struct mnt_idmap *idmap, struct dentry *dentry, struct inode *inode, const char *name, const void *value, size_t size, int flags)
fs/xattr.c:__vfs_setxattr_locked(struct mnt_idmap *idmap, struct dentry *dentry, const char *name, const void *value, size_t size, int flags, struct inode **delegated_inode)
fs/xattr.c:__vfs_setxattr_noperm(struct mnt_idmap *idmap, struct dentry *dentry, const char *name, const void *value, size_t size, int flags)
fs/xattr.c:path_setxattr(const char __user *pathname, const char __user *name, const void __user *value, size_t size, int flags, unsigned int lookup_flags)
setxattr_convert()
fs/xattr.c:setxattr_copy(const char __user *name, struct xattr_ctx *ctx)
fs/xattr.c:vfs_setxattr(struct mnt_idmap *idmap, struct dentry *dentry, const char *name, const void *value, size_t size, int flags)
fs/xattr.c:xattr_permission(struct mnt_idmap *idmap, struct inode *inode, const char *name, int mask)
_test_bit()
instrument_atomic_read()
func for case fbe81b56f7df4c0fb21b
net/core/stream.c:sk_stream_kill_queues(struct sock *sk)
net/core/stream.c:sk_stream_wait_connect(struct sock *sk, long *timeo_p)
net/core/stream.c:sk_stream_wait_memory(struct sock *sk, long *timeo_p)
net/core/stream.c:sk_stream_write_space(struct sock *sk)
net/tls/tls_sw.c:tls_decrypt_done(struct crypto_async_request *req, int err)
net/tls/tls_sw.c:tls_do_decryption(struct sock *sk, struct sk_buff *skb, struct scatterlist *sgin, struct scatterlist *sgout, char *iv_recv, size_t data_len, struct aead_request *aead_req, bool async)
net/tls/tls_sw.c:tls_do_encryption(struct sock *sk, struct tls_context *tls_ctx, struct tls_sw_context_tx *ctx, struct aead_request *aead_req, size_t data_len, u32 start)
net/tls/tls_sw.c:tls_encrypt_done(struct crypto_async_request *req, int err)
net/tls/tls_sw.c:tls_push_record(struct sock *sk, int flags, unsigned char record_type)
net/tls/tls_sw.c:tls_set_sw_offload(struct sock *sk, struct tls_context *ctx, int tx)
net/tls/tls_sw.c:tls_sw_advance_skb(struct sock *sk, struct sk_buff *skb, unsigned int len)
net/tls/tls_sw.c:tls_sw_do_sendpage(struct sock *sk, struct page *page, int offset, size_t size, int flags)
net/tls/tls_sw.c:tls_sw_push_pending_record(struct sock *sk, int flags)
net/tls/tls_sw.c:tls_sw_recvmsg(struct sock *sk, struct msghdr *msg, size_t len, int nonblock, int flags, int *addr_len)
net/tls/tls_sw.c:tls_sw_release_resources_rx(struct sock *sk)
net/tls/tls_sw.c:tls_sw_release_resources_tx(struct sock *sk)
net/tls/tls_sw.c:tls_sw_sendmsg(struct sock *sk, struct msghdr *msg, size_t size)
net/tls/tls_sw.c:tls_sw_sendpage(struct sock *sk, struct page *page, int offset, size_t size, int flags)
net/tls/tls_sw.c:tls_tx_records(struct sock *sk, int flags)
net/ipv4/tcp.c:do_tcp_sendpages(struct sock *sk, struct page *page, int offset, size_t size, int flags)
net/ipv4/tcp.c:sk_stream_alloc_skb()
net/ipv4/tcp.c:skb_entail(struct sock *sk, struct sk_buff *skb)
net/ipv4/tcp.c:tcp_check_oom(struct sock *sk, int shift)
net/ipv4/tcp.c:tcp_close(struct sock *sk, long timeout)
net/ipv4/tcp.c:tcp_disconnect(struct sock *sk, int flags)
net/ipv4/tcp.c:tcp_enter_memory_pressure(struct sock *sk)
net/ipv4/tcp.c:tcp_init_sock(struct sock *sk)
net/ipv4/tcp.c:tcp_leave_memory_pressure(struct sock *sk)
net/ipv4/tcp.c:tcp_push(struct sock *sk, int flags, int mss_now, int nonagle, int size_goal)
net/ipv4/tcp.c:tcp_rtx_queue_purge(struct sock *sk)
net/ipv4/tcp.c:tcp_sendmsg_locked(struct sock *sk, struct msghdr *msg, size_t size)
net/ipv4/tcp.c:tcp_sendpage_locked(struct sock *sk, struct page *page, int offset, size_t size, int flags)
net/ipv4/tcp.c:tcp_set_state(struct sock *sk, int state)
net/ipv4/tcp.c:tcp_write_queue_purge(struct sock *sk)
net/core/sock.c:__sk_destruct(struct rcu_head *head)
net/ipv4/inet_connection_sock.c:inet_csk_destroy_sock(struct sock *sk)
net/core/sock.c:sk_alloc()
net/core/sock.c:sk_destruct(struct sock *sk)
net/core/stream.c:sk_stream_kill_queues(struct sock *sk)
sock_common_release()
net/core/sock.c:sock_init_data(struct socket *sock, struct sock *sk)
net/ipv4/tcp.c:tcp_close(struct sock *sk, long timeout)
net/tls/tls_main.c:do_tls_setsockopt(struct sock *sk, int optname, char __user *optval, unsigned int optlen)
net/tls/tls_main.c:do_tls_setsockopt_conf(struct sock *sk, char __user *optval, unsigned int optlen, int tx)
net/tls/tls_main.c:tls_build_proto(struct sock *sk)
net/tls/tls_main.c:tls_ctx_create()
net/tls/tls_main.c:tls_init(struct sock *sk)
net/tls/tls_main.c:tls_setsockopt(struct sock *sk, int level, int optname, char __user *optval, unsigned int optlen)
net/tls/tls_main.c:tls_sk_proto_cleanup(struct sock *sk, struct tls_context *ctx, long timeo)
net/tls/tls_main.c:tls_sk_proto_close(struct sock *sk, long timeout)
net/ipv4/inet_connection_sock.c:inet_csk_accept()
net/ipv4/inet_connection_sock.c:inet_csk_bind_conflict(const struct sock *sk, const struct inet_bind_bucket *tb, bool relax, bool reuseport_ok)
net/ipv4/inet_connection_sock.c:inet_csk_clear_xmit_timers(struct sock *sk)
net/ipv4/inet_connection_sock.c:inet_csk_destroy_sock(struct sock *sk)
net/ipv4/inet_connection_sock.c:inet_csk_get_port(struct sock *sk, unsigned short snum)
net/ipv4/inet_connection_sock.c:inet_csk_init_xmit_timers(struct sock *sk, void (*retransmit_handler)(struct timer_list *t), void (*delack_handler)(struct timer_list *t), void (*keepalive_handler)(struct timer_list *t))
net/ipv4/inet_connection_sock.c:inet_csk_listen_stop(struct sock *sk)
net/ipv4/inet_connection_sock.c:inet_csk_wait_for_connect(struct sock *sk, long timeo)
net/ipv6/tcp_ipv6.c:tcp_v6_conn_request(struct sock *sk, struct sk_buff *skb)
net/ipv6/tcp_ipv6.c:tcp_v6_connect(struct sock *sk, struct sockaddr *uaddr, int addr_len)
net/ipv6/tcp_ipv6.c:tcp_v6_do_rcv(struct sock *sk, struct sk_buff *skb)
net/ipv6/tcp_ipv6.c:tcp_v6_err(struct sk_buff *skb, struct inet6_skb_parm *opt, u8 type, u8 code, int offset, __be32 info)
net/ipv6/tcp_ipv6.c:tcp_v6_init_req(struct request_sock *req, const struct sock *sk_listener, struct sk_buff *skb)
net/ipv6/tcp_ipv6.c:tcp_v6_rcv(struct sk_buff *skb)
net/ipv6/tcp_ipv6.c:tcp_v6_send_response(const struct sock *sk, struct sk_buff *skb, u32 seq, u32 ack, u32 win, u32 tsval, u32 tsecr, int oif, struct tcp_md5sig_key *key, int rst, u8 tclass, __be32 label, u32 priority)
net/ipv6/tcp_ipv6.c:tcp_v6_syn_recv_sock()
net/ipv6/ipv6_sockglue.c:do_ipv6_setsockopt(struct sock *sk, int level, int optname, char __user *optval, unsigned int optlen)
ipv6_set_opt_hdr()
net/ipv6/ipv6_sockglue.c:ipv6_setsockopt(struct sock *sk, int level, int optname, char __user *optval, unsigned int optlen)
net/socket.c:__sock_release(struct socket *sock, struct inode *inode)
net/socket.c:__sys_getsockopt(int fd, int level, int optname, char __user *optval, int __user *optlen)
net/socket.c:__sys_setsockopt(int fd, int level, int optname, char __user *optval, int optlen)
net/ipv4/af_inet.c:inet_create(struct net *net, struct socket *sock, int protocol, int kern)
net/ipv4/af_inet.c:inet_release(struct socket *sock)
net/ipv4/af_inet.c:inet_sock_destruct(struct sock *sk)
func for case 0871b14ca2e2fb64f6e3
drivers/gpu/drm/vkms/vkms_crtc.c:vkms_atomic_crtc_duplicate_state()
drivers/gpu/drm/vkms/vkms_crtc.c:vkms_atomic_crtc_reset(struct drm_crtc *crtc)
drivers/gpu/drm/vkms/vkms_crtc.c:vkms_crtc_atomic_check(struct drm_crtc *crtc, struct drm_crtc_state *state)
drivers/gpu/drm/vkms/vkms_crtc.c:vkms_crtc_atomic_flush(struct drm_crtc *crtc, struct drm_crtc_state *old_crtc_state)
drivers/gpu/drm/vkms/vkms_crtc.c:vkms_crtc_init(struct drm_device *dev, struct drm_crtc *crtc, struct drm_plane *primary, struct drm_plane *cursor)
drivers/gpu/drm/vkms/vkms_crtc.c:vkms_enable_vblank(struct drm_crtc *crtc)
drivers/gpu/drm/vkms/vkms_crtc.c:vkms_get_vblank_timestamp(struct drm_device *dev, unsigned int pipe, int *max_error, ktime_t *vblank_time, bool in_vblank_irq)
drivers/gpu/drm/vkms/vkms_crtc.c:vkms_vblank_simulate(struct hrtimer *timer)
drivers/gpu/drm/drm_vblank.c:drm_crtc_accurate_vblank_count(struct drm_crtc *crtc)
drivers/gpu/drm/drm_vblank.c:drm_crtc_vblank_off(struct drm_crtc *crtc)
drivers/gpu/drm/drm_vblank.c:drm_crtc_vblank_on(struct drm_crtc *crtc)
drivers/gpu/drm/drm_vblank.c:drm_handle_vblank(struct drm_device *dev, unsigned int pipe)
drivers/gpu/drm/drm_vblank.c:drm_handle_vblank_events(struct drm_device *dev, unsigned int pipe)
drivers/gpu/drm/drm_vblank.c:drm_queue_vblank_event(struct drm_device *dev, unsigned int pipe, u64 req_seq, union drm_wait_vblank *vblwait, struct drm_file *file_priv)
drivers/gpu/drm/drm_vblank.c:drm_reset_vblank_timestamp(struct drm_device *dev, unsigned int pipe)
drivers/gpu/drm/drm_vblank.c:drm_update_vblank_count(struct drm_device *dev, unsigned int pipe, bool in_vblank_irq)
drivers/gpu/drm/drm_vblank.c:drm_vblank_cleanup(struct drm_device *dev)
drivers/gpu/drm/drm_vblank.c:drm_vblank_disable_and_save(struct drm_device *dev, unsigned int pipe)
drivers/gpu/drm/drm_vblank.c:drm_vblank_enable(struct drm_device *dev, unsigned int pipe)
drivers/gpu/drm/drm_vblank.c:drm_vblank_get(struct drm_device *dev, unsigned int pipe)
drivers/gpu/drm/drm_vblank.c:drm_vblank_init(struct drm_device *dev, unsigned int num_crtcs)
drivers/gpu/drm/drm_vblank.c:drm_vblank_put(struct drm_device *dev, unsigned int pipe)
drivers/gpu/drm/drm_vblank.c:drm_wait_vblank_ioctl(struct drm_device *dev, void *data, struct drm_file *file_priv)
__do_sys_ioctl()
__raw_spin_unlock_irqrestore()
__se_sys_ioctl()
__x64_sys_ioctl()
_raw_spin_unlock_irqrestore()
fs/ioctl.c:do_vfs_ioctl(struct file *filp, unsigned int fd, unsigned int cmd, unsigned long arg)
drivers/gpu/drm/drm_ioctl.c:drm_ioctl(struct file *filp, unsigned int cmd, unsigned long arg)
drivers/gpu/drm/drm_ioctl.c:drm_ioctl_kernel(struct file *file, drm_ioctl_t *func, void *kdata, u32 flags)
drivers/gpu/drm/drm_vblank.c:drm_vblank_get(struct drm_device *dev, unsigned int pipe)
drivers/gpu/drm/drm_vblank.c:drm_wait_vblank_ioctl(struct drm_device *dev, void *data, struct drm_file *file_priv)
fs/ioctl.c:file_ioctl(struct file *filp, unsigned int cmd, unsigned long arg)
fs/ioctl.c:ksys_ioctl(unsigned int fd, unsigned int cmd, unsigned long arg)
spin_unlock_irqrestore()
fs/ioctl.c:vfs_ioctl(struct file *filp, unsigned int cmd, unsigned long arg)
drivers/gpu/drm/vkms/vkms_crtc.c:vkms_vblank_simulate(struct hrtimer *timer)
drm_legacy_irq_install()
drm_legacy_irq_uninstall()
__hrtimer_reprogram()
kernel/time/hrtimer.c:__hrtimer_run_queues(struct hrtimer_cpu_base *cpu_base, ktime_t now, unsigned long flags, unsigned int active_mask)
kernel/time/hrtimer.c:__hrtimer_start_range_ns(struct hrtimer *timer, ktime_t tim, u64 delta_ns, const enum hrtimer_mode mode, struct hrtimer_clock_base *base)
kernel/time/hrtimer.c:hrtimer_forward(struct hrtimer *timer, ktime_t now, ktime_t interval)
kernel/time/hrtimer.c:hrtimer_interrupt(struct clock_event_device *dev)
kernel/time/hrtimer.c:hrtimer_reprogram(struct hrtimer *timer, bool reprogram)
kernel/time/hrtimer.c:hrtimer_run_queues(void)
kernel/time/hrtimer.c:hrtimer_start_range_ns(struct hrtimer *timer, ktime_t tim, u64 delta_ns, const enum hrtimer_mode mode)
drivers/gpu/drm/drm_ioctl.c:drm_getcap(struct drm_device *dev, void *data, struct drm_file *file_priv)
drivers/gpu/drm/drm_ioctl.c:drm_getclient(struct drm_device *dev, void *data, struct drm_file *file_priv)
drivers/gpu/drm/drm_ioctl.c:drm_ioctl(struct file *filp, unsigned int cmd, unsigned long arg)
drivers/gpu/drm/drm_ioctl.c:drm_ioctl_kernel(struct file *file, drm_ioctl_t *func, void *kdata, u32 flags)
drivers/gpu/drm/drm_ioctl.c:drm_ioctl_permit(u32 flags, struct drm_file *file_priv)
drivers/gpu/drm/drm_ioctl.c:drm_setclientcap(struct drm_device *dev, void *data, struct drm_file *file_priv)
drivers/gpu/drm/drm_ioctl.c:drm_setversion(struct drm_device *dev, void *data, struct drm_file *file_priv)
drivers/gpu/drm/drm_ioctl.c:drm_version(struct drm_device *dev, void *data, struct drm_file *file_priv)
__raw_spin_unlock_irqrestore()
_raw_spin_unlock_irqrestore()
fs/ioctl.c:do_vfs_ioctl(struct file *filp, unsigned int fd, unsigned int cmd, unsigned long arg)
drivers/gpu/drm/drm_ioctl.c:drm_ioctl(struct file *filp, unsigned int cmd, unsigned long arg)
drivers/gpu/drm/drm_ioctl.c:drm_ioctl_kernel(struct file *file, drm_ioctl_t *func, void *kdata, u32 flags)
drivers/gpu/drm/drm_vblank.c:drm_vblank_get(struct drm_device *dev, unsigned int pipe)
drivers/gpu/drm/drm_vblank.c:drm_wait_vblank_ioctl(struct drm_device *dev, void *data, struct drm_file *file_priv)
spin_unlock_irqrestore()
arch/x86/kernel/apic/apic.c:local_apic_timer_interrupt(void)
arch/x86/kernel/apic/apic.c:setup_local_APIC(void)
sysvec_apic_timer_interrupt()
drivers/gpu/drm/drm_file.c:drm_file_alloc()
drivers/gpu/drm/drm_file.c:drm_open(struct inode *inode, struct file *filp)
drivers/gpu/drm/drm_file.c:drm_open_helper(struct file *filp, struct drm_minor *minor)
fs/ioctl.c:do_vfs_ioctl(struct file *filp, unsigned int fd, unsigned int cmd, unsigned long arg)
fs/ioctl.c:file_ioctl(struct file *filp, unsigned int cmd, unsigned long arg)
fs/ioctl.c:vfs_ioctl(struct file *filp, unsigned int cmd, unsigned long arg)
func for case 7b99aafdcc2eedea6178
net/core/stream.c:sk_stream_kill_queues(struct sock *sk)
net/core/stream.c:sk_stream_wait_connect(struct sock *sk, long *timeo_p)
net/core/stream.c:sk_stream_wait_memory(struct sock *sk, long *timeo_p)
net/core/stream.c:sk_stream_write_space(struct sock *sk)
net/ipv4/tcp.c:__tcp_close(struct sock *sk, long timeout)
net/ipv4/tcp.c:sk_stream_alloc_skb()
net/ipv4/tcp.c:tcp_abort(struct sock *sk, int err)
net/ipv4/tcp.c:tcp_cleanup_rbuf(struct sock *sk, int copied)
net/ipv4/tcp.c:tcp_close(struct sock *sk, long timeout)
net/ipv4/tcp.c:tcp_disconnect(struct sock *sk, int flags)
net/ipv4/tcp.c:tcp_done(struct sock *sk)
net/ipv4/tcp.c:tcp_init_sock(struct sock *sk)
net/ipv4/tcp.c:tcp_push(struct sock *sk, int flags, int mss_now, int nonagle, int size_goal)
net/ipv4/tcp.c:tcp_recvmsg_locked(struct sock *sk, struct msghdr *msg, size_t len, int nonblock, int flags, struct scm_timestamping_internal *tss, int *cmsg_flags)
net/ipv4/tcp.c:tcp_rtx_queue_purge(struct sock *sk)
net/ipv4/tcp.c:tcp_sendmsg_locked(struct sock *sk, struct msghdr *msg, size_t size)
net/ipv4/tcp.c:tcp_set_state(struct sock *sk, int state)
net/ipv4/tcp.c:tcp_shutdown(struct sock *sk, int how)
net/ipv4/tcp.c:tcp_write_queue_purge(struct sock *sk)
net/mptcp/protocol.c:__mptcp_close_ssk(struct sock *sk, struct sock *ssk, struct mptcp_subflow_context *subflow)
net/mptcp/protocol.c:__mptcp_close_subflow(struct mptcp_sock *msk)
net/mptcp/protocol.c:__mptcp_destroy_sock(struct sock *sk)
net/mptcp/protocol.c:mptcp_check_close_timeout(const struct sock *sk)
net/mptcp/protocol.c:mptcp_check_data_fin(struct sock *sk)
net/mptcp/protocol.c:mptcp_check_data_fin_ack(struct sock *sk)
net/mptcp/protocol.c:mptcp_check_fastclose(struct mptcp_sock *msk)
net/mptcp/protocol.c:mptcp_cleanup_rbuf(struct mptcp_sock *msk)
net/mptcp/protocol.c:mptcp_close(struct sock *sk, long timeout)
net/mptcp/protocol.c:mptcp_close_wake_up(struct sock *sk)
net/mptcp/protocol.c:mptcp_destroy_common(struct mptcp_sock *msk)
net/mptcp/protocol.c:mptcp_pending_data_fin(struct sock *sk, u64 *seq)
net/mptcp/protocol.c:mptcp_release_cb(struct sock *sk)
net/mptcp/protocol.c:mptcp_shutdown(struct socket *sock, int how)
net/mptcp/protocol.c:mptcp_subflow_shutdown(struct sock *sk, struct sock *ssk, int how)
net/ipv4/inet_connection_sock.c:inet_csk_accept()
net/ipv4/inet_connection_sock.c:inet_csk_clone_lock()
net/ipv4/inet_connection_sock.c:inet_csk_destroy_sock(struct sock *sk)
net/ipv4/inet_connection_sock.c:inet_csk_init_xmit_timers(struct sock *sk, void (*retransmit_handler)(struct timer_list *t), void (*delack_handler)(struct timer_list *t), void (*keepalive_handler)(struct timer_list *t))
net/ipv4/inet_connection_sock.c:inet_csk_listen_stop(struct sock *sk)
net/ipv4/inet_connection_sock.c:inet_csk_route_child_sock()
net/ipv4/inet_connection_sock.c:inet_csk_route_req()
net/ipv4/inet_connection_sock.c:inet_csk_wait_for_connect(struct sock *sk, long timeo)
net/mptcp/subflow.c:mptcp_subflow_create_socket(struct sock *sk, struct socket **new_sock)
net/mptcp/subflow.c:mptcp_subflow_reset(struct sock *ssk)
subflow_check_req()
net/mptcp/subflow.c:subflow_data_ready(struct sock *sk)
subflow_error_report()
net/mptcp/subflow.c:subflow_state_change(struct sock *sk)
net/mptcp/subflow.c:subflow_ulp_init(struct sock *sk)
net/mptcp/subflow.c:subflow_ulp_release(struct sock *ssk)
__fput()
net/socket.c:__sock_release(struct socket *sock, struct inode *inode)
net/ipv4/tcp.c:__tcp_close(struct sock *sk, long timeout)
net/ipv4/inet_connection_sock.c:inet_csk_destroy_sock(struct sock *sk)
net/ipv4/af_inet.c:inet_release(struct socket *sock)
net/core/stream.c:sk_stream_kill_queues(struct sock *sk)
sock_close()
net/ipv4/tcp.c:tcp_close(struct sock *sk, long timeout)
net/ipv4/tcp_output.c:__tcp_transmit_skb(struct sock *sk, struct sk_buff *skb, int clone_it, gfp_t gfp_mask, u32 rcv_nxt)
net/ipv4/tcp_output.c:tcp_connect(struct sock *sk)
net/ipv4/tcp_output.c:tcp_fragment(struct sock *sk, enum tcp_queue tcp_queue, struct sk_buff *skb, u32 len, unsigned int mss_now, gfp_t gfp)
net/ipv4/tcp_output.c:tcp_retransmit_skb(struct sock *sk, struct sk_buff *skb, int segs)
net/ipv4/tcp_output.c:tcp_send_fin(struct sock *sk)
net/ipv4/tcp_output.c:tcp_send_loss_probe(struct sock *sk)
net/ipv4/tcp_output.c:tcp_write_xmit(struct sock *sk, unsigned int mss_now, int nonagle, int push_one, gfp_t gfp)
net/ipv4/tcp_output.c:tcp_xmit_retransmit_queue(struct sock *sk)
net/mptcp/protocol.c:mptcp_setsockopt(struct sock *sk, int level, int optname, sockptr_t optval, unsigned int optlen)
mptcp_setsockopt_sol_socket_int()
mptcp_setsockopt_sol_tcp()
net/ipv4/af_inet.c:inet_create(struct net *net, struct socket *sock, int protocol, int kern)
net/ipv4/af_inet.c:inet_release(struct socket *sock)
net/ipv4/af_inet.c:inet_sock_destruct(struct sock *sk)
net/socket.c:kernel_sendmsg_locked(struct sock *sk, struct msghdr *msg, struct kvec *vec, size_t num, size_t size)
net/socket.c:sock_sendmsg(struct socket *sock, struct msghdr *msg)
net/socket.c:sock_sendmsg_nosec(struct socket *sock, struct msghdr *msg)
func for case 61e04e51b7ac86930589
drivers/block/nbd.c:nbd_add_socket(struct nbd_device *nbd, unsigned long arg, bool netlink)
drivers/block/nbd.c:nbd_complete_rq(struct request *req)
drivers/block/nbd.c:nbd_dev_remove(struct nbd_device *nbd)
drivers/block/nbd.c:nbd_disconnect(struct nbd_device *nbd)
drivers/block/nbd.c:nbd_disconnect_and_put(struct nbd_device *nbd)
drivers/block/nbd.c:nbd_genl_connect(struct sk_buff *skb, struct genl_info *info)
drivers/block/nbd.c:nbd_get_socket()
drivers/block/nbd.c:nbd_handle_cmd(struct nbd_cmd *cmd, int index)
drivers/block/nbd.c:nbd_open(struct block_device *bdev, fmode_t mode)
drivers/block/nbd.c:nbd_parse_flags(struct nbd_device *nbd)
drivers/block/nbd.c:nbd_put(struct nbd_device *nbd)
drivers/block/nbd.c:nbd_release(struct gendisk *disk, fmode_t mode)
drivers/block/nbd.c:nbd_send_cmd(struct nbd_device *nbd, struct nbd_cmd *cmd, int index)
drivers/block/nbd.c:nbd_start_device(struct nbd_device *nbd)
drivers/block/nbd.c:nbd_start_device_ioctl(struct nbd_device *nbd, struct block_device *bdev)
block/genhd.c:__alloc_disk_node()
block/genhd.c:__blk_alloc_disk()
block/genhd.c:__device_add_disk(struct device *parent, struct gendisk *disk, const struct attribute_group **groups, bool register_queue)
block/genhd.c:__register_blkdev(unsigned int major, const char *name, void (*probe)(dev_t devt))
block/genhd.c:blk_lookup_devt(const char *name, int partno)
block/genhd.c:del_gendisk(struct gendisk *disk)
block/genhd.c:disk_name()
block/genhd.c:disk_release(struct device *dev)
block/genhd.c:disk_scan_partitions(struct gendisk *disk)
block/genhd.c:disk_uevent(struct gendisk *disk, enum kobject_action action)
block/genhd.c:disk_visible(struct kobject *kobj, struct attribute *a, int n)
block/genhd.c:register_disk(struct device *parent, struct gendisk *disk, const struct attribute_group **groups)
block/genhd.c:set_capacity_and_notify(struct gendisk *disk, sector_t size)
block/genhd.c:set_disk_ro_uevent(struct gendisk *gd, int ro)
block/genhd.c:unregister_blkdev(unsigned int major, const char *name)
kernel/locking/mutex.c:__mutex_add_waiter(struct mutex *lock, struct mutex_waiter *waiter, struct list_head *list)
kernel/locking/mutex.c:__mutex_handoff(struct mutex *lock, struct task_struct *task)
kernel/locking/mutex.c:__mutex_init(struct mutex *lock, const char *name, struct lock_class_key *key)
kernel/locking/mutex.c:__mutex_lock_common(struct mutex *lock, unsigned int state, unsigned int subclass, struct lockdep_map *nest_lock, unsigned long ip, struct ww_acquire_ctx *ww_ctx, const bool use_ww_ctx)
kernel/locking/mutex.c:__mutex_trylock_fast(struct mutex *lock)
kernel/locking/mutex.c:__mutex_trylock_or_owner()
kernel/locking/mutex.c:__mutex_unlock_fast(struct mutex *lock)
kernel/locking/mutex.c:__mutex_unlock_slowpath(struct mutex *lock, unsigned long ip)
kernel/locking/mutex.c:atomic_dec_and_mutex_lock(atomic_t *cnt, struct mutex *lock)
kernel/locking/mutex.c:mutex_can_spin_on_owner(struct mutex *lock)
kernel/locking/mutex.c:mutex_lock_io_nested(struct mutex *lock, unsigned int subclass)
kernel/locking/mutex.c:mutex_optimistic_spin(struct mutex *lock, struct ww_acquire_ctx *ww_ctx, struct mutex_waiter *waiter)
kernel/locking/mutex.c:mutex_spin_on_owner(struct mutex *lock, struct task_struct *owner, struct ww_acquire_ctx *ww_ctx, struct mutex_waiter *waiter)
kernel/locking/mutex.c:ww_mutex_lock(struct ww_mutex *lock, struct ww_acquire_ctx *ctx)
kernel/locking/mutex.c:ww_mutex_lock_interruptible(struct ww_mutex *lock, struct ww_acquire_ctx *ctx)
net/netlink/genetlink.c:genl_family_rcv_msg(const struct genl_family *family, struct sk_buff *skb, struct nlmsghdr *nlh, struct netlink_ext_ack *extack)
net/netlink/genetlink.c:genl_family_rcv_msg_doit(const struct genl_family *family, struct sk_buff *skb, struct nlmsghdr *nlh, struct netlink_ext_ack *extack, const struct genl_ops *ops, int hdrlen, struct net *net)
net/netlink/genetlink.c:genl_lock_dumpit(struct sk_buff *skb, struct netlink_callback *cb)
net/netlink/genetlink.c:genl_notify(const struct genl_family *family, struct sk_buff *skb, struct genl_info *info, u32 group, gfp_t flags)
net/netlink/genetlink.c:genl_rcv_msg(struct sk_buff *skb, struct nlmsghdr *nlh, struct netlink_ext_ack *extack)
net/netlink/genetlink.c:genl_register_family(struct genl_family *family)
net/netlink/genetlink.c:genl_unregister_family(const struct genl_family *family)
net/netlink/genetlink.c:genlmsg_mcast(struct sk_buff *skb, u32 portid, unsigned long group, gfp_t flags)
fs/block_dev.c:bd_link_disk_holder(struct block_device *bdev, struct gendisk *disk)
fs/block_dev.c:bd_prepare_to_claim(struct block_device *bdev, void *holder)
fs/block_dev.c:bd_unlink_disk_holder(struct block_device *bdev, struct gendisk *disk)
fs/block_dev.c:blkdev_get_by_dev()
fs/block_dev.c:blkdev_get_part(struct block_device *part, fmode_t mode)
fs/block_dev.c:blkdev_get_whole(struct block_device *bdev, fmode_t mode)
fs/block_dev.c:blkdev_open(struct inode * inode, struct file * filp)
fs/block_dev.c:blkdev_put(struct block_device *bdev, fmode_t mode)
kernel/locking/lockdep.c:__lock_acquire(struct lockdep_map *lock, unsigned int subclass, int trylock, int read, int check, int hardirqs_off, struct lockdep_map *nest_lock, unsigned long ip, int references, int pin_count)
kernel/locking/lockdep.c:check_irq_usage(struct task_struct *curr, struct held_lock *prev, struct held_lock *next)
kernel/locking/lockdep.c:check_noncircular(struct held_lock *src, struct held_lock *target, struct lock_trace **const trace)
kernel/locking/lockdep.c:check_prev_add(struct task_struct *curr, struct held_lock *prev, struct held_lock *next, u16 distance, struct lock_trace **const trace)
kernel/locking/lockdep.c:check_prevs_add(struct task_struct *curr, struct held_lock *next)
kernel/locking/lockdep.c:mark_usage(struct task_struct *curr, struct held_lock *hlock, int check)
kernel/locking/lockdep.c:print_circular_bug(struct lock_list *this, struct lock_list *target, struct held_lock *check_src, struct held_lock *check_tgt)
kernel/locking/lockdep.c:validate_chain(struct task_struct *curr, struct held_lock *hlock, int chain_head, u64 chain_key)
lib/refcount.c:refcount_dec_and_lock(refcount_t *r, spinlock_t *lock)
lib/refcount.c:refcount_dec_and_lock_irqsave(refcount_t *r, spinlock_t *lock, unsigned long *flags)
lib/refcount.c:refcount_dec_and_mutex_lock(refcount_t *r, struct mutex *lock)
lib/refcount.c:refcount_dec_not_one(refcount_t *r)
lib/refcount.c:refcount_warn_saturate(refcount_t *r, enum refcount_saturation_type t)
net/netlink/af_netlink.c:netlink_rcv_skb(struct sk_buff *skb, int (*cb)(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *))
net/netlink/af_netlink.c:netlink_sendmsg(struct socket *sock, struct msghdr *msg, size_t len)
net/netlink/af_netlink.c:netlink_unicast(struct sock *ssk, struct sk_buff *skb, u32 portid, int nonblock)
block/blk-core.c:blk_cleanup_queue(struct request_queue *q)
block/blk-core.c:blk_queue_enter(struct request_queue *q, blk_mq_req_flags_t flags)
block/blk-core.c:blk_set_queue_dying(struct request_queue *q)
fs/open.c:dentry_open()
fs/open.c:do_dentry_open(struct file *f, struct inode *inode, int (*open)(struct inode *, struct file *))
fs/open.c:do_sys_openat2(int dfd, const char __user *filename, struct open_how *how)
func for case 0a89a7b56db04c21a656
fs/jfs/jfs_imap.c:copy_from_dinode(struct dinode * dip, struct inode *ip)
XT_GETPAGE()
__do_sys_mount()
__se_sys_mount()
fs/namespace.c:do_mount(const char *dev_name, const char __user *dir_name, const char *type_page, unsigned long flags, void *data_page)
fs/namespace.c:do_new_mount(struct path *path, const char *fstype, int sb_flags, int mnt_flags, const char *name, void *data)
fs/jfs/inode.c:jfs_evict_inode(struct inode *inode)
jfs_fill_super()
fs/jfs/jfs_mount.c:jfs_mount(struct super_block *sb)
legacy_get_tree()
fs/super.c:mount_bdev()
fs/namespace.c:path_mount(const char *dev_name, struct path *path, const char *type_page, unsigned long flags, void *data_page)
fs/super.c:vfs_get_tree(struct fs_context *fc))
fs/jfs/inode.c:jfs_commit_inode(struct inode *inode, int wait)
fs/jfs/inode.c:jfs_direct_IO(struct kiocb *iocb, struct iov_iter *iter)
fs/jfs/inode.c:jfs_dirty_inode(struct inode *inode, int flags)
fs/jfs/inode.c:jfs_evict_inode(struct inode *inode)
fs/jfs/inode.c:jfs_get_block(struct inode *ip, sector_t lblock, struct buffer_head *bh_result, int create)
fs/jfs/inode.c:jfs_iget()
fs/jfs/inode.c:jfs_truncate_nolock(struct inode *ip, loff_t length)
fs/jfs/inode.c:jfs_write_inode(struct inode *inode, struct writeback_control *wbc)
fs/jfs/jfs_logmgr.c:jfs_flush_journal(struct jfs_log *log, int wait)
fs/jfs/jfs_logmgr.c:jfs_lmstats_proc_show(struct seq_file *m, void *v)
fs/jfs/jfs_logmgr.c:open_dummy_log(struct super_block *sb)
fs/jfs/jfs_logmgr.c:open_inline_log(struct super_block *sb)
fs/inode.c:clear_inode(struct inode *inode)
fs/inode.c:iput_final(struct inode *inode)
fs/super.c:get_tree_bdev(struct fs_context *fc, int (*fill_super)(struct super_block *, struct fs_context *)))
fs/super.c:mount_bdev()
fs/super.c:vfs_get_tree(struct fs_context *fc))
fs/namespace.c:do_mount(const char *dev_name, const char __user *dir_name, const char *type_page, unsigned long flags, void *data_page)
fs/namespace.c:do_new_mount(struct path *path, const char *fstype, int sb_flags, int mnt_flags, const char *name, void *data)
fs/namespace.c:path_mount(const char *dev_name, struct path *path, const char *type_page, unsigned long flags, void *data_page)
func for case 2d4f8693f438d2bd4bdb
mm/memory.c:__handle_mm_fault(struct vm_area_struct *vma, unsigned long address, unsigned int flags)
mm/memory.c:do_anonymous_page(struct vm_fault *vmf)
mm/memory.c:do_cow_fault(struct vm_fault *vmf)
mm/memory.c:do_fault(struct vm_fault *vmf)
mm/memory.c:do_page_mkwrite(struct vm_fault *vmf)
mm/memory.c:do_read_fault(struct vm_fault *vmf)
mm/memory.c:do_set_pte(struct vm_fault *vmf, struct page *page, unsigned long addr)
mm/memory.c:do_shared_fault(struct vm_fault *vmf)
mm/memory.c:do_swap_page(struct vm_fault *vmf)
mm/memory.c:finish_fault(struct vm_fault *vmf)
mm/memory.c:handle_pte_fault(struct vm_fault *vmf)
mm/memory.c:insert_pfn(struct vm_area_struct *vma, unsigned long addr, pfn_t pfn, pgprot_t prot, bool mkwrite)
mm/memory.c:vm_insert_page(struct vm_area_struct *vma, unsigned long addr, struct page *page)
mm/memory.c:vmf_insert_pfn_prot(struct vm_area_struct *vma, unsigned long addr, unsigned long pfn, pgprot_t pgprot)
mm/memory.c:wp_page_copy(struct vm_fault *vmf)
drivers/gpu/drm/drm_gem_shmem_helper.c:__drm_gem_shmem_create()
drivers/gpu/drm/drm_gem_shmem_helper.c:drm_gem_shmem_create_with_handle()
drivers/gpu/drm/drm_gem_shmem_helper.c:drm_gem_shmem_fault(struct vm_fault *vmf))
drivers/gpu/drm/drm_gem_shmem_helper.c:drm_gem_shmem_free(struct drm_gem_shmem_object *shmem))
drivers/gpu/drm/drm_gem_shmem_helper.c:drm_gem_shmem_get_pages(struct drm_gem_shmem_object *shmem))
drivers/gpu/drm/drm_gem_shmem_helper.c:drm_gem_shmem_get_pages_locked(struct drm_gem_shmem_object *shmem))
drivers/gpu/drm/drm_gem_shmem_helper.c:drm_gem_shmem_madvise(struct drm_gem_shmem_object *shmem, int madv))
drivers/gpu/drm/drm_gem_shmem_helper.c:drm_gem_shmem_mmap(struct drm_gem_shmem_object *shmem, struct vm_area_struct *vma))
drivers/gpu/drm/drm_gem_shmem_helper.c:drm_gem_shmem_purge_locked(struct drm_gem_shmem_object *shmem))
drivers/gpu/drm/drm_gem_shmem_helper.c:drm_gem_shmem_put_pages_locked(struct drm_gem_shmem_object *shmem))
drivers/gpu/drm/drm_gem_shmem_helper.c:drm_gem_shmem_vm_close(struct vm_area_struct *vma))
drivers/gpu/drm/drm_gem_shmem_helper.c:drm_gem_shmem_vm_open(struct vm_area_struct *vma))
drivers/gpu/drm/drm_gem_shmem_helper.c:drm_gem_shmem_vmap(struct drm_gem_shmem_object *shmem, struct iosys_map *map))
drivers/gpu/drm/drm_gem_shmem_helper.c:drm_gem_shmem_vmap_locked(struct drm_gem_shmem_object *shmem, struct iosys_map *map))
drivers/gpu/drm/drm_gem_shmem_helper.c:drm_gem_shmem_vunmap_locked(struct drm_gem_shmem_object *shmem, struct iosys_map *map))
arch/x86/mm/fault.c:__bad_area(struct pt_regs *regs, unsigned long error_code, unsigned long address, u32 pkey, int si_code)
arch/x86/mm/fault.c:__bad_area_nosemaphore(struct pt_regs *regs, unsigned long error_code, unsigned long address, u32 pkey, int si_code)
arch/x86/mm/fault.c:access_error(unsigned long error_code, struct vm_area_struct *vma)
arch/x86/mm/fault.c:bad_area_access_error(struct pt_regs *regs, unsigned long error_code, unsigned long address, struct vm_area_struct *vma)
arch/x86/mm/fault.c:do_kern_addr_fault(struct pt_regs *regs, unsigned long hw_error_code, unsigned long address)
arch/x86/mm/fault.c:do_user_addr_fault(struct pt_regs *regs, unsigned long error_code, unsigned long address)
arch/x86/mm/fault.c:handle_page_fault(struct pt_regs *regs, unsigned long error_code, unsigned long address)
arch/x86/mm/fault.c:is_prefetch(struct pt_regs *regs, unsigned long error_code, unsigned long addr)
arch/x86/mm/fault.c:kernelmode_fixup_or_oops(struct pt_regs *regs, unsigned long error_code, unsigned long address, int signal, int si_code, u32 pkey)
arch/x86/mm/fault.c:page_fault_oops(struct pt_regs *regs, unsigned long error_code, unsigned long address)
arch/x86/mm/fault.c:pgtable_bad(struct pt_regs *regs, unsigned long error_code, unsigned long address)
arch/x86/mm/fault.c:sanitize_error_code(unsigned long address, unsigned long *error_code)
arch/x86/mm/fault.c:show_fault_oops(struct pt_regs *regs, unsigned long error_code, unsigned long address)
arch/x86/mm/fault.c:spurious_kernel_fault(unsigned long error_code, unsigned long address)
arch/x86/mm/fault.c:vmalloc_fault(unsigned long address)
mm/filemap.c:__generic_file_write_iter(struct kiocb *iocb, struct iov_iter *from)
mm/filemap.c:filemap_fault(struct vm_fault *vmf)
mm/filemap.c:filemap_map_pages(struct vm_fault *vmf, pgoff_t start_pgoff, pgoff_t end_pgoff)
mm/filemap.c:filemap_page_mkwrite(struct vm_fault *vmf)
mm/filemap.c:filemap_read(struct kiocb *iocb, struct iov_iter *iter, ssize_t already_read)
mm/filemap.c:generic_file_read_iter(struct kiocb *iocb, struct iov_iter *iter)
mm/filemap.c:generic_file_write_iter(struct kiocb *iocb, struct iov_iter *from)
mm/filemap.c:generic_perform_write(struct kiocb *iocb, struct iov_iter *i)
drivers/gpu/drm/drm_gem.c:drm_gem_init(struct drm_device *dev))
drivers/gpu/drm/drm_gem.c:drm_gem_mmap(struct file *filp, struct vm_area_struct *vma))
drivers/gpu/drm/drm_gem.c:drm_gem_mmap_obj(struct drm_gem_object *obj, unsigned long obj_size, struct vm_area_struct *vma))
drivers/gpu/drm/drm_gem.c:drm_gem_object_init(struct drm_device *dev, struct drm_gem_object *obj, size_t size))
drivers/gpu/drm/drm_gem.c:drm_gem_vmap(struct drm_gem_object *obj, struct iosys_map *map))
drm_gem_vmap_unlocked()
drivers/gpu/drm/drm_gem.c:drm_gem_vunmap(struct drm_gem_object *obj, struct iosys_map *map))
drm_gem_vunmap_unlocked()
mm/mmap.c:do_brk_flags(unsigned long addr, unsigned long len, unsigned long flags, struct list_head *uf)
mm/mmap.c:do_mmap(struct file *file, unsigned long addr, unsigned long len, unsigned long prot, unsigned long flags, unsigned long pgoff, unsigned long *populate, struct list_head *uf)
mm/mmap.c:insert_vm_struct(struct mm_struct *mm, struct vm_area_struct *vma)
mm/mmap.c:mmap_region(struct file *file, unsigned long addr, unsigned long len, vm_flags_t vm_flags, unsigned long pgoff, struct list_head *uf)
mm/mmap.c:vm_brk_flags(unsigned long addr, unsigned long request, unsigned long flags)
mm/mmap.c:vm_stat_account(struct mm_struct *mm, vm_flags_t flags, long npages)
mm/mmap.c:vma_link(struct mm_struct *mm, struct vm_area_struct *vma, struct vm_area_struct *prev, struct rb_node **rb_link, struct rb_node *rb_parent)
mm/mmap.c:vma_merge()
mm/memory.c:__do_fault(struct vm_fault *vmf)
mm/memory.c:__handle_mm_fault(struct vm_area_struct *vma, unsigned long address, unsigned int flags)
mm/memory.c:do_fault(struct vm_fault *vmf)
mm/memory.c:do_read_fault(struct vm_fault *vmf)
drivers/gpu/drm/drm_gem_shmem_helper.c:drm_gem_shmem_fault(struct vm_fault *vmf))
mm/memory.c:handle_mm_fault(struct vm_area_struct *vma, unsigned long address, unsigned int flags, struct pt_regs *regs)
mm/memory.c:handle_pte_fault(struct vm_fault *vmf)
mm/memory.c:vmf_insert_pfn_prot(struct vm_area_struct *vma, unsigned long addr, unsigned long pfn, pgprot_t pgprot)
fs/autofs/dev-ioctl.c:_autofs_dev_ioctl(unsigned int command, struct autofs_dev_ioctl __user *user)
fs/autofs/dev-ioctl.c:copy_dev_ioctl()
fs/autofs/dev-ioctl.c:validate_dev_ioctl(int cmd, struct autofs_dev_ioctl *param)
fs/ioctl.c:do_vfs_ioctl(struct file *filp, unsigned int fd, unsigned int cmd, unsigned long arg)
fs/ioctl.c:ioctl_fioasync(unsigned int fd, struct file *filp, int __user *argp)
fs/ioctl.c:ioctl_fionbio(struct file *filp, int __user *argp)
lib/usercopy.c:_copy_from_user(void *to, const void __user *from, unsigned long n)
lib/usercopy.c:_copy_to_user(void __user *to, const void *from, unsigned long n)
func for case d1e3b1d92d25abf97943
fs/fs_context.c:alloc_fs_context()
fs/fs_context.c:finish_clean_context(struct fs_context *fc)
fs/fs_context.c:generic_parse_monolithic(struct fs_context *fc, void *data)
fs/fs_context.c:legacy_fs_context_dup(struct fs_context *fc, struct fs_context *src_fc)
fs/fs_context.c:legacy_get_tree(struct fs_context *fc)
fs/fs_context.c:legacy_parse_monolithic(struct fs_context *fc, void *data)
fs/fs_context.c:legacy_parse_param(struct fs_context *fc, struct fs_parameter *param)
fs/fs_context.c:legacy_reconfigure(struct fs_context *fc)
fs/fs_context.c:put_fs_context(struct fs_context *fc)
fs/fs_context.c:vfs_clean_context(struct fs_context *fc)
fs/fs_context.c:vfs_dup_fs_context()
fs/fs_context.c:vfs_parse_fs_param(struct fs_context *fc, struct fs_parameter *param)
fs/fs_context.c:vfs_parse_fs_param_source(struct fs_context *fc, struct fs_parameter *param)
fs/fs_context.c:vfs_parse_fs_string(struct fs_context *fc, const char *key, const char *value, size_t v_size)
fs/fs_context.c:vfs_parse_sb_flag(struct fs_context *fc, const char *key)
security/smack/smack_lsm.c:smack_add_opt(int token, const char *s, void **mnt_opts)
security/smack/smack_lsm.c:smack_free_mnt_opts(void *mnt_opts)
security/smack/smack_lsm.c:smack_fs_context_dup(struct fs_context *fc, struct fs_context *src_fc)
security/smack/smack_lsm.c:smack_fs_context_parse_param(struct fs_context *fc, struct fs_parameter *param)
security/smack/smack_lsm.c:smack_inode_getsecurity(struct user_namespace *mnt_userns, struct inode *inode, const char *name, void **buffer, bool alloc)
security/smack/smack_lsm.c:smack_inode_getxattr(struct dentry *dentry, const char *name)
security/smack/smack_lsm.c:smack_inode_init_security(struct inode *inode, struct inode *dir, const struct qstr *qstr, const char **name, void **value, size_t *len)
security/smack/smack_lsm.c:smack_inode_permission(struct inode *inode, int mask)
security/smack/smack_lsm.c:smack_inode_post_setxattr(struct dentry *dentry, const char *name, const void *value, size_t size, int flags)
security/smack/smack_lsm.c:smack_inode_removexattr(struct user_namespace *mnt_userns, struct dentry *dentry, const char *name)
security/smack/smack_lsm.c:smack_inode_setsecurity(struct inode *inode, const char *name, const void *value, size_t size, int flags)
security/smack/smack_lsm.c:smack_inode_setxattr(struct user_namespace *mnt_userns, struct dentry *dentry, const char *name, const void *value, size_t size, int flags)
security/smack/smack_lsm.c:smack_sb_alloc_security(struct super_block *sb)
security/smack/smack_lsm.c:smack_sb_eat_lsm_opts(char *options, void **mnt_opts)
security/smack/smack_lsm.c:smack_set_mnt_opts(struct super_block *sb, void *mnt_opts, unsigned long kern_flags, unsigned long *set_kern_flags)
fs/fsopen.c:fscontext_alloc_log(struct fs_context *fc)
fs/fsopen.c:fscontext_create_fd(struct fs_context *fc, unsigned int o_flags)
fs/fsopen.c:fscontext_read(struct file *file, char __user *_buf, size_t len, loff_t *pos)
fs/fsopen.c:vfs_fsconfig_locked(struct fs_context *fc, int cmd, struct fs_parameter *param)
security/security.c:lsm_superblock_alloc(struct super_block *sb)
security/security.c:security_inode_alloc(struct inode *inode)
security/security.c:security_inode_getsecurity(struct user_namespace *mnt_userns, struct inode *inode, const char *name, void **buffer, bool alloc)
security/security.c:security_inode_init_security(struct inode *inode, struct inode *dir, const struct qstr *qstr, const initxattrs initxattrs, void *fs_data)
security/security.c:security_inode_removexattr(struct user_namespace *mnt_userns, struct dentry *dentry, const char *name)
security/security.c:security_inode_setsecurity(struct inode *inode, const char *name, const void *value, size_t size, int flags)
security/security.c:security_inode_setxattr(struct user_namespace *mnt_userns, struct dentry *dentry, const char *name, const void *value, size_t size, int flags)
security/security.c:security_sb_alloc(struct super_block *sb)
lib/string.c:__sysfs_match_string(const char * const *array, size_t n, const char *str)
lib/string.c:match_string(const char * const *array, size_t n, const char *string)
lib/string.c:memchr_inv()
lib/string.c:sysfs_streq(const char *s1, const char *s2)
fs/super.c:alloc_super()
fs/super.c:deactivate_locked_super(struct super_block *s))
fs/super.c:destroy_unused_super(struct super_block *s))
fs/super.c:generic_shutdown_super(struct super_block *sb))
fs/super.c:get_tree_bdev(struct fs_context *fc, int (*fill_super)(struct super_block *, struct fs_context *)))
fs/super.c:sget_fc()
fs/super.c:vfs_get_super(struct fs_context *fc, enum vfs_get_super_keying keying, int (*fill_super)(struct super_block *sb, struct fs_context *fc)))
fs/super.c:vfs_get_tree(struct fs_context *fc))
FSCONFIG_SET_STRING()
__do_sys_fsconfig()
__se_sys_fsconfig()
fs/fs_context.c:legacy_parse_param(struct fs_context *fc, struct fs_parameter *param)
fs/fsopen.c:vfs_fsconfig_locked(struct fs_context *fc, int cmd, struct fs_parameter *param)
fs/fs_context.c:vfs_parse_fs_param(struct fs_context *fc, struct fs_parameter *param)
fs/fs_context.c:legacy_parse_param(struct fs_context *fc, struct fs_parameter *param)
fs/fsopen.c:vfs_fsconfig_locked(struct fs_context *fc, int cmd, struct fs_parameter *param)
fs/fs_context.c:vfs_parse_fs_param(struct fs_context *fc, struct fs_parameter *param)
arch/x86/entry/common.c:do_syscall_64(struct pt_regs *regs, int nr)
arch/x86/entry/common.c:do_syscall_x32(struct pt_regs *regs, int nr)
arch/x86/entry/common.c:do_syscall_x64(struct pt_regs *regs, int nr)
func for case 77e4f005cb899d4268d1
fs/nilfs2/segment.c:nilfs_begin_page_io(struct page *page)
fs/nilfs2/segment.c:nilfs_end_page_io(struct page *page, int err)
fs/nilfs2/segment.c:nilfs_segctor_abort_construction(struct nilfs_sc_info *sci, struct the_nilfs *nilfs, int err)
fs/nilfs2/segment.c:nilfs_segctor_begin_construction(struct nilfs_sc_info *sci, struct the_nilfs *nilfs)
fs/nilfs2/segment.c:nilfs_segctor_collect(struct nilfs_sc_info *sci, struct the_nilfs *nilfs, int mode)
fs/nilfs2/segment.c:nilfs_segctor_collect_dirty_files(struct nilfs_sc_info *sci, struct the_nilfs *nilfs)
fs/nilfs2/segment.c:nilfs_segctor_complete_write(struct nilfs_sc_info *sci)
fs/nilfs2/segment.c:nilfs_segctor_construct(struct nilfs_sc_info *sci, int mode)
fs/nilfs2/segment.c:nilfs_segctor_do_construct(struct nilfs_sc_info *sci, int mode)
fs/nilfs2/segment.c:nilfs_segctor_prepare_write(struct nilfs_sc_info *sci)
fs/nilfs2/segment.c:nilfs_segctor_thread(void *arg)
fs/nilfs2/segment.c:nilfs_segctor_thread_construct(struct nilfs_sc_info *sci, int mode)
fs/nilfs2/segment.c:nilfs_segctor_truncate_segments(struct nilfs_sc_info *sci, struct nilfs_segment_buffer *last, struct inode *sufile)
fs/nilfs2/segment.c:nilfs_segctor_update_payload_blocknr(struct nilfs_sc_info *sci, struct nilfs_segment_buffer *segbuf, int mode)
fs/nilfs2/segment.c:nilfs_segctor_update_segusage(struct nilfs_sc_info *sci, struct inode *sufile)
include/linux/pagemap.h:__readahead_batch(struct readahead_control *rac, struct page **array, unsigned int array_sz)
include/linux/pagemap.h:__readahead_folio()
include/linux/pagemap.h:filemap_nr_thps_dec(struct address_space *mapping)
include/linux/pagemap.h:filemap_range_needs_writeback(struct address_space *mapping, loff_t start_byte, loff_t end_byte)
include/linux/pagemap.h:find_subpage()
include/linux/pagemap.h:folio_contains(struct folio *folio, pgoff_t index)
include/linux/pagemap.h:folio_detach_private()
include/linux/pagemap.h:folio_file_page()
include/linux/pagemap.h:folio_mkwrite_check_truncate(struct folio *folio, struct inode *inode)
include/linux/pagemap.h:linear_page_index(struct vm_area_struct *vma, unsigned long address)
include/linux/pagemap.h:page_mapping_file()
include/linux/pagemap.h:page_mkwrite_check_truncate(struct page *page, struct inode *inode)
include/linux/pagemap.h:page_to_index(struct page *page)
include/linux/pagemap.h:readahead_folio()
include/linux/pagemap.h:wake_page_match(struct wait_page_queue *wait_page, struct wait_page_key *key)
include/linux/page-flags.h:folio_flags()
include/linux/page-flags.h:folio_mark_uptodate(struct folio *folio)
include/linux/page-flags.h:folio_test_uptodate(struct folio *folio)
include/linux/page-flags.h:page_fixed_fake_head()
fs/nilfs2/the_nilfs.c:init_nilfs(struct the_nilfs *nilfs, struct super_block *sb, char *data)
fs/nilfs2/the_nilfs.c:load_nilfs(struct the_nilfs *nilfs, struct super_block *sb)
fs/nilfs2/the_nilfs.c:nilfs_find_or_create_root()
fs/nilfs2/the_nilfs.c:nilfs_load_super_block(struct the_nilfs *nilfs, struct super_block *sb, int blocksize, struct nilfs_super_block **sbpp)
fs/nilfs2/the_nilfs.c:nilfs_load_super_root(struct the_nilfs *nilfs, struct super_block *sb, sector_t sr_block)
fs/nilfs2/the_nilfs.c:nilfs_set_last_segment(struct the_nilfs *nilfs, sector_t start_blocknr, u64 seq, __u64 cno)
fs/nilfs2/the_nilfs.c:nilfs_store_disk_layout(struct the_nilfs *nilfs, struct nilfs_super_block *sbp)
fs/nilfs2/the_nilfs.c:nilfs_store_log_cursor(struct the_nilfs *nilfs, struct nilfs_super_block *sbp)
fs/nilfs2/dat.c:nilfs_dat_abort_end(struct inode *dat, struct nilfs_palloc_req *req)
fs/nilfs2/dat.c:nilfs_dat_commit_alloc(struct inode *dat, struct nilfs_palloc_req *req)
fs/nilfs2/dat.c:nilfs_dat_commit_end(struct inode *dat, struct nilfs_palloc_req *req, int dead)
fs/nilfs2/dat.c:nilfs_dat_commit_start(struct inode *dat, struct nilfs_palloc_req *req, sector_t blocknr)
fs/nilfs2/dat.c:nilfs_dat_move(struct inode *dat, __u64 vblocknr, sector_t blocknr)
fs/nilfs2/dat.c:nilfs_dat_prepare_alloc(struct inode *dat, struct nilfs_palloc_req *req)
fs/nilfs2/dat.c:nilfs_dat_read(struct super_block *sb, size_t entry_size, struct nilfs_inode *raw_inode, struct inode **inodep)
fs/nilfs2/dat.c:nilfs_dat_translate(struct inode *dat, __u64 vblocknr, sector_t *blocknrp)
fs/nilfs2/inode.c:__nilfs_read_inode(struct super_block *sb, struct nilfs_root *root, unsigned long ino, struct inode *inode)
fs/nilfs2/inode.c:nilfs_iget()
fs/nilfs2/inode.c:nilfs_load_inode_block(struct inode *inode, struct buffer_head **pbh)
fs/nilfs2/inode.c:nilfs_new_inode()
fs/nilfs2/inode.c:nilfs_read_inode_common(struct inode *inode, struct nilfs_inode *raw_inode)
fs/nilfs2/inode.c:nilfs_set_inode_flags(struct inode *inode)
fs/nilfs2/inode.c:nilfs_update_inode(struct inode *inode, struct buffer_head *ibh, int flags)
fs/nilfs2/inode.c:nilfs_write_inode_common(struct inode *inode, struct nilfs_inode *raw_inode, int has_bmap)
fs/nilfs2/super.c:nilfs_attach_checkpoint(struct super_block *sb, __u64 cno, int curr_mnt, struct nilfs_root **rootp)
fs/nilfs2/super.c:nilfs_attach_snapshot(struct super_block *s, __u64 cno, struct dentry **root_dentry)
fs/nilfs2/super.c:nilfs_commit_super(struct super_block *sb, int flag)
fs/nilfs2/super.c:nilfs_fill_super(struct super_block *sb, void *data, int silent)
fs/nilfs2/super.c:nilfs_put_super(struct super_block *sb)
fs/nilfs2/super.c:nilfs_read_super_block()
fs/nilfs2/super.c:nilfs_setup_super(struct super_block *sb, int is_mount)
fs/nilfs2/super.c:nilfs_sync_super(struct super_block *sb, int flag)
fs/nilfs2/segment.c:nilfs_segctor_prepare_write(struct nilfs_sc_info *sci)
read_write()
fs/nilfs2/bmap.c:nilfs_bmap_assign(struct nilfs_bmap *bmap, struct buffer_head **bh, unsigned long blocknr, union nilfs_binfo *binfo)
fs/nilfs2/bmap.c:nilfs_bmap_mark(struct nilfs_bmap *bmap, __u64 key, int level)
fs/nilfs2/bmap.c:nilfs_bmap_propagate(struct nilfs_bmap *bmap, struct buffer_head *bh)
fs/nilfs2/cpfile.c:nilfs_cpfile_block_init(struct inode *cpfile, struct buffer_head *bh, void *kaddr)
fs/nilfs2/cpfile.c:nilfs_cpfile_find_checkpoint_block(struct inode *cpfile, __u64 start_cno, __u64 end_cno, __u64 *cnop, struct buffer_head **bhp)
fs/nilfs2/cpfile.c:nilfs_cpfile_get_checkpoint(struct inode *cpfile, __u64 cno, int create, struct nilfs_checkpoint **cpp, struct buffer_head **bhp)
func for case 1917d778024161609247
net/qrtr/qrtr.c:qrtr_autobind(struct socket *sock)
net/qrtr/qrtr.c:qrtr_bcast_enqueue(struct qrtr_node *node, struct sk_buff *skb, int type, struct sockaddr_qrtr *from, struct sockaddr_qrtr *to)
net/qrtr/qrtr.c:qrtr_bind(struct socket *sock, struct sockaddr *saddr, int len)
net/qrtr/qrtr.c:qrtr_endpoint_post(struct qrtr_endpoint *ep, const void *data, size_t len)
net/qrtr/qrtr.c:qrtr_endpoint_register(struct qrtr_endpoint *ep, unsigned int nid)
net/qrtr/qrtr.c:qrtr_endpoint_unregister(struct qrtr_endpoint *ep)
net/qrtr/qrtr.c:qrtr_local_enqueue(struct qrtr_node *node, struct sk_buff *skb, int type, struct sockaddr_qrtr *from, struct sockaddr_qrtr *to)
net/qrtr/qrtr.c:qrtr_node_enqueue(struct qrtr_node *node, struct sk_buff *skb, int type, struct sockaddr_qrtr *from, struct sockaddr_qrtr *to)
net/qrtr/qrtr.c:qrtr_port_assign(struct qrtr_sock *ipc, int *port)
net/qrtr/qrtr.c:qrtr_port_remove(struct qrtr_sock *ipc)
net/qrtr/qrtr.c:qrtr_recvmsg(struct socket *sock, struct msghdr *msg, size_t size, int flags)
net/qrtr/qrtr.c:qrtr_sendmsg(struct socket *sock, struct msghdr *msg, size_t len)
net/qrtr/tun.c:qrtr_tun_write_iter(struct kiocb *iocb, struct iov_iter *from)
net/qrtr/qrtr.c:qrtr_tx_resume(struct qrtr_node *node, struct sk_buff *skb)
net/qrtr/qrtr.c:qrtr_tx_wait(struct qrtr_node *node, int dest_node, int dest_port, int type)
net/qrtr/tun.c:qrtr_tun_open(struct inode *inode, struct file *filp)
net/qrtr/tun.c:qrtr_tun_poll(struct file *filp, poll_table *wait)
net/qrtr/tun.c:qrtr_tun_read_iter(struct kiocb *iocb, struct iov_iter *to)
net/qrtr/tun.c:qrtr_tun_send(struct qrtr_endpoint *ep, struct sk_buff *skb)
net/qrtr/tun.c:qrtr_tun_write_iter(struct kiocb *iocb, struct iov_iter *from)
include/linux/skbuff.h:__pskb_trim(struct sk_buff *skb, unsigned int len)
include/linux/skbuff.h:__skb_cow(struct sk_buff *skb, unsigned int headroom, int cloned)
include/linux/skbuff.h:__skb_fill_page_desc(struct sk_buff *skb, int i, struct page *page, int off, int size)
include/linux/skbuff.h:__skb_grow(struct sk_buff *skb, unsigned int len)
include/linux/skbuff.h:__skb_put_data()
include/linux/skbuff.h:skb_add_data(struct sk_buff *skb, struct iov_iter *from, int copy)
skb_fill_page_desc_noacc()
include/linux/skbuff.h:skb_header_unclone(struct sk_buff *skb, gfp_t pri)
include/linux/skbuff.h:skb_orphan(struct sk_buff *skb)
include/linux/skbuff.h:skb_orphan_frags(struct sk_buff *skb, gfp_t gfp_mask)
include/linux/skbuff.h:skb_put_data()
skb_set_length()
include/linux/skbuff.h:skb_share_check()
skb_unclone_keeptruesize()
include/linux/skbuff.h:skb_unshare()
include/linux/string.h:memset_p()
net/qrtr/qrtr.c:qrtr_endpoint_post(struct qrtr_endpoint *ep, const void *data, size_t len)
qrtr_recv_msg()
qrtr_send_msg()
net/qrtr/tun.c:qrtr_tun_open(struct inode *inode, struct file *filp)
net/qrtr/tun.c:qrtr_tun_release(struct inode *inode, struct file *filp)
net/qrtr/tun.c:qrtr_tun_write_iter(struct kiocb *iocb, struct iov_iter *from)
send_msg()
include/linux/skbuff.h:skb_put_data()
____kasan_kfree_large()
____kasan_kmalloc()
____kasan_slab_free()
__kasan_check_byte()
__kasan_kmalloc_large()
__kasan_slab_alloc()
__kasan_slab_free_mempool()
__kasan_unpoison_pages()
mm/slab.c:__do_kmalloc()
fs/read_write.c:ksys_write(unsigned int fd, const char __user *buf, size_t count)
fs/read_write.c:new_sync_write(struct file *filp, const char __user *buf, size_t len, loff_t *ppos)
fs/read_write.c:vfs_write(struct file *file, const char __user *buf, size_t count, loff_t *pos)
func for case 92968395eedbdbd3617d
net/netfilter/nfnetlink_cttimeout.c:ctnl_timeout_dump(struct sk_buff *skb, struct netlink_callback *cb)
net/netfilter/nfnetlink_cttimeout.c:ctnl_timeout_fill_info(struct sk_buff *skb, u32 portid, u32 seq, u32 type, int event, struct ctnl_timeout *timeout)
net/netfilter/nfnetlink_cttimeout.c:ctnl_timeout_find_get()
net/netfilter/nfnetlink_cttimeout.c:ctnl_timeout_parse_policy(void *timeout, const struct nf_conntrack_l4proto *l4proto, struct net *net, const struct nlattr *attr)
net/netfilter/nfnetlink_cttimeout.c:ctnl_timeout_try_del(struct net *net, struct ctnl_timeout *timeout)
net/netfilter/nfnetlink_cttimeout.c:cttimeout_default_fill_info(struct net *net, struct sk_buff *skb, u32 portid, u32 seq, u32 type, int event, u16 l3num, const struct nf_conntrack_l4proto *l4proto, const unsigned int *timeouts)
net/netfilter/nfnetlink_cttimeout.c:cttimeout_default_get(struct sk_buff *skb, const struct nfnl_info *info, const struct nlattr * const cda[])
net/netfilter/nfnetlink_cttimeout.c:cttimeout_default_set(struct sk_buff *skb, const struct nfnl_info *info, const struct nlattr * const cda[])
net/netfilter/nfnetlink_cttimeout.c:cttimeout_del_timeout(struct sk_buff *skb, const struct nfnl_info *info, const struct nlattr * const cda[])
net/netfilter/nfnetlink_cttimeout.c:cttimeout_get_timeout(struct sk_buff *skb, const struct nfnl_info *info, const struct nlattr * const cda[])
net/netfilter/nfnetlink_cttimeout.c:cttimeout_init(void)
net/netfilter/nfnetlink_cttimeout.c:cttimeout_net_exit(struct net *net)
net/netfilter/nfnetlink_cttimeout.c:cttimeout_new_timeout(struct sk_buff *skb, const struct nfnl_info *info, const struct nlattr * const cda[])
net/core/net_namespace.c:__peernet2id(const struct net *net, struct net *peer)
net/core/net_namespace.c:alloc_netid(struct net *net, struct net *peer, int reqid)
net/core/net_namespace.c:cleanup_net(struct work_struct *work)
net/core/net_namespace.c:copy_net_ns()
net/core/net_namespace.c:get_net_ns_by_id()
net/core/net_namespace.c:net_alloc()
net/core/net_namespace.c:net_alloc_generic()
net/core/net_namespace.c:net_assign_generic(struct net *net, unsigned int id, void *data)
net/core/net_namespace.c:ops_exit_list(const struct pernet_operations *ops, struct list_head *net_exit_list)
net/core/net_namespace.c:ops_free_list(const struct pernet_operations *ops, struct list_head *net_exit_list)
net/core/net_namespace.c:ops_pre_exit_list(const struct pernet_operations *ops, struct list_head *net_exit_list)
net/core/net_namespace.c:peernet2id_alloc(struct net *net, struct net *peer, gfp_t gfp)
net/core/net_namespace.c:register_pernet_operations(struct list_head *list, struct pernet_operations *ops)
net/core/net_namespace.c:setup_net(struct net *net, struct user_namespace *user_ns)
net/core/net_namespace.c:unhash_nsid(struct net *net, struct net *last)
net/netfilter/nf_conntrack_timeout.c:__nf_ct_timeout_put(struct nf_ct_timeout *timeout)
net/netfilter/nf_conntrack_timeout.c:nf_ct_destroy_timeout(struct nf_conn *ct)
net/netfilter/nf_conntrack_timeout.c:nf_ct_set_timeout(struct net *net, struct nf_conn *ct, u8 l3num, u8 l4num, const char *timeout_name)
lib/list_debug.c:__list_del_entry_valid(struct list_head *entry)
include/linux/list.h:__list_add(struct list_head *new, struct list_head *prev, struct list_head *next)
include/linux/list.h:__list_cut_position(struct list_head *list, struct list_head *head, struct list_head *entry)
include/linux/list.h:__list_del_entry(struct list_head *entry)
lib/list_debug.c:__list_del_entry_valid(struct list_head *entry)
include/linux/list.h:list_cut_position(struct list_head *list, struct list_head *head, struct list_head *entry)
list_del()
include/linux/list.h:list_replace(struct list_head *old, struct list_head *new)
include/linux/list.h:list_swap(struct list_head *entry1, struct list_head *entry2)
net/netfilter/nf_conntrack_core.c:__nf_ct_delete_from_lists(struct nf_conn *ct)
net/netfilter/nf_conntrack_core.c:clean_from_lists(struct nf_conn *ct)
net/netfilter/nf_conntrack_core.c:nf_conntrack_cleanup_net_list(struct list_head *net_exit_list)
net/netfilter/nf_conntrack_core.c:nf_conntrack_free(struct nf_conn *ct)
net/netfilter/nf_conntrack_core.c:nf_conntrack_init_net(struct net *net)
net/netfilter/nf_conntrack_core.c:nf_conntrack_init_start(void)
net/netfilter/nf_conntrack_core.c:nf_ct_delete(struct nf_conn *ct, u32 portid, int report)
net/netfilter/nf_conntrack_core.c:nf_ct_destroy(struct nf_conntrack *nfct)
cleanup_workqueue()
process_one_work()
kernel/workqueue.c:worker_thread(void *__worker)
lib/list_debug.c:__list_del_entry_valid(struct list_head *entry)
net/socket.c:__sock_release(struct socket *sock, struct inode *inode)
net/core/net_namespace.c:cleanup_net(struct work_struct *work)
net/netfilter/nfnetlink_cttimeout.c:cttimeout_net_exit(struct net *net)
net/socket.c:sock_alloc_inode()
net/socket.c:sock_init(void)
kernel/kthread.c:kthread_complete_and_exit(struct completion *comp, long code)
kernel/kthread.c:kthread_stop(struct task_struct *k)
kthread_stop_put()
func for case fa4648a5446460b7b963
rb_insert_()
fs/ntfs3/bitmap.c:rb_insert_count(struct rb_root *root, struct e_node *e)
fs/ntfs3/bitmap.c:rb_insert_start(struct rb_root *root, struct e_node *e)
fs/ntfs3/bitmap.c:wnd_add_free_ext(struct wnd_bitmap *wnd, size_t bit, size_t len, bool build)
fs/ntfs3/bitmap.c:wnd_extend(struct wnd_bitmap *wnd, size_t new_bits)
fs/ntfs3/bitmap.c:wnd_find(struct wnd_bitmap *wnd, size_t to_alloc, size_t hint, size_t flags, size_t *allocated)
fs/ntfs3/bitmap.c:wnd_init(struct wnd_bitmap *wnd, struct super_block *sb, size_t nbits)
fs/ntfs3/bitmap.c:wnd_is_free(struct wnd_bitmap *wnd, size_t bit, size_t bits)
fs/ntfs3/bitmap.c:wnd_is_free_hlp(struct wnd_bitmap *wnd, size_t bit, size_t bits)
fs/ntfs3/bitmap.c:wnd_is_used(struct wnd_bitmap *wnd, size_t bit, size_t bits)
fs/ntfs3/bitmap.c:wnd_map()
fs/ntfs3/bitmap.c:wnd_remove_free_ext(struct wnd_bitmap *wnd, size_t bit, size_t len)
fs/ntfs3/bitmap.c:wnd_rescan(struct wnd_bitmap *wnd)
fs/ntfs3/bitmap.c:wnd_scan(const ulong *buf, size_t wbit, u32 wpos, u32 wend, size_t to_alloc, size_t *prev_tail, size_t *b_pos, size_t *b_len)
wnd_set_()
fs/ntfs3/bitmap.c:wnd_set_free(struct wnd_bitmap *wnd, size_t bit, size_t bits)
fs/ntfs3/bitmap.c:wnd_set_used(struct wnd_bitmap *wnd, size_t bit, size_t bits)
fs/ntfs3/super.c:ntfs_discard(struct ntfs_sb_info *sbi, CLST lcn, CLST len)
fs/ntfs3/super.c:ntfs_export_get_inode()
fs/ntfs3/super.c:ntfs_fill_super(struct super_block *sb, struct fs_context *fc)
fs/ntfs3/super.c:ntfs_fs_parse_param(struct fs_context *fc, struct fs_parameter *param)
fs/ntfs3/super.c:ntfs_fs_reconfigure(struct fs_context *fc)
fs/ntfs3/super.c:ntfs_init_from_boot(struct super_block *sb, u32 sector_size, u64 dev_size)
fs/ntfs3/super.c:ntfs_init_fs_context(struct fs_context *fc)
fs/ntfs3/super.c:ntfs_load_nls()
fs/ntfs3/super.c:ntfs_put_super(struct super_block *sb)
fs/ntfs3/super.c:ntfs_set_shared()
fs/ntfs3/super.c:ntfs_show_options(struct seq_file *m, struct dentry *root)
fs/ntfs3/super.c:ntfs_statfs(struct dentry *dentry, struct kstatfs *buf)
fs/ntfs3/super.c:ntfs_sync_fs(struct super_block *sb, int wait)
fs/ntfs3/super.c:ntfs_unmap_meta(struct super_block *sb, CLST lcn, CLST len)
fs/ntfs3/super.c:put_ntfs(struct ntfs_sb_info *sbi)
mm/page_alloc.c:__alloc_pages()
mm/page_alloc.c:__alloc_pages_slowpath()
mm/page_alloc.c:__free_one_page(struct page *page, unsigned long pfn, struct zone *zone, unsigned int order, int migratetype, fpi_t fpi_flags)
mm/page_alloc.c:__rmqueue()
mm/page_alloc.c:__rmqueue_fallback(struct zone *zone, int order, int start_migratetype, unsigned int alloc_flags)
mm/page_alloc.c:__rmqueue_pcplist()
mm/page_alloc.c:free_one_page(struct zone *zone, struct page *page, unsigned long pfn, unsigned int order, int migratetype, fpi_t fpi_flags)
mm/page_alloc.c:free_pages_prepare(struct page *page, unsigned int order, bool check_free, fpi_t fpi_flags)
mm/page_alloc.c:free_pcppages_bulk(struct zone *zone, int count, struct per_cpu_pages *pcp, int pindex)
mm/page_alloc.c:get_page_from_freelist()
mm/page_alloc.c:post_alloc_hook(struct page *page, unsigned int order, gfp_t gfp_flags)
mm/page_alloc.c:prep_new_page(struct page *page, unsigned int order, gfp_t gfp_flags, unsigned int alloc_flags)
mm/page_alloc.c:rmqueue_buddy()
mm/page_alloc.c:rmqueue_pcplist()
mm/page_alloc.c:warn_alloc(gfp_t gfp_mask, nodemask_t *nodemask, const char *fmt, ...)
mm/page_alloc.c:__alloc_pages()
mm/slab_common.c:__do_kmalloc_node()
mm/slab_common.c:__kmalloc_large_node()
mm/slab_common.c:calculate_alignment(slab_flags_t flags, unsigned int align, unsigned int size)
mm/slab_common.c:create_kmalloc_cache()
mm/slab_common.c:kmalloc_size_roundup(size_t size)
mm/slab_common.c:kmem_cache_create_usercopy()
mm/slab_common.c:new_kmalloc_cache(int idx, enum kmalloc_cache_type type, slab_flags_t flags)
fs/super.c:alloc_super()
fs/super.c:deactivate_locked_super(struct super_block *s))
fs/super.c:generic_shutdown_super(struct super_block *sb))
fs/super.c:get_tree_bdev(struct fs_context *fc, int (*fill_super)(struct super_block *, struct fs_context *)))
fs/super.c:mount_bdev()
fs/super.c:reconfigure_super(struct fs_context *fc))
fs/super.c:sget_fc()
fs/super.c:vfs_get_tree(struct fs_context *fc))
fs/namespace.c:do_add_mount(struct mount *newmnt, struct mountpoint *mp, const struct path *path, int mnt_flags)
fs/namespace.c:do_mount(const char *dev_name, const char __user *dir_name, const char *type_page, unsigned long flags, void *data_page)
fs/namespace.c:do_move_mount(struct path *old_path, struct path *new_path)
fs/namespace.c:do_new_mount(struct path *path, const char *fstype, int sb_flags, int mnt_flags, const char *name, void *data)
fs/namespace.c:do_new_mount_fc(struct fs_context *fc, struct path *mountpoint, unsigned int mnt_flags)
fs/namespace.c:do_reconfigure_mnt(struct path *path, unsigned int mnt_flags)
fs/namespace.c:do_remount(struct path *path, int ms_flags, int sb_flags, int mnt_flags, void *data)
fs/namespace.c:path_mount(const char *dev_name, struct path *path, const char *type_page, unsigned long flags, void *data_page)
include/linux/gfp.h:__alloc_pages_node()
include/linux/gfp.h:__folio_alloc_node()
include/linux/gfp.h:alloc_pages_bulk_array_node(gfp_t gfp, int nid, unsigned long nr_pages, struct page **page_array)
include/linux/gfp.h:alloc_pages_node()
include/linux/gfp.h:gfp_migratetype(const gfp_t gfp_flags)
include/linux/gfp.h:gfp_zone(gfp_t flags)
fs/ntfs3/inode.c:ntfs_get_block_vbo(struct inode *inode, u64 vbo, struct buffer_head *bh, int create, enum get_block_ctx ctx)
fs/ntfs3/inode.c:ntfs_iget5()
fs/ntfs3/inode.c:ntfs_read_mft()
include/linux/slab.h:__kmalloc_index(size_t size, bool size_is_constant)
include/linux/slab.h:kmalloc_type(gfp_t flags)
func for case 1631f09646bc214d2e76
fs/ntfs3/super.c:format_size_gb(const u64 bytes, u32 *mb)
fs_context()
fs/ntfs3/super.c:init_ntfs_fs(void)
fs/ntfs3/super.c:ntfs_discard(struct ntfs_sb_info *sbi, CLST lcn, CLST len)
fs/ntfs3/super.c:ntfs_export_get_inode()
fs/ntfs3/super.c:ntfs_fill_super(struct super_block *sb, struct fs_context *fc)
fs/ntfs3/super.c:ntfs_fs_parse_param(struct fs_context *fc, struct fs_parameter *param)
fs/ntfs3/super.c:ntfs_fs_reconfigure(struct fs_context *fc)
fs/ntfs3/super.c:ntfs_init_from_boot(struct super_block *sb, u32 sector_size, u64 dev_size)
fs/ntfs3/super.c:ntfs_init_fs_context(struct fs_context *fc)
fs/ntfs3/super.c:ntfs_put_super(struct super_block *sb)
fs/ntfs3/super.c:ntfs_show_options(struct seq_file *m, struct dentry *root)
fs/ntfs3/super.c:ntfs_statfs(struct dentry *dentry, struct kstatfs *buf)
fs/ntfs3/super.c:ntfs_sync_fs(struct super_block *sb, int wait)
fs/ntfs3/super.c:ntfs_unmap_meta(struct super_block *sb, CLST lcn, CLST len)
fs/ntfs3/super.c:put_ntfs(struct ntfs_sb_info *sbi)
fs/ntfs3/attrib.c:attr_allocate_clusters(struct ntfs_sb_info *sbi, struct runs_tree *run, CLST vcn, CLST lcn, CLST len, CLST *pre_alloc, enum ALLOCATE_OPT opt, CLST *alen, const size_t fr, CLST *new_lcn)
fs/ntfs3/attrib.c:attr_data_get_block(struct ntfs_inode *ni, CLST vcn, CLST clen, CLST *lcn, CLST *len, bool *new)
fs/ntfs3/attrib.c:attr_is_frame_compressed(struct ntfs_inode *ni, struct ATTRIB *attr, CLST frame, CLST *clst_data)
fs/ntfs3/attrib.c:attr_load_runs_vcn(struct ntfs_inode *ni, enum ATTR_TYPE type, const __le16 *name, u8 name_len, struct runs_tree *run, CLST vcn)
fs/ntfs3/attrib.c:attr_make_nonresident(struct ntfs_inode *ni, struct ATTRIB *attr, struct ATTR_LIST_ENTRY *le, struct mft_inode *mi, u64 new_size, struct runs_tree *run, struct ATTRIB **ins_attr, struct page *page)
fs/ntfs3/attrib.c:attr_set_size(struct ntfs_inode *ni, enum ATTR_TYPE type, const __le16 *name, u8 name_len, struct runs_tree *run, u64 new_size, const u64 *new_valid, bool keep_prealloc, struct ATTRIB **ret)
fs/ntfs3/attrib.c:attr_set_size_res(struct ntfs_inode *ni, struct ATTRIB *attr, struct ATTR_LIST_ENTRY *le, struct mft_inode *mi, u64 new_size, struct runs_tree *run, struct ATTRIB **ins_attr)
fs/ntfs3/attrib.c:attr_wof_frame_info(struct ntfs_inode *ni, struct ATTRIB *attr, struct runs_tree *run, u64 frame, u64 frames, u8 frame_bits, u32 *ondisk_size, u64 *vbo_data)
fs/ntfs3/inode.c:ntfs_create_inode()
fs/ntfs3/inode.c:ntfs_direct_IO(struct kiocb *iocb, struct iov_iter *iter)
fs/ntfs3/inode.c:ntfs_get_block_vbo(struct inode *inode, u64 vbo, struct buffer_head *bh, int create, enum get_block_ctx ctx)
fs/ntfs3/inode.c:ntfs_iget5()
fs/ntfs3/inode.c:ntfs_read_mft()
fs/ntfs3/inode.c:ntfs_set_size(struct inode *inode, u64 new_size)
fs/ntfs3/inode.c:ntfs_write_begin(struct file *file, struct address_space *mapping, loff_t pos, u32 len, struct page **pagep, void **fsdata)
fs/ntfs3/inode.c:ntfs_write_end(struct file *file, struct address_space *mapping, loff_t pos, u32 len, u32 copied, struct page *page, void *fsdata)
fs/ntfs3/dir.c:_utf8s_to_utf16s(const u8 *s, int inlen, enum utf16_endian endian, wchar_t *pwcs, int maxout)
fs/ntfs3/dir.c:ntfs_dir_count(struct inode *dir, bool *is_empty, size_t *dirs, size_t *files)
fs/ntfs3/dir.c:ntfs_filldir(struct ntfs_sb_info *sbi, struct ntfs_inode *ni, const struct NTFS_DE *e, u8 *name, struct dir_context *ctx)
fs/ntfs3/dir.c:ntfs_nls_to_utf16(struct ntfs_sb_info *sbi, const u8 *name, u32 name_len, struct cpu_str *uni, u32 max_ulen, enum utf16_endian endian)
fs/ntfs3/dir.c:ntfs_read_hdr(struct ntfs_sb_info *sbi, struct ntfs_inode *ni, const struct INDEX_HDR *hdr, u64 vbo, u64 pos, u8 *name, struct dir_context *ctx)
fs/ntfs3/dir.c:ntfs_readdir(struct file *file, struct dir_context *ctx)
fs/ntfs3/dir.c:ntfs_utf16_to_nls(struct ntfs_sb_info *sbi, const __le16 *name, u32 len, u8 *buf, int buf_len)
fs/ntfs3/file.c:ntfs_compress_write(struct kiocb *iocb, struct iov_iter *from)
fs/ntfs3/file.c:ntfs_extend_initialized_size(struct file *file, struct ntfs_inode *ni, const loff_t valid, const loff_t new_valid)
fs/ntfs3/file.c:ntfs_file_write_iter(struct kiocb *iocb, struct iov_iter *from)
fs/ntfs3/bitmap.c:wnd_init(struct wnd_bitmap *wnd, struct super_block *sb, size_t nbits)
fs/ntfs3/bitmap.c:wnd_scan(const ulong *buf, size_t wbit, u32 wpos, u32 wend, size_t to_alloc, size_t *prev_tail, size_t *b_pos, size_t *b_len)
fs/ntfs3/bitmap.c:wnd_set_used(struct wnd_bitmap *wnd, size_t bit, size_t bits)
func for case 33f3faaa0c08744f7d40
mm/page_alloc.c:__alloc_pages()
mm/page_alloc.c:__alloc_pages_slowpath()
mm/page_alloc.c:__free_one_page(struct page *page, unsigned long pfn, struct zone *zone, unsigned int order, int migratetype, fpi_t fpi_flags)
mm/page_alloc.c:__rmqueue()
mm/page_alloc.c:__rmqueue_fallback(struct zone *zone, int order, int start_migratetype, unsigned int alloc_flags)
mm/page_alloc.c:__rmqueue_pcplist()
mm/page_alloc.c:free_one_page(struct zone *zone, struct page *page, unsigned long pfn, unsigned int order, int migratetype, fpi_t fpi_flags)
mm/page_alloc.c:free_pages_prepare(struct page *page, unsigned int order, bool check_free, fpi_t fpi_flags)
mm/page_alloc.c:free_unref_page(struct page *page, unsigned int order)
mm/page_alloc.c:free_unref_page_commit(struct zone *zone, struct per_cpu_pages *pcp, struct page *page, int migratetype, unsigned int order)
mm/page_alloc.c:free_unref_page_prepare(struct page *page, unsigned long pfn, unsigned int order)
mm/page_alloc.c:get_page_from_freelist()
mm/page_alloc.c:prep_new_page(struct page *page, unsigned int order, gfp_t gfp_flags, unsigned int alloc_flags)
mm/page_alloc.c:rmqueue_buddy()
mm/page_alloc.c:rmqueue_pcplist()
fs/super.c:alloc_super()
fs/super.c:deactivate_locked_super(struct super_block *s))
fs/super.c:generic_shutdown_super(struct super_block *sb))
fs/super.c:get_tree_bdev(struct fs_context *fc, int (*fill_super)(struct super_block *, struct fs_context *)))
fs/super.c:mount_bdev()
fs/super.c:super_setup_bdi_name(struct super_block *sb, char *fmt, ...))
fs/super.c:trylock_super(struct super_block *sb))
fs/super.c:vfs_get_tree(struct fs_context *fc))
__do_kmalloc_node()
__kmalloc()
__kmalloc_large_node()
mm/slab_common.c:create_kmalloc_caches(slab_flags_t flags)
mm/slab_common.c:kmalloc_order()
mm/slab_common.c:kmalloc_slab()
mm/slab_common.c:kmem_cache_create_usercopy()
mm/slab_common.c:new_kmalloc_cache(int idx, enum kmalloc_cache_type type, slab_flags_t flags)
fs/namespace.c:do_add_mount(struct mount *newmnt, struct mountpoint *mp, const struct path *path, int mnt_flags)
fs/namespace.c:do_mount(const char *dev_name, const char __user *dir_name, const char *type_page, unsigned long flags, void *data_page)
fs/namespace.c:do_move_mount(struct path *old_path, struct path *new_path)
fs/namespace.c:do_new_mount(struct path *path, const char *fstype, int sb_flags, int mnt_flags, const char *name, void *data)
fs/namespace.c:do_reconfigure_mnt(struct path *path, unsigned int mnt_flags)
fs/namespace.c:do_remount(struct path *path, int ms_flags, int sb_flags, int mnt_flags, void *data)
fs/namespace.c:do_umount(struct mount *mnt, int flags)
fs/namespace.c:path_mount(const char *dev_name, struct path *path, const char *type_page, unsigned long flags, void *data_page)
include/linux/gfp.h:__alloc_pages_node()
include/linux/gfp.h:alloc_pages_bulk_array_node(gfp_t gfp, int nid, unsigned long nr_pages, struct page **page_array)
include/linux/gfp.h:alloc_pages_node()
include/linux/gfp.h:gfp_migratetype(const gfp_t gfp_flags)
include/linux/gfp.h:gfp_zone(gfp_t flags)
func for case 703d9e154b3b58277261
net/l2tp/l2tp_core.c:l2tp_recv_common(struct l2tp_session *session, struct sk_buff *skb, unsigned char *ptr, unsigned char *optr, u16 hdrflags, int length)
net/l2tp/l2tp_core.c:l2tp_recv_dequeue(struct l2tp_session *session)
net/l2tp/l2tp_core.c:l2tp_recv_queue_skb(struct l2tp_session *session, struct sk_buff *skb)
net/l2tp/l2tp_core.c:l2tp_session_create()
net/l2tp/l2tp_core.c:l2tp_session_register(struct l2tp_session *session, struct l2tp_tunnel *tunnel)
net/l2tp/l2tp_core.c:l2tp_tunnel_closeall(struct l2tp_tunnel *tunnel)
net/l2tp/l2tp_core.c:l2tp_tunnel_create(int fd, int version, u32 tunnel_id, u32 peer_tunnel_id, struct l2tp_tunnel_cfg *cfg, struct l2tp_tunnel **tunnelp)
net/l2tp/l2tp_core.c:l2tp_tunnel_destruct(struct sock *sk)
net/l2tp/l2tp_core.c:l2tp_tunnel_register(struct l2tp_tunnel *tunnel, struct net *net, struct l2tp_tunnel_cfg *cfg)
net/l2tp/l2tp_core.c:l2tp_tunnel_sock_create(struct net *net, u32 tunnel_id, u32 peer_tunnel_id, struct l2tp_tunnel_cfg *cfg, struct socket **sockp)
net/l2tp/l2tp_core.c:l2tp_udp_encap_recv(struct sock *sk, struct sk_buff *skb)
net/l2tp/l2tp_core.c:l2tp_udp_recv_core(struct l2tp_tunnel *tunnel, struct sk_buff *skb)
net/l2tp/l2tp_core.c:l2tp_validate_socket(const struct sock *sk, const struct net *net, enum l2tp_encap_type encap)
net/l2tp/l2tp_core.c:l2tp_xmit_core(struct l2tp_session *session, struct sk_buff *skb, unsigned int *len)
net/l2tp/l2tp_core.c:l2tp_xmit_skb(struct l2tp_session *session, struct sk_buff *skb)
net/ipv4/udp_tunnel_core.c:setup_udp_tunnel_sock(struct net *net, struct socket *sock, struct udp_tunnel_sock_cfg *cfg)
net/ipv4/udp_tunnel_core.c:udp_sock_create4(struct net *net, struct udp_port_cfg *cfg, struct socket **sockp)
net/ipv4/udp_tunnel_core.c:udp_tun_rx_dst()
net/ipv4/udp_tunnel_core.c:udp_tunnel_notify_add_rx_port(struct socket *sock, unsigned short type)
net/ipv4/udp_tunnel_core.c:udp_tunnel_notify_del_rx_port(struct socket *sock, unsigned short type)
net/ipv4/udp_tunnel_core.c:udp_tunnel_xmit_skb(struct rtable *rt, struct sock *sk, struct sk_buff *skb, __be32 src, __be32 dst, __u8 tos, __u8 ttl, __be16 df, __be16 src_port, __be16 dst_port, bool xnet, bool nocheck)
net/l2tp/l2tp_netlink.c:l2tp_nl_cmd_session_create(struct sk_buff *skb, struct genl_info *info)
net/l2tp/l2tp_netlink.c:l2tp_nl_cmd_session_delete(struct sk_buff *skb, struct genl_info *info)
net/l2tp/l2tp_netlink.c:l2tp_nl_cmd_session_dump(struct sk_buff *skb, struct netlink_callback *cb)
net/l2tp/l2tp_netlink.c:l2tp_nl_cmd_session_get(struct sk_buff *skb, struct genl_info *info)
net/l2tp/l2tp_netlink.c:l2tp_nl_cmd_session_modify(struct sk_buff *skb, struct genl_info *info)
net/l2tp/l2tp_netlink.c:l2tp_nl_cmd_tunnel_create(struct sk_buff *skb, struct genl_info *info)
net/l2tp/l2tp_netlink.c:l2tp_nl_cmd_tunnel_create_get_addr(struct nlattr **attrs, struct l2tp_tunnel_cfg *cfg)
net/l2tp/l2tp_netlink.c:l2tp_nl_cmd_tunnel_delete(struct sk_buff *skb, struct genl_info *info)
net/l2tp/l2tp_netlink.c:l2tp_nl_cmd_tunnel_dump(struct sk_buff *skb, struct netlink_callback *cb)
net/l2tp/l2tp_netlink.c:l2tp_nl_cmd_tunnel_get(struct sk_buff *skb, struct genl_info *info)
net/l2tp/l2tp_netlink.c:l2tp_nl_cmd_tunnel_modify(struct sk_buff *skb, struct genl_info *info)
net/l2tp/l2tp_netlink.c:l2tp_nl_session_send(struct sk_buff *skb, u32 portid, u32 seq, int flags, struct l2tp_session *session, u8 cmd)
net/l2tp/l2tp_netlink.c:l2tp_nl_tunnel_send(struct sk_buff *skb, u32 portid, u32 seq, int flags, struct l2tp_tunnel *tunnel, u8 cmd)
net/l2tp/l2tp_netlink.c:l2tp_session_notify(struct genl_family *family, struct genl_info *info, struct l2tp_session *session, u8 cmd)
net/l2tp/l2tp_netlink.c:l2tp_tunnel_notify(struct genl_family *family, struct genl_info *info, struct l2tp_tunnel *tunnel, u8 cmd)
include/linux/percpu-rwsem.h:percpu_down_read(struct percpu_rw_semaphore *sem)
include/linux/percpu-rwsem.h:percpu_down_read_trylock(struct percpu_rw_semaphore *sem)
kernel/jump_label.c:__jump_label_update(struct static_key *key, struct jump_entry *entry, struct jump_entry *stop, bool init)
kernel/jump_label.c:jump_label_update(struct static_key *key)
kernel/jump_label.c:static_key_disable_cpuslocked(struct static_key *key)
kernel/jump_label.c:static_key_enable_cpuslocked(struct static_key *key)
kernel/jump_label.c:static_key_set_mod(struct static_key *key, struct static_key_mod *mod)
static_key_slow_inc()
kernel/jump_label.c:static_key_slow_inc_cpuslocked(struct static_key *key)
kernel/jump_label.c:static_key_slow_try_dec(struct static_key *key)
net/netlink/genetlink.c:genl_family_rcv_msg(const struct genl_family *family, struct sk_buff *skb, struct nlmsghdr *nlh, struct netlink_ext_ack *extack)
net/netlink/genetlink.c:genl_family_rcv_msg_doit(const struct genl_family *family, struct sk_buff *skb, struct nlmsghdr *nlh, struct netlink_ext_ack *extack, const struct genl_ops *ops, int hdrlen, struct net *net)
net/netlink/genetlink.c:genl_lock_done(struct netlink_callback *cb)
net/netlink/genetlink.c:genl_notify(const struct genl_family *family, struct sk_buff *skb, struct genl_info *info, u32 group, gfp_t flags)
net/netlink/genetlink.c:genl_rcv_msg(struct sk_buff *skb, struct nlmsghdr *nlh, struct netlink_ext_ack *extack)
net/netlink/genetlink.c:genl_register_family(struct genl_family *family)
net/netlink/genetlink.c:genl_start(struct netlink_callback *cb)
net/netlink/genetlink.c:genl_unregister_family(const struct genl_family *family)
kernel/cpu.c:_cpu_up(unsigned int cpu, int tasks_frozen, enum cpuhp_state target)
kernel/cpu.c:cpu_up(unsigned int cpu, enum cpuhp_state target)
kernel/cpu.c:cpuhp_invoke_callback(unsigned int cpu, enum cpuhp_state state, bool bringup, struct hlist_node *node, struct hlist_node **lastp)
kernel/cpu.c:cpuhp_kick_ap(int cpu, struct cpuhp_cpu_state *st, enum cpuhp_state target)
kernel/cpu.c:cpuhp_set_state(int cpu, struct cpuhp_cpu_state *st, enum cpuhp_state target)
kernel/cpu.c:cpuhp_thread_fun(unsigned int cpu)
kernel/cpu.c:cpuhp_up_callbacks(unsigned int cpu, struct cpuhp_cpu_state *st, enum cpuhp_state target)
cpus_read_lock()
include/net/udp_tunnel.h:udp_sock_create(struct net *net, struct udp_port_cfg *cfg, struct socket **sockp)
include/net/udp_tunnel.h:udp_tunnel_encap_enable(struct socket *sock)
l2tp_core()
net/l2tp/l2tp_core.h:l2tp_tunnel_dst_mtu(const struct l2tp_tunnel *tunnel)
net/l2tp/l2tp_core.c:l2tp_tunnel_register(struct l2tp_tunnel *tunnel, struct net *net, struct l2tp_tunnel_cfg *cfg)
net/l2tp/l2tp_core.h:l2tp_tunnel_uses_xfrm(const struct l2tp_tunnel *tunnel)
net/l2tp/l2tp_core.h:l2tp_v3_ensure_opt_in_linear(struct l2tp_session *session, struct sk_buff *skb, unsigned char **ptr, unsigned char **optr)
kernel/sched/core.c:__might_resched(const char *file, int line, unsigned int offsets)
kernel/sched/core.c:preempt_schedule(void)
func for case 1bb51491ca5df96a5f724899d1dbb87afda61419
net/bluetooth/hci_conn.c:hci_abort_conn(struct hci_conn *conn, u8 reason)
net/bluetooth/hci_conn.c:hci_conn_add()
net/bluetooth/hci_conn.c:hci_conn_auth(struct hci_conn *conn, __u8 sec_level, __u8 auth_type)
net/bluetooth/hci_conn.c:hci_conn_check_link_mode(struct hci_conn *conn)
net/bluetooth/hci_conn.c:hci_conn_cleanup(struct hci_conn *conn)
net/bluetooth/hci_conn.c:hci_conn_del(struct hci_conn *conn)
net/bluetooth/hci_conn.c:hci_conn_encrypt(struct hci_conn *conn)
net/bluetooth/hci_conn.c:hci_conn_hash_flush(struct hci_dev *hdev)
net/bluetooth/hci_conn.c:hci_conn_idle(struct work_struct *work)
net/bluetooth/hci_conn.c:hci_conn_link()
net/bluetooth/hci_conn.c:hci_conn_security(struct hci_conn *conn, __u8 sec_level, __u8 auth_type, bool initiator)
net/bluetooth/hci_conn.c:hci_conn_timeout(struct work_struct *work)
net/bluetooth/hci_conn.c:hci_conn_unlink(struct hci_conn *conn)
net/bluetooth/hci_conn.c:hci_connect_sco()
net/bluetooth/hci_conn.c:hci_disconnect(struct hci_conn *conn, __u8 reason)
net/bluetooth/sco.c:__sco_sock_close(struct sock *sk)
net/bluetooth/sco.c:sco_chan_del(struct sock *sk, int err)
net/bluetooth/sco.c:sco_conn_add()
net/bluetooth/sco.c:sco_conn_defer_accept(struct hci_conn *conn, u16 setting)
net/bluetooth/sco.c:sco_conn_del(struct hci_conn *hcon, int err)
net/bluetooth/sco.c:sco_conn_ready(struct sco_conn *conn)
net/bluetooth/sco.c:sco_connect(struct sock *sk)
net/bluetooth/sco.c:sco_connect_cfm(struct hci_conn *hcon, __u8 status)
net/bluetooth/sco.c:sco_connect_ind(struct hci_dev *hdev, bdaddr_t *bdaddr, __u8 *flags)
net/bluetooth/sco.c:sco_recv_frame(struct sco_conn *conn, struct sk_buff *skb)
net/bluetooth/sco.c:sco_send_frame(struct sock *sk, struct sk_buff *skb)
net/bluetooth/sco.c:sco_sock_cleanup_listen(struct sock *parent)
net/bluetooth/sco.c:sco_sock_connect(struct socket *sock, struct sockaddr *addr, int alen, int flags)
net/bluetooth/sco.c:sco_sock_release(struct socket *sock)
net/bluetooth/sco.c:sco_sock_shutdown(struct socket *sock, int how)
net/bluetooth/hci_core.c:hci_dev_close(__u16 dev)
net/bluetooth/hci_sync.c:hci_dev_close_sync(uct hci_dev *hdev) {)
net/bluetooth/hci_core.c:hci_dev_do_close(struct hci_dev *hdev)
net/bluetooth/hci_core.c:hci_dev_do_open(struct hci_dev *hdev)
net/bluetooth/hci_core.c:hci_dev_do_reset(struct hci_dev *hdev)
net/bluetooth/hci_core.c:hci_dev_open(__u16 dev)
net/bluetooth/hci_core.c:hci_dev_reset(__u16 dev)
net/bluetooth/hci_core.c:hci_unregister_dev(struct hci_dev *hdev)
drivers/bluetooth/hci_vhci.c:__vhci_create_device(struct vhci_data *data, __u8 opcode)
drivers/bluetooth/hci_vhci.c:vhci_create_device(struct vhci_data *data, __u8 opcode)
drivers/bluetooth/hci_vhci.c:vhci_get_user(struct vhci_data *data, struct iov_iter *from)
drivers/bluetooth/hci_vhci.c:vhci_open(struct inode *inode, struct file *file)
drivers/bluetooth/hci_vhci.c:vhci_put_user(struct vhci_data *data, struct sk_buff *skb, char __user *buf, int count)
drivers/bluetooth/hci_vhci.c:vhci_read(struct file *file, char __user *buf, size_t count, loff_t *pos)
drivers/bluetooth/hci_vhci.c:vhci_release(struct inode *inode, struct file *file)
drivers/bluetooth/hci_vhci.c:vhci_send_frame(struct hci_dev *hdev, struct sk_buff *skb)
mm/slub.c:__free_slab(struct kmem_cache *s, struct slab *slab)
mm/slub.c:__slab_free(struct kmem_cache *s, struct slab *slab, void *head, void *tail, int cnt, unsigned long addr)
mm/slub.c:do_slab_free(struct kmem_cache *s, struct slab *slab, void *head, void *tail, int cnt, unsigned long addr)
mm/slub.c:free_debug_processing(struct kmem_cache *s, struct slab *slab, void *head, void *tail, int *bulk_cnt, unsigned long addr, depot_stack_handle_t handle)
mm/slub.c:free_slab(struct kmem_cache *s, struct slab *slab)
mm/slub.c:slab_free(struct kmem_cache *s, struct slab *slab, void *head, void *tail, void **p, int cnt, unsigned long addr)
mm/slub.c:slab_free_freelist_hook(struct kmem_cache *s, void **head, void **tail, int *cnt)
mm/slub.c:slab_free_hook(struct kmem_cache *s, void *x, bool init)
mm/kasan/common.c:____kasan_kmalloc()
mm/kasan/common.c:____kasan_slab_free(struct kmem_cache *cache, void *object, unsigned long ip, bool quarantine, bool init)
__kasan_cache_create()
mm/kasan/common.c:__kasan_kmalloc_large()
mm/kasan/common.c:__kasan_krealloc()
mm/kasan/common.c:__kasan_slab_alloc()
mm/kasan/common.c:__kasan_slab_free_mempool(void *ptr, unsigned long ip)
mm/kasan/common.c:assign_tag(struct kmem_cache *cache, const void *object, bool init)
hci_conn()
hci_conn_()
net/bluetooth/hci_conn.c:hci_conn_hash_flush(struct hci_dev *hdev)
kernel/exit.c:do_exit(long code)
kernel/exit.c:do_group_exit(int exit_code)
kernel/exit.c:release_task(struct task_struct *p)
func for case 01383b29d139cf9c9f9d9bd6e9947474ffe657a6
mm/gup.c:__get_user_pages(struct mm_struct *mm, unsigned long start, unsigned long nr_pages, unsigned int gup_flags, struct page **pages, int *locked)
mm/gup.c:__get_user_pages_locked(struct mm_struct *mm, unsigned long start, unsigned long nr_pages, struct page **pages, int *locked, unsigned int foll_flags)
mm/gup.c:__gup_longterm_locked(struct mm_struct *mm, unsigned long start, unsigned long nr_pages, struct page **pages, int *locked, unsigned int gup_flags)
mm/gup.c:check_vma_flags(struct vm_area_struct *vma, unsigned long gup_flags)
mm/gup.c:faultin_page(struct vm_area_struct *vma, unsigned long address, unsigned int *flags, bool unshare, int *locked)
mm/gup.c:get_user_pages_fast(unsigned long start, int nr_pages, unsigned int gup_flags, struct page **pages)
mm/gup.c:gup_huge_pgd(pgd_t orig, pgd_t *pgdp, unsigned long addr, unsigned long end, unsigned int flags, struct page **pages, int *nr)
mm/gup.c:gup_huge_pmd(pmd_t orig, pmd_t *pmdp, unsigned long addr, unsigned long end, unsigned int flags, struct page **pages, int *nr)
mm/gup.c:gup_huge_pud(pud_t orig, pud_t *pudp, unsigned long addr, unsigned long end, unsigned int flags, struct page **pages, int *nr)
mm/gup.c:gup_pmd_range(pud_t *pudp, pud_t pud, unsigned long addr, unsigned long end, unsigned int flags, struct page **pages, int *nr)
mm/gup.c:gup_pte_range(pmd_t pmd, pmd_t *pmdp, unsigned long addr, unsigned long end, unsigned int flags, struct page **pages, int *nr)
mm/gup.c:internal_get_user_pages_fast(unsigned long start, unsigned long nr_pages, unsigned int gup_flags, struct page **pages)
mm/gup.c:sanity_check_pinned_pages(struct page **pages, unsigned long npages)
mm/gup.c:try_grab_folio()
mm/gup.c:try_grab_page(struct page *page, unsigned int flags)
fs/splice.c:__do_splice(struct file *in, loff_t __user *off_in, struct file *out, loff_t __user *off_out, size_t len, unsigned int flags)
fs/splice.c:add_to_pipe(struct pipe_inode_info *pipe, struct pipe_buffer *buf)
fs/splice.c:do_splice(struct file *in, loff_t *off_in, struct file *out, loff_t *off_out, size_t len, unsigned int flags)
fs/splice.c:do_tee(struct file *in, struct file *out, size_t len, unsigned int flags)
fs/splice.c:iter_to_pipe(struct iov_iter *from, struct pipe_inode_info *pipe, unsigned flags)
fs/splice.c:link_pipe(struct pipe_inode_info *ipipe, struct pipe_inode_info *opipe, size_t len, unsigned int flags)
fs/splice.c:page_cache_pipe_buf_confirm(struct pipe_inode_info *pipe, struct pipe_buffer *buf)
fs/splice.c:page_cache_pipe_buf_try_steal(struct pipe_inode_info *pipe, struct pipe_buffer *buf)
fs/splice.c:splice_file_to_pipe(struct file *in, struct pipe_inode_info *opipe, loff_t *offset, size_t len, unsigned int flags)
fs/splice.c:splice_grow_spd(const struct pipe_inode_info *pipe, struct splice_pipe_desc *spd)
fs/splice.c:splice_pipe_to_pipe(struct pipe_inode_info *ipipe, struct pipe_inode_info *opipe, size_t len, unsigned int flags)
fs/splice.c:splice_to_pipe(struct pipe_inode_info *pipe, struct splice_pipe_desc *spd)
fs/splice.c:vfs_splice_read(struct file *in, loff_t *ppos, struct pipe_inode_info *pipe, size_t len, unsigned int flags)
fs/splice.c:vmsplice_to_pipe(struct file *file, struct iov_iter *iter, unsigned int flags)
fs/splice.c:wait_for_space(struct pipe_inode_info *pipe, unsigned flags)
lib/iov_iter.c:__iov_iter_get_pages_alloc(struct iov_iter *i, struct page ***pages, size_t maxsize, unsigned int maxpages, size_t *start)
lib/iov_iter.c:copy_page_from_iter(struct page *page, size_t offset, size_t bytes, struct iov_iter *i)
lib/iov_iter.c:copy_page_from_iter_atomic(struct page *page, unsigned offset, size_t bytes, struct iov_iter *i)
lib/iov_iter.c:copy_page_to_iter(struct page *page, size_t offset, size_t bytes, struct iov_iter *i)
lib/iov_iter.c:fault_in_iov_iter_writeable(const struct iov_iter *i, size_t size)
lib/iov_iter.c:iov_iter_advance(struct iov_iter *i, size_t size)
lib/iov_iter.c:iov_iter_bvec_advance(struct iov_iter *i, size_t size)
lib/iov_iter.c:iov_iter_extract_bvec_pages(struct iov_iter *i, struct page ***pages, size_t maxsize, unsigned int maxpages, iov_iter_extraction_t extraction_flags, size_t *offset0)
lib/iov_iter.c:iov_iter_extract_kvec_pages(struct iov_iter *i, struct page ***pages, size_t maxsize, unsigned int maxpages, iov_iter_extraction_t extraction_flags, size_t *offset0)
lib/iov_iter.c:iov_iter_extract_pages(struct iov_iter *i, struct page ***pages, size_t maxsize, unsigned int maxpages, iov_iter_extraction_t extraction_flags, size_t *offset0)
lib/iov_iter.c:iov_iter_extract_user_pages(struct iov_iter *i, struct page ***pages, size_t maxsize, unsigned int maxpages, iov_iter_extraction_t extraction_flags, size_t *offset0)
lib/iov_iter.c:iov_iter_extract_xarray_pages(struct iov_iter *i, struct page ***pages, size_t maxsize, unsigned int maxpages, iov_iter_extraction_t extraction_flags, size_t *offset0)
lib/iov_iter.c:iov_iter_iovec_advance(struct iov_iter *i, size_t size)
lib/iov_iter.c:iter_xarray_get_pages(struct iov_iter *i, struct page ***pages, size_t maxsize, unsigned maxpages, size_t *_start_offset)
lib/iov_iter.c:iter_xarray_populate_pages(struct page **pages, struct xarray *xa, pgoff_t index, unsigned int nr_pages)
mm/mremap.c:get_extent(enum pgt_entry entry, unsigned long old_addr, unsigned long old_end, unsigned long new_addr)
mm/mremap.c:move_normal_pmd(struct vm_area_struct *vma, unsigned long old_addr, unsigned long new_addr, pmd_t *old_pmd, pmd_t *new_pmd)
mm/mremap.c:move_normal_pud(struct vm_area_struct *vma, unsigned long old_addr, unsigned long new_addr, pud_t *old_pud, pud_t *new_pud)
mm/mremap.c:move_page_tables(struct vm_area_struct *vma, unsigned long old_addr, struct vm_area_struct *new_vma, unsigned long new_addr, unsigned long len, bool need_rmap_locks)
mm/mremap.c:move_ptes(struct vm_area_struct *vma, pmd_t *old_pmd, unsigned long old_addr, unsigned long old_end, struct vm_area_struct *new_vma, pmd_t *new_pmd, unsigned long new_addr, bool need_rmap_locks)
mm/mremap.c:move_vma(struct vm_area_struct *vma, unsigned long old_addr, unsigned long old_len, unsigned long new_len, unsigned long new_addr, bool *locked, unsigned long flags, struct vm_userfaultfd_ctx *uf, struct list_head *uf_unmap)
mm/mremap.c:mremap_to(unsigned long addr, unsigned long old_len, unsigned long new_addr, unsigned long new_len, bool *locked, unsigned long flags, struct vm_userfaultfd_ctx *uf, struct list_head *uf_unmap_early, struct list_head *uf_unmap)
mm/mremap.c:vma_expandable(struct vm_area_struct *vma, unsigned long delta)
mm/mmap.c:do_mmap(struct file *file, unsigned long addr, unsigned long len, unsigned long prot, unsigned long flags, unsigned long pgoff, unsigned long *populate, struct list_head *uf)
mm/mmap.c:do_vma_munmap(struct vma_iterator *vmi, struct vm_area_struct *vma, unsigned long start, unsigned long end, struct list_head *uf, bool unlock)
mm/mmap.c:mmap_region(struct file *file, unsigned long addr, unsigned long len, vm_flags_t vm_flags, unsigned long pgoff, struct list_head *uf)
mm/mmap.c:unmap_region(struct mm_struct *mm, struct maple_tree *mt, struct vm_area_struct *vma, struct vm_area_struct *prev, struct vm_area_struct *next, unsigned long start, unsigned long end, bool mm_wr_locked)
mm/mmap.c:vma_expand(struct vma_iterator *vmi, struct vm_area_struct *vma, unsigned long start, unsigned long end, pgoff_t pgoff, struct vm_area_struct *next)
mm/mmap.c:vma_link(struct mm_struct *mm, struct vm_area_struct *vma)
mm/mmap.c:vma_merge()
mm/mmap.c:vma_prepare(struct vma_prepare *vp)
fs/pipe.c:alloc_pipe_info()
fs/pipe.c:free_pipe_info(struct pipe_inode_info *pipe)
fs/pipe.c:pipe_double_lock(struct pipe_inode_info *pipe1, struct pipe_inode_info *pipe2)
fs/pipe.c:pipe_read(struct kiocb *iocb, struct iov_iter *to)
fs/pipe.c:pipe_release(struct inode *inode, struct file *file)
fs/pipe.c:pipe_resize_ring(struct pipe_inode_info *pipe, unsigned int nr_slots)
fs/pipe.c:pipe_set_size(struct pipe_inode_info *pipe, unsigned long arg)
fs/pipe.c:pipe_write(struct kiocb *iocb, struct iov_iter *from)
mm/memory.c:__handle_mm_fault(struct vm_area_struct *vma, unsigned long address, unsigned int flags)
mm/memory.c:do_anonymous_page(struct vm_fault *vmf)
mm/memory.c:do_cow_fault(struct vm_fault *vmf)
mm/memory.c:do_fault(struct vm_fault *vmf)
mm/memory.c:do_page_mkwrite(struct vm_fault *vmf)
mm/memory.c:do_swap_page(struct vm_fault *vmf)
mm/memory.c:handle_mm_fault(struct vm_area_struct *vma, unsigned long address, unsigned int flags, struct pt_regs *regs)
mm/memory.c:wp_page_copy(struct vm_fault *vmf)
mm/gup.c:__get_user_pages(struct mm_struct *mm, unsigned long start, unsigned long nr_pages, unsigned int gup_flags, struct page **pages, int *locked)
copy_to()
from_user()
mm/vmalloc.c:__vmalloc_node_range()
mm/vmalloc.c:vm_area_alloc_pages(gfp_t gfp, int nid, unsigned int order, unsigned int nr_pages, struct page **pages)
mm/vmalloc.c:vmalloc_dump_obj(void *object)
arch/x86/mm/fault.c:access_error(unsigned long error_code, struct vm_area_struct *vma)
arch/x86/mm/fault.c:bad_area_access_error(struct pt_regs *regs, unsigned long error_code, unsigned long address, struct vm_area_struct *vma)
do_user_addr_fault()
func for case 08d09127d5fca845e6d94dea344c5b758bc45615
rxrpc_do_sendmsg()
net/rxrpc/sendmsg.c:rxrpc_instant_resend(struct rxrpc_call *call, int ix)
net/rxrpc/sendmsg.c:rxrpc_kernel_send_data(struct socket *sock, struct rxrpc_call *call, struct msghdr *msg, size_t len, rxrpc_notify_end_tx_t notify_end_tx)
net/rxrpc/sendmsg.c:rxrpc_queue_packet(struct rxrpc_sock *rx, struct rxrpc_call *call, struct sk_buff *skb, bool last, rxrpc_notify_end_tx_t notify_end_tx)
net/rxrpc/sendmsg.c:rxrpc_send_data(struct rxrpc_sock *rx, struct rxrpc_call *call, struct msghdr *msg, size_t len, rxrpc_notify_end_tx_t notify_end_tx)
net/rxrpc/sendmsg.c:rxrpc_sendmsg_cmsg(struct msghdr *msg, struct rxrpc_send_params *p)
net/rxrpc/sendmsg.c:rxrpc_wait_for_tx_window(struct rxrpc_sock *rx, struct rxrpc_call *call, long *timeo, bool waitall)
net/rxrpc/sendmsg.c:rxrpc_wait_for_tx_window_intr(struct rxrpc_sock *rx, struct rxrpc_call *call, long *timeo)
net/rxrpc/sendmsg.c:rxrpc_wait_for_tx_window_waitall(struct rxrpc_sock *rx, struct rxrpc_call *call)
wait_for_tx_window()
net/rxrpc/af_rxrpc.c:rxrpc_bind(struct socket *sock, struct sockaddr *saddr, int len)
net/rxrpc/af_rxrpc.c:rxrpc_connect(struct socket *sock, struct sockaddr *addr, int addr_len, int flags)
net/rxrpc/af_rxrpc.c:rxrpc_create(struct net *net, struct socket *sock, int protocol, int kern)
rxrpc_do_sendmsg()
net/rxrpc/af_rxrpc.c:rxrpc_getsockopt(struct socket *sock, int level, int optname, char __user *optval, int __user *_optlen)
net/rxrpc/af_rxrpc.c:rxrpc_kernel_begin_call()
net/rxrpc/af_rxrpc.c:rxrpc_kernel_end_call(struct socket *sock, struct rxrpc_call *call)
net/rxrpc/af_rxrpc.c:rxrpc_listen(struct socket *sock, int backlog)
net/rxrpc/af_rxrpc.c:rxrpc_poll(struct file *file, struct socket *sock, poll_table *wait)
net/rxrpc/af_rxrpc.c:rxrpc_release_sock(struct sock *sk)
net/rxrpc/af_rxrpc.c:rxrpc_sendmsg(struct socket *sock, struct msghdr *m, size_t len)
net/rxrpc/af_rxrpc.c:rxrpc_setsockopt(struct socket *sock, int level, int optname, sockptr_t optval, unsigned int optlen)
net/rxrpc/af_rxrpc.c:rxrpc_shutdown(struct socket *sock, int flags)
net/rxrpc/af_rxrpc.c:rxrpc_validate_address(struct rxrpc_sock *rx, struct sockaddr_rxrpc *srx, int len)
net/rxrpc/af_rxrpc.c:rxrpc_write_space(struct sock *sk)
kernel/locking/mutex.c:__mutex_add_waiter(struct mutex *lock, struct mutex_waiter *waiter, struct list_head *list)
kernel/locking/mutex.c:__mutex_handoff(struct mutex *lock, struct task_struct *task)
kernel/locking/mutex.c:__mutex_lock_common(struct mutex *lock, unsigned int state, unsigned int subclass, struct lockdep_map *nest_lock, unsigned long ip, struct ww_acquire_ctx *ww_ctx, const bool use_ww_ctx)
kernel/locking/mutex.c:__mutex_remove_waiter(struct mutex *lock, struct mutex_waiter *waiter)
kernel/locking/mutex.c:__mutex_trylock_common()
kernel/locking/mutex.c:__mutex_trylock_fast(struct mutex *lock)
kernel/locking/mutex.c:__mutex_unlock_slowpath(struct mutex *lock, unsigned long ip)
kernel/locking/mutex.c:mutex_can_spin_on_owner(struct mutex *lock)
kernel/locking/mutex.c:mutex_lock_io_nested(struct mutex *lock, unsigned int subclass)
kernel/locking/mutex.c:mutex_optimistic_spin(struct mutex *lock, struct ww_acquire_ctx *ww_ctx, struct mutex_waiter *waiter)
kernel/locking/mutex.c:mutex_spin_on_owner(struct mutex *lock, struct task_struct *owner, struct ww_acquire_ctx *ww_ctx, struct mutex_waiter *waiter)
kernel/locking/mutex.c:mutex_trylock(struct mutex *lock)
user_mutex()
kernel/locking/mutex.c:ww_mutex_lock(struct ww_mutex *lock, struct ww_acquire_ctx *ctx)
kernel/locking/mutex.c:ww_mutex_lock_interruptible(struct ww_mutex *lock, struct ww_acquire_ctx *ctx)
kernel/locking/mutex.c:ww_mutex_spin_on_owner(struct mutex *lock, struct ww_acquire_ctx *ww_ctx, struct mutex_waiter *waiter)
net/kcm/kcmsock.c:kcm_attach(struct socket *sock, struct socket *csock, struct bpf_prog *prog)
net/kcm/kcmsock.c:kcm_rcv_ready(struct kcm_sock *kcm)
net/kcm/kcmsock.c:kcm_rcv_strparser(struct strparser *strp, struct sk_buff *skb)
net/kcm/kcmsock.c:kcm_release(struct socket *sock)
net/kcm/kcmsock.c:kcm_sendmsg(struct socket *sock, struct msghdr *msg, size_t len)
net/kcm/kcmsock.c:kcm_tx_work(struct work_struct *w)
net/kcm/kcmsock.c:kcm_unattach(struct kcm_psock *psock)
net/kcm/kcmsock.c:kcm_write_msgs(struct kcm_sock *kcm)
net/socket.c:____sys_sendmsg(struct socket *sock, struct msghdr *msg_sys, unsigned int flags, struct used_address *used_address, unsigned int allowed_msghdr_flags)
net/socket.c:___sys_sendmsg(struct socket *sock, struct user_msghdr __user *msg, struct msghdr *msg_sys, unsigned int flags, struct used_address *used_address, unsigned int allowed_msghdr_flags)
net/socket.c:__sys_sendmsg(int fd, struct user_msghdr __user *msg, unsigned int flags, bool forbid_cmsg_compat)
net/socket.c:kernel_sendmsg_locked(struct sock *sk, struct msghdr *msg, struct kvec *vec, size_t num, size_t size)
net/socket.c:sendmsg_copy_msghdr(struct msghdr *msg, struct user_msghdr __user *umsg, unsigned flags, struct iovec **iov)
net/socket.c:sock_alloc_file()
net/socket.c:sock_sendmsg(struct socket *sock, struct msghdr *msg)
net/socket.c:sock_write_iter(struct kiocb *iocb, struct iov_iter *from)
kernel/locking/lockdep.c:__lock_release(struct lockdep_map *lock, unsigned long ip)
kernel/locking/lockdep.c:check_flags(unsigned long flags)
kernel/locking/lockdep.c:lock_acquire(struct lockdep_map *lock, unsigned int subclass, int trylock, int read, int check, struct lockdep_map *nest_lock, unsigned long ip)
kernel/locking/lockdep.c:lock_acquired(struct lockdep_map *lock, unsigned long ip)
kernel/locking/lockdep.c:lock_release(struct lockdep_map *lock, unsigned long ip)
kernel/locking/lockdep.c:print_lock_contention_bug(struct task_struct *curr, struct lockdep_map *lock, unsigned long ip)
kernel/locking/lockdep.c:print_unlock_imbalance_bug(struct task_struct *curr, struct lockdep_map *lock, unsigned long ip)
kernel/locking/lockdep.c:verify_lock_unused(struct lockdep_map *lock, struct held_lock *hlock, int subclass)
net/rxrpc/call_accept.c:rxrpc_alloc_incoming_call()
net/rxrpc/call_accept.c:rxrpc_discard_prealloc(struct rxrpc_sock *rx)
net/rxrpc/call_accept.c:rxrpc_kernel_charge_accept(struct socket *sock, rxrpc_notify_rx_t notify_rx, rxrpc_user_attach_call_t user_attach_call, unsigned long user_call_ID, gfp_t gfp, unsigned int debug_id)
net/rxrpc/call_accept.c:rxrpc_new_incoming_call()
net/rxrpc/call_accept.c:rxrpc_send_ping(struct rxrpc_call *call, struct sk_buff *skb)
net/rxrpc/call_accept.c:rxrpc_service_prealloc_one(struct rxrpc_sock *rx, struct rxrpc_backlog *b, rxrpc_notify_rx_t notify_rx, rxrpc_user_attach_call_t user_attach_call, unsigned long user_call_ID, gfp_t gfp, unsigned int debug_id)
include/net/sock.h:__sk_add_backlog(struct sock *sk, struct sk_buff *skb)
include/net/sock.h:lock_sock_fast(struct sock *sk)
include/net/sock.h:sk_add_backlog(struct sock *sk, struct sk_buff *skb, unsigned int limit)
kernel/locking/mutex-debug.c:debug_mutex_lock_common(struct mutex *lock, struct mutex_waiter *waiter)
kernel/locking/mutex-debug.c:debug_mutex_remove_waiter(struct mutex *lock, struct mutex_waiter *waiter, struct task_struct *task)
kernel/locking/mutex-debug.c:debug_mutex_wake_waiter(struct mutex *lock, struct mutex_waiter *waiter)
net/core/sock.c:sock_common_recvmsg(struct socket *sock, struct msghdr *msg, size_t size, int flags)
net/core/sock.c:sock_queue_rcv_skb(struct sock *sk, struct sk_buff *skb)
net/core/sock.c:sock_recv_errqueue(struct sock *sk, struct msghdr *msg, int len, int level, int type)
func for case 0b6b2d6d6cefa8b462930e55be699efba635788f
net/netfilter/core.c:__nf_unregister_net_hook(struct net *net, int pf, const struct nf_hook_ops *reg)
net/netfilter/nf_tables_api.c:__nft_release_basechain(struct nft_ctx *ctx)
net/netfilter/nf_tables_api.c:nf_tables_chain_destroy(struct nft_ctx *ctx)
net/netfilter/nf_tables_api.c:nf_tables_delchain(struct sk_buff *skb, const struct nfnl_info *info, const struct nlattr * const nla[])
net/netfilter/nf_tables_api.c:nf_tables_newchain(struct sk_buff *skb, const struct nfnl_info *info, const struct nlattr * const nla[])
net/netfilter/nf_tables_api.c:nf_tables_parse_netdev_hooks(struct net *net, const struct nlattr *attr, struct list_head *hook_list)
net/netfilter/nf_tables_api.c:nf_tables_register_hook(struct net *net, const struct nft_table *table, struct nft_chain *chain)
net/netfilter/nf_tables_api.c:nf_tables_unregister_hook(struct net *net, const struct nft_table *table, struct nft_chain *chain)
net/netfilter/nf_tables_api.c:nf_tables_updchain(struct nft_ctx *ctx, u8 genmask, u8 policy, u32 flags, const struct nlattr *attr, struct netlink_ext_ack *extack)
net/netfilter/nf_tables_api.c:nft_basechain_init(struct nft_base_chain *basechain, u8 family, struct nft_chain_hook *hook, u32 flags)
net/netfilter/nf_tables_api.c:nft_chain_parse_hook(struct net *net, const struct nlattr * const nla[], struct nft_chain_hook *hook, u8 family, struct netlink_ext_ack *extack, bool autoload)
net/netfilter/nf_tables_api.c:nft_chain_parse_netdev(struct net *net, struct nlattr *tb[], struct list_head *hook_list)
net/netfilter/nf_tables_api.c:nft_flush_table(struct nft_ctx *ctx)
net/netfilter/nf_tables_api.c:nft_netdev_hook_alloc()
net/netfilter/nf_tables_api.c:nft_netdev_register_hooks(struct net *net, struct list_head *hook_list)
net/netfilter/nf_tables_api.c:nft_netdev_unregister_hooks(struct net *net, struct list_head *hook_list)
net/netfilter/core.c:__nf_hook_entries_free(struct rcu_head *h)
net/netfilter/core.c:__nf_register_net_hook(struct net *net, int pf, const struct nf_hook_ops *reg)
net/netfilter/core.c:__nf_unregister_net_hook(struct net *net, int pf, const struct nf_hook_ops *reg)
net/netfilter/core.c:allocate_hook_entries_size()
net/netfilter/core.c:nf_hook_entries_delete_raw(struct nf_hook_entries __rcu **pp, const struct nf_hook_ops *reg)
net/netfilter/core.c:nf_hook_entries_free(struct nf_hook_entries *e)
net/netfilter/core.c:nf_hook_entries_grow()
net/netfilter/core.c:nf_hook_entries_insert_raw(struct nf_hook_entries __rcu **pp, const struct nf_hook_ops *reg)
net/netfilter/core.c:nf_hook_slow(struct sk_buff *skb, struct nf_hook_state *state, const struct nf_hook_entries *e, unsigned int s)
net/netfilter/core.c:nf_hook_slow_list(struct list_head *head, struct nf_hook_state *state, const struct nf_hook_entries *e)
net/netfilter/core.c:nf_register_net_hook(struct net *net, const struct nf_hook_ops *reg)
net/netfilter/core.c:nf_register_net_hooks(struct net *net, const struct nf_hook_ops *reg, unsigned int n)
net/netfilter/core.c:nf_remove_net_hook(struct nf_hook_entries *old, const struct nf_hook_ops *unreg)
net/netfilter/core.c:nf_unregister_net_hook(struct net *net, const struct nf_hook_ops *reg)
net/netfilter/core.c:nf_unregister_net_hooks(struct net *net, const struct nf_hook_ops *reg, unsigned int hookcount)
net/netfilter/nft_chain_filter.c:nf_tables_netdev_event(struct notifier_block *this, unsigned long event, void *ptr)
net/netfilter/nft_chain_filter.c:nft_chain_filter_init(void)
net/netfilter/nft_chain_filter.c:nft_chain_filter_netdev_init(void)
net/netfilter/nft_chain_filter.c:nft_do_chain_bridge(void *priv, struct sk_buff *skb, const struct nf_hook_state *state)
net/netfilter/nft_chain_filter.c:nft_do_chain_inet(void *priv, struct sk_buff *skb, const struct nf_hook_state *state)
net/netfilter/nft_chain_filter.c:nft_do_chain_inet_ingress(void *priv, struct sk_buff *skb, const struct nf_hook_state *state)
net/netfilter/nft_chain_filter.c:nft_do_chain_ipv6(void *priv, struct sk_buff *skb, const struct nf_hook_state *state)
net/netfilter/nft_chain_filter.c:nft_do_chain_netdev(void *priv, struct sk_buff *skb, const struct nf_hook_state *state)
net/netfilter/nft_chain_filter.c:nft_netdev_event(unsigned long event, struct net_device *dev, struct nft_ctx *ctx)
__put_net()
net/core/net_namespace.c:cleanup_net(struct work_struct *work)
net/core/net_namespace.c:copy_net_ns()
net/core/net_namespace.c:get_net_ns_by_id()
net/core/net_namespace.c:net_alloc()
net_namespace()
net/core/net_namespace.c:ops_exit_list(const struct pernet_operations *ops, struct list_head *net_exit_list)
net/core/net_namespace.c:setup_net(struct net *net, struct user_namespace *user_ns)
net/core/dev.c:unregister_netdevice_many(struct list_head *head)
net/mac80211/iface.c:ieee80211_change_mac(struct net_device *dev, void *addr)
net/mac80211/iface.c:ieee80211_do_open(struct wireless_dev *wdev, bool coming_up)
net/mac80211/iface.c:ieee80211_do_stop(struct ieee80211_sub_if_data *sdata, bool going_down)
net/mac80211/iface.c:ieee80211_if_remove(struct ieee80211_sub_if_data *sdata)
net/mac80211/iface.c:ieee80211_open(struct net_device *dev)
net/mac80211/iface.c:ieee80211_remove_interfaces(struct ieee80211_local *local)
net/mac80211/iface.c:ieee80211_setup_sdata(struct ieee80211_sub_if_data *sdata, enum nl80211_iftype type)
net/mac80211/iface.c:ieee80211_stop(struct net_device *dev)
drivers/net/wireless/mac80211_hwsim.c:hwsim_exit_net(struct net *net)
drivers/net/wireless/mac80211_hwsim.c:hwsim_init_netlink(void)
drivers/net/wireless/mac80211_hwsim.c:hwsim_mcast_del_radio(int id, const char *hwname, struct genl_info *info)
drivers/net/wireless/mac80211_hwsim.c:mac80211_hwsim_del_radio(struct mac80211_hwsim_data *data, const char *hwname, struct genl_info *info)
drivers/net/wireless/mac80211_hwsim.c:mac80211_hwsim_free(void)
drivers/net/wireless/mac80211_hwsim.c:mac80211_hwsim_remove_interface(struct ieee80211_hw *hw, struct ieee80211_vif *vif)
drivers/net/wireless/mac80211_hwsim.c:mac80211_hwsim_stop(struct ieee80211_hw *hw)
mac80211_hwsim_unregister_hw()
fs/namespace.c:cleanup_mnt(struct mount *mnt)
fs/namespace.c:delayed_mntput(struct work_struct *unused)
fs/namespace.c:disconnect_mount(struct mount *mnt, enum umount_tree_flags how)
fs/namespace.c:do_umount(struct mount *mnt, int flags)
fs/namespace.c:mnt_change_mountpoint(struct mount *parent, struct mountpoint *mp, struct mount *mnt)
fs/namespace.c:mnt_set_mountpoint(struct mount *mnt, struct mountpoint *mp, struct mount *child_mnt)
fs/namespace.c:mntput_no_expire(struct mount *mnt)
fs/namespace.c:umount_tree(struct mount *mnt, enum umount_tree_flags how)
net/core/dev.c:__dev_close_many(struct list_head *head)
net/core/dev.c:dev_close_many(struct list_head *head, bool unlink)
net/core/dev.c:unregister_netdevice_many(struct list_head *head)
cleanup_workqueue()
process_one_work()
kernel/workqueue.c:worker_thread(void *__worker)
kernel/notifier.c:atomic_notifier_call_chain(struct atomic_notifier_head *nh, unsigned long val, void *v)
kernel/notifier.c:notifier_call_chain(struct notifier_block **nl, unsigned long val, void *v, int nr_to_call, int *nr_calls)
kernel/notifier.c:notifier_call_chain_robust(struct notifier_block **nl, unsigned long val_up, unsigned long val_down, void *v)
func for case 12be9aa373be9d8727cdd172f190de39528a413a
security/selinux/hooks.c:selinux_inet_sys_rcv_skb(struct net *ns, int ifindex, char *addrp, u16 family, u32 peer_sid, struct common_audit_data *ad)
security/selinux/hooks.c:selinux_sk_alloc_security(struct sock *sk, int family, gfp_t priority)
security/selinux/hooks.c:selinux_sk_clone_security(const struct sock *sk, struct sock *newsk)
security/selinux/hooks.c:selinux_sock_graft(struct sock *sk, struct socket *parent)
security/selinux/hooks.c:selinux_sock_rcv_skb_compat(struct sock *sk, struct sk_buff *skb, u16 family)
security/selinux/hooks.c:selinux_socket_accept(struct socket *sock, struct socket *newsock)
security/selinux/hooks.c:selinux_socket_bind(struct socket *sock, struct sockaddr *address, int addrlen)
security/selinux/hooks.c:selinux_socket_connect(struct socket *sock, struct sockaddr *address, int addrlen)
security/selinux/hooks.c:selinux_socket_connect_helper(struct socket *sock, struct sockaddr *address, int addrlen)
security/selinux/hooks.c:selinux_socket_create(int family, int type, int protocol, int kern)
security/selinux/hooks.c:selinux_socket_getpeersec_dgram(struct socket *sock, struct sk_buff *skb, u32 *secid)
security/selinux/hooks.c:selinux_socket_getpeersec_stream(struct socket *sock, char __user *optval, int __user *optlen, unsigned len)
security/selinux/hooks.c:selinux_socket_post_create(struct socket *sock, int family, int type, int protocol, int kern)
selinux_socket_recvmsg()
security/selinux/hooks.c:selinux_socket_sock_rcv_skb(struct sock *sk, struct sk_buff *skb)
__mptcp_destroy_sock()
net/mptcp/protocol.c:__mptcp_move_skb(struct mptcp_sock *msk, struct sock *ssk, struct sk_buff *skb, unsigned int offset, size_t copy_len)
net/mptcp/protocol.c:__mptcp_move_skbs(struct mptcp_sock *msk)
net/mptcp/protocol.c:__mptcp_move_skbs_from_subflow(struct mptcp_sock *msk, struct sock *ssk, unsigned int *bytes)
net/mptcp/protocol.c:__mptcp_recvmsg_mskq(struct mptcp_sock *msk, struct msghdr *msg, size_t len)
mptcp_check_data_fin()
net/mptcp/protocol.c:mptcp_check_for_eof(struct mptcp_sock *msk)
mptcp_cleanup_rbuf()
net/mptcp/protocol.c:mptcp_close(struct sock *sk, long timeout)
mptcp_data_queue_ofo()
mptcp_rcv_space_adjust()
net/mptcp/protocol.c:mptcp_recvmsg(struct sock *sk, struct msghdr *msg, size_t len, int nonblock, int flags, int *addr_len)
mptcp_send_ack()
mptcp_subflow_cleanup_rbuf()
net/mptcp/protocol.c:mptcp_wait_data(struct sock *sk, long *timeo)
net/socket.c:____sys_recvmsg(struct socket *sock, struct msghdr *msg_sys, struct user_msghdr __user *msg, struct sockaddr __user *uaddr, unsigned int flags, int nosec)
net/socket.c:___sys_recvmsg(struct socket *sock, struct user_msghdr __user *msg, struct msghdr *msg_sys, unsigned int flags, int nosec)
net/socket.c:__sock_create(struct net *net, int family, int type, int protocol, struct socket **res, int kern)
net/socket.c:__sys_recvfrom(int fd, void __user *ubuf, size_t size, unsigned int flags, struct sockaddr __user *addr, int __user *addr_len)
net/socket.c:__sys_recvmsg(int fd, struct user_msghdr __user *msg, unsigned int flags, bool forbid_cmsg_compat)
net/socket.c:__sys_socket(int family, int type, int protocol)
net/socket.c:sock_alloc()
net/socket.c:sock_alloc_file()
net/socket.c:sock_alloc_inode()
net/socket.c:sock_create_lite(int family, int type, int protocol, struct socket **res)
net/socket.c:sock_do_ioctl(struct net *net, struct socket *sock, unsigned int cmd, unsigned long arg)
net/socket.c:sock_init(void)
net/socket.c:sock_map_fd(struct socket *sock, int flags)
sock_recvmsg()
net/socket.c:sockfd_lookup_light()
security/security.c:security_cred_alloc_blank(struct cred *cred, gfp_t gfp)
security/security.c:security_file_alloc(struct file *file)
security/security.c:security_file_free(struct file *file)
security/security.c:security_inode_alloc(struct inode *inode)
security/security.c:security_inode_free(struct inode *inode)
security/security.c:security_prepare_creds(struct cred *new, const struct cred *old, gfp_t gfp)
security_socket_recvmsg()
security/security.c:security_task_alloc(struct task_struct *task, unsigned long clone_flags)
net/mptcp/subflow.c:__mptcp_subflow_connect(struct sock *sk, int ifindex, const struct mptcp_addr_info *loc, const struct mptcp_addr_info *remote)
net/mptcp/subflow.c:mptcp_subflow_create_socket(struct sock *sk, struct socket **new_sock)
net/mptcp/subflow.c:mptcp_subflow_data_available(struct sock *sk)
net/mptcp/subflow.c:subflow_check_data_avail(struct sock *ssk)
net/mptcp/subflow.c:subflow_data_ready(struct sock *sk)
net/mptcp/subflow.c:subflow_state_change(struct sock *sk)
net/mptcp/subflow.c:subflow_ulp_clone(const struct request_sock *req, struct sock *newsk, const gfp_t priority)
net/mptcp/subflow.c:subflow_ulp_init(struct sock *sk)
ulp_init()
net/ipv4/af_inet.c:__inet_stream_connect(struct socket *sock, struct sockaddr *uaddr, int addr_len, int flags, int is_sendmsg)
net/ipv4/af_inet.c:inet_accept(struct socket *sock, struct socket *newsock, int flags, bool kern)
net/ipv4/af_inet.c:inet_bind(struct socket *sock, struct sockaddr *uaddr, int addr_len)
net/ipv4/af_inet.c:inet_create(struct net *net, struct socket *sock, int protocol, int kern)
net/ipv4/af_inet.c:inet_dgram_connect(struct socket *sock, struct sockaddr *uaddr, int addr_len, int flags)
net/ipv4/af_inet.c:inet_listen(struct socket *sock, int backlog)
net/ipv4/af_inet.c:inet_recvmsg(struct socket *sock, struct msghdr *msg, size_t size, int flags)
net/ipv4/af_inet.c:inet_release(struct socket *sock)
net/core/sock.c:__sk_receive_skb(struct sock *sk, struct sk_buff *skb, const int nested, unsigned int trim_cap, bool refcounted)
net/core/sock.c:__sock_queue_rcv_skb(struct sock *sk, struct sk_buff *skb)
net/core/sock.c:sk_alloc()
net/core/sock.c:sk_destruct(struct sock *sk)
sk_error_report()
net/core/sock.c:sock_common_recvmsg(struct socket *sock, struct msghdr *msg, size_t size, int flags)
net/core/sock.c:sock_init_data(struct socket *sock, struct sock *sk)
sock_recvmsg()
net/mptcp/options.c:mptcp_get_options(const struct sk_buff *skb, struct mptcp_options_received *mp_opt)
net/mptcp/options.c:mptcp_incoming_options(struct sock *sk, struct sk_buff *skb, struct tcp_options_received *opt_rx)
net/mptcp/options.c:mptcp_parse_option(const struct sk_buff *skb, const unsigned char *ptr, int opsize, struct mptcp_options_received *mp_opt)
security/selinux/netport.c:sel_netport_find()
security/selinux/netport.c:sel_netport_insert(struct sel_netport *port)
security/selinux/netport.c:sel_netport_sid_slow(u8 protocol, u16 pnum, u32 *sid)
net/ipv4/tcp_input.c:tcp_data_queue(struct sock *sk, struct sk_buff *skb)
net/ipv4/tcp_input.c:tcp_rcv_established(struct sock *sk, struct sk_buff *skb)
net/ipv4/tcp_input.c:tcp_rcv_state_process(struct sock *sk, struct sk_buff *skb)
func for case 19a04b43c75ed1092021010419b5e560a8172c4f
drivers/hid/hidraw.c:drop_ref(struct hidraw *hidraw, int exists_bit)
drivers/hid/hidraw.c:hidraw_connect(struct hid_device *hid)
drivers/hid/hidraw.c:hidraw_get_report(struct file *file, char __user *buffer, size_t count, unsigned char report_type)
drivers/hid/hidraw.c:hidraw_init(void)
drivers/hid/hidraw.c:hidraw_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
drivers/hid/hidraw.c:hidraw_open(struct inode *inode, struct file *file)
drivers/hid/hidraw.c:hidraw_poll(struct file *file, poll_table *wait)
drivers/hid/hidraw.c:hidraw_read(struct file *file, char __user *buffer, size_t count, loff_t *ppos)
drivers/hid/hidraw.c:hidraw_release(struct inode * inode, struct file * file)
drivers/hid/hidraw.c:hidraw_report_event(struct hid_device *hid, u8 *data, int len)
drivers/hid/hidraw.c:hidraw_send_report(struct file *file, const char __user *buffer, size_t count, unsigned char report_type)
drivers/hid/usbhid/hid-core.c:hid_alloc_buffers(struct usb_device *dev, struct hid_device *hid)
drivers/hid/usbhid/hid-core.c:hid_ctrl(struct urb *urb)
drivers/hid/usbhid/hid-core.c:hid_free_buffers(struct usb_device *dev, struct hid_device *hid)
drivers/hid/usbhid/hid-core.c:hid_io_error(struct hid_device *hid)
drivers/hid/usbhid/hid-core.c:hid_irq_in(struct urb *urb)
drivers/hid/usbhid/hid-core.c:hid_irq_out(struct urb *urb)
drivers/hid/usbhid/hid-core.c:hid_restart_io(struct hid_device *hid)
drivers/hid/usbhid/hid-core.c:hid_start_in(struct hid_device *hid)
drivers/hid/usbhid/hid-core.c:hid_submit_ctrl(struct hid_device *hid)
drivers/hid/usbhid/hid-core.c:hid_submit_out(struct hid_device *hid)
drivers/hid/usbhid/hid-core.c:usbhid_disconnect(struct usb_interface *intf)
drivers/hid/usbhid/hid-core.c:usbhid_init_reports(struct hid_device *hid)
drivers/hid/usbhid/hid-core.c:usbhid_probe(struct usb_interface *intf, const struct usb_device_id *id)
drivers/hid/usbhid/hid-core.c:usbhid_restart_ctrl_queue(struct usbhid_device *usbhid)
drivers/hid/usbhid/hid-core.c:usbhid_restart_out_queue(struct usbhid_device *usbhid)
drivers/hid/hid-core.c:hid_add_device(struct hid_device *hdev)
drivers/hid/hid-core.c:hid_alloc_report_buf()
drivers/hid/hid-core.c:hid_allocate_device()
drivers/hid/hid-core.c:hid_close_report(struct hid_device *device)
drivers/hid/hid-core.c:hid_connect(struct hid_device *hdev, unsigned int connect_mask)
drivers/hid/hid-core.c:hid_disconnect(struct hid_device *hdev)
drivers/hid/hid-core.c:hid_free_report(struct hid_report *report)
drivers/hid/hid-core.c:hid_hw_open(struct hid_device *hdev)
drivers/hid/hid-core.c:hid_hw_start(struct hid_device *hdev, unsigned int connect_mask)
drivers/hid/hid-core.c:hid_input_report(struct hid_device *hid, int type, u8 *data, u32 size, int interrupt)
drivers/hid/hid-core.c:hid_open_report(struct hid_device *device)
drivers/hid/hid-core.c:hid_process_report(struct hid_device *hid, struct hid_report *report, __u8 *data, int interrupt)
drivers/hid/hid-core.c:hid_remove_device(struct hid_device *hdev)
drivers/hid/hid-core.c:hid_report_raw_event(struct hid_device *hid, int type, u8 *data, u32 size, int interrupt)
drivers/hid/hid-core.c:hid_scan_report(struct hid_device *hid)
drivers/usb/core/hcd.c:__usb_hcd_giveback_urb(struct urb *urb)
drivers/usb/core/hcd.c:usb_hcd_check_unlink_urb(struct usb_hcd *hcd, struct urb *urb, int status)
drivers/usb/core/hcd.c:usb_hcd_giveback_urb(struct usb_hcd *hcd, struct urb *urb, int status)
drivers/usb/core/hcd.c:usb_hcd_link_urb_to_ep(struct usb_hcd *hcd, struct urb *urb)
drivers/usb/core/hcd.c:usb_hcd_map_urb_for_dma(struct usb_hcd *hcd, struct urb *urb, gfp_t mem_flags)
drivers/usb/core/hcd.c:usb_hcd_submit_urb(struct urb *urb, gfp_t mem_flags)
drivers/usb/core/hcd.c:usb_hcd_unlink_urb(struct urb *urb, int status)
drivers/usb/core/hcd.c:usb_hcd_unmap_urb_for_dma(struct usb_hcd *hcd, struct urb *urb)
drivers/usb/core/urb.c:__usb_unanchor_urb(struct urb *urb, struct usb_anchor *anchor)
drivers/usb/core/urb.c:usb_alloc_urb()
drivers/usb/core/urb.c:usb_anchor_urb(struct urb *urb, struct usb_anchor *anchor)
drivers/usb/core/urb.c:usb_kill_anchored_urbs(struct usb_anchor *anchor)
drivers/usb/core/urb.c:usb_kill_urb(struct urb *urb)
drivers/usb/core/urb.c:usb_submit_urb(struct urb *urb, gfp_t mem_flags)
drivers/usb/core/urb.c:usb_unanchor_urb(struct urb *urb)
drivers/usb/core/urb.c:usb_unlink_urb(struct urb *urb)
drivers/usb/core/devio.c:proc_control_compat(struct usb_dev_state *ps, struct usbdevfs_ctrltransfer32 __user *p32)
drivers/usb/core/devio.c:proc_do_submiturb(struct usb_dev_state *ps, struct usbdevfs_urb *uurb, struct usbdevfs_iso_packet_desc __user *iso_frame_desc, void __user *arg, sigval_t userurb_sigval)
drivers/usb/core/devio.c:proc_reapurb(struct usb_dev_state *ps, void __user *arg)
drivers/usb/core/devio.c:proc_reapurb_compat(struct usb_dev_state *ps, void __user *arg)
drivers/usb/core/devio.c:proc_reapurbnonblock(struct usb_dev_state *ps, void __user *arg)
drivers/usb/core/devio.c:proc_reapurbnonblock_compat(struct usb_dev_state *ps, void __user *arg)
drivers/usb/core/devio.c:proc_submiturb(struct usb_dev_state *ps, void __user *arg)
drivers/usb/core/devio.c:proc_submiturb_compat(struct usb_dev_state *ps, void __user *arg)
mm/util.c:folio_copy(struct folio *dst, struct folio *src)
mm/util.c:kmemdup_nul()
mm/util.c:kvmalloc_node()
mm/util.c:mem_dump_obj(void *object)
mm/util.c:memdup_user()
mm/util.c:memdup_user_nul()
mm/util.c:strndup_user()
mm/util.c:vmemdup_user()
drivers/usb/core/message.c:usb_control_msg(struct usb_device *dev, unsigned int pipe, __u8 request, __u8 requesttype, __u16 value, __u16 index, void *data, __u16 size, int timeout)
drivers/usb/core/message.c:usb_internal_control_msg(struct usb_device *usb_dev, unsigned int pipe, struct usb_ctrlrequest *cmd, void *data, int len, int timeout)
drivers/usb/core/message.c:usb_start_wait_urb(struct urb *urb, int timeout, int *actual_length)
kernel/time/timer.c:__run_timers(struct timer_base *base)
kernel/time/timer.c:expire_timers(struct timer_base *base, struct hlist_head *head)
kernel/time/timer.c:run_timer_softirq(struct softirq_action *h)
drivers/hid/hidraw.c:hidraw_report_event(struct hid_device *hid, u8 *data, int len)
func for case 1a201ce4f0f4ab2f165b93d0ce5c15ebe1a5b321
anon_vma_name()
mm/madvise.c:anon_vma_name_alloc()
mm/madvise.c:do_madvise(struct mm_struct *mm, unsigned long start, size_t len_in, int behavior)
mm/madvise.c:madvise_cold(struct vm_area_struct *vma, struct vm_area_struct **prev, unsigned long start_addr, unsigned long end_addr)
mm/madvise.c:madvise_cold_or_pageout_pte_range(pmd_t *pmd, unsigned long addr, unsigned long end, struct mm_walk *walk)
mm/madvise.c:madvise_free_pte_range(pmd_t *pmd, unsigned long addr, unsigned long end, struct mm_walk *walk)
mm/madvise.c:madvise_free_single_vma(struct vm_area_struct *vma, unsigned long start_addr, unsigned long end_addr)
mm/madvise.c:madvise_pageout(struct vm_area_struct *vma, struct vm_area_struct **prev, unsigned long start_addr, unsigned long end_addr)
mm/madvise.c:madvise_populate(struct vm_area_struct *vma, struct vm_area_struct **prev, unsigned long start, unsigned long end, int behavior)
mm/madvise.c:madvise_remove(struct vm_area_struct *vma, struct vm_area_struct **prev, unsigned long start, unsigned long end)
mm/madvise.c:madvise_set_anon_name(struct mm_struct *mm, unsigned long start, unsigned long len_in, struct anon_vma_name *anon_name)
mm/madvise.c:madvise_update_vma(struct vm_area_struct *vma, struct vm_area_struct **prev, unsigned long start, unsigned long end, unsigned long new_flags, struct anon_vma_name *anon_name)
mm/madvise.c:madvise_vma_anon_name(struct vm_area_struct *vma, struct vm_area_struct **prev, unsigned long start, unsigned long end, unsigned long anon_name)
mm/madvise.c:madvise_walk_vmas(struct mm_struct *mm, unsigned long start, unsigned long end, unsigned long arg, int (*visit)(struct vm_area_struct *vma, struct vm_area_struct **prev, unsigned long start, unsigned long end, unsigned long arg))
mm/madvise.c:replace_anon_vma_name(struct vm_area_struct *vma, struct anon_vma_name *anon_name)
kernel/sys.c:__sys_setfsgid(gid_t gid))
kernel/sys.c:__sys_setfsuid(uid_t uid)
kernel/sys.c:__sys_setgid(gid_t gid)
kernel/sys.c:__sys_setregid(gid_t rgid, gid_t egid)
kernel/sys.c:__sys_setresgid(gid_t rgid, gid_t egid, gid_t sgid)
kernel/sys.c:__sys_setresuid(uid_t ruid, uid_t euid, uid_t suid)
kernel/sys.c:__sys_setreuid(uid_t ruid, uid_t euid)
kernel/sys.c:__sys_setuid(uid_t uid)
kernel/sys.c:do_getpgid(pid_t pid))
kernel/sys.c:do_sys_times(struct tms *tms))
kernel/sys.c:ksys_setsid(void))
kernel/sys.c:override_release(char __user *release, size_t len))
kernel/sys.c:set_one_prio(struct task_struct *p, int niceval, int error)
kernel/sys.c:set_one_prio_perm(struct task_struct *p)
mm/slab_common.c:__do_kmalloc_node()
__do_krealloc()
__kmalloc()
mm/slab_common.c:create_boot_cache(struct kmem_cache *s, const char *name, unsigned int size, slab_flags_t flags, unsigned int useroffset, unsigned int usersize)
mm/slab_common.c:create_cache()
mm/slab_common.c:create_kmalloc_cache()
mm/slab_common.c:kfree_sensitive(const void *p)
kmalloc_order()
mm/slab_common.c:kmem_cache_create_usercopy()
mm/slab_common.c:kmem_cache_destroy(struct kmem_cache *s)
mm/slab_common.c:kmem_cache_sanity_check(const char *name, unsigned int size)
kmem_cache_shrink()
mm/slab_common.c:new_kmalloc_cache(int idx, enum kmalloc_cache_type type, slab_flags_t flags)
mm/slab_common.c:shutdown_cache(struct kmem_cache *s)
mm/slab_common.c:slab_caches_to_rcu_destroy_workfn(struct work_struct *work)
slab_common()
include/linux/slab.h:__kmalloc_index(size_t size, bool size_is_constant)
kmalloc_array()
kmalloc_array_node()
kmalloc_node()
include/linux/slab.h:kmalloc_type(gfp_t flags)
kmem_cache_alloc_node_trace()
kmem_cache_alloc_trace()
mm/rmap.c:__anon_vma_prepare(struct vm_area_struct *vma)
mm/rmap.c:anon_vma_alloc()
mm/rmap.c:anon_vma_clone(struct vm_area_struct *dst, struct vm_area_struct *src)
mm/rmap.c:anon_vma_fork(struct vm_area_struct *vma, struct vm_area_struct *pvma)
mm/rmap.c:anon_vma_free(struct anon_vma *anon_vma)
page_get_anon_vma()
page_lock_anon_vma_read()
mm/rmap.c:unlink_anon_vmas(struct vm_area_struct *vma)
mm/memory.c:copy_nonpresent_pte(struct mm_struct *dst_mm, struct mm_struct *src_mm, pte_t *dst_pte, pte_t *src_pte, struct vm_area_struct *dst_vma, struct vm_area_struct *src_vma, unsigned long addr, int *rss)
mm/memory.c:copy_p4d_range(struct vm_area_struct *dst_vma, struct vm_area_struct *src_vma, pgd_t *dst_pgd, pgd_t *src_pgd, unsigned long addr, unsigned long end)
mm/memory.c:copy_page_range(struct vm_area_struct *dst_vma, struct vm_area_struct *src_vma)
mm/memory.c:copy_pmd_range(struct vm_area_struct *dst_vma, struct vm_area_struct *src_vma, pud_t *dst_pud, pud_t *src_pud, unsigned long addr, unsigned long end)
mm/memory.c:copy_present_page(struct vm_area_struct *dst_vma, struct vm_area_struct *src_vma, pte_t *dst_pte, pte_t *src_pte, unsigned long addr, int *rss, struct page **prealloc, struct page *page)
mm/memory.c:copy_present_pte(struct vm_area_struct *dst_vma, struct vm_area_struct *src_vma, pte_t *dst_pte, pte_t *src_pte, unsigned long addr, int *rss, struct page **prealloc)
mm/memory.c:copy_pte_range(struct vm_area_struct *dst_vma, struct vm_area_struct *src_vma, pmd_t *dst_pmd, pmd_t *src_pmd, unsigned long addr, unsigned long end)
mm/memory.c:copy_pud_range(struct vm_area_struct *dst_vma, struct vm_area_struct *src_vma, p4d_t *dst_p4d, p4d_t *src_p4d, unsigned long addr, unsigned long end)
__insert_vm_struct()
mm/mmap.c:__vma_adjust(struct vm_area_struct *vma, unsigned long start, unsigned long end, pgoff_t pgoff, struct vm_area_struct *insert, struct vm_area_struct *expand)
mm/mmap.c:anon_vma_compatible(struct vm_area_struct *a, struct vm_area_struct *b)
mm/mmap.c:insert_vm_struct(struct mm_struct *mm, struct vm_area_struct *vma)
mm/mmap.c:is_mergeable_anon_vma(struct anon_vma *anon_vma1, struct anon_vma *anon_vma2, struct vm_area_struct *vma)
munmap_vma_range()
mm/mmap.c:vma_link(struct mm_struct *mm, struct vm_area_struct *vma)
mm/mmap.c:vma_merge()
mm/vmalloc.c:__vunmap(const void *addr, int deallocate_pages)
mm/vmalloc.c:remove_vm_area()
mm/vmalloc.c:vm_remove_mappings(struct vm_struct *area, int deallocate_pages)
mm/page_alloc.c:alloc_contig_pages()
mm/page_alloc.c:alloc_contig_range(unsigned long start, unsigned long end, unsigned migratetype, gfp_t gfp_mask)
mm/page_alloc.c:free_contig_range(unsigned long pfn, unsigned long nr_pages)
anon_vma()
mm/madvise.c:anon_vma_name_alloc()
func for case 1bc76a5779300075e3466a0e2abcd753df212779
drivers/bluetooth/hci_h5.c:h5_close(struct hci_uart *hu)
drivers/bluetooth/hci_h5.c:h5_complete_rx_pkt(struct hci_uart *hu)
drivers/bluetooth/hci_h5.c:h5_dequeue()
drivers/bluetooth/hci_h5.c:h5_enqueue(struct hci_uart *hu, struct sk_buff *skb)
drivers/bluetooth/hci_h5.c:h5_handle_internal_rx(struct hci_uart *hu)
drivers/bluetooth/hci_h5.c:h5_open(struct hci_uart *hu)
drivers/bluetooth/hci_h5.c:h5_pkt_cull(struct h5 *h5)
drivers/bluetooth/hci_h5.c:h5_prepare_pkt()
drivers/bluetooth/hci_h5.c:h5_recv(struct hci_uart *hu, const void *data, int count)
drivers/bluetooth/hci_h5.c:h5_reset_rx(struct h5 *h5)
drivers/bluetooth/hci_h5.c:h5_rx_3wire_hdr(struct hci_uart *hu, unsigned char c)
drivers/bluetooth/hci_h5.c:h5_rx_payload(struct hci_uart *hu, unsigned char c)
drivers/bluetooth/hci_h5.c:h5_rx_pkt_start(struct hci_uart *hu, unsigned char c)
drivers/bluetooth/hci_h5.c:h5_setup(struct hci_uart *hu)
drivers/bluetooth/hci_h5.c:h5_unslip_one_byte(struct h5 *h5, unsigned char c)
drivers/base/power/runtime.c:__pm_runtime_barrier(struct device *dev)
drivers/base/power/runtime.c:__pm_runtime_disable(struct device *dev, bool check_resume)
drivers/base/power/runtime.c:__pm_runtime_idle(struct device *dev, int rpmflags)
drivers/base/power/runtime.c:__pm_runtime_resume(struct device *dev, int rpmflags)
drivers/base/power/runtime.c:__pm_runtime_set_status(struct device *dev, unsigned int status)
drivers/base/power/runtime.c:__pm_runtime_suspend(struct device *dev, int rpmflags)
drivers/base/power/runtime.c:pm_runtime_barrier(struct device *dev)
drivers/base/power/runtime.c:pm_runtime_enable(struct device *dev)
drivers/base/power/runtime.c:pm_runtime_force_resume(struct device *dev)
drivers/base/power/runtime.c:pm_runtime_force_suspend(struct device *dev)
drivers/base/power/runtime.c:pm_runtime_get_if_active(struct device *dev, bool ign_usage_count)
drivers/base/power/runtime.c:pm_runtime_reinit(struct device *dev)
drivers/base/power/runtime.c:pm_runtime_work(struct work_struct *work)
drivers/base/power/runtime.c:rpm_callback(int (*cb)(struct device *), struct device *dev)
drivers/base/power/runtime.c:rpm_idle(struct device *dev, int rpmflags)
drivers/bluetooth/hci_ldisc.c:hci_uart_dequeue()
drivers/bluetooth/hci_ldisc.c:hci_uart_flush(struct hci_dev *hdev)
drivers/bluetooth/hci_ldisc.c:hci_uart_init_work(struct work_struct *work)
drivers/bluetooth/hci_ldisc.c:hci_uart_register_dev(struct hci_uart *hu)
drivers/bluetooth/hci_ldisc.c:hci_uart_send_frame(struct hci_dev *hdev, struct sk_buff *skb)
drivers/bluetooth/hci_ldisc.c:hci_uart_set_flags(struct hci_uart *hu, unsigned long flags)
drivers/bluetooth/hci_ldisc.c:hci_uart_set_proto(struct hci_uart *hu, int id)
drivers/bluetooth/hci_ldisc.c:hci_uart_tty_close(struct tty_struct *tty)
drivers/bluetooth/hci_ldisc.c:hci_uart_tty_ioctl(struct tty_struct *tty, struct file *file, unsigned int cmd, unsigned long arg)
drivers/bluetooth/hci_ldisc.c:hci_uart_tty_open(struct tty_struct *tty)
drivers/bluetooth/hci_ldisc.c:hci_uart_tty_receive(struct tty_struct *tty, const u8 *data, const char *flags, int count)
drivers/bluetooth/hci_ldisc.c:hci_uart_tty_wakeup(struct tty_struct *tty)
drivers/bluetooth/hci_ldisc.c:hci_uart_tx_complete(struct hci_uart *hu, int pkt_type)
drivers/bluetooth/hci_ldisc.c:hci_uart_tx_wakeup(struct hci_uart *hu)
drivers/bluetooth/hci_ldisc.c:hci_uart_write_work(struct work_struct *work)
drivers/base/power/runtime.c:__pm_runtime_resume(struct device *dev, int rpmflags)
drivers/base/power/runtime.c:pm_runtime_enable(struct device *dev)
pm_runtime_get()
pm_runtime_get_sync()
pm_runtime_put()
pm_runtime_put_sync()
pm_runtime_set_active()
pm_runtime_set_suspended()
drivers/tty/tty_ldisc.c:tty_ldisc_close(struct tty_struct *tty, struct tty_ldisc *ld)
drivers/tty/tty_ldisc.c:tty_ldisc_hangup(struct tty_struct *tty, bool reinit)
drivers/tty/tty_ldisc.c:tty_ldisc_init(struct tty_struct *tty)
drivers/tty/tty_ldisc.c:tty_ldisc_kill(struct tty_struct *tty)
drivers/tty/tty_ldisc.c:tty_ldisc_reinit(struct tty_struct *tty, int disc)
drivers/tty/tty_ldisc.c:tty_ldisc_release(struct tty_struct *tty)
drivers/tty/tty_ldisc.c:tty_ldisc_setup(struct tty_struct *tty, struct tty_struct *o_tty)
drivers/tty/tty_ldisc.c:tty_set_ldisc(struct tty_struct *tty, int disc)
drivers/tty/tty_buffer.c:flush_to_ldisc(struct work_struct *work)
drivers/tty/tty_buffer.c:receive_buf(struct tty_port *port, struct tty_buffer *head, int count)
drivers/tty/tty_buffer.c:tty_buffer_flush(struct tty_struct *tty, struct tty_ldisc *ld)
drivers/tty/tty_buffer.c:tty_buffer_free(struct tty_port *port, struct tty_buffer *b)
drivers/tty/tty_buffer.c:tty_buffer_free_all(struct tty_port *port)
drivers/tty/tty_buffer.c:tty_buffer_init(struct tty_port *port)
tty_flip_buffer_push()
drivers/tty/tty_buffer.c:tty_ldisc_receive_buf(struct tty_ldisc *ld, const unsigned char *p, const char *f, int count)
drivers/tty/tty_port.c:tty_port_block_til_ready(struct tty_port *port, struct tty_struct *tty, struct file *filp)
drivers/tty/tty_port.c:tty_port_close(struct tty_port *port, struct tty_struct *tty, struct file *filp)
drivers/tty/tty_port.c:tty_port_default_receive_buf(struct tty_port *port, const unsigned char *p, const unsigned char *f, size_t count)
drivers/tty/tty_port.c:tty_port_hangup(struct tty_port *port)
drivers/tty/tty_port.c:tty_port_init(struct tty_port *port)
drivers/tty/tty_port.c:tty_port_open(struct tty_port *port, struct tty_struct *tty, struct file *filp)
drivers/tty/tty_port.c:tty_port_shutdown(struct tty_port *port, struct tty_struct *tty)
drivers/tty/tty_port.c:tty_port_tty_set(struct tty_port *port, struct tty_struct *tty)
drivers/tty/tty_buffer.c:flush_to_ldisc(struct work_struct *work)
process_one_work()
kernel/workqueue.c:worker_thread(void *__worker)
drivers/base/power/runtime.c:__pm_runtime_resume(struct device *dev, int rpmflags)
atomic_inc()
drivers/bluetooth/hci_h5.c:h5_recv(struct hci_uart *hu, const void *data, int count)
mm/kasan/report.c:__kasan_report(unsigned long addr, size_t size, bool is_write, unsigned long ip)
mm/kasan/report.c:end_report(unsigned long *flags, unsigned long addr)
mm/kasan/report.c:kasan_report(unsigned long addr, size_t size, bool is_write, unsigned long ip)
func for case 1bef50bdd9622a1969608d1090b2b4a588d0c6ac
fs/open.c:access_override_creds()
fs/open.c:chmod_common(const struct path *path, umode_t mode)
fs/open.c:chown_common(const struct path *path, uid_t user, gid_t group)
fs/open.c:dentry_open()
fs/open.c:do_dentry_open(struct file *f, struct inode *inode, int (*open)(struct inode *, struct file *))
fs/open.c:do_faccessat(int dfd, const char __user *filename, int mode, int flags)
fs/open.c:do_fchmodat(int dfd, const char __user *filename, umode_t mode)
fs/open.c:do_fchownat(int dfd, const char __user *filename, uid_t user, gid_t group, int flag)
fs/open.c:do_sys_ftruncate(unsigned int fd, loff_t length, int small)
fs/open.c:do_sys_openat2(int dfd, const char __user *filename, struct open_how *how)
fs/open.c:do_sys_truncate(const char __user *pathname, loff_t length)
fs/open.c:filp_close(struct file *filp, fl_owner_t id)
fs/open.c:filp_open()
fs/open.c:finish_open(struct file *file, struct dentry *dentry, int (*open)(struct inode *, struct file *))
fs/open.c:vfs_fallocate(struct file *file, int mode, loff_t offset, loff_t len)
fs/file.c:__close_range(unsigned fd, unsigned max_fd, unsigned int flags)
fs/file.c:alloc_fd(unsigned start, unsigned end, unsigned flags)
fs/file.c:alloc_fdtable()
fs/file.c:close_fd(unsigned fd)
fs/file.c:close_fd_get_file(unsigned int fd, struct file **res)
fs/file.c:close_files()
close_range()
fs/file.c:copy_fdtable(struct fdtable *nfdt, struct fdtable *ofdt)
fs/file.c:do_close_on_exec(struct files_struct *files)
fs/file.c:dup_fd()
fs/file.c:exit_files(struct task_struct *tsk)
fs/file.c:fd_install(unsigned int fd, struct file *file)
fs/open.c:filp_close(struct file *filp, fl_owner_t id)
fs/file.c:pick_file()
fs/file.c:put_files_struct(struct files_struct *files)
arch_do_signal_or_restart()
fs/file.c:close_files()
kernel/exit.c:do_exit(long code)
kernel/exit.c:do_group_exit(int exit_code)
fs/file.c:exit_files(struct task_struct *tsk)
fs/open.c:filp_close(struct file *filp, fl_owner_t id)
get_signal()
fs/file.c:put_files_struct(struct files_struct *files)
mm/kasan/generic.c:check_memory_region_inline(unsigned long addr, size_t size, bool write, unsigned long ret_ip)
mm/kasan/generic.c:memory_is_poisoned(unsigned long addr, size_t size)
mm/kasan/generic.c:memory_is_poisoned_1(unsigned long addr)
mm/kasan/generic.c:memory_is_poisoned_16(unsigned long addr)
mm/kasan/generic.c:memory_is_poisoned_2_4_8(unsigned long addr, unsigned long size)
mm/kasan/generic.c:memory_is_poisoned_n(unsigned long addr, size_t size)
mm/kasan/report.c:__kasan_report(unsigned long addr, size_t size, bool is_write, unsigned long ip)
mm/kasan/report.c:kasan_report_invalid_free(void *object, unsigned long ip)
mm/kasan/report.c:print_error_description(struct kasan_access_info *info)
fs/file_table.c:__fput(struct file *file)
fs/file_table.c:file_free_rcu(struct rcu_head *head)
fs/file_table.c:fput_many(struct file *file, unsigned int refs)
kernel/exit.c:do_exit(long code)
kernel/exit.c:do_group_exit(int exit_code)
kernel/exit.c:exit_notify(struct task_struct *tsk, int group_dead)
func for case 2482c46517c04822f40780fde741031bf9493450
drivers/net/ieee802154/atusb.c:atusb_alloc_urbs(struct atusb *atusb, int n)
drivers/net/ieee802154/atusb.c:atusb_control_msg(struct atusb *atusb, unsigned int pipe, __u8 request, __u8 requesttype, __u16 value, __u16 index, void *data, __u16 size, int timeout)
drivers/net/ieee802154/atusb.c:atusb_disconnect(struct usb_interface *interface)
drivers/net/ieee802154/atusb.c:atusb_in(struct urb *urb)
drivers/net/ieee802154/atusb.c:atusb_in_good(struct urb *urb)
drivers/net/ieee802154/atusb.c:atusb_probe(struct usb_interface *interface, const struct usb_device_id *id)
drivers/net/ieee802154/atusb.c:atusb_read_reg(struct atusb *atusb, u8 reg)
drivers/net/ieee802154/atusb.c:atusb_set_extended_addr(struct atusb *atusb)
drivers/net/ieee802154/atusb.c:atusb_set_hw_addr_filt(struct ieee802154_hw *hw, struct ieee802154_hw_addr_filt *filt, unsigned long changed)
drivers/net/ieee802154/atusb.c:atusb_start(struct ieee802154_hw *hw)
drivers/net/ieee802154/atusb.c:atusb_submit_rx_urb(struct atusb *atusb, struct urb *urb)
drivers/net/ieee802154/atusb.c:atusb_work_urbs(struct work_struct *work)
drivers/net/ieee802154/atusb.c:atusb_write_reg(struct atusb *atusb, u8 reg, u8 value)
drivers/net/ieee802154/atusb.c:atusb_write_subreg(struct atusb *atusb, u8 reg, u8 mask, u8 shift, u8 value)
drivers/net/ieee802154/atusb.c:atusb_xmit(struct ieee802154_hw *hw, struct sk_buff *skb)
drivers/usb/core/driver.c:usb_autopm_get_interface(struct usb_interface *intf)
drivers/usb/core/driver.c:usb_driver_claim_interface(struct usb_driver *driver, struct usb_interface *iface, void *priv)
drivers/usb/core/driver.c:usb_driver_release_interface(struct usb_driver *driver, struct usb_interface *iface)
drivers/usb/core/driver.c:usb_forced_unbind_intf(struct usb_interface *intf)
drivers/usb/core/driver.c:usb_match_device(struct usb_device *dev, const struct usb_device_id *id)
drivers/usb/core/driver.c:usb_match_one_id(struct usb_interface *interface, const struct usb_device_id *id)
drivers/usb/core/driver.c:usb_probe_device(struct device *dev)
drivers/usb/core/driver.c:usb_probe_interface(struct device *dev)
drivers/usb/core/driver.c:usb_rebind_intf(struct usb_interface *intf)
drivers/usb/core/driver.c:usb_register_device_driver(struct usb_device_driver *new_udriver, struct module *owner)
drivers/usb/core/driver.c:usb_register_driver(struct usb_driver *new_driver, struct module *owner, const char *mod_name)
drivers/usb/core/driver.c:usb_resume_device(struct usb_device *udev, pm_message_t msg)
drivers/usb/core/driver.c:usb_suspend_device(struct usb_device *udev, pm_message_t msg)
drivers/usb/core/driver.c:usb_unbind_device(struct device *dev)
drivers/usb/core/driver.c:usb_unbind_interface(struct device *dev)
drivers/usb/core/urb.c:__usb_unanchor_urb(struct urb *urb, struct usb_anchor *anchor)
drivers/usb/core/urb.c:usb_alloc_urb()
drivers/usb/core/urb.c:usb_anchor_resume_wakeups(struct usb_anchor *anchor)
drivers/usb/core/urb.c:usb_anchor_urb(struct urb *urb, struct usb_anchor *anchor)
drivers/usb/core/urb.c:usb_get_from_anchor()
drivers/usb/core/urb.c:usb_init_urb(struct urb *urb)
drivers/usb/core/urb.c:usb_kill_anchored_urbs(struct usb_anchor *anchor)
drivers/usb/core/urb.c:usb_kill_urb(struct urb *urb)
drivers/usb/core/urb.c:usb_poison_anchored_urbs(struct usb_anchor *anchor)
drivers/usb/core/urb.c:usb_poison_urb(struct urb *urb)
drivers/usb/core/urb.c:usb_scuttle_anchored_urbs(struct usb_anchor *anchor)
drivers/usb/core/urb.c:usb_submit_urb(struct urb *urb, gfp_t mem_flags)
drivers/usb/core/urb.c:usb_unanchor_urb(struct urb *urb)
drivers/usb/core/urb.c:usb_unlink_urb(struct urb *urb)
drivers/usb/core/urb.c:usb_unpoison_anchored_urbs(struct usb_anchor *anchor)
drivers/base/dd.c:__device_attach(struct device *dev, bool allow_async)
drivers/base/dd.c:__device_attach_driver(struct device_driver *drv, void *_data)
drivers/base/dd.c:__device_release_driver(struct device *dev, struct device *parent)
drivers/base/dd.c:device_release_driver_internal(struct device *dev, struct device_driver *drv, struct device *parent)
drivers/base/dd.c:driver_bound(struct device *dev)
drivers/base/dd.c:driver_deferred_probe_add(struct device *dev)
drivers/base/dd.c:driver_probe_device(struct device_driver *drv, struct device *dev)
drivers/base/dd.c:really_probe(struct device *dev, struct device_driver *drv)
drivers/usb/core/message.c:usb_clear_halt(struct usb_device *dev, int pipe)
drivers/usb/core/message.c:usb_control_msg(struct usb_device *dev, unsigned int pipe, __u8 request, __u8 requesttype, __u16 value, __u16 index, void *data, __u16 size, int timeout)
drivers/usb/core/message.c:usb_disable_device(struct usb_device *dev, int skip_ep0)
drivers/usb/core/message.c:usb_disable_device_endpoints(struct usb_device *dev, int skip_ep0)
drivers/usb/core/message.c:usb_driver_set_configuration(struct usb_device *udev, int config)
drivers/usb/core/message.c:usb_internal_control_msg(struct usb_device *usb_dev, unsigned int pipe, struct usb_ctrlrequest *cmd, void *data, int len, int timeout)
drivers/usb/core/message.c:usb_set_configuration(struct usb_device *dev, int configuration)
drivers/usb/core/message.c:usb_start_wait_urb(struct urb *urb, int timeout, int *actual_length)
drivers/usb/core/config.c:usb_destroy_configuration(struct usb_device *dev)
drivers/usb/core/config.c:usb_get_bos_descriptor(struct usb_device *dev)
drivers/usb/core/config.c:usb_get_configuration(struct usb_device *dev)
drivers/usb/core/config.c:usb_parse_configuration(struct usb_device *dev, int cfgidx, struct usb_host_config *config, unsigned char *buffer, int size)
drivers/usb/core/config.c:usb_parse_endpoint(struct device *ddev, int cfgno, struct usb_host_config *config, int inum, int asnum, struct usb_host_interface *ifp, int num_ep, unsigned char *buffer, int size)
drivers/usb/core/config.c:usb_parse_interface(struct device *ddev, int cfgno, struct usb_host_config *config, unsigned char *buffer, int size, u8 inums[], u8 nalts[])
drivers/usb/core/config.c:usb_parse_ss_endpoint_companion(struct device *ddev, int cfgno, int inum, int asnum, struct usb_host_endpoint *ep, unsigned char *buffer, int size)
drivers/usb/core/config.c:usb_release_interface_cache(struct kref *ref)
drivers/usb/core/devio.c:alloc_async()
drivers/usb/core/devio.c:destroy_async(struct usb_dev_state *ps, struct list_head *list)
drivers/usb/core/devio.c:free_async(struct async *as)
drivers/usb/core/devio.c:proc_do_submiturb(struct usb_dev_state *ps, struct usbdevfs_urb *uurb, struct usbdevfs_iso_packet_desc __user *iso_frame_desc, void __user *arg, sigval_t userurb_sigval)
drivers/usb/core/devio.c:proc_reapurb(struct usb_dev_state *ps, void __user *arg)
drivers/usb/core/devio.c:proc_submiturb(struct usb_dev_state *ps, void __user *arg)
drivers/usb/core/devio.c:proc_unlinkurb(struct usb_dev_state *ps, void __user *arg)
drivers/usb/core/devio.c:usbdev_release(struct inode *inode, struct file *file)
drivers/usb/core/generic.c:usb_choose_configuration(struct usb_device *udev)
drivers/usb/core/generic.c:usb_generic_driver_probe(struct usb_device *udev)
drivers/base/core.c:device_add(struct device *dev)
drivers/base/core.c:device_del(struct device *dev)
drivers/base/core.c:device_release(struct kobject *kobj)
func for case 2a42bcdee55085e729aa4e472bf86adf2036ad40
evict_inode()
fill_super()
fs/hugetlbfs/inode.c:hugetlb_vmtruncate(struct inode *inode, loff_t offset)
fs/hugetlbfs/inode.c:hugetlbfs_alloc_inode()
fs/hugetlbfs/inode.c:hugetlbfs_dec_free_inodes(struct hugetlbfs_sb_info *sbinfo)
fs/hugetlbfs/inode.c:hugetlbfs_evict_inode(struct inode *inode)
fs/hugetlbfs/inode.c:hugetlbfs_file_mmap(struct file *file, struct vm_area_struct *vma)
fs/hugetlbfs/inode.c:hugetlbfs_fill_super(struct super_block *sb, struct fs_context *fc)
fs/hugetlbfs/inode.c:hugetlbfs_get_inode()
fs/hugetlbfs/inode.c:hugetlbfs_get_root()
fs/hugetlbfs/inode.c:hugetlbfs_init_fs_context(struct fs_context *fc)
fs/hugetlbfs/inode.c:hugetlbfs_migrate_page(struct address_space *mapping, struct page *newpage, struct page *page, enum migrate_mode mode)
fs/hugetlbfs/inode.c:hugetlbfs_parse_param(struct fs_context *fc, struct fs_parameter *param)
fs/hugetlbfs/inode.c:hugetlbfs_setattr(struct dentry *dentry, struct iattr *attr)
fs/hugetlbfs/inode.c:hugetlbfs_statfs(struct dentry *dentry, struct kstatfs *buf)
fs/hugetlbfs/inode.c:hugetlbfs_validate(struct fs_context *fc)
init_fs_context()
fs/hugetlbfs/inode.c:remove_inode_hugepages(struct inode *inode, loff_t lstart, loff_t lend)
fs/dcache.c:___d_drop(struct dentry *dentry)
fs/dcache.c:__d_clear_type_and_inode(struct dentry *dentry)
fs/dcache.c:__dentry_kill(struct dentry *dentry)
fs/dcache.c:d_lru_add(struct dentry *dentry)
fs/dcache.c:d_lru_del(struct dentry *dentry)
fs/dcache.c:d_lru_isolate(struct list_lru_one *lru, struct dentry *dentry)
fs/dcache.c:d_lru_shrink_move(struct list_lru_one *lru, struct dentry *dentry, struct list_head *list)
fs/dcache.c:d_set_mounted(struct dentry *dentry)
fs/dcache.c:d_walk(struct dentry *parent, void *data, enum d_walk_ret (*enter)(void *, struct dentry *))
fs/dcache.c:dentry_free(struct dentry *dentry)
fs/dcache.c:dentry_unlist(struct dentry *dentry, struct dentry *parent)
fs/dcache.c:select_collect(void *_data, struct dentry *dentry)
fs/dcache.c:shrink_dcache_for_umount(struct super_block *sb)
fs/dcache.c:shrink_dcache_parent(struct dentry *parent)
fs/dcache.c:umount_check(void *_data, struct dentry *dentry)
FSCONFIG_CMD_RECONFIGURE()
fs/namespace.c:attach_recursive_mnt(struct mount *source_mnt, struct mount *dest_mnt, struct mountpoint *dest_mp, struct path *parent_path)
fs/namespace.c:cleanup_mnt(struct mount *mnt)
fs/namespace.c:do_add_mount(struct mount *newmnt, struct path *path, int mnt_flags)
fs/namespace.c:do_new_mount(struct path *path, const char *fstype, int sb_flags, int mnt_flags, const char *name, void *data)
fs/namespace.c:do_reconfigure_mnt(struct path *path, unsigned int mnt_flags)
fs/namespace.c:do_umount(struct mount *mnt, int flags)
fs/namespace.c:umount_tree(struct mount *mnt, enum umount_tree_flags how)
fs/super.c:deactivate_locked_super(struct super_block *s))
fs/super.c:generic_shutdown_super(struct super_block *sb))
fs/super.c:iterate_supers(void (*f)(struct super_block *, void *), void *arg))
fs/super.c:kill_block_super(struct super_block *sb))
fs/super.c:mount_single()
fs/super.c:reconfigure_single(struct super_block *s, int flags, void *data))
fs/super.c:reconfigure_super(struct fs_context *fc))
fs/super.c:vfs_get_tree(struct fs_context *fc))
fs/fsopen.c:fscontext_alloc_log(struct fs_context *fc)
fs/fsopen.c:fscontext_create_fd(struct fs_context *fc, unsigned int o_flags)
fs/fsopen.c:fscontext_read(struct file *file, char __user *_buf, size_t len, loff_t *pos)
fs/fsopen.c:vfs_fsconfig_locked(struct fs_context *fc, int cmd, struct fs_parameter *param)
mm/hugetlb.c:hugetlb_reserve_pages(struct inode *inode, long from, long to, struct vm_area_struct *vma, vm_flags_t vm_flags)
mm/hugetlb.c:hugetlb_unreserve_pages(struct inode *inode, long start, long end, long freed)
mm/hugetlb.c:hugetlb_vm_op_close(struct vm_area_struct *vma)
fs/namei.c:vfs_mkdir(struct inode *dir, struct dentry *dentry, umode_t mode)
fs/namei.c:vfs_rmdir(struct inode *dir, struct dentry *dentry)
fs/namei.c:vfs_unlink(struct inode *dir, struct dentry *dentry, struct inode **delegated_inode)
func for case 2dbce17f865f34c37da63de733f31001f293d78f
fs_context()
fs/sysfs/mount.c:sysfs_fs_context_free(struct fs_context *fc)
fs/sysfs/mount.c:sysfs_get_tree(struct fs_context *fc)
fs/sysfs/mount.c:sysfs_init(void)
fs/sysfs/mount.c:sysfs_init_fs_context(struct fs_context *fc)
fs/kernfs/mount.c:find_next_ancestor()
fs/kernfs/mount.c:kernfs_fh_get_inode()
fs/kernfs/mount.c:kernfs_fill_super(struct super_block *sb, struct kernfs_fs_context *kfc)
fs/kernfs/mount.c:kernfs_get_tree(struct fs_context *fc)
fs/kernfs/mount.c:kernfs_init(void)
fs/kernfs/mount.c:kernfs_kill_sb(struct super_block *sb)
fs/kernfs/mount.c:kernfs_node_dentry()
fs/kernfs/mount.c:kernfs_sop_show_options(struct seq_file *sf, struct dentry *dentry)
fs/kernfs/mount.c:kernfs_sop_show_path(struct seq_file *sf, struct dentry *dentry)
fs/dcache.c:___d_drop(struct dentry *dentry)
fs/dcache.c:__d_clear_type_and_inode(struct dentry *dentry)
fs/dcache.c:__dentry_kill(struct dentry *dentry)
fs/dcache.c:d_lru_add(struct dentry *dentry)
fs/dcache.c:d_lru_del(struct dentry *dentry)
fs/dcache.c:d_lru_isolate(struct list_lru_one *lru, struct dentry *dentry)
fs/dcache.c:d_lru_shrink_move(struct list_lru_one *lru, struct dentry *dentry, struct list_head *list)
fs/dcache.c:d_set_mounted(struct dentry *dentry)
fs/dcache.c:d_walk(struct dentry *parent, void *data, enum d_walk_ret (*enter)(void *, struct dentry *))
fs/dcache.c:dentry_free(struct dentry *dentry)
fs/dcache.c:dentry_unlist(struct dentry *dentry, struct dentry *parent)
fs/dcache.c:path_check_mount(void *data, struct dentry *dentry)
fs/dcache.c:shrink_dcache_for_umount(struct super_block *sb)
fs/dcache.c:shrink_dcache_sb(struct super_block *sb)
fs/dcache.c:umount_check(void *_data, struct dentry *dentry)
fs/super.c:deactivate_locked_super(struct super_block *s))
fs/super.c:destroy_unused_super(struct super_block *s))
fs/super.c:generic_shutdown_super(struct super_block *sb))
fs/super.c:kill_block_super(struct super_block *sb))
fs/super.c:mount_single()
fs/super.c:reconfigure_single(struct super_block *s, int flags, void *data))
fs/super.c:reconfigure_super(struct fs_context *fc))
fs/super.c:vfs_get_tree(struct fs_context *fc))
fs/namespace.c:cleanup_mnt(struct mount *mnt)
fs/namespace.c:disconnect_mount(struct mount *mnt, enum umount_tree_flags how)
fs/namespace.c:do_umount(struct mount *mnt, int flags)
fs/namespace.c:mark_mounts_for_expiry(struct list_head *mounts)
fs/namespace.c:mntput_no_expire(struct mount *mnt)
fs/namespace.c:select_submounts(struct mount *parent, struct list_head *graveyard)
fs/namespace.c:shrink_submounts(struct mount *mnt)
fs/namespace.c:umount_tree(struct mount *mnt, enum umount_tree_flags how)
fs/sysfs/dir.c:sysfs_create_dir_ns(struct kobject *kobj, const void *ns)
fs/sysfs/dir.c:sysfs_create_mount_point(struct kobject *parent_kobj, const char *name)
fs/sysfs/dir.c:sysfs_move_dir_ns(struct kobject *kobj, struct kobject *new_parent_kobj, const void *new_ns)
fs/sysfs/dir.c:sysfs_remove_dir(struct kobject *kobj)
fs/kernfs/dir.c:kernfs_add_one(struct kernfs_node *kn)
fs/kernfs/dir.c:kernfs_create_dir_ns()
fs/kernfs/dir.c:kernfs_get_active()
fs/kernfs/dir.c:kernfs_iop_lookup()
fs/kernfs/dir.c:kernfs_iop_mkdir(struct inode *dir, struct dentry *dentry, umode_t mode)
fs/kernfs/dir.c:kernfs_iop_rmdir(struct inode *dir, struct dentry *dentry)
fs/kernfs/dir.c:kernfs_put(struct kernfs_node *kn)
fs/kernfs/dir.c:kernfs_remove_by_name_ns(struct kernfs_node *parent, const char *name, const void *ns)
fs/fsopen.c:fscontext_create_fd(struct fs_context *fc, unsigned int o_flags)
fs/fsopen.c:vfs_fsconfig_locked(struct fs_context *fc, int cmd, struct fs_parameter *param)
func for case 32577e96d88447ded2d3b76d71254fb855245837
drivers/video/fbdev/core/bitblit.c:bit_bmove(struct vc_data *vc, struct fb_info *info, int sy, int sx, int dy, int dx, int height, int width)
drivers/video/fbdev/core/bitblit.c:bit_clear(struct vc_data *vc, struct fb_info *info, int sy, int sx, int height, int width)
drivers/video/fbdev/core/bitblit.c:bit_clear_margins(struct vc_data *vc, struct fb_info *info, int color, int bottom_only)
drivers/video/fbdev/core/bitblit.c:bit_cursor(struct vc_data *vc, struct fb_info *info, int mode, int fg, int bg)
drivers/video/fbdev/core/bitblit.c:bit_putcs(struct vc_data *vc, struct fb_info *info, const unsigned short *s, int count, int yy, int xx, int fg, int bg)
drivers/video/fbdev/core/bitblit.c:bit_putcs_aligned(struct vc_data *vc, struct fb_info *info, const u16 *s, u32 attr, u32 cnt, u32 d_pitch, u32 s_pitch, u32 cellsize, struct fb_image *image, u8 *buf, u8 *dst)
drivers/video/fbdev/core/bitblit.c:bit_putcs_unaligned(struct vc_data *vc, struct fb_info *info, const u16 *s, u32 attr, u32 cnt, u32 d_pitch, u32 s_pitch, u32 cellsize, struct fb_image *image, u8 *buf, u8 *dst)
drivers/video/fbdev/core/bitblit.c:update_attr(u8 *dst, u8 *src, int attribute, struct vc_data *vc)
VT_RESIZEX()
drivers/tty/vt/vt.c:con_flush_chars(struct tty_struct *tty)
drivers/tty/vt/vt.c:do_con_write(struct tty_struct *tty, const unsigned char *buf, int count)
drivers/tty/vt/vt.c:resize_screen(struct vc_data *vc, int width, int height, int user)
drivers/tty/vt/vt.c:vc_allocate(unsigned int currcons)
drivers/tty/vt/vt.c:vc_con_write_normal(struct vc_data *vc, int tc, int c, struct vc_draw_region *draw)
drivers/tty/vt/vt.c:vc_deallocate()
drivers/tty/vt/vt.c:vc_do_resize(struct tty_struct *tty, struct vc_data *vc, unsigned int cols, unsigned int lines)
drivers/tty/vt/vt.c:vc_init(struct vc_data *vc, unsigned int rows, unsigned int cols, int do_clear)
vc_uniscr_()
drivers/tty/vt/vt.c:vc_uniscr_alloc()
drivers/tty/vt/vt.c:vc_uniscr_check(struct vc_data *vc)
drivers/tty/vt/vt.c:vc_uniscr_copy_area(struct uni_screen *dst, unsigned int dst_cols, unsigned int dst_rows, struct uni_screen *src, unsigned int src_cols, unsigned int src_top_row, unsigned int src_bot_row)
drivers/tty/vt/vt.c:vc_uniscr_delete(struct vc_data *vc, unsigned int nr)
drivers/tty/vt/vt.c:vc_uniscr_insert(struct vc_data *vc, unsigned int nr)
drivers/tty/vt/vt.c:vc_uniscr_scroll(struct vc_data *vc, unsigned int t, unsigned int b, enum con_scroll dir, unsigned int nr)
drivers/tty/vt/vt.c:vt_resize(struct tty_struct *tty, struct winsize *ws)
VT_RESIZEX()
drivers/video/fbdev/core/bitblit.c:bit_putcs(struct vc_data *vc, struct fb_info *info, const unsigned short *s, int count, int yy, int xx, int fg, int bg)
drivers/video/fbdev/core/fbcon.c:fbcon_bmove(struct vc_data *vc, int sy, int sx, int dy, int dx, int height, int width)
drivers/video/fbdev/core/fbcon.c:fbcon_bmove_rec(struct vc_data *vc, struct fbcon_display *p, int sy, int sx, int dy, int dx, int height, int width, u_int y_break)
drivers/video/fbdev/core/fbcon.c:fbcon_fb_registered(struct fb_info *info)
drivers/video/fbdev/core/fbcon.c:fbcon_fb_unbind(struct fb_info *info)
drivers/video/fbdev/core/fbcon.c:fbcon_fb_unregistered(struct fb_info *info)
drivers/video/fbdev/core/fbcon.c:fbcon_modechanged(struct fb_info *info)
drivers/video/fbdev/core/fbcon.c:fbcon_new_modelist(struct fb_info *info)
drivers/video/fbdev/core/fbcon.c:fbcon_putcs(struct vc_data *vc, const unsigned short *s, int count, int ypos, int xpos)
drivers/video/fbdev/core/fbcon.c:fbcon_redraw(struct vc_data *vc, struct fbcon_display *p, int line, int count, int offset)
drivers/video/fbdev/core/fbcon.c:fbcon_redraw_blit(struct vc_data *vc, struct fb_info *info, struct fbcon_display *p, int line, int count, int ycount)
drivers/video/fbdev/core/fbcon.c:fbcon_redraw_move(struct vc_data *vc, struct fbcon_display *p, int line, int count, int dy)
drivers/video/fbdev/core/fbcon.c:fbcon_resize(struct vc_data *vc, unsigned int width, unsigned int height, unsigned int user)
drivers/video/fbdev/core/fbcon.c:fbcon_scroll(struct vc_data *vc, unsigned int t, unsigned int b, enum con_scroll dir, unsigned int count)
drivers/video/fbdev/core/fbcon.c:fbcon_set_disp(struct fb_info *info, struct fb_var_screeninfo *var, int unit)
drivers/video/fbdev/core/fbcon.c:fbcon_switch(struct vc_data *vc)
drivers/tty/vt/vt_ioctl.c:change_console(struct vc_data *new_vc))
drivers/tty/vt/vt_ioctl.c:complete_change_console(struct vc_data *vc))
drivers/tty/vt/vt_ioctl.c:vt_io_ioctl(struct vc_data *vc, unsigned int cmd, void __user *up, bool perm))
drivers/tty/vt/vt_ioctl.c:vt_ioctl(struct tty_struct *tty, unsigned int cmd, unsigned long arg))
drivers/tty/vt/vt_ioctl.c:vt_k_ioctl(struct tty_struct *tty, unsigned int cmd, unsigned long arg, bool perm)
drivers/tty/vt/vt_ioctl.c:vt_move_to_console(unsigned int vt, int alloc))
drivers/tty/vt/vt_ioctl.c:vt_resizex(struct vc_data *vc, struct vt_consize __user *cs))
drivers/tty/vt/vt_ioctl.c:vt_setactivate(struct vt_setactivate __user *sa))
security/tomoyo/domain.c:tomoyo_check_acl(struct tomoyo_request_info *r, bool (*check_entry)(struct tomoyo_request_info *, const struct tomoyo_acl_info *))
security/tomoyo/domain.c:tomoyo_dump_page(struct linux_binprm *bprm, unsigned long pos, struct tomoyo_page_dump *dump)
security/tomoyo/domain.c:tomoyo_environ(struct tomoyo_execve *ee)
security/tomoyo/domain.c:tomoyo_find_next_domain(struct linux_binprm *bprm)
security/tomoyo/domain.c:tomoyo_scan_transition(const struct list_head *list, const struct tomoyo_path_info *domainname, const struct tomoyo_path_info *program, const char *last_name, const enum tomoyo_transition_type type)
security/tomoyo/domain.c:tomoyo_transition_type(const struct tomoyo_policy_namespace *ns, const struct tomoyo_path_info *domainname, const struct tomoyo_path_info *program)
security/tomoyo/domain.c:tomoyo_update_domain(struct tomoyo_acl_info *new_entry, const int size, struct tomoyo_acl_param *param, bool (*check_duplicate)(const struct tomoyo_acl_info *, const struct tomoyo_acl_info *), bool (*merge_duplicate)(struct tomoyo_acl_info *, struct tomoyo_acl_info *, const bool))
security/tomoyo/domain.c:tomoyo_update_policy(struct tomoyo_acl_head *new_entry, const int size, struct tomoyo_acl_param *param, bool (*check_duplicate)(const struct tomoyo_acl_head *, const struct tomoyo_acl_head *))
security/tomoyo/common.c:tomoyo_add_entry(struct tomoyo_domain_info *domain, char *header)
security/tomoyo/common.c:tomoyo_assign_profile()
security/tomoyo/common.c:tomoyo_delete_domain(char *domainname)
security/tomoyo/common.c:tomoyo_init_policy_namespace(struct tomoyo_policy_namespace *ns)
security/tomoyo/common.c:tomoyo_set_mode(char *name, const char *value, struct tomoyo_profile *profile)
security/tomoyo/common.c:tomoyo_supervisor(struct tomoyo_request_info *r, const char *fmt, ...)
security/tomoyo/common.c:tomoyo_write_domain(struct tomoyo_io_buffer *head)
security/tomoyo/common.c:tomoyo_write_domain2(struct tomoyo_policy_namespace *ns, struct list_head *list, char *data, const bool is_delete)
include/linux/fb.h:__fb_pad_aligned_buffer(u8 *dst, u32 d_pitch, u8 *src, u32 s_pitch, u32 height)
include/linux/fb.h:fb_be_math(struct fb_info *info)
__kasan_check_byte()
__kasan_krealloc()
__kasan_slab_free_mempool()
mm/slab.c:___cache_free(struct kmem_cache *cachep, void *objp, unsigned long caller)
mm/slab.c:__cache_free(struct kmem_cache *cachep, void *objp, unsigned long caller)
mm/slab.c:kmem_cache_free(struct kmem_cache *cachep, void *objp)
drivers/tty/tty_io.c:tty_do_resize(struct tty_struct *tty, struct winsize *ws)
drivers/tty/tty_io.c:tty_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
drivers/tty/tty_io.c:tty_release(struct inode *inode, struct file *filp)
func for case 32c85d199d85c11202246570956a2cbe272f235a
net/wireless/reg.c:__reg_process_hint_country_ie(struct wiphy *wiphy, struct regulatory_request *country_ie_request)
net/wireless/reg.c:__reg_process_hint_user(struct regulatory_request *user_request)
net/wireless/reg.c:is_user_regdom_saved(void)
net/wireless/reg.c:query_regdb(const char *alpha2)
net/wireless/reg.c:reg_process_hint_country_ie(struct wiphy *wiphy, struct regulatory_request *country_ie_request)
net/wireless/reg.c:reg_process_hint_user(struct regulatory_request *user_request)
net/wireless/reg.c:reg_query_database(struct regulatory_request *request)
net/wireless/reg.c:reg_set_rd_user(const struct ieee80211_regdomain *rd, struct regulatory_request *user_request)
net/wireless/reg.c:regulatory_hint(struct wiphy *wiphy, const char *alpha2)
net/wireless/reg.c:regulatory_hint_country_ie(struct wiphy *wiphy, enum nl80211_band band, const u8 *country_ie, u8 country_ie_len)
net/wireless/reg.c:regulatory_hint_user(const char *alpha2, enum nl80211_user_reg_hint_type user_reg_hint_type)
net/wireless/reg.c:regulatory_init_db(void)
net/wireless/reg.c:restore_alpha2(char *alpha2, bool reset_user)
net/wireless/reg.c:restore_regulatory_settings(bool reset_user, bool cached)
net/wireless/reg.c:set_regdom(const struct ieee80211_regdomain *rd, enum ieee80211_regd_source regd_src)
NL80211_CMD_REQ_SET_REG()
net/wireless/nl80211.c:__nl80211_set_channel(struct cfg80211_registered_device *rdev, struct net_device *dev, struct genl_info *info)
net/wireless/nl80211.c:nl80211_del_interface(struct sk_buff *skb, struct genl_info *info)
net/wireless/nl80211.c:nl80211_get_reg_do(struct sk_buff *skb, struct genl_info *info)
net/wireless/nl80211.c:nl80211_get_reg_dump(struct sk_buff *skb, struct netlink_callback *cb)
net/wireless/nl80211.c:nl80211_new_interface(struct sk_buff *skb, struct genl_info *info)
net/wireless/nl80211.c:nl80211_parse_chandef(struct cfg80211_registered_device *rdev, struct genl_info *info, struct cfg80211_chan_def *chandef)
net/wireless/nl80211.c:nl80211_put_regdom(const struct ieee80211_regdomain *regdom, struct sk_buff *msg)
net/wireless/nl80211.c:nl80211_req_set_reg(struct sk_buff *skb, struct genl_info *info)
net/wireless/nl80211.c:nl80211_send_iface(struct sk_buff *msg, u32 portid, u32 seq, int flags, struct cfg80211_registered_device *rdev, struct wireless_dev *wdev, enum nl80211_commands cmd)
net/wireless/nl80211.c:nl80211_send_regdom(struct sk_buff *msg, struct netlink_callback *cb, u32 seq, int flags, struct wiphy *wiphy, const struct ieee80211_regdomain *regdom)
net/wireless/nl80211.c:nl80211_send_wiphy(struct cfg80211_registered_device *rdev, enum nl80211_commands cmd, struct sk_buff *msg, u32 portid, u32 seq, int flags, struct nl80211_dump_wiphy_state *state)
net/wireless/nl80211.c:nl80211_set_interface(struct sk_buff *skb, struct genl_info *info)
net/wireless/nl80211.c:nl80211_set_reg(struct sk_buff *skb, struct genl_info *info)
net/wireless/nl80211.c:nl80211_set_wiphy(struct sk_buff *skb, struct genl_info *info)
net/wireless/nl80211.c:parse_reg_rule(struct nlattr *tb[], struct ieee80211_reg_rule *reg_rule)
net/wireless/reg.c:restore_alpha2(char *alpha2, bool reset_user)
net/wireless/reg.c:restore_regulatory_settings(bool reset_user, bool cached)
_cfg80211_unregister_wdev()
net/wireless/core.c:cfg80211_dev_free(struct cfg80211_registered_device *rdev)
net/wireless/core.c:cfg80211_init(void)
net/wireless/core.c:cfg80211_init_wdev(struct cfg80211_registered_device *rdev, struct wireless_dev *wdev)
cfg80211_leave()
cfg80211_register_netdevice()
cfg80211_register_wdev()
net/wireless/core.c:cfg80211_shutdown_all_interfaces(struct wiphy *wiphy)
net/wireless/core.c:cfg80211_stop_iface(struct wiphy *wiphy, struct wireless_dev *wdev, gfp_t gfp)
net/wireless/core.c:cfg80211_stop_nan(struct cfg80211_registered_device *rdev, struct wireless_dev *wdev)
net/wireless/core.c:cfg80211_stop_p2p_device(struct cfg80211_registered_device *rdev, struct wireless_dev *wdev)
net/wireless/core.c:cfg80211_switch_netns(struct cfg80211_registered_device *rdev, struct net *net)
net/wireless/core.c:wiphy_new_nm()
net/wireless/core.c:wiphy_register(struct wiphy *wiphy)
net/wireless/core.c:wiphy_unregister(struct wiphy *wiphy)
net/wireless/util.c:cfg80211_change_iface(struct cfg80211_registered_device *rdev, struct net_device *dev, enum nl80211_iftype ntype, struct vif_params *params)
net/wireless/util.c:cfg80211_process_wdev_events(struct wireless_dev *wdev)
net/wireless/util.c:cfg80211_supported_cipher_suite(struct wiphy *wiphy, u32 cipher)
net/wireless/util.c:cfg80211_upload_connect_keys(struct wireless_dev *wdev)
cfg80211_valid_key_idx()
net/wireless/util.c:cfg80211_validate_key_settings(struct cfg80211_registered_device *rdev, struct key_params *params, int key_idx, bool pairwise, const u8 *mac_addr)
net/wireless/util.c:ieee80211_amsdu_to_8023s(struct sk_buff *skb, struct sk_buff_head *list, const u8 *addr, enum nl80211_iftype iftype, const unsigned int extra_headroom, const u8 *check_da, const u8 *check_sa)
net/wireless/util.c:ieee80211_data_to_8023_exthdr(struct sk_buff *skb, struct ethhdr *ehdr, const u8 *addr, enum nl80211_iftype iftype, u8 data_offset)
include/net/cfg80211.h:cfg80211_connect_bss(struct net_device *dev, const u8 *bssid, struct cfg80211_bss *bss, const u8 *req_ie, size_t req_ie_len, const u8 *resp_ie, size_t resp_ie_len, int status, gfp_t gfp, enum nl80211_timeout_reason timeout_reason)
include/net/cfg80211.h:cfg80211_inform_bss()
include/net/cfg80211.h:cfg80211_inform_bss_frame()
net/wireless/nl80211.c:cfg80211_mgmt_tx_status(struct wireless_dev *wdev, u64 cookie, const u8 *buf, size_t len, bool ack, gfp_t gfp)
cfg80211_rx_mgmt()
cfg80211_rx_mgmt_khz()
include/net/cfg80211.h:wiphy_ext_feature_isset(struct wiphy *wiphy, enum nl80211_ext_feature_index ftidx)
include/net/cfg80211.h:wiphy_ext_feature_set(struct wiphy *wiphy, enum nl80211_ext_feature_index ftidx)
net/netlink/af_netlink.c:netlink_getsockopt(struct socket *sock, int level, int optname, char __user *optval, int __user *optlen)
net/netlink/af_netlink.c:netlink_sendmsg(struct socket *sock, struct msghdr *msg, size_t len)
net/netlink/af_netlink.c:netlink_setsockopt(struct socket *sock, int level, int optname, char __user *optval, unsigned int optlen)
net/netlink/genetlink.c:genl_family_rcv_msg(const struct genl_family *family, struct sk_buff *skb, struct nlmsghdr *nlh, struct netlink_ext_ack *extack)
net/netlink/genetlink.c:genl_family_rcv_msg_doit(const struct genl_family *family, struct sk_buff *skb, struct nlmsghdr *nlh, struct netlink_ext_ack *extack, const struct genl_ops *ops, int hdrlen, struct net *net)
net/netlink/genetlink.c:genl_rcv_msg(struct sk_buff *skb, struct nlmsghdr *nlh, struct netlink_ext_ack *extack)
lib/dump_stack.c:dump_stack(void)
net/wireless/reg.c:is_user_regdom_saved(void)
net/wireless/reg.c:restore_alpha2(char *alpha2, bool reset_user)
net/wireless/reg.c:restore_regulatory_settings(bool reset_user, bool cached)
func for case 33e08264ba252fcf3ed89b69fd088ac976363535
fs/udf/inode.c:__udf_add_aext(struct inode *inode, struct extent_position *epos, struct kernel_lb_addr *eloc, uint32_t elen, int inc)
fs/udf/inode.c:udf_add_aext(struct inode *inode, struct extent_position *epos, struct kernel_lb_addr *eloc, uint32_t elen, int inc)
fs/udf/inode.c:udf_current_aext(struct inode *inode, struct extent_position *epos, struct kernel_lb_addr *eloc, uint32_t *elen, int inc)
fs/udf/inode.c:udf_delete_aext(struct inode *inode, struct extent_position epos)
fs/udf/inode.c:udf_do_extend_file(struct inode *inode, struct extent_position *last_pos, struct kernel_long_ad *last_ext, loff_t new_block_bytes)
fs/udf/inode.c:udf_extend_file(struct inode *inode, loff_t newsize)
fs/udf/inode.c:udf_insert_aext(struct inode *inode, struct extent_position epos, struct kernel_lb_addr neloc, uint32_t nelen)
fs/udf/inode.c:udf_merge_extents(struct inode *inode, struct kernel_long_ad *laarr, int *endnum)
fs/udf/inode.c:udf_next_aext(struct inode *inode, struct extent_position *epos, struct kernel_lb_addr *eloc, uint32_t *elen, int inc)
fs/udf/inode.c:udf_prealloc_extents(struct inode *inode, int c, int lastblock, struct kernel_long_ad *laarr, int *endnum)
fs/udf/inode.c:udf_setsize(struct inode *inode, loff_t newsize)
fs/udf/inode.c:udf_setup_indirect_aext(struct inode *inode, udf_pblk_t block, struct extent_position *epos)
fs/udf/inode.c:udf_split_extents(struct inode *inode, int *c, int offset, udf_pblk_t newblocknum, struct kernel_long_ad *laarr, int *endnum)
fs/udf/inode.c:udf_update_extents(struct inode *inode, struct kernel_long_ad *laarr, int startnum, int endnum, struct extent_position *epos)
fs/udf/inode.c:udf_write_aext(struct inode *inode, struct extent_position *epos, struct kernel_lb_addr *eloc, uint32_t elen, int inc)
fs/udf/file.c:__udf_adinicb_readpage(struct page *page)
fs/udf/file.c:udf_adinicb_write_begin(struct file *file, struct address_space *mapping, loff_t pos, unsigned len, struct page **pagep, void **fsdata)
fs/udf/file.c:udf_adinicb_writepage(struct page *page, struct writeback_control *wbc)
fs/udf/file.c:udf_file_write_iter(struct kiocb *iocb, struct iov_iter *from)
fs/udf/file.c:udf_ioctl(struct file *filp, unsigned int cmd, unsigned long arg)
fs/udf/file.c:udf_release_file(struct inode *inode, struct file *filp)
fs/udf/file.c:udf_setattr(struct user_namespace *mnt_userns, struct dentry *dentry, struct iattr *attr)
fs/udf/truncate.c:extent_trunc(struct inode *inode, struct extent_position *epos, struct kernel_lb_addr *eloc, int8_t etype, uint32_t elen, uint32_t nelen)
fs/udf/truncate.c:udf_discard_prealloc(struct inode *inode)
fs/udf/truncate.c:udf_truncate_extents(struct inode *inode)
fs/udf/truncate.c:udf_truncate_tail_extent(struct inode *inode)
fs/attr.c:chgrp_ok(struct user_namespace *mnt_userns, const struct inode *inode, vfsgid_t ia_vfsgid)
fs/attr.c:chown_ok(struct user_namespace *mnt_userns, const struct inode *inode, vfsuid_t ia_vfsuid)
fs/attr.c:inode_newsize_ok(const struct inode *inode, loff_t offset)
fs/attr.c:may_setattr(struct user_namespace *mnt_userns, struct inode *inode, unsigned int ia_valid)
fs/attr.c:notify_change(struct user_namespace *mnt_userns, struct dentry *dentry, struct iattr *attr, struct inode **delegated_inode)
fs/attr.c:setattr_copy(struct user_namespace *mnt_userns, struct inode *inode, const struct iattr *attr)
fs/attr.c:setattr_prepare(struct user_namespace *mnt_userns, struct dentry *dentry, struct iattr *attr)
fs/open.c:chmod_common(const struct path *path, umode_t mode)
fs/open.c:do_fchmodat(int dfd, const char __user *filename, umode_t mode)
fs/open.c:do_fchownat(int dfd, const char __user *filename, uid_t user, gid_t group, int flag)
fs/open.c:do_sys_ftruncate(unsigned int fd, loff_t length, int small)
fs/open.c:do_sys_truncate(const char __user *pathname, loff_t length)
fs/open.c:do_truncate(struct user_namespace *mnt_userns, struct dentry *dentry, loff_t length, unsigned int time_attrs, struct file *filp)
fs/open.c:vfs_fallocate(struct file *file, int mode, loff_t offset, loff_t len)
fs/open.c:vfs_truncate(const struct path *path, loff_t length)
fs/udf/super.c:udf_fill_super(struct super_block *sb, void *options, int silent)
fs/udf/super.c:udf_load_logicalvol(struct super_block *sb, sector_t block, struct kernel_lb_addr *fileset)
fs/udf/super.c:udf_load_metadata_files(struct super_block *sb, int partition, int type1_index)
fs/udf/super.c:udf_load_partdesc(struct super_block *sb, sector_t block)
fs/udf/super.c:udf_load_pvoldesc(struct super_block *sb, sector_t block)
fs/udf/super.c:udf_load_vat(struct super_block *sb, int p_index, int type1_index)
fs/udf/super.c:udf_load_vrs(struct super_block *sb, struct udf_options *uopt, int silent, struct kernel_lb_addr *fileset)
fs/udf/super.c:udf_parse_options(char *options, struct udf_options *uopt, bool remount)
fs/udf/misc.c:udf_add_extendedattr()
fs/udf/misc.c:udf_get_extendedattr()
fs/udf/misc.c:udf_new_tag(char *data, uint16_t ident, uint16_t version, uint16_t snum, uint32_t loc, int length)
fs/udf/misc.c:udf_read_tagged()
fs/udf/misc.c:udf_tag_checksum(const struct tag *t)
fs/udf/misc.c:udf_update_tag(char *data, int length)
fs/namei.c:do_filp_open()
fs/namei.c:handle_truncate(struct user_namespace *mnt_userns, struct file *filp)
fs/namei.c:may_open(struct user_namespace *mnt_userns, const struct path *path, int acc_mode, int flag)
fs/udf/namei.c:udf_add_nondir(struct dentry *dentry, struct inode *inode)
fs/udf/namei.c:udf_create(struct user_namespace *mnt_userns, struct inode *dir, struct dentry *dentry, umode_t mode, bool excl)
udf_fiiter_add_entry()
fs/udf/dir.c:udf_readdir(struct file *file, struct dir_context *ctx)
func for case 35ca150acc791b7283bb643a0edbbc185aa4a69e
net/smc/smc_ib.c:smc_ib_add_dev(struct ib_device *ibdev)
net/smc/smc_ib.c:smc_ib_create_queue_pair(struct smc_link *lnk)
net/smc/smc_ib.c:smc_ib_determine_gid(struct smc_ib_device *smcibdev, u8 ibport, unsigned short vlan_id, u8 gid[], u8 *sgid_index)
net/smc/smc_ib.c:smc_ib_get_memory_region(struct ib_pd *pd, int access_flags, struct smc_buf_desc *buf_slot, u8 link_idx)
net/smc/smc_ib.c:smc_ib_global_event_handler(struct ib_event_handler *handler, struct ib_event *ibevent)
net/smc/smc_ib.c:smc_ib_map_mr_sg(struct smc_buf_desc *buf_slot, u8 link_idx)
net/smc/smc_ib.c:smc_ib_modify_qp_rts(struct smc_link *lnk)
net/smc/smc_ib.c:smc_ib_port_event_work(struct work_struct *work)
net/smc/smc_ib.c:smc_ib_qp_event_handler(struct ib_event *ibevent, void *priv)
net/smc/smc_ib.c:smc_ib_ready_link(struct smc_link *lnk)
net/smc/smc_ib.c:smc_ib_remember_port_attr(struct smc_ib_device *smcibdev, u8 ibport)
net/smc/smc_ib.c:smc_ib_remove_dev(struct ib_device *ibdev, void *client_data)
net/smc/smc_ib.c:smc_ib_setup_per_ibdev(struct smc_ib_device *smcibdev)
net/smc/smc_ib.c:smc_nl_handle_smcr_dev(struct smc_ib_device *smcibdev, struct sk_buff *skb, struct netlink_callback *cb)
net/smc/smc_ib.c:smc_nl_prep_smcr_dev(struct smc_ib_devices *dev_list, struct sk_buff *skb, struct netlink_callback *cb)
net/netlink/af_netlink.c:__netlink_dump_start(struct sock *ssk, struct sk_buff *skb, const struct nlmsghdr *nlh, struct netlink_dump_control *control)
net/netlink/genetlink.c:genl_family_rcv_msg(const struct genl_family *family, struct sk_buff *skb, struct nlmsghdr *nlh, struct netlink_ext_ack *extack)
net/netlink/genetlink.c:genl_family_rcv_msg_dumpit(const struct genl_family *family, struct sk_buff *skb, struct nlmsghdr *nlh, struct netlink_ext_ack *extack, const struct genl_ops *ops, int hdrlen, struct net *net)
net/netlink/genetlink.c:genl_lock_dumpit(struct sk_buff *skb, struct netlink_callback *cb)
genl_rcv()
net/netlink/genetlink.c:genl_rcv_msg(struct sk_buff *skb, struct nlmsghdr *nlh, struct netlink_ext_ack *extack)
net/netlink/af_netlink.c:netlink_dump(struct sock *sk)
net/netlink/af_netlink.c:netlink_rcv_skb(struct sk_buff *skb, int (*cb)(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *))
net/netlink/af_netlink.c:netlink_unicast_kernel(struct sock *sk, struct sk_buff *skb, struct sock *ssk)
net/smc/smc_core.h:smc_gid_be16_convert(__u8 *buf, u8 *gid_raw)
net/smc/smc_core.h:smc_lgr_find_conn()
net/smc/smc_ib.c:smc_nl_handle_smcr_dev(struct smc_ib_device *smcibdev, struct sk_buff *skb, struct netlink_callback *cb)
net/smc/smc_ib.c:smc_nl_prep_smcr_dev(struct smc_ib_devices *dev_list, struct sk_buff *skb, struct netlink_callback *cb)
net/smc/smc_core.h:smc_set_pci_values(struct pci_dev *pci_dev, struct smc_pci_dev *smc_dev)
smcr_nl_get_device()
net/netlink/af_netlink.c:__netlink_dump_start(struct sock *ssk, struct sk_buff *skb, const struct nlmsghdr *nlh, struct netlink_dump_control *control)
net/netlink/af_netlink.c:__netlink_sendskb(struct sock *sk, struct sk_buff *skb)
net/netlink/af_netlink.c:netlink_alloc_large_skb()
net/netlink/af_netlink.c:netlink_attachskb(struct sock *sk, struct sk_buff *skb, long *timeo, struct sock *ssk)
net/netlink/af_netlink.c:netlink_broadcast_filtered(struct sock *ssk, struct sk_buff *skb, u32 portid, u32 group, gfp_t allocation, int (*filter)(struct sock *dsk, struct sk_buff *skb, void *data), void *filter_data)
net/netlink/af_netlink.c:netlink_dump(struct sock *sk)
net/netlink/af_netlink.c:netlink_getsockbyportid()
net/netlink/af_netlink.c:netlink_insert(struct sock *sk, u32 portid)
net/netlink/af_netlink.c:netlink_lookup()
net/netlink/af_netlink.c:netlink_rcv_skb(struct sk_buff *skb, int (*cb)(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *))
net/netlink/af_netlink.c:netlink_sendmsg(struct socket *sock, struct msghdr *msg, size_t len)
net/netlink/af_netlink.c:netlink_skb_set_owner_r(struct sk_buff *skb, struct sock *sk)
net/netlink/af_netlink.c:netlink_trim()
net/netlink/af_netlink.c:netlink_unicast(struct sock *ssk, struct sk_buff *skb, u32 portid, int nonblock)
net/netlink/af_netlink.c:netlink_unicast_kernel(struct sock *sk, struct sk_buff *skb, struct sock *ssk)
net/netlink/genetlink.c:genl_family_rcv_msg(const struct genl_family *family, struct sk_buff *skb, struct nlmsghdr *nlh, struct netlink_ext_ack *extack)
net/netlink/genetlink.c:genl_family_rcv_msg_attrs_parse()
net/netlink/genetlink.c:genl_family_rcv_msg_doit(const struct genl_family *family, struct sk_buff *skb, struct nlmsghdr *nlh, struct netlink_ext_ack *extack, const struct genl_ops *ops, int hdrlen, struct net *net)
net/netlink/genetlink.c:genl_family_rcv_msg_dumpit(const struct genl_family *family, struct sk_buff *skb, struct nlmsghdr *nlh, struct netlink_ext_ack *extack, const struct genl_ops *ops, int hdrlen, struct net *net)
net/netlink/genetlink.c:genl_lock_dumpit(struct sk_buff *skb, struct netlink_callback *cb)
net/netlink/genetlink.c:genl_rcv_msg(struct sk_buff *skb, struct nlmsghdr *nlh, struct netlink_ext_ack *extack)
net/netlink/genetlink.c:genl_start(struct netlink_callback *cb)
net/netlink/genetlink.c:genlmsg_put()
drivers/infiniband/core/device.c:ib_device_check_mandatory(struct ib_device *device)
drivers/infiniband/core/device.c:ib_device_get_by_netdev()
drivers/infiniband/core/device.c:ib_device_get_netdev()
drivers/infiniband/core/device.c:ib_device_set_netdev(struct ib_device *ib_dev, struct net_device *ndev, unsigned int port)
drivers/infiniband/core/device.c:ib_enum_all_devs(nldev_callback nldev_cb, struct sk_buff *skb, struct netlink_callback *cb)
drivers/infiniband/core/device.c:ib_register_device(struct ib_device *device, const char *name, struct device *dma_device)
ib_unregister_device()
drivers/infiniband/core/device.c:setup_device(struct ib_device *device)
net/socket.c:____sys_sendmsg(struct socket *sock, struct msghdr *msg_sys, unsigned int flags, struct used_address *used_address, unsigned int allowed_msghdr_flags)
net/socket.c:___sys_sendmsg(struct socket *sock, struct user_msghdr __user *msg, struct msghdr *msg_sys, unsigned int flags, struct used_address *used_address, unsigned int allowed_msghdr_flags)
net/socket.c:__sock_create(struct net *net, int family, int type, int protocol, struct socket **res, int kern)
net/socket.c:__sys_sendmsg(int fd, struct user_msghdr __user *msg, unsigned int flags, bool forbid_cmsg_compat)
net/socket.c:__sys_sendto(int fd, void __user *buff, size_t len, unsigned int flags, struct sockaddr __user *addr, int addr_len)
net/socket.c:__sys_socket(int family, int type, int protocol)
net/socket.c:sock_alloc()
net/socket.c:sock_map_fd(struct socket *sock, int flags)
include/linux/netlink.h:netlink_skb_clone()
include/linux/netlink.h:nl_set_extack_cookie_u64(struct netlink_ext_ack *extack, u64 cookie)
smc_ib()
net/smc/smc_ib.c:smc_nl_handle_smcr_dev(struct smc_ib_device *smcibdev, struct sk_buff *skb, struct netlink_callback *cb)
net/smc/smc_pnet.c:smc_pnet_apply_ib(struct smc_ib_device *ib_dev, u8 ib_port, char *pnet_name)
net/smc/smc_pnet.c:smc_pnet_find_ib()
net/smc/smc_pnet.c:smc_pnet_find_ndev_pnetid_by_table(struct net_device *ndev, u8 *pnetid)
arch/x86/entry/common.c:do_syscall_64(unsigned long nr, struct pt_regs *regs)
do_syscall_x32()
do_syscall_x64()
func for case 35dd38010e383ee37d27b39f6b50eb25b4c92dd2
drivers/usb/core/hub.c:hub_activate(struct usb_hub *hub, enum hub_activation_type type)
drivers/usb/core/hub.c:hub_configure(struct usb_hub *hub, struct usb_endpoint_descriptor *endpoint)
drivers/usb/core/hub.c:hub_disconnect(struct usb_interface *intf)
drivers/usb/core/hub.c:hub_disconnect_children(struct usb_device *udev)
drivers/usb/core/hub.c:hub_event(struct work_struct *work)
drivers/usb/core/hub.c:hub_free_dev(struct usb_device *udev)
drivers/usb/core/hub.c:hub_port_connect(struct usb_hub *hub, int port1, u16 portstatus, u16 portchange)
drivers/usb/core/hub.c:hub_port_debounce(struct usb_hub *hub, int port1, bool must_be_connected)
drivers/usb/core/hub.c:hub_port_disable(struct usb_hub *hub, int port1, int set_state)
drivers/usb/core/hub.c:hub_port_init(struct usb_hub *hub, struct usb_device *udev, int port1, int retry_counter)
drivers/usb/core/hub.c:hub_port_logical_disconnect(struct usb_hub *hub, int port1)
drivers/usb/core/hub.c:hub_port_reset(struct usb_hub *hub, int port1, struct usb_device *udev, unsigned int delay, bool warm)
drivers/usb/core/hub.c:hub_port_wait_reset(struct usb_hub *hub, int port1, struct usb_device *udev, unsigned int delay, bool warm)
drivers/usb/core/hub.c:hub_quiesce(struct usb_hub *hub, enum hub_quiescing_type type)
drivers/usb/core/hub.c:usb_reset_device(struct usb_device *udev)
kernel/workqueue.c:__flush_work(struct work_struct *work, bool from_cancel)
kernel/workqueue.c:__flush_workqueue(struct workqueue_struct *wq)
kernel/workqueue.c:alloc_worker()
kernel/workqueue.c:check_flush_dependency(struct workqueue_struct *target_wq, struct work_struct *target_work)
kernel/workqueue.c:create_worker()
kernel/workqueue.c:drain_workqueue(struct workqueue_struct *wq)
kernel/workqueue.c:flush_workqueue_prep_pwqs(struct workqueue_struct *wq, int flush_color, int work_color)
kernel/workqueue.c:insert_wq_barrier(struct pool_workqueue *pwq, struct wq_barrier *barr, struct work_struct *target, struct worker *worker)
kernel/workqueue.c:manage_workers(struct worker *worker)
kernel/workqueue.c:rescuer_thread(void *__rescuer)
kernel/workqueue.c:set_worker_dying(struct worker *worker, struct list_head *list)
kernel/workqueue.c:start_flush_work(struct work_struct *work, struct wq_barrier *barr, bool from_cancel)
kernel/workqueue.c:worker_attach_to_pool(struct worker *worker, struct worker_pool *pool)
kernel/workqueue.c:worker_detach_from_pool(struct worker *worker)
kernel/workqueue.c:worker_thread(void *__worker)
drivers/usb/core/driver.c:usb_driver_claim_interface(struct usb_driver *driver, struct usb_interface *iface, void *data)
drivers/usb/core/driver.c:usb_driver_release_interface(struct usb_driver *driver, struct usb_interface *iface)
drivers/usb/core/driver.c:usb_forced_unbind_intf(struct usb_interface *intf)
drivers/usb/core/driver.c:usb_match_device(struct usb_device *dev, const struct usb_device_id *id)
drivers/usb/core/driver.c:usb_match_one_id(struct usb_interface *interface, const struct usb_device_id *id)
drivers/usb/core/driver.c:usb_match_one_id_intf(struct usb_device *dev, struct usb_host_interface *intf, const struct usb_device_id *id)
drivers/usb/core/driver.c:usb_probe_device(struct device *dev)
drivers/usb/core/driver.c:usb_probe_interface(struct device *dev)
drivers/usb/core/driver.c:usb_rebind_intf(struct usb_interface *intf)
drivers/usb/core/driver.c:usb_register_device_driver(struct usb_device_driver *new_udriver, struct module *owner)
drivers/usb/core/driver.c:usb_register_driver(struct usb_driver *new_driver, struct module *owner, const char *mod_name)
drivers/usb/core/driver.c:usb_resume_interface(struct usb_device *udev, struct usb_interface *intf, pm_message_t msg, int reset_resume)
drivers/usb/core/driver.c:usb_suspend_interface(struct usb_device *udev, struct usb_interface *intf, pm_message_t msg)
drivers/usb/core/driver.c:usb_unbind_device(struct device *dev)
drivers/usb/core/driver.c:usb_unbind_interface(struct device *dev)
drivers/usb/core/usb.c:usb_alloc_dev()
drivers/usb/core/usb.c:usb_bus_notify(struct notifier_block *nb, unsigned long action, void *data)
drivers/usb/core/usb.c:usb_dev_authorized(struct usb_device *dev, struct usb_hcd *hcd)
drivers/usb/core/usb.c:usb_find_common_endpoints(struct usb_host_interface *alt, struct usb_endpoint_descriptor **bulk_in, struct usb_endpoint_descriptor **bulk_out, struct usb_endpoint_descriptor **int_in, struct usb_endpoint_descriptor **int_out)
drivers/usb/core/usb.c:usb_find_common_endpoints_reverse(struct usb_host_interface *alt, struct usb_endpoint_descriptor **bulk_in, struct usb_endpoint_descriptor **bulk_out, struct usb_endpoint_descriptor **int_in, struct usb_endpoint_descriptor **int_out)
drivers/usb/core/usb.c:usb_intf_get_dma_device()
drivers/usb/core/usb.c:usb_lock_device_for_reset(struct usb_device *udev, const struct usb_interface *iface)
drivers/usb/core/usb.c:usb_release_dev(struct device *dev)
drivers/usb/core/message.c:__usb_queue_reset_device(struct work_struct *ws)
drivers/usb/core/message.c:driver_set_config_work(struct work_struct *work)
drivers/usb/core/message.c:usb_control_msg(struct usb_device *dev, unsigned int pipe, __u8 request, __u8 requesttype, __u16 value, __u16 index, void *data, __u16 size, int timeout)
drivers/usb/core/message.c:usb_disable_device(struct usb_device *dev, int skip_ep0)
drivers/usb/core/message.c:usb_disable_device_endpoints(struct usb_device *dev, int skip_ep0)
drivers/usb/core/message.c:usb_driver_set_configuration(struct usb_device *udev, int config)
drivers/usb/core/message.c:usb_internal_control_msg(struct usb_device *usb_dev, unsigned int pipe, struct usb_ctrlrequest *cmd, void *data, int len, int timeout)
drivers/usb/core/message.c:usb_set_configuration(struct usb_device *dev, int configuration)
drivers/usb/host/ehci-hcd.c:ehci_init(struct usb_hcd *hcd)
drivers/usb/host/ehci-hcd.c:ehci_irq(struct usb_hcd *hcd)
drivers/usb/host/ehci-hcd.c:ehci_reset(struct ehci_hcd *ehci)
drivers/usb/host/ehci-hcd.c:ehci_run(struct usb_hcd *hcd)
drivers/usb/host/ehci-hcd.c:ehci_setup(struct usb_hcd *hcd)
drivers/usb/host/ehci-hcd.c:ehci_urb_dequeue(struct usb_hcd *hcd, struct urb *urb, int status)
drivers/usb/host/ehci-hcd.c:ehci_urb_enqueue(struct usb_hcd *hcd, struct urb *urb, gfp_t mem_flags)
drivers/usb/host/ehci-hcd.c:ehci_work(struct ehci_hcd *ehci)
drivers/usb/host/uhci-hcd.c:start_rh(struct uhci_hcd *uhci)
drivers/usb/host/uhci-hcd.c:uhci_start(struct usb_hcd *hcd)
drivers/usb/host/uhci-hcd.c:uhci_stop(struct usb_hcd *hcd)
kernel/workqueue.c:__flush_work(struct work_struct *work, bool from_cancel)
drivers/usb/core/hub.c:hub_event(struct work_struct *work)
drivers/usb/core/hub.h:hub_power_on_good_delay(struct usb_hub *hub)
usb_hub_wq()
drivers/usb/storage/usb.c:storage_probe(struct usb_interface *intf, const struct usb_device_id *id)
drivers/usb/storage/usb.c:usb_stor_probe1(struct us_data **pus, struct usb_interface *intf, const struct usb_device_id *id, const struct us_unusual_dev *unusual_dev, const struct scsi_host_template *sht)
drivers/usb/storage/usb.c:usb_stor_probe2(struct us_data *us)
func for case 38efa4618c3379cf98642b9379d6e340b14d2702
fs/io_uring.c:__io_import_fixed(struct io_kiocb *req, int rw, struct iov_iter *iter, struct io_mapped_ubuf *imu)
fs/io_uring.c:__io_remove_buffers(struct io_ring_ctx *ctx, struct io_buffer_list *bl, unsigned nbufs)
fs/io_uring.c:io_add_buffers(struct io_ring_ctx *ctx, struct io_provide_buf *pbuf, struct io_buffer_list *bl)
fs/io_uring.c:io_alloc_page_table()
fs/io_uring.c:io_destroy_buffers(struct io_ring_ctx *ctx)
fs/io_uring.c:io_do_iopoll(struct io_ring_ctx *ctx, bool force_nonspin)
fs/io_uring.c:io_import_fixed(struct io_kiocb *req, int rw, struct iov_iter *iter, unsigned int issue_flags)
fs/io_uring.c:io_iopoll_try_reap_events(struct io_ring_ctx *ctx)
fs/io_uring.c:io_provide_buffers(struct io_kiocb *req, unsigned int issue_flags)
fs/io_uring.c:io_remove_buffers(struct io_kiocb *req, unsigned int issue_flags)
fs/io_uring.c:io_ring_ctx_free(struct io_ring_ctx *ctx)
fs/io_uring.c:io_ring_ctx_wait_and_kill(struct io_ring_ctx *ctx)
fs/io_uring.c:io_rsrc_data_alloc(struct io_ring_ctx *ctx, rsrc_put_fn *do_put, u64 __user *utags, unsigned nr, struct io_rsrc_data **pdata)
fs/io_uring.c:io_rsrc_data_free(struct io_rsrc_data *data)
fs/io_uring.c:io_uring_release(struct inode *inode, struct file *file)
IORING_OFF_SQES()
fs/file_table.c:__fput(struct file *file)
kernel/exit.c:do_exit(long code)
kernel/exit.c:do_group_exit(int exit_code)
exit_task_work()
fs/io_uring.c:io_do_iopoll(struct io_ring_ctx *ctx, bool force_nonspin)
fs/io_uring.c:io_iopoll_try_reap_events(struct io_ring_ctx *ctx)
fs/io_uring.c:io_ring_ctx_wait_and_kill(struct io_ring_ctx *ctx)
io_uring_enter()
fs/io_uring.c:io_uring_release(struct inode *inode, struct file *file)
fs/io_uring.c:io_uring_setup(u32 entries, struct io_uring_params __user *params)
io_uring_submit()
syz_io_uring_setup()
syz_io_uring_submit()
kernel/task_work.c:task_work_run(void)
kernel/task_work.c:task_work_cancel_match()
kernel/task_work.c:task_work_run(void)
fs/file_table.c:__fput(struct file *file)
fs/file_table.c:alloc_empty_file()
fs/file_table.c:alloc_file()
fs/file_table.c:alloc_file_clone()
fs/file_table.c:alloc_file_pseudo()
fs/file_table.c:delayed_fput(struct work_struct *unused)
fs/file_table.c:file_free_rcu(struct rcu_head *head)
fs/file_table.c:fput_many(struct file *file, unsigned int refs)
kernel/exit.c:__exit_signal(struct task_struct *tsk)
kernel/exit.c:do_exit(long code)
kernel/exit.c:do_group_exit(int exit_code)
kernel/exit.c:exit_notify(struct task_struct *tsk, int group_dead)
kernel/exit.c:find_new_reaper()
kernel/exit.c:forget_original_parent(struct task_struct *father, struct list_head *dead)
kernel/exit.c:release_task(struct task_struct *p)
kernel/exit.c:reparent_leader(struct task_struct *father, struct task_struct *p, struct list_head *dead)
arch/x86/entry/common.c:__do_fast_syscall_32(struct pt_regs *regs)
arch/x86/entry/common.c:do_SYSENTER_32(struct pt_regs *regs)
arch/x86/entry/common.c:do_fast_syscall_32(struct pt_regs *regs)
arch/x86/entry/common.c:do_int80_syscall_32(struct pt_regs *regs)
arch/x86/entry/common.c:do_syscall_32_irqs_on(struct pt_regs *regs, int nr)
arch/x86/entry/common.c:do_syscall_64(struct pt_regs *regs, int nr)
arch/x86/entry/common.c:do_syscall_x32(struct pt_regs *regs, int nr)
arch/x86/entry/common.c:do_syscall_x64(struct pt_regs *regs, int nr)
mm/mmap.c:__do_munmap(struct mm_struct *mm, unsigned long start, size_t len, struct list_head *uf, bool downgrade)
mm/mmap.c:__vma_adjust(struct vm_area_struct *vma, unsigned long start, unsigned long end, pgoff_t pgoff, struct vm_area_struct *insert, struct vm_area_struct *expand)
mm/mmap.c:do_mmap(struct file *file, unsigned long addr, unsigned long len, unsigned long prot, unsigned long flags, unsigned long pgoff, unsigned long *populate, struct list_head *uf)
mm/mmap.c:exit_mmap(struct mm_struct *mm)
mm/mmap.c:mmap_region(struct file *file, unsigned long addr, unsigned long len, vm_flags_t vm_flags, unsigned long pgoff, struct list_head *uf)
mm/mmap.c:remove_vma_list(struct mm_struct *mm, struct vm_area_struct *vma)
mm/mmap.c:unmap_region(struct mm_struct *mm, struct vm_area_struct *vma, struct vm_area_struct *prev, unsigned long start, unsigned long end)
mm/mmap.c:vma_merge()
fs/aio.c:aio_read(struct kiocb *req, const struct iocb *iocb, bool vectored, bool compat)
fs/aio.c:aio_setup_rw(int rw, const struct iocb *iocb, struct iovec **iovec, bool vectored, bool compat, struct iov_iter *iter)
fs/aio.c:aio_write(struct kiocb *req, const struct iocb *iocb, bool vectored, bool compat)
fs/select.c:__pollwait(struct file *filp, wait_queue_head_t *wait_address, poll_table *p)
fs/select.c:do_poll(struct poll_list *list, struct poll_wqueues *wait, struct timespec64 *end_time)
fs/select.c:poll_schedule_timeout(struct poll_wqueues *pwq, int state, ktime_t *expires, unsigned long slack)
fs/eventpoll.c:ep_insert(struct eventpoll *ep, const struct epoll_event *event, struct file *tfile, int fd, int full_check)
fs/eventpoll.c:ep_poll(struct eventpoll *ep, struct epoll_event __user *events, int maxevents, struct timespec64 *timeout)
fs/eventpoll.c:ep_poll_callback(wait_queue_entry_t *wait, unsigned mode, int sync, void *key)
func for case 39b560f8c5d46a5c107b83c6a1e8ae4051826de0
net/ethtool/pse-pd.c:ethnl_set_pse(struct sk_buff *skb, struct genl_info *info)
net/ethtool/pse-pd.c:pse_get_pse_attributes(struct net_device *dev, struct netlink_ext_ack *extack, struct pse_reply_data *data)
net/ethtool/pse-pd.c:pse_prepare_data(const struct ethnl_req_info *req_base, struct ethnl_reply_data *reply_base, struct genl_info *info)
net/ethtool/pse-pd.c:pse_reply_size(const struct ethnl_req_info *req_base, const struct ethnl_reply_data *reply_base)
net/ethtool/pse-pd.c:pse_set_pse_config(struct net_device *dev, struct netlink_ext_ack *extack, struct nlattr **tb)
net/ethtool/netlink.c:ethnl_default_doit(struct sk_buff *skb, struct genl_info *info)
net/ethtool/netlink.c:ethnl_default_dump_one(struct sk_buff *skb, struct net_device *dev, const struct ethnl_dump_ctx *ctx, struct netlink_callback *cb)
net/ethtool/netlink.c:ethnl_default_dumpit(struct sk_buff *skb, struct netlink_callback *cb)
net/ethtool/netlink.c:ethnl_default_notify(struct net_device *dev, unsigned int cmd, const void *data)
net/ethtool/netlink.c:ethnl_default_parse(struct ethnl_req_info *req_info, struct nlattr **tb, struct net *net, const struct ethnl_request_ops *request_ops, struct netlink_ext_ack *extack, bool require_dev)
net/ethtool/netlink.c:ethnl_default_start(struct netlink_callback *cb)
net/ethtool/netlink.c:ethnl_fill_reply_header(struct sk_buff *skb, struct net_device *dev, u16 attrtype)
net/ethtool/netlink.c:ethnl_init(void)
net/ethtool/netlink.c:ethnl_ops_begin(struct net_device *dev)
net/ethtool/netlink.c:ethnl_parse_header_dev_get(struct ethnl_req_info *req_info, const struct nlattr *header, struct net *net, struct netlink_ext_ack *extack, bool require_dev)
net/ethtool/netlink.c:ethnl_reply_init()
net/ethtool/netlink.c:ethtool_notify(struct net_device *dev, unsigned int cmd, const void *data)
net/ethtool/pse-pd.c:pse_prepare_data(const struct ethnl_req_info *req_base, struct ethnl_reply_data *reply_base, struct genl_info *info)
net/netlink/genetlink.c:genl_allocate_reserve_groups(int n_groups, int *first_id)
net/netlink/genetlink.c:genl_family_rcv_msg(const struct genl_family *family, struct sk_buff *skb, struct nlmsghdr *nlh, struct netlink_ext_ack *extack)
net/netlink/genetlink.c:genl_family_rcv_msg_doit(const struct genl_family *family, struct sk_buff *skb, struct nlmsghdr *nlh, struct netlink_ext_ack *extack, const struct genl_ops *ops, int hdrlen, struct net *net)
net/netlink/genetlink.c:genl_family_rcv_msg_dumpit(const struct genl_family *family, struct sk_buff *skb, struct nlmsghdr *nlh, struct netlink_ext_ack *extack, const struct genl_ops *ops, int hdrlen, struct net *net)
net/netlink/genetlink.c:genl_header_check(const struct genl_family *family, struct nlmsghdr *nlh, struct genlmsghdr *hdr, struct netlink_ext_ack *extack)
net/netlink/genetlink.c:genl_notify(const struct genl_family *family, struct sk_buff *skb, struct genl_info *info, u32 group, gfp_t flags)
genl_op_fill_in_reject_policy()
net/netlink/genetlink.c:genl_op_from_small(const struct genl_family *family, unsigned int i, struct genl_ops *op)
net/netlink/genetlink.c:genl_rcv_msg(struct sk_buff *skb, struct nlmsghdr *nlh, struct netlink_ext_ack *extack)
net/netlink/genetlink.c:genl_register_family(struct genl_family *family)
net/netlink/genetlink.c:genl_start(struct netlink_callback *cb)
net/netlink/genetlink.c:genl_unregister_family(const struct genl_family *family)
net/netlink/genetlink.c:genl_validate_assign_mc_groups(struct genl_family *family)
net/netlink/genetlink.c:genl_validate_ops(const struct genl_family *family)
net/netlink/genetlink.c:genlmsg_put()
net/ethtool/features.c:ethnl_bitmap_to_features(unsigned long *src)
net/ethtool/features.c:ethnl_set_features(struct sk_buff *skb, struct genl_info *info)
net/ethtool/features.c:features_fill_reply(struct sk_buff *skb, const struct ethnl_req_info *req_base, const struct ethnl_reply_data *reply_base)
net/ethtool/features.c:features_prepare_data(const struct ethnl_req_info *req_base, struct ethnl_reply_data *reply_base, struct genl_info *info)
net/ethtool/features.c:features_reply_size(const struct ethnl_req_info *req_base, const struct ethnl_reply_data *reply_base)
net/ethtool/features.c:features_send_reply(struct net_device *dev, struct genl_info *info, const unsigned long *wanted, const unsigned long *wanted_mask, const unsigned long *active, const unsigned long *active_mask, bool compact)
net/ethtool/common.c:__ethtool_get_ts_info(struct net_device *dev, struct ethtool_ts_info *info)
net/ethtool/common.c:convert_legacy_settings_to_link_ksettings(struct ethtool_link_ksettings *link_ksettings, const struct ethtool_cmd *legacy_settings)
net/ethtool/common.c:ethtool_check_ops(const struct ethtool_ops *ops)
net/ethtool/common.c:ethtool_get_max_rxfh_channel(struct net_device *dev, u32 *max)
net/ethtool/common.c:ethtool_params_from_link_mode(struct ethtool_link_ksettings *link_ksettings, enum ethtool_link_mode_bit_indices link_mode)
net/netlink/af_netlink.c:__netlink_dump_start(struct sock *ssk, struct sk_buff *skb, const struct nlmsghdr *nlh, struct netlink_dump_control *control)
net/netlink/af_netlink.c:netlink_alloc_large_skb()
net/netlink/af_netlink.c:netlink_attachskb(struct sock *sk, struct sk_buff *skb, long *timeo, struct sock *ssk)
net/netlink/af_netlink.c:netlink_dump(struct sock *sk)
net/netlink/af_netlink.c:netlink_rcv_skb(struct sk_buff *skb, int (*cb)(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *))
net/netlink/af_netlink.c:netlink_sendmsg(struct socket *sock, struct msghdr *msg, size_t len)
net/netlink/af_netlink.c:netlink_unicast(struct sock *ssk, struct sk_buff *skb, u32 portid, int nonblock)
net/netlink/af_netlink.c:netlink_unicast_kernel(struct sock *sk, struct sk_buff *skb, struct sock *ssk)
ETHTOOL_MSG_FEATURES_GET()
net/ethtool/ioctl.c:__ethtool_get_flags(struct net_device *dev)
net/ethtool/ioctl.c:__ethtool_set_flags(struct net_device *dev, u32 data)
net/ethtool/ioctl.c:ethtool_get_features(struct net_device *dev, void __user *useraddr)
net/ethtool/ioctl.c:ethtool_get_link_ksettings(struct net_device *dev, void __user *useraddr)
net/ethtool/ioctl.c:ethtool_set_features(struct net_device *dev, void __user *useraddr)
net/ethtool/ioctl.c:ethtool_set_link_ksettings(struct net_device *dev, void __user *useraddr)
net/ethtool/ioctl.c:ethtool_set_one_feature(struct net_device *dev, void __user *useraddr, u32 ethcmd)
net/ethtool/ioctl.c:ethtool_set_rxfh(struct net_device *dev, void __user *useraddr)
net/ethtool/netlink.h:ethnl_update_binary(void *dst, unsigned int len, const struct nlattr *attr, bool *mod)
net/ethtool/netlink.h:ethnl_update_bitfield32(u32 *dst, const struct nlattr *attr, bool *mod)
net/ethtool/netlink.h:ethnl_update_bool32(u32 *dst, const struct nlattr *attr, bool *mod)
net/socket.c:kernel_sendmsg_locked(struct sock *sk, struct msghdr *msg, struct kvec *vec, size_t num, size_t size)
net/socket.c:sock_sendmsg(struct socket *sock, struct msghdr *msg)
net/socket.c:sock_sendmsg_nosec(struct socket *sock, struct msghdr *msg)
func for case 3ac451d171eed4f6027b4c46176f6eda99e8547b
drivers/input/evdev.c:__pass_event(struct evdev_client *client, const struct input_event *event)
drivers/input/evdev.c:evdev_do_ioctl(struct file *file, unsigned int cmd, void __user *p, int compat_mode)
drivers/input/evdev.c:evdev_events(struct input_handle *handle, const struct input_value *vals, unsigned int count)
drivers/input/evdev.c:evdev_handle_get_keycode(struct input_dev *dev, void __user *p)
drivers/input/evdev.c:evdev_handle_get_keycode_v2(struct input_dev *dev, void __user *p)
drivers/input/evdev.c:evdev_handle_get_val(struct evdev_client *client, struct input_dev *dev, unsigned int type, unsigned long *bits, unsigned int maxbit, unsigned int maxlen, void __user *p, int compat)
drivers/input/evdev.c:evdev_handle_mt_request(struct input_dev *dev, unsigned int size, int __user *ip)
drivers/input/evdev.c:evdev_handle_set_keycode(struct input_dev *dev, void __user *p)
drivers/input/evdev.c:evdev_ioctl_handler(struct file *file, unsigned int cmd, void __user *p, int compat_mode)
drivers/input/evdev.c:evdev_open(struct inode *inode, struct file *file)
drivers/input/evdev.c:evdev_open_device(struct evdev *evdev)
drivers/input/evdev.c:evdev_pass_values(struct evdev_client *client, const struct input_value *vals, unsigned int count, ktime_t *ev_time)
drivers/input/evdev.c:evdev_release(struct inode *inode, struct file *file)
drivers/input/evdev.c:evdev_ungrab(struct evdev *evdev, struct evdev_client *client)
drivers/input/evdev.c:evdev_write(struct file *file, const char __user *buffer, size_t count, loff_t *ppos)
fs/fcntl.c:do_fcntl(int fd, unsigned int cmd, unsigned long arg, struct file *filp)
fs/fcntl.c:f_getown(struct file *filp)
fs/fcntl.c:f_getown_ex(struct file *filp, unsigned long arg)
fs/fcntl.c:f_getowner_uids(struct file *filp, unsigned long arg)
fs/fcntl.c:f_modown(struct file *filp, struct pid *pid, enum pid_type type, int force)
fs/fcntl.c:f_setown(struct file *filp, unsigned long arg, int force)
fs/fcntl.c:f_setown_ex(struct file *filp, unsigned long arg)
fs/fcntl.c:fasync_add_entry(int fd, struct file *filp, struct fasync_struct **fapp)
fs/fcntl.c:fasync_insert_entry()
fs/fcntl.c:fasync_remove_entry(struct file *filp, struct fasync_struct **fapp)
fs/fcntl.c:fcntl_rw_hint(struct file *file, unsigned int cmd, unsigned long arg)
fs/fcntl.c:kill_fasync_rcu(struct fasync_struct *fa, int sig, int band)
fs/fcntl.c:send_sigio(struct fown_struct *fown, int fd, int band)
fs/fcntl.c:send_sigio_to_task(struct task_struct *p, struct fown_struct *fown, int fd, int reason, enum pid_type type)
fs/fcntl.c:sigio_perm(struct task_struct *p, struct fown_struct *fown, int sig)
drivers/input/input.c:__input_release_device(struct input_handle *handle)
drivers/input/input.c:input_attach_handler(struct input_dev *dev, struct input_handler *handler)
drivers/input/input.c:input_close_device(struct input_handle *handle)
drivers/input/input.c:input_disconnect_device(struct input_dev *dev)
drivers/input/input.c:input_flush_device(struct input_handle *handle, struct file *file)
drivers/input/input.c:input_grab_device(struct input_handle *handle)
drivers/input/input.c:input_handle_event(struct input_dev *dev, unsigned int type, unsigned int code, int value)
drivers/input/input.c:input_inject_event(struct input_handle *handle, unsigned int type, unsigned int code, int value)
drivers/input/input.c:input_open_device(struct input_handle *handle)
drivers/input/input.c:input_pass_values(struct input_dev *dev, struct input_value *vals, unsigned int count)
drivers/input/input.c:input_register_device(struct input_dev *dev)
drivers/input/input.c:input_register_handler(struct input_handler *handler)
drivers/input/input.c:input_to_handler(struct input_handle *handle, struct input_value *vals, unsigned int count)
drivers/input/input.c:input_unregister_device(struct input_dev *dev)
drivers/input/input.c:input_unregister_handler(struct input_handler *handler)
kernel/locking/lockdep.c:check_chain_key(struct task_struct *curr)
kernel/locking/lockdep.c:check_irq_usage(struct task_struct *curr, struct held_lock *prev, struct held_lock *next)
kernel/locking/lockdep.c:check_usage_backwards(struct task_struct *curr, struct held_lock *this, enum lock_usage_bit bit)
kernel/locking/lockdep.c:mark_lock_irq(struct task_struct *curr, struct held_lock *this, enum lock_usage_bit new_bit)
kernel/locking/lockdep.c:mark_usage(struct task_struct *curr, struct held_lock *hlock, int check)
kernel/locking/lockdep.c:print_irq_inversion_bug(struct task_struct *curr, struct lock_list *root, struct lock_list *other, struct held_lock *this, int forwards, const char *irqclass)
kernel/locking/lockdep.c:print_irqtrace_events(struct task_struct *curr)
kernel/locking/lockdep.c:validate_chain(struct task_struct *curr, struct held_lock *hlock, int chain_head, u64 chain_key)
__raw_read_lock()
__raw_spin_lock()
include/linux/spinlock_api_smp.h:__raw_spin_lock_irqsave(raw_spinlock_t *lock)
_raw_read_lock()
_raw_spin_lock()
_raw_spin_lock_irqsave()
spin_lock()
spin_lock_irqsave()
drivers/input/evdev.c:evdev_pass_values(struct evdev_client *client, const struct input_value *vals, unsigned int count, ktime_t *ev_time)
drivers/input/evdev.c:evdev_write(struct file *file, const char __user *buffer, size_t count, loff_t *ppos)
event_lock()
fs/fcntl.c:f_getown(struct file *filp)
f_owner()
drivers/input/input.c:input_handle_event(struct input_dev *dev, unsigned int type, unsigned int code, int value)
drivers/input/input.c:input_inject_event(struct input_handle *handle, unsigned int type, unsigned int code, int value)
fs/fcntl.c:kill_fasync(struct fasync_struct **fp, int sig, int band)
fs/fcntl.c:send_sigio(struct fown_struct *fown, int fd, int band)
spin_lock()
include/linux/spinlock_api_smp.h:__raw_spin_lock_irq(raw_spinlock_t *lock)
include/linux/spinlock_api_smp.h:__raw_spin_lock_irqsave(raw_spinlock_t *lock)
include/linux/spinlock_api_smp.h:__raw_spin_trylock(raw_spinlock_t *lock)
include/linux/spinlock_api_smp.h:__raw_spin_trylock_bh(raw_spinlock_t *lock)
net/socket.c:sock_do_ioctl(struct net *net, struct socket *sock, unsigned int cmd, unsigned long arg)
net/socket.c:sock_fasync(int fd, struct file *filp, int on)
net/socket.c:sock_ioctl(struct file *file, unsigned cmd, unsigned long arg)
fs/ioctl.c:do_vfs_ioctl(struct file *filp, unsigned int fd, unsigned int cmd, unsigned long arg)
fs/ioctl.c:ioctl_fioasync(unsigned int fd, struct file *filp, int __user *argp)
fs/ioctl.c:ioctl_fionbio(struct file *filp, int __user *argp)
drivers/input/serio/serio.c:serio_connect_driver(struct serio *serio, struct serio_driver *drv)
drivers/input/serio/serio.c:serio_disconnect_driver(struct serio *serio)
drivers/input/serio/serio.c:serio_interrupt(struct serio *serio, unsigned char data, unsigned int dfl)
func for case 4894a6d412735394296e80976329c1a6848acc14
_read()
_write()
fs/overlayfs/file.c:ovl_aio_rw_complete(struct kiocb *iocb, long res)
fs/overlayfs/file.c:ovl_copyfile(struct file *file_in, loff_t pos_in, struct file *file_out, loff_t pos_out, loff_t len, unsigned int flags, enum ovl_copyop op)
fs/overlayfs/file.c:ovl_fadvise(struct file *file, loff_t offset, loff_t len, int advice)
fs/overlayfs/file.c:ovl_fallocate(struct file *file, int mode, loff_t offset, loff_t len)
fs/overlayfs/file.c:ovl_flush(struct file *file, fl_owner_t id)
fs/overlayfs/file.c:ovl_fsync(struct file *file, loff_t start, loff_t end, int datasync)
fs/overlayfs/file.c:ovl_mmap(struct file *file, struct vm_area_struct *vma)
fs/overlayfs/file.c:ovl_open_realfile()
fs/overlayfs/file.c:ovl_read_iter(struct kiocb *iocb, struct iov_iter *iter)
fs/overlayfs/file.c:ovl_real_fdget(const struct file *file, struct fd *real)
fs/overlayfs/file.c:ovl_real_fdget_meta(const struct file *file, struct fd *real, bool allow_meta)
fs/overlayfs/file.c:ovl_remap_file_range(struct file *file_in, loff_t pos_in, struct file *file_out, loff_t pos_out, loff_t len, unsigned int remap_flags)
fs/overlayfs/file.c:ovl_splice_read(struct file *in, loff_t *ppos, struct pipe_inode_info *pipe, size_t len, unsigned int flags)
fs/overlayfs/file.c:ovl_splice_write(struct pipe_inode_info *pipe, struct file *out, loff_t *ppos, size_t len, unsigned int flags)
fs/overlayfs/file.c:ovl_write_iter(struct kiocb *iocb, struct iov_iter *iter)
fs/file_table.c:__fput(struct file *file)
fs/file_table.c:alloc_empty_backing_file()
fs/file_table.c:alloc_empty_file()
fs/file_table.c:alloc_empty_file_noaccount()
fs/file_table.c:alloc_file()
fs/file_table.c:alloc_file_clone()
fs/file_table.c:alloc_file_pseudo()
fs/file_table.c:file_free(struct file *f)
fs/file_table.c:file_free_rcu(struct rcu_head *head)
fs/file_table.c:init_file(struct file *f, int flags, const struct cred *cred)
fs/open.c:backing_file_open()
fs/open.c:build_open_flags(const struct open_how *how, struct open_flags *op)
fs/open.c:build_open_how(int flags, umode_t mode)
fs/open.c:dentry_create()
fs/open.c:dentry_open()
fs/open.c:do_dentry_open(struct file *f, struct inode *inode, int (*open)(struct inode *, struct file *))
fs/open.c:do_sys_ftruncate(unsigned int fd, loff_t length, int small)
fs/open.c:do_sys_openat2(int dfd, const char __user *filename, struct open_how *how)
fs/open.c:do_sys_truncate(const char __user *pathname, loff_t length)
fs/open.c:do_truncate(struct mnt_idmap *idmap, struct dentry *dentry, loff_t length, unsigned int time_attrs, struct file *filp)
fs/open.c:filp_close(struct file *filp, fl_owner_t id)
fs/open.c:filp_open()
fs/open.c:finish_open(struct file *file, struct dentry *dentry, int (*open)(struct inode *, struct file *))
fs/open.c:vfs_fallocate(struct file *file, int mode, loff_t offset, loff_t len)
fs/open.c:vfs_truncate(const struct path *path, loff_t length)
fs/splice.c:__do_splice(struct file *in, loff_t __user *off_in, struct file *out, loff_t __user *off_out, size_t len, unsigned int flags)
fs/splice.c:do_splice(struct file *in, loff_t *off_in, struct file *out, loff_t *off_out, size_t len, unsigned int flags)
fs/splice.c:do_splice_direct(struct file *in, loff_t *ppos, struct file *out, loff_t *opos, size_t len, unsigned int flags)
fs/splice.c:iter_file_splice_write(struct pipe_inode_info *pipe, struct file *out, loff_t *ppos, size_t len, unsigned int flags)
fs/splice.c:splice_direct_to_actor(struct file *in, struct splice_desc *sd, splice_direct_actor *actor)
fs/splice.c:splice_from_pipe(struct pipe_inode_info *pipe, struct file *out, loff_t *ppos, size_t len, unsigned int flags, splice_actor *actor)
fs/splice.c:splice_to_pipe(struct pipe_inode_info *pipe, struct splice_pipe_desc *spd)
fs/splice.c:vfs_splice_read(struct file *in, loff_t *ppos, struct pipe_inode_info *pipe, size_t len, unsigned int flags)
fs/overlayfs/inode.c:ovl_fill_inode(struct inode *inode, umode_t mode, dev_t rdev)
fs/overlayfs/inode.c:ovl_get_inode()
fs/overlayfs/inode.c:ovl_getattr(struct mnt_idmap *idmap, const struct path *path, struct kstat *stat, u32 request_mask, unsigned int flags)
fs/overlayfs/inode.c:ovl_inode_init(struct inode *inode, struct ovl_inode_params *oip, unsigned long ino, int fsid)
fs/overlayfs/inode.c:ovl_lookup_inode()
fs/overlayfs/inode.c:ovl_permission(struct mnt_idmap *idmap, struct inode *inode, int mask)
fs/overlayfs/inode.c:ovl_setattr(struct mnt_idmap *idmap, struct dentry *dentry, struct iattr *attr)
fs/overlayfs/inode.c:ovl_verify_inode(struct inode *inode, struct dentry *lowerdentry, struct dentry *upperdentry, bool strict)
mm/slub.c:__slab_free(struct kmem_cache *s, struct slab *slab, void *head, void *tail, int cnt, unsigned long addr)
mm/slub.c:do_slab_free(struct kmem_cache *s, struct slab *slab, void *head, void *tail, int cnt, unsigned long addr)
mm/slub.c:flush_slab(struct kmem_cache *s, struct kmem_cache_cpu *c)
mm/slub.c:free_debug_processing(struct kmem_cache *s, struct slab *slab, void *head, void *tail, int *bulk_cnt, unsigned long addr, depot_stack_handle_t handle)
mm/slub.c:kmem_cache_free(struct kmem_cache *s, void *x)
mm/slub.c:slab_free(struct kmem_cache *s, struct slab *slab, void *head, void *tail, void **p, int cnt, unsigned long addr)
mm/slub.c:slab_free_freelist_hook(struct kmem_cache *s, void **head, void **tail, int *cnt)
mm/slub.c:slab_free_hook(struct kmem_cache *s, void *x, bool init)
do_copy_file_range()
fs/read_write.c:do_sendfile(int out_fd, int in_fd, loff_t *ppos, size_t count, loff_t max)
fs/read_write.c:generic_copy_file_checks(struct file *file_in, loff_t pos_in, struct file *file_out, loff_t pos_out, size_t *req_count, unsigned int flags)
fs/read_write.c:generic_file_rw_checks(struct file *file_in, struct file *file_out)
fs/read_write.c:generic_write_checks_count(struct kiocb *iocb, loff_t *count)
fs/read_write.c:vfs_copy_file_range(struct file *file_in, loff_t pos_in, struct file *file_out, loff_t pos_out, size_t len, unsigned int flags)
fs/read_write.c:vfs_read(struct file *file, char __user *buf, size_t count, loff_t *pos)
fs/read_write.c:vfs_write(struct file *file, const char __user *buf, size_t count, loff_t *pos)
fs/overlayfs/super.c:ovl_get_lowerstack()
fs/overlayfs/super.c:ovl_get_workdir(struct super_block *sb, struct ovl_fs *ofs, const struct path *upperpath)
fs/overlayfs/super.c:ovl_make_workdir(struct super_block *sb, struct ovl_fs *ofs, const struct path *workpath)
fs/overlayfs/copy_up.c:ovl_copy_up_flags(struct dentry *dentry, int flags)
fs/overlayfs/copy_up.c:ovl_copy_up_meta_inode_data(struct ovl_copy_up_ctx *c)
fs/overlayfs/copy_up.c:ovl_copy_up_one(struct dentry *parent, struct dentry *dentry, int flags)
mm/kasan/common.c:____kasan_slab_free(struct kmem_cache *cache, void *object, unsigned long ip, bool quarantine, bool init)
mm/kasan/common.c:__kasan_slab_free_mempool(void *ptr, unsigned long ip)
mm/kasan/common.c:kasan_save_stack(gfp_t flags, bool can_alloc)
func for case 49b6f675bead6969f913a3f7dcef4d28fdd13296
mm/mmap.c:__vm_munmap(unsigned long start, size_t len, bool unlock)
mm/mmap.c:do_brk_flags(struct vma_iterator *vmi, struct vm_area_struct *vma, unsigned long addr, unsigned long len, unsigned long flags)
mm/mmap.c:do_mmap(struct file *file, unsigned long addr, unsigned long len, unsigned long prot, unsigned long flags, unsigned long pgoff, unsigned long *populate, struct list_head *uf)
mm/mmap.c:do_vma_munmap(struct vma_iterator *vmi, struct vm_area_struct *vma, unsigned long start, unsigned long end, struct list_head *uf, bool unlock)
mm/mmap.c:do_vmi_align_munmap(struct vma_iterator *vmi, struct vm_area_struct *vma, struct mm_struct *mm, unsigned long start, unsigned long end, struct list_head *uf, bool unlock)
mm/mmap.c:do_vmi_munmap(struct vma_iterator *vmi, struct mm_struct *mm, unsigned long start, size_t len, struct list_head *uf, bool unlock)
mm/mmap.c:exit_mmap(struct mm_struct *mm)
mm/mmap.c:mmap_region(struct file *file, unsigned long addr, unsigned long len, vm_flags_t vm_flags, unsigned long pgoff, struct list_head *uf)
mm/mmap.c:remove_vma(struct vm_area_struct *vma, bool unreachable)
mm/mmap.c:unmap_region(struct mm_struct *mm, struct maple_tree *mt, struct vm_area_struct *vma, struct vm_area_struct *prev, struct vm_area_struct *next, unsigned long start, unsigned long end, bool mm_wr_locked)
mm/mmap.c:validate_mm(struct mm_struct *mm)
mm/mmap.c:vm_brk_flags(unsigned long addr, unsigned long request, unsigned long flags)
mm/mmap.c:vma_expand(struct vma_iterator *vmi, struct vm_area_struct *vma, unsigned long start, unsigned long end, pgoff_t pgoff, struct vm_area_struct *next)
mm/mmap.c:vma_merge()
mm/mmap.c:vma_shrink(struct vma_iterator *vmi, struct vm_area_struct *vma, unsigned long start, unsigned long end, pgoff_t pgoff)
fs/efs/super.c:efs_fill_super(struct super_block *s, void *d, int silent)
fs/efs/super.c:efs_statfs(struct dentry *dentry, struct kstatfs *buf)
fs/efs/super.c:efs_validate_super(struct efs_sb_info *sb, struct efs_super *super)
fs/efs/super.c:init_efs_fs(void)
fs/efs/super.c:module_exit(exit_efs_fs)
fs/eventpoll.c:ep_alloc(struct eventpoll **pep)
fs/eventpoll.c:ep_clear_and_put(struct eventpoll *ep)
fs/eventpoll.c:ep_create_wakeup_source(struct epitem *epi)
fs/eventpoll.c:ep_destroy_wakeup_source(struct epitem *epi)
fs/eventpoll.c:ep_insert(struct eventpoll *ep, const struct epoll_event *event, struct file *tfile, int fd, int full_check)
fs/eventpoll.c:ep_loop_check_proc(struct eventpoll *ep, int depth)
fs/eventpoll.c:ep_modify(struct eventpoll *ep, struct epitem *epi, const struct epoll_event *event)
fs/eventpoll.c:ep_poll(struct eventpoll *ep, struct epoll_event __user *events, int maxevents, struct timespec64 *timeout)
fs/eventpoll.c:ep_poll_callback(wait_queue_entry_t *wait, unsigned mode, int sync, void *key)
fs/eventpoll.c:ep_ptable_queue_proc(struct file *file, wait_queue_head_t *whead, poll_table *pt)
fs/eventpoll.c:ep_rbtree_insert(struct eventpoll *ep, struct epitem *epi)
ep_remove()
fs/eventpoll.c:ep_send_events(struct eventpoll *ep, struct epoll_event __user *events, int maxevents)
fs/eventpoll.c:reverse_path_check(void)
fs/eventpoll.c:reverse_path_check_proc(struct hlist_head *refs, int depth)
net/socket.c:__sock_create(struct net *net, int family, int type, int protocol, struct socket **res, int kern)
net/socket.c:__sys_socket(int family, int type, int protocol)
net/socket.c:sock_alloc_file()
net/socket.c:sock_alloc_inode()
net/socket.c:sock_init(void)
net/socket.c:sock_register(const struct net_proto_family *ops)
net/socket.c:sockfd_lookup()
net/socket.c:sockfd_lookup_light()
__do_sys_munmap()
__se_sys_munmap()
mm/mmap.c:__vm_munmap(unsigned long start, size_t len, bool unlock)
__x64_sys_munmap()
arch/x86/entry/common.c:do_syscall_64(struct pt_regs *regs, int nr)
arch/x86/entry/common.c:do_syscall_x64(struct pt_regs *regs, int nr)
mm/mmap.c:do_vmi_align_munmap(struct vma_iterator *vmi, struct vm_area_struct *vma, struct mm_struct *mm, unsigned long start, unsigned long end, struct list_head *uf, bool unlock)
mm/mmap.c:do_vmi_munmap(struct vma_iterator *vmi, struct mm_struct *mm, unsigned long start, size_t len, struct list_head *uf, bool unlock)
fs/super.c:alloc_super()
fs/super.c:generic_shutdown_super(struct super_block *sb))
fs/super.c:get_tree_bdev(struct fs_context *fc, int (*fill_super)(struct super_block *, struct fs_context *)))
fs/super.c:mount_bdev()
fs/super.c:reconfigure_super(struct fs_context *fc))
fs/super.c:sget_fc()
fs/super.c:vfs_get_super(struct fs_context *fc, bool reconf, int (*test)(struct super_block *, struct fs_context *), int (*fill_super)(struct super_block *sb, struct fs_context *fc)))
fs/super.c:vfs_get_tree(struct fs_context *fc))
arch/x86/entry/common.c:__do_fast_syscall_32(struct pt_regs *regs)
arch/x86/entry/common.c:do_SYSENTER_32(struct pt_regs *regs)
arch/x86/entry/common.c:do_fast_syscall_32(struct pt_regs *regs)
arch/x86/entry/common.c:do_int80_syscall_32(struct pt_regs *regs)
arch/x86/entry/common.c:do_syscall_32_irqs_on(struct pt_regs *regs, int nr)
arch/x86/entry/common.c:do_syscall_64(struct pt_regs *regs, int nr)
arch/x86/entry/common.c:do_syscall_x32(struct pt_regs *regs, int nr)
arch/x86/entry/common.c:do_syscall_x64(struct pt_regs *regs, int nr)
net/core/sock.c:sk_alloc()
net/core/sock.c:sk_destruct(struct sock *sk)
net/core/sock.c:sk_free(struct sock *sk)
mm/mmap.c:do_vmi_align_munmap(struct vma_iterator *vmi, struct vm_area_struct *vma, struct mm_struct *mm, unsigned long start, unsigned long end, struct list_head *uf, bool unlock)
mm/mmap.c:validate_mm(struct mm_struct *mm)
kernel/sys.c:do_prlimit(struct task_struct *tsk, unsigned int resource, struct rlimit *new_rlim, struct rlimit *old_rlim))
kernel/sys.c:override_release(char __user *release, size_t len))
kernel/sys.c:set_user(struct cred *new)
func for case 4a547542bb29dc957c096f0c95ef9154e93d68d3
fs/ext4/indirect.c:ext4_alloc_branch(handle_t *handle, struct ext4_allocation_request *ar, int indirect_blks, ext4_lblk_t *offsets, Indirect *branch)
fs/ext4/indirect.c:ext4_blks_to_allocate(Indirect *branch, int k, unsigned int blks, int blocks_to_boundary)
fs/ext4/indirect.c:ext4_block_to_path(struct inode *inode, ext4_lblk_t i_block, ext4_lblk_t offsets[4], int *boundary)
fs/ext4/indirect.c:ext4_clear_blocks(handle_t *handle, struct inode *inode, struct buffer_head *bh, ext4_fsblk_t block_to_free, unsigned long count, __le32 *first, __le32 *last)
fs/ext4/indirect.c:ext4_find_near(struct inode *inode, Indirect *ind)
fs/ext4/indirect.c:ext4_find_shared()
fs/ext4/indirect.c:ext4_free_branches(handle_t *handle, struct inode *inode, struct buffer_head *parent_bh, __le32 *first, __le32 *last, int depth)
fs/ext4/indirect.c:ext4_free_data(handle_t *handle, struct inode *inode, struct buffer_head *this_bh, __le32 *first, __le32 *last)
fs/ext4/indirect.c:ext4_get_branch()
fs/ext4/indirect.c:ext4_ind_map_blocks(handle_t *handle, struct inode *inode, struct ext4_map_blocks *map, int flags)
fs/ext4/indirect.c:ext4_ind_remove_space(handle_t *handle, struct inode *inode, ext4_lblk_t start, ext4_lblk_t end)
fs/ext4/indirect.c:ext4_ind_trunc_restart_fn(handle_t *handle, struct inode *inode, struct buffer_head *bh, int *dropped)
fs/ext4/indirect.c:ext4_ind_truncate(handle_t *handle, struct inode *inode)
fs/ext4/indirect.c:ext4_splice_branch(handle_t *handle, struct ext4_allocation_request *ar, Indirect *where, int num)
fs/ext4/inode.c:__ext4_block_zero_page_range(handle_t *handle, struct address_space *mapping, loff_t from, loff_t length)
fs/ext4/inode.c:_ext4_get_block(struct inode *inode, sector_t iblock, struct buffer_head *bh, int flags)
fs/ext4/inode.c:ext4_block_truncate_page(handle_t *handle, struct address_space *mapping, loff_t from)
fs/ext4/inode.c:ext4_block_zero_page_range(handle_t *handle, struct address_space *mapping, loff_t from, loff_t length)
fs/ext4/inode.c:ext4_da_get_block_prep(struct inode *inode, sector_t iblock, struct buffer_head *bh, int create)
fs/ext4/inode.c:ext4_da_map_blocks(struct inode *inode, sector_t iblock, struct ext4_map_blocks *map, struct buffer_head *bh)
fs/ext4/inode.c:ext4_getblk()
fs/ext4/inode.c:ext4_insert_delayed_block(struct inode *inode, ext4_lblk_t lblk)
fs/ext4/inode.c:ext4_map_blocks(handle_t *handle, struct inode *inode, struct ext4_map_blocks *map, int flags)
fs/ext4/inode.c:ext4_map_blocks_es_recheck(handle_t *handle, struct inode *inode, struct ext4_map_blocks *es_map, struct ext4_map_blocks *map, int flags)
fs/ext4/inode.c:ext4_punch_hole(struct inode *inode, loff_t offset, loff_t length)
fs/ext4/inode.c:ext4_truncate(struct inode *inode)
fs/ext4/inode.c:ext4_update_disksize_before_punch(struct inode *inode, loff_t offset, loff_t len)
fs/ext4/inode.c:ext4_writepage(struct page *page, struct writeback_control *wbc)
fs/ext4/inode.c:ext4_zero_partial_blocks(handle_t *handle, struct inode *inode, loff_t lstart, loff_t length)
fs/ext4/extents.c:ext4_ext_convert_to_initialized(handle_t *handle, struct inode *inode, struct ext4_map_blocks *map, struct ext4_ext_path **ppath, int flags)
fs/ext4/extents.c:ext4_ext_correct_indexes(handle_t *handle, struct inode *inode, struct ext4_ext_path *path)
fs/ext4/extents.c:ext4_ext_create_new_leaf(handle_t *handle, struct inode *inode, unsigned int mb_flags, unsigned int gb_flags, struct ext4_ext_path **ppath, struct ext4_extent *newext)
fs/ext4/extents.c:ext4_ext_handle_unwritten_extents(handle_t *handle, struct inode *inode, struct ext4_map_blocks *map, struct ext4_ext_path **ppath, int flags, unsigned int allocated, ext4_fsblk_t newblock)
fs/ext4/extents.c:ext4_ext_insert_extent(handle_t *handle, struct inode *inode, struct ext4_ext_path **ppath, struct ext4_extent *newext, int gb_flags)
fs/ext4/extents.c:ext4_ext_map_blocks(handle_t *handle, struct inode *inode, struct ext4_map_blocks *map, int flags)
fs/ext4/extents.c:ext4_ext_remove_space(struct inode *inode, ext4_lblk_t start, ext4_lblk_t end)
fs/ext4/extents.c:ext4_ext_rm_leaf(handle_t *handle, struct inode *inode, struct ext4_ext_path *path, struct partial_cluster *partial, ext4_lblk_t start, ext4_lblk_t end)
fs/ext4/extents.c:ext4_ext_search_left(struct inode *inode, struct ext4_ext_path *path, ext4_lblk_t *logical, ext4_fsblk_t *phys)
fs/ext4/extents.c:ext4_ext_search_right(struct inode *inode, struct ext4_ext_path *path, ext4_lblk_t *logical, ext4_fsblk_t *phys, struct ext4_extent *ret_ex)
fs/ext4/extents.c:ext4_ext_split(handle_t *handle, struct inode *inode, unsigned int flags, struct ext4_ext_path *path, struct ext4_extent *newext, int at)
ext4_ext_split_extent()
fs/ext4/extents.c:ext4_ext_try_to_merge(handle_t *handle, struct inode *inode, struct ext4_ext_path *path, struct ext4_extent *ex)
fs/ext4/indirect.c:ext4_ind_remove_space(handle_t *handle, struct inode *inode, ext4_lblk_t start, ext4_lblk_t end)
fs/ext4/extents.c:ext4_remove_blocks(handle_t *handle, struct inode *inode, struct ext4_extent *ex, struct partial_cluster *partial, ext4_lblk_t from, ext4_lblk_t to)
fs/open.c:dentry_open()
fs/open.c:do_dentry_open(struct file *f, struct inode *inode, int (*open)(struct inode *, struct file *))
fs/open.c:do_sys_ftruncate(unsigned int fd, loff_t length, int small)
fs/open.c:do_sys_truncate(const char __user *pathname, loff_t length)
fs/open.c:do_truncate(struct user_namespace *mnt_userns, struct dentry *dentry, loff_t length, unsigned int time_attrs, struct file *filp)
fs/open.c:filp_open()
fs/open.c:vfs_fallocate(struct file *file, int mode, loff_t offset, loff_t len)
fs/open.c:vfs_truncate(const struct path *path, loff_t length)
fs/ext4/balloc.c:ext4_get_group_desc()
fs/ext4/balloc.c:ext4_get_group_no_and_offset(struct super_block *sb, ext4_fsblk_t blocknr, ext4_group_t *blockgrpp, ext4_grpblk_t *offsetp)
fs/ext4/balloc.c:ext4_get_group_number(struct super_block *sb, ext4_fsblk_t block)
fs/ext4/balloc.c:ext4_init_block_bitmap(struct super_block *sb, struct buffer_head *bh, ext4_group_t block_group, struct ext4_group_desc *gdp)
fs/ext4/balloc.c:ext4_read_block_bitmap()
fs/ext4/balloc.c:ext4_read_block_bitmap_nowait()
fs/ext4/balloc.c:ext4_valid_block_bitmap(struct super_block *sb, struct ext4_group_desc *desc, ext4_group_t block_group, struct buffer_head *bh)
fs/ext4/balloc.c:ext4_validate_block_bitmap(struct super_block *sb, struct ext4_group_desc *desc, ext4_group_t block_group, struct buffer_head *bh)
fs/ext4/extents_status.c:__es_insert_extent(struct inode *inode, struct extent_status *newes)
fs/ext4/extents_status.c:__es_remove_extent(struct inode *inode, ext4_lblk_t lblk, ext4_lblk_t end, int *reserved)
fs/ext4/extents_status.c:ext4_es_cache_extent(struct inode *inode, ext4_lblk_t lblk, ext4_lblk_t len, ext4_fsblk_t pblk, unsigned int status)
fs/ext4/extents_status.c:ext4_es_insert_delayed_block(struct inode *inode, ext4_lblk_t lblk, bool allocated)
fs/ext4/extents_status.c:ext4_es_insert_extent(struct inode *inode, ext4_lblk_t lblk, ext4_lblk_t len, ext4_fsblk_t pblk, unsigned int status)
fs/ext4/extents_status.c:ext4_es_insert_extent_ind_check(struct inode *inode, struct extent_status *es)
fs/ext4/extents_status.c:ext4_es_lookup_extent(struct inode *inode, ext4_lblk_t lblk, ext4_lblk_t *next_lblk, struct extent_status *es)
fs/ext4/extents_status.c:ext4_es_remove_extent(struct inode *inode, ext4_lblk_t lblk, ext4_lblk_t len)
fs/ext4/indirect.c:ext4_ind_remove_space(handle_t *handle, struct inode *inode, ext4_lblk_t start, ext4_lblk_t end)
extents_status()
fs/read_write.c:__kernel_write(struct file *file, const void *buf, size_t count, loff_t *pos)
fs/read_write.c:do_iter_write(struct file *file, struct iov_iter *iter, loff_t *pos, rwf_t flags)
fs/read_write.c:generic_write_check_limits(struct file *file, loff_t pos, loff_t *count)
fs/read_write.c:generic_write_checks(struct kiocb *iocb, struct iov_iter *from)
generic_write_checks_count()
fs/read_write.c:ksys_pwrite64(unsigned int fd, const char __user *buf, size_t count, loff_t pos)
fs/read_write.c:vfs_iocb_iter_write(struct file *file, struct kiocb *iocb, struct iov_iter *iter)
fs/read_write.c:vfs_write(struct file *file, const char __user *buf, size_t count, loff_t *pos)
fs/ioctl.c:fileattr_fill_flags(struct fileattr *fa, u32 flags)
fs/ioctl.c:fileattr_set_prepare(struct inode *inode, const struct fileattr *old_ma, struct fileattr *fa)
fs/ioctl.c:ioctl_setflags(struct file *file, unsigned int __user *argp)
fs/ext4/ialloc.c:ext4_free_inode(handle_t *handle, struct inode *inode)
fs/ext4/ialloc.c:ext4_mark_inode_used(struct super_block *sb, int ino)
fs/ext4/ialloc.c:find_inode_bit(struct super_block *sb, ext4_group_t group, struct buffer_head *bitmap, unsigned long *ino)
fs/ext4/super.c:__ext4_error(struct super_block *sb, const char *function, unsigned int line, bool force_ro, int error, __u64 block, const char *fmt, ...)
fs/ext4/super.c:ext4_check_descriptors(struct super_block *sb, ext4_fsblk_t sb_block, ext4_group_t *first_not_zeroed)
fs/ext4/super.c:ext4_handle_error(struct super_block *sb, bool force_ro, int error, __u32 ino, __u64 block, const char *func, unsigned int line)
func for case 4ed0d6eea4561854b366170155a78652da4cef29
drivers/usb/usbip/vhci_hcd.c:hub_descriptor(struct usb_hub_descriptor *desc)
drivers/usb/usbip/vhci_hcd.c:rh_port_connect(struct vhci_device *vdev, enum usb_device_speed speed)
drivers/usb/usbip/vhci_hcd.c:rh_port_disconnect(struct vhci_device *vdev)
vhci_device_()
drivers/usb/usbip/vhci_hcd.c:vhci_device_init(struct vhci_device *vdev)
drivers/usb/usbip/vhci_hcd.c:vhci_device_reset(struct usbip_device *ud)
drivers/usb/usbip/vhci_hcd.c:vhci_device_unlink_cleanup(struct vhci_device *vdev)
drivers/usb/usbip/vhci_hcd.c:vhci_hub_control(struct usb_hcd *hcd, u16 typeReq, u16 wValue, u16 wIndex, char *buf, u16 wLength)
drivers/usb/usbip/vhci_hcd.c:vhci_hub_status(struct usb_hcd *hcd, char *buf)
drivers/usb/usbip/vhci_hcd.c:vhci_setup(struct usb_hcd *hcd)
drivers/usb/usbip/vhci_hcd.c:vhci_shutdown_connection(struct usbip_device *ud)
drivers/usb/usbip/vhci_hcd.c:vhci_start(struct usb_hcd *hcd)
drivers/usb/usbip/vhci_hcd.c:vhci_stop(struct usb_hcd *hcd)
drivers/usb/usbip/vhci_hcd.c:vhci_tx_urb(struct urb *urb, struct vhci_device *vdev)
drivers/usb/usbip/vhci_hcd.c:vhci_urb_dequeue(struct usb_hcd *hcd, struct urb *urb, int status)
drivers/usb/usbip/vhci_hcd.c:vhci_urb_enqueue(struct usb_hcd *hcd, struct urb *urb, gfp_t mem_flags)
USBDEVFS_CONTROL()
drivers/usb/core/devio.c:check_ctrlrecip(struct usb_dev_state *ps, unsigned int requesttype, unsigned int request, unsigned int index)
drivers/usb/core/devio.c:do_proc_bulk(struct usb_dev_state *ps, struct usbdevfs_bulktransfer *bulk)
drivers/usb/core/devio.c:do_proc_control(struct usb_dev_state *ps, struct usbdevfs_ctrltransfer *ctrl)
drivers/usb/core/devio.c:proc_bulk_compat(struct usb_dev_state *ps, struct usbdevfs_bulktransfer32 __user *p32)
drivers/usb/core/devio.c:proc_control(struct usb_dev_state *ps, void __user *arg)
drivers/usb/core/devio.c:proc_control_compat(struct usb_dev_state *ps, struct usbdevfs_ctrltransfer32 __user *p32)
drivers/usb/core/devio.c:proc_do_submiturb(struct usb_dev_state *ps, struct usbdevfs_urb *uurb, struct usbdevfs_iso_packet_desc __user *iso_frame_desc, void __user *arg, sigval_t userurb_sigval)
drivers/usb/core/devio.c:proc_ioctl(struct usb_dev_state *ps, struct usbdevfs_ioctl *ctl)
drivers/usb/core/devio.c:proc_ioctl_compat(struct usb_dev_state *ps, compat_uptr_t arg)
drivers/usb/core/devio.c:proc_submiturb(struct usb_dev_state *ps, void __user *arg)
drivers/usb/core/devio.c:proc_submiturb_compat(struct usb_dev_state *ps, void __user *arg)
drivers/usb/core/devio.c:usbdev_do_ioctl(struct file *file, unsigned int cmd, void __user *p)
drivers/usb/core/devio.c:usbdev_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
drivers/usb/core/devio.c:usbdev_open(struct inode *inode, struct file *file)
drivers/usb/core/devio.c:usbdev_release(struct inode *inode, struct file *file)
drivers/usb/usbip/vhci_hcd.c:vhci_hub_control(struct usb_hcd *hcd, u16 typeReq, u16 wValue, u16 wIndex, char *buf, u16 wLength)
USBDEVFS_CONTROL()
drivers/usb/core/message.c:usb_control_msg(struct usb_device *dev, unsigned int pipe, __u8 request, __u8 requesttype, __u16 value, __u16 index, void *data, __u16 size, int timeout)
drivers/usb/core/message.c:usb_control_msg_recv(struct usb_device *dev, __u8 endpoint, __u8 request, __u8 requesttype, __u16 value, __u16 index, void *driver_data, __u16 size, int timeout, gfp_t memflags)
drivers/usb/core/message.c:usb_disable_device(struct usb_device *dev, int skip_ep0)
drivers/usb/core/message.c:usb_disable_device_endpoints(struct usb_device *dev, int skip_ep0)
drivers/usb/core/message.c:usb_enable_endpoint(struct usb_device *dev, struct usb_host_endpoint *ep, bool reset_ep)
drivers/usb/core/message.c:usb_get_descriptor(struct usb_device *dev, unsigned char type, unsigned char index, void *buf, int size)
drivers/usb/core/message.c:usb_get_device_descriptor(struct usb_device *dev, unsigned int size)
drivers/usb/core/message.c:usb_get_status(struct usb_device *dev, int recip, int type, int target, void *data)
drivers/usb/core/message.c:usb_get_string(struct usb_device *dev, unsigned short langid, unsigned char index, void *buf, int size)
drivers/usb/core/message.c:usb_internal_control_msg(struct usb_device *usb_dev, unsigned int pipe, struct usb_ctrlrequest *cmd, void *data, int len, int timeout)
drivers/usb/core/message.c:usb_reset_configuration(struct usb_device *dev)
drivers/usb/core/message.c:usb_reset_endpoint(struct usb_device *dev, unsigned int epaddr)
drivers/usb/core/message.c:usb_set_configuration(struct usb_device *dev, int configuration)
drivers/usb/core/message.c:usb_set_interface(struct usb_device *dev, int interface, int alternate)
drivers/usb/core/message.c:usb_start_wait_urb(struct urb *urb, int timeout, int *actual_length)
drivers/usb/core/hcd.c:rh_call_control(struct usb_hcd *hcd, struct urb *urb)
drivers/usb/core/hcd.c:usb_hcd_check_unlink_urb(struct usb_hcd *hcd, struct urb *urb, int status)
drivers/usb/core/hcd.c:usb_hcd_giveback_urb(struct usb_hcd *hcd, struct urb *urb, int status)
drivers/usb/core/hcd.c:usb_hcd_link_urb_to_ep(struct usb_hcd *hcd, struct urb *urb)
drivers/usb/core/hcd.c:usb_hcd_map_urb_for_dma(struct usb_hcd *hcd, struct urb *urb, gfp_t mem_flags)
drivers/usb/core/hcd.c:usb_hcd_submit_urb(struct urb *urb, gfp_t mem_flags)
drivers/usb/core/hcd.c:usb_hcd_unlink_urb(struct urb *urb, int status)
drivers/usb/core/hcd.c:usb_hcd_unmap_urb_for_dma(struct usb_hcd *hcd, struct urb *urb)
lib/ubsan.c:__ubsan_handle_divrem_overflow(void *_data, void *lhs, void *rhs)
lib/ubsan.c:__ubsan_handle_out_of_bounds(void *_data, void *index)
lib/ubsan.c:__ubsan_handle_shift_out_of_bounds(void *_data, void *lhs, void *rhs)
lib/ubsan.c:__ubsan_handle_type_mismatch_v1(void *_data, void *ptr)
lib/ubsan.c:ubsan_epilogue(void)
lib/ubsan.c:ubsan_prologue(struct source_location *loc, const char *reason)
lib/ubsan.c:ubsan_type_mismatch_common(struct type_mismatch_data_common *data, unsigned long ptr)
lib/ubsan.c:val_to_string(char *str, size_t size, struct type_descriptor *type, void *value)
drivers/usb/usbip/usbip_common.c:correct_endian_basic(struct usbip_header_basic *base, int send)
drivers/usb/usbip/usbip_common.c:correct_endian_cmd_submit(struct usbip_header_cmd_submit *pdu, int send)
drivers/usb/usbip/usbip_common.c:usbip_dump_header(struct usbip_header *pdu)
drivers/usb/usbip/usbip_common.c:usbip_dump_urb(struct urb *urb)
drivers/usb/usbip/usbip_common.c:usbip_header_correct_endian(struct usbip_header *pdu, int send)
drivers/usb/usbip/usbip_common.c:usbip_pack_cmd_submit(struct usbip_header *pdu, struct urb *urb, int pack)
drivers/usb/usbip/usbip_common.c:usbip_pack_ret_submit(struct usbip_header *pdu, struct urb *urb, int pack)
drivers/usb/usbip/usbip_common.c:usbip_recv(struct socket *sock, void *buf, int size)
drivers/usb/core/urb.c:__usb_unanchor_urb(struct urb *urb, struct usb_anchor *anchor)
drivers/usb/core/urb.c:usb_alloc_urb()
drivers/usb/core/urb.c:usb_anchor_urb(struct urb *urb, struct usb_anchor *anchor)
drivers/usb/core/urb.c:usb_init_urb(struct urb *urb)
drivers/usb/core/urb.c:usb_kill_urb(struct urb *urb)
drivers/usb/core/urb.c:usb_pipe_type_check(struct usb_device *dev, unsigned int pipe)
drivers/usb/core/urb.c:usb_submit_urb(struct urb *urb, gfp_t mem_flags)
drivers/usb/core/urb.c:usb_unanchor_urb(struct urb *urb)
drivers/usb/core/hub.c:hub_port_connect(struct usb_hub *hub, int port1, u16 portstatus, u16 portchange)
drivers/usb/core/hub.c:hub_port_init(struct usb_hub *hub, struct usb_device *udev, int port1, int retry_counter)
drivers/usb/core/hub.c:hub_port_reset(struct usb_hub *hub, int port1, struct usb_device *udev, unsigned int delay, bool warm)
drivers/usb/core/config.c:usb_get_configuration(struct usb_device *dev)
drivers/usb/core/config.c:usb_parse_configuration(struct usb_device *dev, int cfgidx, struct usb_host_config *config, unsigned char *buffer, int size)
drivers/usb/core/config.c:usb_parse_interface(struct device *ddev, int cfgno, struct usb_host_config *config, unsigned char *buffer, int size, u8 inums[], u8 nalts[])
func for case 52eac4b79cfb13db9907627c1afc185252168cdc
sound/usb/midi.c:__snd_usbmidi_create(struct snd_card *card, struct usb_interface *iface, struct list_head *midi_list, const struct snd_usb_audio_quirk *quirk, unsigned int usb_id)
sound/usb/midi.c:snd_usbmidi_create_endpoints(struct snd_usb_midi *umidi, struct snd_usb_midi_endpoint_info *endpoints)
sound/usb/midi.c:snd_usbmidi_detect_endpoints(struct snd_usb_midi *umidi, struct snd_usb_midi_endpoint_info *endpoint, int max_endpoints)
sound/usb/midi.c:snd_usbmidi_disconnect(struct list_head *p)
sound/usb/midi.c:snd_usbmidi_free(struct snd_usb_midi *umidi)
sound/usb/midi.c:snd_usbmidi_get_ms_info(struct snd_usb_midi *umidi, struct snd_usb_midi_endpoint_info *endpoints)
sound/usb/midi.c:snd_usbmidi_in_endpoint_create(struct snd_usb_midi *umidi, struct snd_usb_midi_endpoint_info *ep_info, struct snd_usb_midi_endpoint *rep)
sound/usb/midi.c:snd_usbmidi_in_urb_complete(struct urb *urb)
sound/usb/midi.c:snd_usbmidi_input_data(struct snd_usb_midi_in_endpoint *ep, int portidx, uint8_t *data, int length)
sound/usb/midi.c:snd_usbmidi_input_start_ep(struct snd_usb_midi *umidi, struct snd_usb_midi_in_endpoint *ep)
sound/usb/midi.c:snd_usbmidi_out_endpoint_create(struct snd_usb_midi *umidi, struct snd_usb_midi_endpoint_info *ep_info, struct snd_usb_midi_endpoint *rep)
sound/usb/midi.c:snd_usbmidi_out_urb_complete(struct urb *urb)
sound/usb/midi.c:snd_usbmidi_standard_input(struct snd_usb_midi_in_endpoint *ep, uint8_t *buffer, int buffer_length)
sound/usb/midi.c:snd_usbmidi_standard_output(struct snd_usb_midi_out_endpoint *ep, struct urb *urb)
sound/usb/midi.c:snd_usbmidi_transmit_byte(struct usbmidi_out_port *port, uint8_t b, struct urb *urb)
sound/usb/card.c:__usb_audio_resume(struct usb_interface *intf, bool reset_resume)
sound/usb/card.c:get_alias_id(struct usb_device *dev, unsigned int *id)
sound/usb/card.c:get_alias_quirk()
sound/usb/card.c:snd_usb_audio_create(struct usb_interface *intf, struct usb_device *dev, int idx, const struct snd_usb_audio_quirk *quirk, unsigned int usb_id, struct snd_usb_audio **rchip)
sound/usb/card.c:snd_usb_autoresume(struct snd_usb_audio *chip)
sound/usb/card.c:snd_usb_create_stream(struct snd_usb_audio *chip, int ctrlif, int interface)
sound/usb/card.c:snd_usb_create_streams(struct snd_usb_audio *chip, int ctrlif)
sound/usb/card.c:snd_usb_lock_shutdown(struct snd_usb_audio *chip)
sound/usb/card.c:snd_usb_stream_disconnect(struct snd_usb_stream *as)
sound/usb/card.c:usb_audio_disconnect(struct usb_interface *intf)
sound/usb/card.c:usb_audio_make_longname(struct usb_device *dev, struct snd_usb_audio *chip, const struct snd_usb_audio_quirk *quirk)
sound/usb/card.c:usb_audio_make_shortname(struct usb_device *dev, struct snd_usb_audio *chip, const struct snd_usb_audio_quirk *quirk)
sound/usb/card.c:usb_audio_probe(struct usb_interface *intf, const struct usb_device_id *usb_id)
sound/usb/card.c:usb_audio_suspend(struct usb_interface *intf, pm_message_t message)
sound/usb/quirks.c:create_auto_midi_quirk(struct snd_usb_audio *chip, struct usb_interface *iface, struct usb_driver *driver)
sound/usb/quirks.c:create_auto_pcm_quirk(struct snd_usb_audio *chip, struct usb_interface *iface, struct usb_driver *driver)
sound/usb/quirks.c:create_composite_quirk(struct snd_usb_audio *chip, struct usb_interface *iface, struct usb_driver *driver, const struct snd_usb_audio_quirk *quirk_comp)
sound/usb/quirks.c:create_fixed_stream_quirk(struct snd_usb_audio *chip, struct usb_interface *iface, struct usb_driver *driver, const struct snd_usb_audio_quirk *quirk)
sound/usb/quirks.c:create_roland_midi_quirk(struct snd_usb_audio *chip, struct usb_interface *iface, struct usb_driver *driver, struct usb_host_interface *alts)
sound/usb/quirks.c:create_standard_audio_quirk(struct snd_usb_audio *chip, struct usb_interface *iface, struct usb_driver *driver, const struct snd_usb_audio_quirk *quirk)
sound/usb/quirks.c:create_std_midi_quirk(struct snd_usb_audio *chip, struct usb_interface *iface, struct usb_driver *driver, struct usb_host_interface *alts)
sound/usb/quirks.c:create_yamaha_midi_quirk(struct snd_usb_audio *chip, struct usb_interface *iface, struct usb_driver *driver, struct usb_host_interface *alts)
sound/usb/quirks.c:set_format_emu_quirk(struct snd_usb_substream *subs, const struct audioformat *fmt)
sound/usb/quirks.c:snd_usb_apply_boot_quirk(struct usb_device *dev, struct usb_interface *intf, const struct snd_usb_audio_quirk *quirk, unsigned int id)
sound/usb/quirks.c:snd_usb_apply_interface_quirk(struct snd_usb_audio *chip, int iface, int altno)
sound/usb/quirks.c:snd_usb_create_quirk(struct snd_usb_audio *chip, struct usb_interface *iface, struct usb_driver *driver, const struct snd_usb_audio_quirk *quirk)
sound/usb/quirks.c:snd_usb_ctl_msg_quirk(struct usb_device *dev, unsigned int pipe, __u8 request, __u8 requesttype, __u16 value, __u16 index, void *data, __u16 size)
sound/usb/quirks.c:snd_usb_endpoint_start_quirk(struct snd_usb_endpoint *ep)
sound/usb/quirks.c:snd_usb_set_format_quirk(struct snd_usb_substream *subs, const struct audioformat *fmt)
drivers/usb/core/config.c:config_endpoint_is_duplicate(struct usb_host_config *config, int inum, int asnum, struct usb_endpoint_descriptor *d)
drivers/usb/core/config.c:find_next_descriptor(unsigned char *buffer, int size, int dt1, int dt2, int *num_skipped)
drivers/usb/core/config.c:usb_get_bos_descriptor(struct usb_device *dev)
drivers/usb/core/config.c:usb_get_configuration(struct usb_device *dev)
drivers/usb/core/config.c:usb_parse_configuration(struct usb_device *dev, int cfgidx, struct usb_host_config *config, unsigned char *buffer, int size)
drivers/usb/core/config.c:usb_parse_endpoint(struct device *ddev, int cfgno, struct usb_host_config *config, int inum, int asnum, struct usb_host_interface *ifp, int num_ep, unsigned char *buffer, int size)
drivers/usb/core/config.c:usb_parse_interface(struct device *ddev, int cfgno, struct usb_host_config *config, unsigned char *buffer, int size, u8 inums[], u8 nalts[])
drivers/usb/core/config.c:usb_parse_ss_endpoint_companion(struct device *ddev, int cfgno, int inum, int asnum, struct usb_host_endpoint *ep, unsigned char *buffer, int size)
drivers/usb/core/message.c:usb_control_msg(struct usb_device *dev, unsigned int pipe, __u8 request, __u8 requesttype, __u16 value, __u16 index, void *data, __u16 size, int timeout)
drivers/usb/core/message.c:usb_disable_endpoint(struct usb_device *dev, unsigned int epaddr, bool reset_hardware)
drivers/usb/core/message.c:usb_driver_set_configuration(struct usb_device *udev, int config)
drivers/usb/core/message.c:usb_enable_endpoint(struct usb_device *dev, struct usb_host_endpoint *ep, bool reset_ep)
drivers/usb/core/message.c:usb_get_descriptor(struct usb_device *dev, unsigned char type, unsigned char index, void *buf, int size)
drivers/usb/core/message.c:usb_internal_control_msg(struct usb_device *usb_dev, unsigned int pipe, struct usb_ctrlrequest *cmd, void *data, int len, int timeout)
drivers/usb/core/message.c:usb_set_configuration(struct usb_device *dev, int configuration)
drivers/usb/core/message.c:usb_start_wait_urb(struct urb *urb, int timeout, int *actual_length)
sound/usb/helper.c:snd_usb_ctl_msg(struct usb_device *dev, unsigned int pipe, __u8 request, __u8 requesttype, __u16 value, __u16 index, void *data, __u16 size)
sound/usb/helper.c:snd_usb_find_csint_desc()
sound/usb/helper.c:snd_usb_find_desc()
sound/usb/helper.c:snd_usb_parse_datainterval(struct snd_usb_audio *chip, struct usb_host_interface *alts)
drivers/usb/core/hub.c:check_highspeed(struct usb_hub *hub, struct usb_device *udev, int port1)
drivers/usb/core/hub.c:hub_configure(struct usb_hub *hub, struct usb_endpoint_descriptor *endpoint)
drivers/usb/core/hub.c:hub_event(struct work_struct *work)
drivers/usb/core/hub.c:hub_port_connect(struct usb_hub *hub, int port1, u16 portstatus, u16 portchange)
drivers/usb/core/hub.c:hub_port_init(struct usb_hub *hub, struct usb_device *udev, int port1, int retry_counter)
drivers/usb/core/hub.c:hub_port_reset(struct usb_hub *hub, int port1, struct usb_device *udev, unsigned int delay, bool warm)
drivers/usb/core/hub.c:usb_enumerate_device(struct usb_device *udev)
drivers/usb/core/hub.c:usb_new_device(struct usb_device *udev)
sound/usb/midi.c:snd_usbmidi_get_ms_info(struct snd_usb_midi *umidi, struct snd_usb_midi_endpoint_info *endpoints)
lib/ubsan.c:__ubsan_handle_shift_out_of_bounds(void *_data, void *lhs, void *rhs)
lib/ubsan.c:ubsan_epilogue(void)
lib/ubsan.c:ubsan_prologue(struct source_location *loc, const char *reason)
include/linux/usb.h:usb_maxpacket(struct usb_device *udev, int pipe, int is_out)
func for case 602383e46c337fd7a0b8346ee047fe2778b76647
drivers/input/evdev.c:__pass_event(struct evdev_client *client, const struct input_event *event)
drivers/input/evdev.c:evdev_cleanup(struct evdev *evdev)
drivers/input/evdev.c:evdev_connect(struct input_handler *handler, struct input_dev *dev, const struct input_device_id *id)
drivers/input/evdev.c:evdev_disconnect(struct input_handle *handle)
drivers/input/evdev.c:evdev_do_ioctl(struct file *file, unsigned int cmd, void __user *p, int compat_mode)
drivers/input/evdev.c:evdev_events(struct input_handle *handle, const struct input_value *vals, unsigned int count)
drivers/input/evdev.c:evdev_fetch_next_event(struct evdev_client *client, struct input_event *event)
drivers/input/evdev.c:evdev_ioctl_handler(struct file *file, unsigned int cmd, void __user *p, int compat_mode)
drivers/input/evdev.c:evdev_open(struct inode *inode, struct file *file)
drivers/input/evdev.c:evdev_pass_values(struct evdev_client *client, const struct input_value *vals, unsigned int count, ktime_t *ev_time)
drivers/input/evdev.c:evdev_poll(struct file *file, poll_table *wait)
drivers/input/evdev.c:evdev_read(struct file *file, char __user *buffer, size_t count, loff_t *ppos)
drivers/input/evdev.c:evdev_release(struct inode *inode, struct file *file)
drivers/input/evdev.c:evdev_set_clk_type(struct evdev_client *client, unsigned int clkid)
drivers/input/evdev.c:evdev_write(struct file *file, const char __user *buffer, size_t count, loff_t *ppos)
event_lock()
f_owner()
net/ipv4/tcp_input.c:tcp_ack(struct sock *sk, const struct sk_buff *skb, int flag)
net/ipv4/tcp_input.c:tcp_check_urg(struct sock *sk, const struct tcphdr *th)
net/ipv4/tcp_input.c:tcp_clean_rtx_queue(struct sock *sk, u32 prior_fack, u32 prior_snd_una, struct tcp_sacktag_state *sack, bool ece_ack)
net/ipv4/tcp_input.c:tcp_cwnd_reduction(struct sock *sk, int newly_acked_sacked, int flag)
net/ipv4/tcp_input.c:tcp_data_queue(struct sock *sk, struct sk_buff *skb)
net/ipv4/tcp_input.c:tcp_data_queue_ofo(struct sock *sk, struct sk_buff *skb)
net/ipv4/tcp_input.c:tcp_enter_loss(struct sock *sk)
net/ipv4/tcp_input.c:tcp_fastretrans_alert(struct sock *sk, const u32 prior_snd_una, int num_dupack, int *ack_flag, int *rexmit)
net/ipv4/tcp_input.c:tcp_process_loss(struct sock *sk, int flag, int num_dupack, int *rexmit)
net/ipv4/tcp_input.c:tcp_rcv_established(struct sock *sk, struct sk_buff *skb)
net/ipv4/tcp_input.c:tcp_sacktag_write_queue(struct sock *sk, const struct sk_buff *ack_skb, u32 prior_snd_una, struct tcp_sacktag_state *state)
net/ipv4/tcp_input.c:tcp_try_undo_loss(struct sock *sk, bool frto_undo)
net/ipv4/tcp_input.c:tcp_urg(struct sock *sk, struct sk_buff *skb, const struct tcphdr *th)
net/ipv4/tcp_input.c:tcp_validate_incoming(struct sock *sk, struct sk_buff *skb, const struct tcphdr *th, int syn_inerr)
net/ipv4/tcp_input.c:tcp_xmit_recovery(struct sock *sk, int rexmit)
fs/fcntl.c:do_fcntl(int fd, unsigned int cmd, unsigned long arg, struct file *filp)
fs/fcntl.c:f_getown(struct file *filp)
fs/fcntl.c:f_getown_ex(struct file *filp, unsigned long arg)
fs/fcntl.c:f_modown(struct file *filp, struct pid *pid, enum pid_type type, int force)
fs/fcntl.c:f_setown(struct file *filp, unsigned long arg, int force)
fs/fcntl.c:f_setown_ex(struct file *filp, unsigned long arg)
fs/fcntl.c:fasync_add_entry(int fd, struct file *filp, struct fasync_struct **fapp)
fs/fcntl.c:fasync_insert_entry()
fs/fcntl.c:fasync_remove_entry(struct file *filp, struct fasync_struct **fapp)
fs/fcntl.c:fcntl_init(void)
fs/fcntl.c:kill_fasync_rcu(struct fasync_struct *fa, int sig, int band)
fs/fcntl.c:send_sigio(struct fown_struct *fown, int fd, int band)
fs/fcntl.c:send_sigio_to_task(struct task_struct *p, struct fown_struct *fown, int fd, int reason, enum pid_type type)
fs/fcntl.c:send_sigurg(struct fown_struct *fown)
fs/fcntl.c:sigio_perm(struct task_struct *p, struct fown_struct *fown, int sig)
net/core/sock.c:lock_sock_fast(struct sock *sk)
net/core/sock.c:lock_sock_nested(struct sock *sk, int subclass)
net/core/sock.c:release_sock(struct sock *sk)
net/core/sock.c:sk_alloc()
net/core/sock.c:sk_clear_memalloc(struct sock *sk)
net/core/sock.c:sk_free(struct sock *sk)
net/core/sock.c:sk_prot_alloc()
sk_send_sigurg()
kernel/locking/lockdep.c:check_chain_key(struct task_struct *curr)
kernel/locking/lockdep.c:check_irq_usage(struct task_struct *curr, struct held_lock *prev, struct held_lock *next)
kernel/locking/lockdep.c:check_usage_backwards(struct task_struct *curr, struct held_lock *this, enum lock_usage_bit bit)
kernel/locking/lockdep.c:mark_lock_irq(struct task_struct *curr, struct held_lock *this, enum lock_usage_bit new_bit)
kernel/locking/lockdep.c:mark_usage(struct task_struct *curr, struct held_lock *hlock, int check)
kernel/locking/lockdep.c:print_irq_inversion_bug(struct task_struct *curr, struct lock_list *root, struct lock_list *other, struct held_lock *this, int forwards, const char *irqclass)
kernel/locking/lockdep.c:print_irqtrace_events(struct task_struct *curr)
kernel/locking/lockdep.c:validate_chain(struct task_struct *curr, struct held_lock *hlock, int chain_head, u64 chain_key)
drivers/input/input.c:input_attach_handler(struct input_dev *dev, struct input_handler *handler)
drivers/input/input.c:input_close_device(struct input_handle *handle)
drivers/input/input.c:input_flush_device(struct input_handle *handle, struct file *file)
drivers/input/input.c:input_handle_event(struct input_dev *dev, unsigned int type, unsigned int code, int value)
drivers/input/input.c:input_inject_event(struct input_handle *handle, unsigned int type, unsigned int code, int value)
drivers/input/input.c:input_open_device(struct input_handle *handle)
drivers/input/input.c:input_pass_values(struct input_dev *dev, struct input_value *vals, unsigned int count)
drivers/input/input.c:input_to_handler(struct input_handle *handle, struct input_value *vals, unsigned int count)
__tcp_close()
net/ipv4/tcp.c:tcp_check_oom(struct sock *sk, int shift)
net/ipv4/tcp.c:tcp_cleanup_rbuf(struct sock *sk, int copied)
net/ipv4/tcp.c:tcp_close(struct sock *sk, long timeout)
net/ipv4/tcp.c:tcp_push(struct sock *sk, int flags, int mss_now, int nonagle, int size_goal)
tcp_recvmsg_locked()
net/ipv4/tcp.c:tcp_sendmsg_locked(struct sock *sk, struct msghdr *msg, size_t size)
net/ipv4/tcp.c:tcp_shutdown(struct sock *sk, int how)
net/socket.c:__sock_release(struct socket *sock, struct inode *inode)
event_lock()
f_owner()
net/socket.c:sock_fasync(int fd, struct file *filp, int on)
net/socket.c:sock_wake_async(struct socket_wq *wq, int how, int band)
AF_INET()
include/net/sock.h:__sk_add_backlog(struct sock *sk, struct sk_buff *skb)
event_lock()
f_owner()
fs/fcntl.c:send_sigurg(struct fown_struct *fown)
include/net/sock.h:sk_add_backlog(struct sock *sk, struct sk_buff *skb, unsigned int limit)
include/net/sock.h:sk_backlog_rcv(struct sock *sk, struct sk_buff *skb)
sk_lock()
_raw_spin_lock_irqsave()
kernel/locking/spinlock.c:_raw_spin_lock_irqsave_nested(raw_spinlock_t *lock, int subclass)
event_lock()
f_owner()
kernel/locking/spinlock.c:in_lock_functions(unsigned long addr)
func for case 625eef83808cdc8a4d6775801b04e985eb32fcf7
fs/btrfs/ordered-data.c:btrfs_alloc_ordered_extent()
fs/btrfs/ordered-data.c:btrfs_dec_test_ordered_pending(struct btrfs_inode *inode, struct btrfs_ordered_extent **cached, u64 file_offset, u64 io_size)
fs/btrfs/ordered-data.c:btrfs_lock_and_flush_ordered_range(struct btrfs_inode *inode, u64 start, u64 end, struct extent_state **cached_state)
fs/btrfs/ordered-data.c:btrfs_lookup_ordered_extent()
fs/btrfs/ordered-data.c:btrfs_lookup_ordered_range()
fs/btrfs/ordered-data.c:btrfs_mark_ordered_io_finished(struct btrfs_inode *inode, struct page *page, u64 file_offset, u64 num_bytes, bool uptodate)
fs/btrfs/ordered-data.c:btrfs_put_ordered_extent(struct btrfs_ordered_extent *entry)
fs/btrfs/ordered-data.c:btrfs_remove_ordered_extent(struct btrfs_inode *btrfs_inode, struct btrfs_ordered_extent *entry)
fs/btrfs/ordered-data.c:btrfs_split_ordered_extent(struct btrfs_ordered_extent *ordered, u64 len)
fs/btrfs/ordered-data.c:btrfs_start_ordered_extent(struct btrfs_ordered_extent *entry)
fs/btrfs/ordered-data.c:btrfs_try_lock_ordered_range(struct btrfs_inode *inode, u64 start, u64 end, struct extent_state **cached_state)
fs/btrfs/ordered-data.c:btrfs_wait_ordered_extents(struct btrfs_root *root, u64 nr, const u64 range_start, const u64 range_len)
fs/btrfs/ordered-data.c:btrfs_wait_ordered_range(struct inode *inode, u64 start, u64 len)
fs/btrfs/ordered-data.c:btrfs_wait_ordered_roots(struct btrfs_fs_info *fs_info, u64 nr, const u64 range_start, const u64 range_len)
fs/btrfs/ordered-data.c:tree_insert()
fs/btrfs/inode.c:btrfs_clear_delalloc_extent(struct btrfs_inode *inode, struct extent_state *state, u32 bits)
fs/btrfs/inode.c:btrfs_create_dio_extent()
fs/btrfs/inode.c:btrfs_dio_end_io(struct btrfs_bio *bbio)
fs/btrfs/inode.c:btrfs_dio_iomap_begin(struct inode *inode, loff_t start, loff_t length, unsigned int flags, struct iomap *iomap, struct iomap *srcmap)
fs/btrfs/inode.c:btrfs_dio_iomap_end(struct inode *inode, loff_t pos, loff_t length, ssize_t written, unsigned int flags, struct iomap *iomap)
fs/btrfs/inode.c:btrfs_dio_submit_io(const struct iomap_iter *iter, struct bio *bio, loff_t file_offset)
fs/btrfs/inode.c:btrfs_extract_ordered_extent(struct btrfs_bio *bbio, struct btrfs_ordered_extent *ordered)
fs/btrfs/inode.c:btrfs_finish_ordered_io(struct btrfs_ordered_extent *ordered_extent)
fs/btrfs/inode.c:btrfs_get_blocks_direct_write(struct extent_map **map, struct inode *inode, struct btrfs_dio_data *dio_data, u64 start, u64 len, unsigned int iomap_flags)
fs/btrfs/inode.c:btrfs_new_extent_direct()
fs/btrfs/inode.c:btrfs_set_extent_delalloc(struct btrfs_inode *inode, u64 start, u64 end, unsigned int extra_bits, struct extent_state **cached_state)
fs/btrfs/ordered-data.c:btrfs_split_ordered_extent(struct btrfs_ordered_extent *ordered, u64 len)
fs/btrfs/inode.c:insert_ordered_extent_file_extent(struct btrfs_trans_handle *trans, struct btrfs_ordered_extent *oe)
fs/btrfs/inode.c:insert_reserved_file_extent(struct btrfs_trans_handle *trans, struct btrfs_inode *inode, u64 file_pos, struct btrfs_file_extent_item *stack_fi, const bool update_inode_bytes, u64 qgroup_reserved)
fs/btrfs/inode.c:lock_extent_direct(struct inode *inode, u64 lockstart, u64 lockend, struct extent_state **cached_state, unsigned int iomap_flags)
fs/btrfs/inode.c:split_extent_map(struct btrfs_inode *inode, u64 start, u64 len, u64 pre)
fs/btrfs/file.c:btrfs_buffered_write(struct kiocb *iocb, struct iov_iter *i)
fs/btrfs/file.c:btrfs_check_nocow_lock(struct btrfs_inode *inode, loff_t pos, size_t *write_bytes, bool nowait)
fs/btrfs/file.c:btrfs_copy_from_user(loff_t pos, size_t write_bytes, struct page **prepared_pages, struct iov_iter *i)
fs/btrfs/file.c:btrfs_direct_write(struct kiocb *iocb, struct iov_iter *from)
fs/btrfs/file.c:btrfs_dirty_pages(struct btrfs_inode *inode, struct page **pages, size_t num_pages, loff_t pos, size_t write_bytes, struct extent_state **cached, bool noreserve)
fs/btrfs/file.c:btrfs_do_write_iter(struct kiocb *iocb, struct iov_iter *from, const struct btrfs_ioctl_encoded_io_args *encoded)
fs/btrfs/file.c:btrfs_drop_extents(struct btrfs_trans_handle *trans, struct btrfs_root *root, struct btrfs_inode *inode, struct btrfs_drop_extents_args *args)
fs/btrfs/file.c:btrfs_drop_pages(struct btrfs_fs_info *fs_info, struct page **pages, size_t num_pages, u64 pos, u64 copied)
fs/btrfs/file.c:btrfs_mark_extent_written(struct btrfs_trans_handle *trans, struct btrfs_inode *inode, u64 start, u64 end)
fs/btrfs/file.c:btrfs_release_file(struct inode *inode, struct file *filp)
fs/btrfs/file.c:btrfs_sync_file(struct file *file, loff_t start, loff_t end, int datasync)
fs/btrfs/file.c:btrfs_write_check(struct kiocb *iocb, struct iov_iter *from, size_t count)
fs/btrfs/file.c:lock_and_cleanup_extent_if_need(struct btrfs_inode *inode, struct page **pages, size_t num_pages, loff_t pos, size_t write_bytes, u64 *lockstart, u64 *lockend, bool nowait, struct extent_state **cached_state)
fs/btrfs/file.c:prepare_pages(struct inode *inode, struct page **pages, size_t num_pages, loff_t pos, size_t write_bytes, bool force_uptodate, bool nowait)
fs/btrfs/file.c:prepare_uptodate_page(struct inode *inode, struct page *page, u64 pos, bool force_uptodate)
fs/iomap/direct-io.c:__iomap_dio_rw()
fs/iomap/direct-io.c:iomap_dio_bio_end_io(struct bio *bio)
fs/iomap/direct-io.c:iomap_dio_bio_iter(const struct iomap_iter *iter, struct iomap_dio *dio)
fs/iomap/direct-io.c:iomap_dio_complete(struct iomap_dio *dio)
fs/iomap/direct-io.c:iomap_dio_complete_work(struct work_struct *work)
fs/iomap/direct-io.c:iomap_dio_iter(const struct iomap_iter *iter, struct iomap_dio *dio)
fs/iomap/direct-io.c:iomap_dio_submit_bio(const struct iomap_iter *iter, struct iomap_dio *dio, struct bio *bio, loff_t pos)
fs/iomap/direct-io.c:iomap_dio_zero(const struct iomap_iter *iter, struct iomap_dio *dio, loff_t pos, unsigned len)
fs/btrfs/ordered-data.c:btrfs_split_ordered_extent(struct btrfs_ordered_extent *ordered, u64 len)
clear_extent_buffer_dirty()
extent_io()
fs/btrfs/extent_io.c:extent_range_clear_dirty_for_io(struct inode *inode, u64 start, u64 end)
fs/btrfs/extent_io.c:extent_range_redirty_for_io(struct inode *inode, u64 start, u64 end)
fs/btrfs/extent_io.c:lock_extent_buffer_for_io(struct extent_buffer *eb, struct btrfs_bio_ctrl *bio_ctrl)
fs/btrfs/extent_io.c:read_extent_buffer(const struct extent_buffer *eb, void *dstv, unsigned long start, unsigned long len)
fs/btrfs/extent_io.c:set_extent_buffer_dirty(struct extent_buffer *eb)
fs/btrfs/extent_io.c:submit_one_bio(struct btrfs_bio_ctrl *bio_ctrl)
fs/btrfs/extent_io.c:write_extent_buffer(const struct extent_buffer *eb, const void *srcv, unsigned long start, unsigned long len)
fs/splice.c:__do_splice(struct file *in, loff_t __user *off_in, struct file *out, loff_t __user *off_out, size_t len, unsigned int flags)
fs/splice.c:direct_splice_read(struct file *in, loff_t *ppos, struct pipe_inode_info *pipe, size_t len, unsigned int flags)
fs/splice.c:do_splice(struct file *in, loff_t *off_in, struct file *out, loff_t *off_out, size_t len, unsigned int flags)
fs/splice.c:do_splice_direct(struct file *in, loff_t *ppos, struct file *out, loff_t *opos, size_t len, unsigned int flags)
fs/splice.c:iter_file_splice_write(struct pipe_inode_info *pipe, struct file *out, loff_t *ppos, size_t len, unsigned int flags)
fs/splice.c:splice_direct_to_actor(struct file *in, struct splice_desc *sd, splice_direct_actor *actor)
fs/splice.c:splice_from_pipe(struct pipe_inode_info *pipe, struct file *out, loff_t *ppos, size_t len, unsigned int flags, splice_actor *actor)
fs/splice.c:splice_to_pipe(struct pipe_inode_info *pipe, struct splice_pipe_desc *spd)
fs/read_write.c:do_iter_write(struct file *file, struct iov_iter *iter, loff_t *pos, rwf_t flags)
fs/read_write.c:do_sendfile(int out_fd, int in_fd, loff_t *ppos, size_t count, loff_t max)
fs/read_write.c:generic_copy_file_checks(struct file *file_in, loff_t pos_in, struct file *file_out, loff_t pos_out, size_t *req_count, unsigned int flags)
fs/read_write.c:generic_file_rw_checks(struct file *file_in, struct file *file_out)
fs/read_write.c:rw_verify_area(int read_write, struct file *file, const loff_t *ppos, size_t count)
fs/read_write.c:vfs_copy_file_range(struct file *file_in, loff_t pos_in, struct file *file_out, loff_t pos_out, size_t len, unsigned int flags)
fs/read_write.c:vfs_read(struct file *file, char __user *buf, size_t count, loff_t *pos)
fs/read_write.c:vfs_write(struct file *file, const char __user *buf, size_t count, loff_t *pos)
fs/btrfs/extent-tree.c:btrfs_free_extent(struct btrfs_trans_handle *trans, struct btrfs_ref *ref)
fs/btrfs/extent-tree.c:btrfs_inc_extent_ref(struct btrfs_trans_handle *trans, struct btrfs_ref *generic_ref)
fs/btrfs/extent-tree.c:btrfs_run_delayed_refs(struct btrfs_trans_handle *trans, unsigned long count)
fs/btrfs/disk-io.c:btrfs_cleanup_transaction(struct btrfs_fs_info *fs_info)
fs/btrfs/disk-io.c:btrfs_destroy_all_ordered_extents(struct btrfs_fs_info *fs_info)
fs/btrfs/disk-io.c:btrfs_destroy_ordered_extents(struct btrfs_root *root)
fs/btrfs/ordered-data.c:btrfs_split_ordered_extent(struct btrfs_ordered_extent *ordered, u64 len)
func for case 637351e3088fc2aed419d941674f2774f4162ea2
drivers/tty/vt/vt.c:con_font_default(struct vc_data *vc, struct console_font_op *op)
drivers/tty/vt/vt.c:con_font_get(struct vc_data *vc, struct console_font_op *op)
drivers/tty/vt/vt.c:con_font_op(struct vc_data *vc, struct console_font_op *op)
drivers/tty/vt/vt.c:con_font_set(struct vc_data *vc, struct console_font_op *op)
drivers/tty/vt/vt.c:con_scroll(struct vc_data *vc, unsigned int top, unsigned int bottom, enum con_scroll dir, unsigned int nr)
drivers/tty/vt/vt.c:do_update_region(struct vc_data *vc, unsigned long start, int count)
drivers/tty/vt/vt.c:vc_allocate(unsigned int currcons)
drivers/tty/vt/vt.c:vc_deallocate()
drivers/tty/vt/vt.c:vc_init(struct vc_data *vc, unsigned int rows, unsigned int cols, int do_clear)
drivers/tty/vt/vt.c:vc_uniscr_alloc()
drivers/tty/vt/vt.c:vc_uniscr_copy_area(u32 **dst_lines, unsigned int dst_cols, unsigned int dst_rows, u32 **src_lines, unsigned int src_cols, unsigned int src_top_row, unsigned int src_bot_row)
drivers/tty/vt/vt.c:vc_uniscr_copy_line(const struct vc_data *vc, void *dest, bool viewed, unsigned int row, unsigned int col, unsigned int nr)
drivers/tty/vt/vt.c:vc_uniscr_delete(struct vc_data *vc, unsigned int nr)
drivers/tty/vt/vt.c:vc_uniscr_insert(struct vc_data *vc, unsigned int nr)
drivers/tty/vt/vt.c:vc_uniscr_scroll(struct vc_data *vc, unsigned int top, unsigned int bottom, enum con_scroll dir, unsigned int nr)
KDFONTOP_SET()
drivers/tty/vt/vt_ioctl.c:change_console(struct vc_data *new_vc))
drivers/tty/vt/vt_ioctl.c:compat_kdfontop_ioctl(struct compat_console_font_op __user *fontop, int perm, struct console_font_op *op, struct vc_data *vc))
drivers/tty/vt/vt_ioctl.c:compat_unimap_ioctl(unsigned int cmd, struct compat_unimapdesc __user *user_ud, int perm, struct vc_data *vc))
drivers/tty/vt/vt_ioctl.c:complete_change_console(struct vc_data *vc))
drivers/tty/vt/vt.c:con_font_get(struct vc_data *vc, struct console_font_op *op)
drivers/tty/vt/vt.c:con_font_op(struct vc_data *vc, struct console_font_op *op)
drivers/tty/vt/vt_ioctl.c:do_unimap_ioctl(int cmd, struct unimapdesc __user *user_ud, bool perm, struct vc_data *vc))
drivers/tty/vt/vt_ioctl.c:vt_compat_ioctl(struct tty_struct *tty, unsigned int cmd, unsigned long arg))
drivers/tty/vt/vt_ioctl.c:vt_io_ioctl(struct vc_data *vc, unsigned int cmd, void __user *up, bool perm))
drivers/tty/vt/vt_ioctl.c:vt_ioctl(struct tty_struct *tty, unsigned int cmd, unsigned long arg))
drivers/tty/vt/vt_ioctl.c:vt_k_ioctl(struct tty_struct *tty, unsigned int cmd, unsigned long arg, bool perm)
drivers/tty/vt/vt_ioctl.c:vt_move_to_console(unsigned int vt, int alloc))
drivers/tty/vt/vt_ioctl.c:vt_reldisp(struct vc_data *vc, unsigned int swtch))
drivers/tty/vt/vt_ioctl.c:vt_resizex(struct vc_data *vc, struct vt_consize __user *cs))
drivers/tty/vt/vt_ioctl.c:vt_setactivate(struct vt_setactivate __user *sa))
mm/usercopy.c:__check_object_size(const void *ptr, unsigned long n, bool to_user)
mm/usercopy.c:check_bogus_address(const unsigned long ptr, unsigned long n, bool to_user)
mm/usercopy.c:check_heap_object(const void *ptr, unsigned long n, bool to_user)
mm/usercopy.c:check_kernel_text_object(const unsigned long ptr, unsigned long n, bool to_user)
mm/usercopy.c:check_stack_object(const void *obj, unsigned long len)
copy_to_user()
include/linux/uaccess.h:__copy_from_user(void *to, const void __user *from, unsigned long n)
include/linux/uaccess.h:__copy_from_user_inatomic(void *to, const void __user *from, unsigned long n)
include/linux/uaccess.h:__copy_to_user(void __user *to, const void *from, unsigned long n)
include/linux/uaccess.h:__copy_to_user_inatomic(void __user *to, const void *from, unsigned long n)
include/linux/uaccess.h:_copy_from_user(void *to, const void __user *from, unsigned long n)
include/linux/uaccess.h:_copy_to_user(void __user *to, const void *from, unsigned long n)
include/linux/uaccess.h:copy_struct_from_user(void *dst, size_t ksize, const void __user *src, size_t usize)
drivers/tty/tty_io.c:tty_fasync(int fd, struct file *filp, int on)
drivers/tty/tty_io.c:tty_init_dev()
tty_io()
drivers/tty/tty_io.c:tty_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
drivers/tty/tty_io.c:tty_open(struct inode *inode, struct file *filp)
drivers/tty/tty_io.c:tty_poll(struct file *filp, poll_table *wait)
drivers/tty/tty_io.c:tty_read(struct kiocb *iocb, struct iov_iter *to)
drivers/tty/tty_io.c:tty_release(struct inode *inode, struct file *filp)
drivers/tty/tty_io.c:tty_write_message(struct tty_struct *tty, char *msg)
drivers/tty/vt/vt_ioctl.c:vt_ioctl(struct tty_struct *tty, unsigned int cmd, unsigned long arg))
KDFONTOP_SET()
include/linux/thread_info.h:check_copy_size(const void *addr, size_t bytes, bool is_source)
check_object_size()
thread_info()
fs/ioctl.c:do_vfs_ioctl(struct file *filp, unsigned int fd, unsigned int cmd, unsigned long arg)
fs/ioctl.c:ioctl_fibmap(struct file *filp, int __user *p)
fs/ioctl.c:ioctl_fiemap(struct file *filp, struct fiemap __user *ufiemap)
fs/ioctl.c:ioctl_file_clone(struct file *dst_file, unsigned long srcfd, u64 off, u64 olen, u64 destoff)
fs/ioctl.c:ioctl_fioasync(unsigned int fd, struct file *filp, int __user *argp)
fs/ioctl.c:ioctl_fionbio(struct file *filp, int __user *argp)
fs/ioctl.c:ioctl_fsfreeze(struct file *filp)
fs/ioctl.c:ioctl_fsthaw(struct file *filp)
mm/page_alloc.c:alloc_contig_pages()
mm/page_alloc.c:alloc_contig_range(unsigned long start, unsigned long end, unsigned migratetype, gfp_t gfp_mask)
mm/page_alloc.c:free_contig_range(unsigned long pfn, unsigned long nr_pages)
drivers/tty/vt/consolemap.c:con_copy_unimap(struct vc_data *dst_vc, struct vc_data *src_vc)
drivers/tty/vt/consolemap.c:con_get_unimap(struct vc_data *vc, ushort ct, ushort __user *uct, struct unipair __user *list)
drivers/tty/vt/consolemap.c:con_set_unimap(struct vc_data *vc, ushort ct, struct unipair __user *list)
arch/x86/entry/common.c:do_syscall_64(struct pt_regs *regs, int nr)
arch/x86/entry/common.c:do_syscall_x32(struct pt_regs *regs, int nr)
arch/x86/entry/common.c:do_syscall_x64(struct pt_regs *regs, int nr)
func for case 67d5dc5f84651b05fc3c2cb3d163037f414a10f4
mm/page_alloc.c:__alloc_pages_nodemask()
net/qrtr/tun.c:qrtr_tun_open(struct inode *inode, struct file *filp)
net/qrtr/tun.c:qrtr_tun_poll(struct file *filp, poll_table *wait)
net/qrtr/tun.c:qrtr_tun_read_iter(struct kiocb *iocb, struct iov_iter *to)
net/qrtr/tun.c:qrtr_tun_send(struct qrtr_endpoint *ep, struct sk_buff *skb)
net/qrtr/tun.c:qrtr_tun_write_iter(struct kiocb *iocb, struct iov_iter *from)
__alloc_pages()
mm/page_alloc.c:__alloc_pages_nodemask()
mm/page_alloc.c:__free_one_page(struct page *page, unsigned long pfn, struct zone *zone, unsigned int order, int migratetype, fpi_t fpi_flags)
mm/page_alloc.c:__free_pages_ok(struct page *page, unsigned int order, fpi_t fpi_flags)
mm/page_alloc.c:__rmqueue()
mm/page_alloc.c:__rmqueue_smallest()
mm/mempolicy.c:alloc_pages_current()
mm/page_alloc.c:alloc_pages_exact()
mm/page_alloc.c:check_new_pages(struct page *page, unsigned int order)
mm/page_alloc.c:free_pages_exact(void *virt, size_t size)
mm/page_alloc.c:free_pages_prepare(struct page *page, unsigned int order, bool check_free)
mm/page_alloc.c:free_pcppages_bulk(struct zone *zone, int count, struct per_cpu_pages *pcp)
mm/slab_common.c:kmalloc_order()
mm/page_alloc.c:post_alloc_hook(struct page *page, unsigned int order, gfp_t gfp_flags)
mm/page_alloc.c:prep_new_page(struct page *page, unsigned int order, gfp_t gfp_flags, unsigned int alloc_flags)
mm/page_alloc.c:rmqueue_pcplist()
mm/page_alloc.c:zone_watermark_ok_safe(struct zone *z, unsigned int order, unsigned long mark, int highest_zoneidx)
mm/slab_common.c:__kmem_cache_alloc_bulk(struct kmem_cache *s, gfp_t flags, size_t nr, void **p)
mm/slab_common.c:__kmem_cache_free_bulk(struct kmem_cache *s, size_t nr, void **p)
mm/slab_common.c:calculate_alignment(slab_flags_t flags, unsigned int align, unsigned int size)
mm/slab_common.c:create_boot_cache(struct kmem_cache *s, const char *name, unsigned int size, slab_flags_t flags, unsigned int useroffset, unsigned int usersize)
mm/slab_common.c:create_cache()
mm/slab_common.c:create_kmalloc_cache()
mm/slab_common.c:create_kmalloc_caches(slab_flags_t flags)
mm/slab_common.c:find_mergeable()
mm/slab_common.c:kmalloc_order()
kmalloc_order_trace()
mm/slab_common.c:kmalloc_slab()
mm/slab_common.c:kmem_cache_create_usercopy()
mm/slab_common.c:new_kmalloc_cache(int idx, enum kmalloc_cache_type type, slab_flags_t flags)
mm/slab_common.c:setup_kmalloc_cache_index_table(void)
mm/slab_common.c:slab_unmergeable(struct kmem_cache *s)
include/linux/gfp.h:__alloc_pages_node()
mm/page_alloc.c:__alloc_pages_nodemask()
__folio_alloc_node()
alloc_pages_bulk_array_node()
mm/mempolicy.c:alloc_pages_current()
include/linux/gfp.h:alloc_pages_node()
include/linux/gfp.h:gfp_migratetype(const gfp_t gfp_flags)
include/linux/gfp.h:gfp_zone(gfp_t flags)
mm/slab_common.c:kmalloc_order()
mm/page_alloc.c:__alloc_pages_nodemask()
__alloc_size()
__kmalloc_index()
include/linux/slab.h:kmalloc_type(gfp_t flags)
include/linux/slab.h:kmem_cache_alloc_node_trace()
page_alloc()
mm/page_alloc.c:__alloc_pages_nodemask()
mm/mempolicy.c:alloc_page_interleave()
alloc_pages()
alloc_pages_bulk_array_interleave()
alloc_pages_bulk_array_mempolicy()
alloc_pages_bulk_array_preferred_many()
mm/mempolicy.c:alloc_pages_current()
alloc_pages_preferred_many()
folio_alloc()
vma_alloc_folio()
fs/read_write.c:__kernel_write(struct file *file, const void *buf, size_t count, loff_t *pos)
fs/read_write.c:do_iter_write(struct file *file, struct iov_iter *iter, loff_t *pos, rwf_t flags)
fs/read_write.c:generic_write_check_limits(struct file *file, loff_t pos, loff_t *count)
fs/read_write.c:generic_write_checks(struct kiocb *iocb, struct iov_iter *from)
generic_write_checks_count()
fs/read_write.c:new_sync_write(struct file *filp, const char __user *buf, size_t len, loff_t *ppos)
fs/read_write.c:rw_verify_area(int read_write, struct file *file, const loff_t *ppos, size_t count)
fs/read_write.c:vfs_write(struct file *file, const char __user *buf, size_t count, loff_t *pos)
mm/page_alloc.c:__alloc_pages_nodemask()
page_alloc()
net/qrtr/tun.c:qrtr_tun_write_iter(struct kiocb *iocb, struct iov_iter *from)
slab_common()
mm/page_alloc.c:__alloc_pages_nodemask()
alloc_pages()
arch/x86/entry/common.c:do_int80_syscall_32(struct pt_regs *regs)
arch/x86/entry/common.c:do_syscall_64(unsigned long nr, struct pt_regs *regs)
page_alloc()
write_iter()
func for case 6922c8c31f1fdd120d1cef3f58b319b6dd1d8c00
drivers/misc/vmw_vmci/vmci_queue_pair.c:qp_alloc_guest_work(struct vmci_handle *handle, struct vmci_queue **produce_q, u64 produce_size, struct vmci_queue **consume_q, u64 consume_size, u32 peer, u32 flags, u32 priv_flags)
drivers/misc/vmw_vmci/vmci_queue_pair.c:qp_alloc_host_work(struct vmci_handle *handle, struct vmci_queue **produce_q, u64 produce_size, struct vmci_queue **consume_q, u64 consume_size, u32 peer, u32 flags, u32 priv_flags, vmci_event_release_cb wakeup_cb, void *client_data)
drivers/misc/vmw_vmci/vmci_queue_pair.c:qp_alloc_ppn_set(void *prod_q, u64 num_produce_pages, void *cons_q, u64 num_consume_pages, struct ppn_set *ppn_set)
drivers/misc/vmw_vmci/vmci_queue_pair.c:qp_alloc_queue()
drivers/misc/vmw_vmci/vmci_queue_pair.c:qp_broker_alloc(struct vmci_handle handle, u32 peer, u32 flags, u32 priv_flags, u64 produce_size, u64 consume_size, struct vmci_qp_page_store *page_store, struct vmci_ctx *context, vmci_event_release_cb wakeup_cb, void *client_data, struct qp_broker_entry **ent, bool *swap)
drivers/misc/vmw_vmci/vmci_queue_pair.c:qp_broker_create(struct vmci_handle handle, u32 peer, u32 flags, u32 priv_flags, u64 produce_size, u64 consume_size, struct vmci_qp_page_store *page_store, struct vmci_ctx *context, vmci_event_release_cb wakeup_cb, void *client_data, struct qp_broker_entry **ent)
drivers/misc/vmw_vmci/vmci_queue_pair.c:qp_free_queue(void *q, u64 size)
drivers/misc/vmw_vmci/vmci_queue_pair.c:qp_host_alloc_queue()
drivers/misc/vmw_vmci/vmci_queue_pair.c:qp_host_get_user_memory(u64 produce_uva, u64 consume_uva, struct vmci_queue *produce_q, struct vmci_queue *consume_q)
drivers/misc/vmw_vmci/vmci_queue_pair.c:qp_host_map_queues(struct vmci_queue *produce_q, struct vmci_queue *consume_q)
drivers/misc/vmw_vmci/vmci_queue_pair.c:qp_host_register_user_memory(struct vmci_qp_page_store *page_store, struct vmci_queue *produce_q, struct vmci_queue *consume_q)
drivers/misc/vmw_vmci/vmci_queue_pair.c:qp_host_unregister_user_memory(struct vmci_queue *produce_q, struct vmci_queue *consume_q)
drivers/misc/vmw_vmci/vmci_queue_pair.c:qp_release_pages(struct page **pages, u64 num_pages, bool dirty)
drivers/misc/vmw_vmci/vmci_queue_pair.c:vmci_qp_alloc(struct vmci_handle *handle, struct vmci_queue **produce_q, u64 produce_size, struct vmci_queue **consume_q, u64 consume_size, u32 peer, u32 flags, u32 priv_flags, bool guest_endpoint, vmci_event_release_cb wakeup_cb, void *client_data)
vmci_qp_broker_alloc()
vmci_queue_pair()
drivers/misc/vmw_vmci/vmci_host.c:vmci_host_close(struct inode *inode, struct file *filp)
drivers/misc/vmw_vmci/vmci_host.c:vmci_host_do_alloc_queuepair(struct vmci_host_dev *vmci_host_dev, const char *ioctl_name, void __user *uptr)
drivers/misc/vmw_vmci/vmci_host.c:vmci_host_do_ctx_get_cpt_state(struct vmci_host_dev *vmci_host_dev, const char *ioctl_name, void __user *uptr)
drivers/misc/vmw_vmci/vmci_host.c:vmci_host_do_ctx_set_cpt_state(struct vmci_host_dev *vmci_host_dev, const char *ioctl_name, void __user *uptr)
drivers/misc/vmw_vmci/vmci_host.c:vmci_host_do_init_context(struct vmci_host_dev *vmci_host_dev, const char *ioctl_name, void __user *uptr)
drivers/misc/vmw_vmci/vmci_host.c:vmci_host_do_notify_resource(struct vmci_host_dev *vmci_host_dev, const char *ioctl_name, void __user *uptr)
drivers/misc/vmw_vmci/vmci_host.c:vmci_host_do_qp_detach(struct vmci_host_dev *vmci_host_dev, const char *ioctl_name, void __user *uptr)
drivers/misc/vmw_vmci/vmci_host.c:vmci_host_do_queuepair_setpf(struct vmci_host_dev *vmci_host_dev, const char *ioctl_name, void __user *uptr)
drivers/misc/vmw_vmci/vmci_host.c:vmci_host_do_queuepair_setva(struct vmci_host_dev *vmci_host_dev, const char *ioctl_name, void __user *uptr)
drivers/misc/vmw_vmci/vmci_host.c:vmci_host_do_receive_datagram(struct vmci_host_dev *vmci_host_dev, const char *ioctl_name, void __user *uptr)
drivers/misc/vmw_vmci/vmci_host.c:vmci_host_do_recv_notifications(struct vmci_host_dev *vmci_host_dev, const char *ioctl_name, void __user *uptr)
drivers/misc/vmw_vmci/vmci_host.c:vmci_host_do_send_datagram(struct vmci_host_dev *vmci_host_dev, const char *ioctl_name, void __user *uptr)
drivers/misc/vmw_vmci/vmci_host.c:vmci_host_do_set_notify(struct vmci_host_dev *vmci_host_dev, const char *ioctl_name, void __user *uptr)
drivers/misc/vmw_vmci/vmci_host.c:vmci_host_setup_notify(struct vmci_ctx *context, unsigned long uva)
drivers/misc/vmw_vmci/vmci_host.c:vmci_host_unlocked_ioctl(struct file *filp, unsigned int iocmd, unsigned long ioarg)
drivers/misc/vmw_vmci/vmci_context.c:ctx_free_ctx(struct kref *kref)
drivers/misc/vmw_vmci/vmci_context.c:vmci_ctx_create()
drivers/misc/vmw_vmci/vmci_context.c:vmci_ctx_get()
drivers/misc/vmw_vmci/vmci_context.c:vmci_ctx_get_chkpt_state(u32 context_id, u32 cpt_type, u32 *buf_size, void **pbuf)
drivers/misc/vmw_vmci/vmci_context.c:vmci_ctx_qp_create(struct vmci_ctx *context, struct vmci_handle handle)
drivers/misc/vmw_vmci/vmci_context.c:vmci_ctx_rcv_notifications_get(u32 context_id, struct vmci_handle_arr **db_handle_array, struct vmci_handle_arr **qp_handle_array)
drivers/misc/vmw_vmci/vmci_context.c:vmci_ctx_rcv_notifications_release(u32 context_id, struct vmci_handle_arr *db_handle_array, struct vmci_handle_arr *qp_handle_array, bool success)
drivers/misc/vmw_vmci/vmci_context.c:vmci_ctx_set_chkpt_state(u32 context_id, u32 cpt_type, u32 buf_size, void *cpt_buf)
include/linux/mm.h:get_page(struct page *page)
include/linux/mm.h:hpage_pincount_available(struct page *page)
include/linux/mm.h:page_is_devmap_managed(struct page *page)
include/linux/mm.h:page_maybe_dma_pinned(struct page *page)
include/linux/mm.h:page_trans_huge_mapcount(struct page *page, int *total_mapcount)
include/linux/mm.h:put_page(struct page *page)
include/linux/mm.h:try_get_page(struct page *page)
include/linux/mm.h:vmf_insert_page(struct vm_area_struct *vma, unsigned long addr, struct page *page)
drivers/misc/vmw_vmci/vmci_queue_pair.c:qp_broker_alloc(struct vmci_handle handle, u32 peer, u32 flags, u32 priv_flags, u64 produce_size, u64 consume_size, struct vmci_qp_page_store *page_store, struct vmci_ctx *context, vmci_event_release_cb wakeup_cb, void *client_data, struct qp_broker_entry **ent, bool *swap)
drivers/misc/vmw_vmci/vmci_queue_pair.c:qp_broker_create(struct vmci_handle handle, u32 peer, u32 flags, u32 priv_flags, u64 produce_size, u64 consume_size, struct vmci_qp_page_store *page_store, struct vmci_ctx *context, vmci_event_release_cb wakeup_cb, void *client_data, struct qp_broker_entry **ent)
drivers/misc/vmw_vmci/vmci_queue_pair.c:qp_host_get_user_memory(u64 produce_uva, u64 consume_uva, struct vmci_queue *produce_q, struct vmci_queue *consume_q)
drivers/misc/vmw_vmci/vmci_queue_pair.c:qp_host_register_user_memory(struct vmci_qp_page_store *page_store, struct vmci_queue *produce_q, struct vmci_queue *consume_q)
drivers/misc/vmw_vmci/vmci_queue_pair.c:qp_release_pages(struct page **pages, u64 num_pages, bool dirty)
drivers/misc/vmw_vmci/vmci_host.c:vmci_host_do_alloc_queuepair(struct vmci_host_dev *vmci_host_dev, const char *ioctl_name, void __user *uptr)
drivers/misc/vmw_vmci/vmci_host.c:vmci_host_unlocked_ioctl(struct file *filp, unsigned int iocmd, unsigned long ioarg)
vmci_qp_broker_alloc()
drivers/misc/vmw_vmci/vmci_queue_pair.c:qp_host_get_user_memory(u64 produce_uva, u64 consume_uva, struct vmci_queue *produce_q, struct vmci_queue *consume_q)
drivers/misc/vmw_vmci/vmci_queue_pair.c:qp_release_pages(struct page **pages, u64 num_pages, bool dirty)
vmci_host()
drivers/misc/vmw_vmci/vmci_host.c:vmci_host_unlocked_ioctl(struct file *filp, unsigned int iocmd, unsigned long ioarg)
vmci_queue_pair()
drivers/misc/vmw_vmci/vmci_queue_pair.c:qp_broker_create(struct vmci_handle handle, u32 peer, u32 flags, u32 priv_flags, u64 produce_size, u64 consume_size, struct vmci_qp_page_store *page_store, struct vmci_ctx *context, vmci_event_release_cb wakeup_cb, void *client_data, struct qp_broker_entry **ent)
drivers/misc/vmw_vmci/vmci_queue_pair.c:qp_host_get_user_memory(u64 produce_uva, u64 consume_uva, struct vmci_queue *produce_q, struct vmci_queue *consume_q)
drivers/misc/vmw_vmci/vmci_queue_pair.c:qp_release_pages(struct page **pages, u64 num_pages, bool dirty)
vmci_queue_pair()
func for case 699e4f546c33df9781a67891d42766bbbe3ca30b
fs/fuse/dir.c:fuse_access(struct inode *inode, int mask)
fs/fuse/dir.c:fuse_dir_fsync(struct file *file, loff_t start, loff_t end, int datasync)
fs/fuse/dir.c:fuse_dir_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
fs/fuse/dir.c:fuse_do_setattr(struct dentry *dentry, struct iattr *attr, struct file *file)
fs/fuse/dir.c:fuse_getattr(struct user_namespace *mnt_userns, const struct path *path, struct kstat *stat, u32 request_mask, unsigned int flags)
fs/fuse/dir.c:fuse_lookup()
fs/fuse/dir.c:fuse_lookup_name(struct super_block *sb, u64 nodeid, const struct qstr *name, struct fuse_entry_out *outarg, struct inode **inode)
fs/fuse/dir.c:fuse_permission(struct user_namespace *mnt_userns, struct inode *inode, int mask)
fs/fuse/dir.c:fuse_rename2(struct user_namespace *mnt_userns, struct inode *olddir, struct dentry *oldent, struct inode *newdir, struct dentry *newent, unsigned int flags)
fs/fuse/dir.c:fuse_rename_common(struct inode *olddir, struct dentry *oldent, struct inode *newdir, struct dentry *newent, unsigned int flags, int opcode, size_t argsize)
fs/fuse/dir.c:fuse_reverse_inval_entry(struct fuse_conn *fc, u64 parent_nodeid, u64 child_nodeid, struct qstr *name)
fs/fuse/dir.c:fuse_rmdir(struct inode *dir, struct dentry *entry)
fs/fuse/dir.c:fuse_setattr(struct user_namespace *mnt_userns, struct dentry *entry, struct iattr *attr)
fs/fuse/dir.c:fuse_unlink(struct inode *dir, struct dentry *entry)
fs/fuse/dir.c:fuse_update_get_attr(struct inode *inode, struct file *file, struct kstat *stat, u32 request_mask, unsigned int flags)
fs/fuse/dev.c:__fuse_request_send(struct fuse_req *req)
fs/fuse/dev.c:fuse_dev_do_write(struct fuse_dev *fud, struct fuse_copy_state *cs, size_t nbytes)
fs/fuse/dev.c:fuse_dev_write(struct kiocb *iocb, struct iov_iter *from)
fs/fuse/dev.c:fuse_get_req()
fs/fuse/dev.c:fuse_notify(struct fuse_conn *fc, enum fuse_notify_code code, unsigned int size, struct fuse_copy_state *cs)
fs/fuse/dev.c:fuse_notify_delete(struct fuse_conn *fc, unsigned int size, struct fuse_copy_state *cs)
fs/fuse/dev.c:fuse_notify_inval_entry(struct fuse_conn *fc, unsigned int size, struct fuse_copy_state *cs)
fs/fuse/dev.c:fuse_notify_inval_inode(struct fuse_conn *fc, unsigned int size, struct fuse_copy_state *cs)
fs/fuse/dev.c:fuse_queue_forget(struct fuse_conn *fc, struct fuse_forget_link *forget, u64 nodeid, u64 nlookup)
fs/fuse/dev.c:fuse_request_end(struct fuse_req *req)
fs/fuse/dev.c:fuse_simple_request(struct fuse_mount *fm, struct fuse_args *args)
fs/fuse/dev.c:lock_request(struct fuse_req *req)
fs/fuse/dev.c:queue_interrupt(struct fuse_req *req)
fs/fuse/dev.c:request_wait_answer(struct fuse_req *req)
fs/fuse/dev.c:unlock_request(struct fuse_req *req)
kernel/locking/lockdep.c:__lock_acquire(struct lockdep_map *lock, unsigned int subclass, int trylock, int read, int check, int hardirqs_off, struct lockdep_map *nest_lock, unsigned long ip, int references, int pin_count)
kernel/locking/lockdep.c:check_deadlock(struct task_struct *curr, struct held_lock *next)
kernel/locking/lockdep.c:check_irq_usage(struct task_struct *curr, struct held_lock *prev, struct held_lock *next)
kernel/locking/lockdep.c:check_noncircular(struct held_lock *src, struct held_lock *target, struct lock_trace **const trace)
kernel/locking/lockdep.c:check_prev_add(struct task_struct *curr, struct held_lock *prev, struct held_lock *next, u16 distance, struct lock_trace **const trace)
kernel/locking/lockdep.c:check_prevs_add(struct task_struct *curr, struct held_lock *next)
kernel/locking/lockdep.c:find_exclusive_match(unsigned long mask, unsigned long excl_mask, enum lock_usage_bit *bitp, enum lock_usage_bit *excl_bitp)
kernel/locking/lockdep.c:lock_acquire(struct lockdep_map *lock, unsigned int subclass, int trylock, int read, int check, struct lockdep_map *nest_lock, unsigned long ip)
kernel/locking/lockdep.c:mark_lock(struct task_struct *curr, struct held_lock *this, enum lock_usage_bit new_bit)
kernel/locking/lockdep.c:mark_usage(struct task_struct *curr, struct held_lock *hlock, int check)
kernel/locking/lockdep.c:print_circular_bug(struct lock_list *this, struct lock_list *target, struct held_lock *check_src, struct held_lock *check_tgt)
kernel/locking/lockdep.c:print_circular_bug_header(struct lock_list *entry, unsigned int depth, struct held_lock *check_src, struct held_lock *check_tgt)
kernel/locking/lockdep.c:print_deadlock_bug(struct task_struct *curr, struct held_lock *prev, struct held_lock *next)
kernel/locking/lockdep.c:print_deadlock_scenario(struct held_lock *nxt, struct held_lock *prv)
kernel/locking/lockdep.c:validate_chain(struct task_struct *curr, struct held_lock *hlock, int chain_head, u64 chain_key)
fs/fuse/file.c:fuse_file_lock(struct file *file, int cmd, struct file_lock *fl)
fs/fuse/file.c:fuse_file_open()
fs/fuse/file.c:fuse_file_release(struct inode *inode, struct fuse_file *ff, unsigned int open_flags, fl_owner_t id, bool isdir)
fs/fuse/file.c:fuse_getlk(struct file *file, struct file_lock *fl)
fs/fuse/file.c:fuse_lk_fill(struct fuse_args *args, struct file *file, const struct file_lock *fl, int opcode, pid_t pid, int flock, struct fuse_lk_in *inarg)
fs/fuse/file.c:fuse_open_common(struct inode *inode, struct file *file, bool isdir)
fs/fuse/file.c:fuse_prepare_release(struct fuse_inode *fi, struct fuse_file *ff, unsigned int flags, int opcode)
fs/fuse/dir.c:fuse_reverse_inval_entry(struct fuse_conn *fc, u64 parent_nodeid, u64 child_nodeid, struct qstr *name)
fs/fuse/file.c:fuse_setlk(struct file *file, struct file_lock *fl, int flock)
fs/fuse/inode.c:fuse_change_attributes(struct inode *inode, struct fuse_attr *attr, u64 attr_valid, u64 attr_version)
fs/fuse/inode.c:fuse_change_attributes_common(struct inode *inode, struct fuse_attr *attr, u64 attr_valid)
fs/fuse/inode.c:fuse_conn_destroy(struct fuse_mount *fm)
fs/fuse/inode.c:fuse_conn_init(struct fuse_conn *fc, struct fuse_mount *fm, struct user_namespace *user_ns, const struct fuse_iqueue_ops *fiq_ops, void *fiq_priv)
fs/fuse/inode.c:fuse_evict_inode(struct inode *inode)
fs/fuse/inode.c:fuse_iget()
fs/fuse/inode.c:fuse_init_inode(struct inode *inode, struct fuse_attr *attr)
fs/fuse/inode.c:fuse_reverse_inval_inode(struct fuse_conn *fc, u64 nodeid, loff_t offset, loff_t len)
include/linux/fs.h:break_deleg(struct inode *inode, unsigned int mode)
include/linux/fs.h:break_layout(struct inode *inode, bool wait)
include/linux/fs.h:break_lease(struct inode *inode, unsigned int mode)
include/linux/fs.h:generic_write_sync(struct kiocb *iocb, ssize_t count)
include/linux/fs.h:i_size_read(const struct inode *inode)
include/linux/fs.h:i_size_write(struct inode *inode, loff_t i_size)
include/linux/fs.h:locks_verify_truncate(struct inode *inode, struct file *f, loff_t size)
include/linux/fs.h:try_break_deleg(struct inode *inode, struct inode **delegated_inode)
kernel/locking/rwsem.c:down_write_killable(struct rw_semaphore *sem)
kernel/locking/rwsem.c:down_write_killable_nested(struct rw_semaphore *sem, int subclass)
kernel/locking/rwsem.c:down_write_trylock(struct rw_semaphore *sem)
kernel/locking/rwsem.c:rwsem_down_write_slowpath()
kernel/locking/rwsem.c:rwsem_mark_wake(struct rw_semaphore *sem, enum rwsem_wake_type wake_type, struct wake_q_head *wake_q)
kernel/locking/rwsem.c:rwsem_optimistic_spin(struct rw_semaphore *sem)
kernel/locking/rwsem.c:rwsem_try_write_lock(struct rw_semaphore *sem, enum writer_wait_state wstate)
kernel/locking/rwsem.c:rwsem_try_write_lock_unqueued(struct rw_semaphore *sem)
fs/namei.c:lock_rename()
fs/namei.c:may_delete(struct user_namespace *mnt_userns, struct inode *dir, struct dentry *victim, bool isdir)
fs/namei.c:vfs_rename(struct renamedata *rd)
fs/fuse/dir.c:fuse_reverse_inval_entry(struct fuse_conn *fc, u64 parent_nodeid, u64 child_nodeid, struct qstr *name)
fs/notify/mark.c:fsnotify_add_mark(struct fsnotify_mark *mark, fsnotify_connp_t *connp, unsigned int type, int allow_dups, __kernel_fsid_t *fsid)
fs/notify/mark.c:fsnotify_add_mark_locked(struct fsnotify_mark *mark, fsnotify_connp_t *connp, unsigned int type, int allow_dups, __kernel_fsid_t *fsid)
fs/notify/mark.c:fsnotify_destroy_mark(struct fsnotify_mark *mark, struct fsnotify_group *group)
func for case 6e185619b66eae1ef09684c5f6e283d6cfb5ba84
fs/btrfs/file.c:btrfs_buffered_write(struct kiocb *iocb, struct iov_iter *i)
fs/btrfs/file.c:btrfs_direct_write(struct kiocb *iocb, struct iov_iter *from)
fs/btrfs/file.c:btrfs_dirty_pages(struct btrfs_inode *inode, struct page **pages, size_t num_pages, loff_t pos, size_t write_bytes, struct extent_state **cached, bool noreserve)
fs/btrfs/file.c:btrfs_do_write_iter(struct kiocb *iocb, struct iov_iter *from, const struct btrfs_ioctl_encoded_io_args *encoded)
fs/btrfs/file.c:btrfs_drop_extents(struct btrfs_trans_handle *trans, struct btrfs_root *root, struct btrfs_inode *inode, struct btrfs_drop_extents_args *args)
fs/btrfs/file.c:btrfs_drop_pages(struct btrfs_fs_info *fs_info, struct page **pages, size_t num_pages, u64 pos, u64 copied)
fs/btrfs/file.c:btrfs_fallocate(struct file *file, int mode, loff_t offset, loff_t len)
fs/btrfs/file.c:btrfs_insert_replace_extent(struct btrfs_trans_handle *trans, struct btrfs_inode *inode, struct btrfs_path *path, struct btrfs_replace_extent_info *extent_info, const u64 replace_len, const u64 bytes_to_drop)
fs/btrfs/file.c:btrfs_mark_extent_written(struct btrfs_trans_handle *trans, struct btrfs_inode *inode, u64 start, u64 end)
fs/btrfs/file.c:btrfs_punch_hole(struct file *file, loff_t offset, loff_t len)
fs/btrfs/file.c:btrfs_punch_hole_lock_range(struct inode *inode, const u64 lockstart, const u64 lockend, struct extent_state **cached_state)
fs/btrfs/file.c:btrfs_replace_file_extents(struct btrfs_inode *inode, struct btrfs_path *path, const u64 start, const u64 end, struct btrfs_replace_extent_info *extent_info, struct btrfs_trans_handle **trans_out)
fs/btrfs/file.c:btrfs_sync_file(struct file *file, loff_t start, loff_t end, int datasync)
fs/btrfs/file.c:btrfs_write_check(struct kiocb *iocb, struct iov_iter *from, size_t count)
fs/btrfs/file.c:lock_and_cleanup_extent_if_need(struct btrfs_inode *inode, struct page **pages, size_t num_pages, loff_t pos, size_t write_bytes, u64 *lockstart, u64 *lockend, bool nowait, struct extent_state **cached_state)
fs/btrfs/inode.c:btrfs_clear_delalloc_extent(struct inode *vfs_inode, struct extent_state *state, u32 bits)
fs/btrfs/file.c:btrfs_drop_extents(struct btrfs_trans_handle *trans, struct btrfs_root *root, struct btrfs_inode *inode, struct btrfs_drop_extents_args *args)
fs/btrfs/inode.c:btrfs_find_new_delalloc_bytes(struct btrfs_inode *inode, const u64 start, const u64 len, struct extent_state **cached_state)
fs/btrfs/inode.c:btrfs_merge_delalloc_extent(struct inode *inode, struct extent_state *new, struct extent_state *other)
fs/btrfs/inode.c:btrfs_run_delalloc_range(struct btrfs_inode *inode, struct page *locked_page, u64 start, u64 end, int *page_started, unsigned long *nr_written, struct writeback_control *wbc)
fs/btrfs/inode.c:btrfs_set_delalloc_extent(struct inode *inode, struct extent_state *state, u32 bits)
fs/btrfs/inode.c:btrfs_set_extent_delalloc(struct btrfs_inode *inode, u64 start, u64 end, unsigned int extra_bits, struct extent_state **cached_state)
fs/btrfs/inode.c:btrfs_split_delalloc_extent(struct inode *inode, struct extent_state *orig, u64 split)
fs/btrfs/inode.c:btrfs_update_inode(struct btrfs_trans_handle *trans, struct btrfs_root *root, struct btrfs_inode *inode)
fs/btrfs/inode.c:btrfs_update_inode_item(struct btrfs_trans_handle *trans, struct btrfs_root *root, struct btrfs_inode *inode)
fs/btrfs/inode.c:can_nocow_file_extent(struct btrfs_path *path, struct btrfs_key *key, struct btrfs_inode *inode, struct can_nocow_file_extent_args *args)
fs/btrfs/inode.c:cow_file_range(struct btrfs_inode *inode, struct page *locked_page, u64 start, u64 end, int *page_started, unsigned long *nr_written, int unlock, u64 *done_offset)
fs/btrfs/inode.c:cow_file_range_inline(struct btrfs_inode *inode, u64 size, size_t compressed_size, int compress_type, struct page **compressed_pages, bool update_i_size)
fs/btrfs/inode.c:fallback_to_cow(struct btrfs_inode *inode, struct page *locked_page, const u64 start, const u64 end, int *page_started, unsigned long *nr_written)
fs/btrfs/inode.c:insert_inline_extent(struct btrfs_trans_handle *trans, struct btrfs_path *path, struct btrfs_inode *inode, bool extent_inserted, size_t size, size_t compressed_size, int compress_type, struct page **compressed_pages, bool update_i_size)
fs/btrfs/inode.c:run_delalloc_nocow(struct btrfs_inode *inode, struct page *locked_page, const u64 start, const u64 end, int *page_started, unsigned long *nr_written)
fs/btrfs/extent_io.c:__extent_writepage(struct page *page, struct writeback_control *wbc, struct extent_page_data *epd)
fs/btrfs/extent_io.c:alloc_extent_buffer()
fs/btrfs/file.c:btrfs_drop_extents(struct btrfs_trans_handle *trans, struct btrfs_root *root, struct btrfs_inode *inode, struct btrfs_drop_extents_args *args)
fs/btrfs/extent_io.c:btrfs_release_extent_buffer_pages(struct extent_buffer *eb)
extent_io()
fs/btrfs/extent_io.c:extent_range_clear_dirty_for_io(struct inode *inode, u64 start, u64 end)
fs/btrfs/extent_io.c:extent_range_redirty_for_io(struct inode *inode, u64 start, u64 end)
fs/btrfs/extent_io.c:extent_write_cache_pages(struct address_space *mapping, struct writeback_control *wbc, struct extent_page_data *epd)
fs/btrfs/extent_io.c:extent_writepages(struct address_space *mapping, struct writeback_control *wbc)
fs/btrfs/extent_io.c:free_extent_buffer(struct extent_buffer *eb)
fs/btrfs/extent_io.c:lock_extent_buffer_for_io(struct extent_buffer *eb, struct extent_page_data *epd)
fs/btrfs/extent_io.c:prepare_eb_write(struct extent_buffer *eb)
fs/btrfs/extent_io.c:submit_eb_page(struct page *page, struct writeback_control *wbc, struct extent_page_data *epd, struct extent_buffer **eb_context)
fs/btrfs/extent_io.c:submit_one_bio(struct btrfs_bio_ctrl *bio_ctrl)
fs/btrfs/extent_io.c:write_one_eb(struct extent_buffer *eb, struct writeback_control *wbc, struct extent_page_data *epd)
fs/btrfs/extent_io.c:writepage_delalloc(struct btrfs_inode *inode, struct page *page, struct writeback_control *wbc)
fs/btrfs/extent-tree.c:__btrfs_free_extent(struct btrfs_trans_handle *trans, struct btrfs_delayed_ref_node *node, u64 parent, u64 root_objectid, u64 owner_objectid, u64 owner_offset, int refs_to_drop, struct btrfs_delayed_extent_op *extent_op)
fs/btrfs/extent-tree.c:__btrfs_run_delayed_refs(struct btrfs_trans_handle *trans, unsigned long nr)
fs/btrfs/file.c:btrfs_drop_extents(struct btrfs_trans_handle *trans, struct btrfs_root *root, struct btrfs_inode *inode, struct btrfs_drop_extents_args *args)
fs/btrfs/extent-tree.c:btrfs_free_extent(struct btrfs_trans_handle *trans, struct btrfs_ref *ref)
fs/btrfs/extent-tree.c:btrfs_inc_extent_ref(struct btrfs_trans_handle *trans, struct btrfs_ref *generic_ref)
fs/btrfs/extent-tree.c:btrfs_reserve_extent(struct btrfs_root *root, u64 ram_bytes, u64 num_bytes, u64 min_alloc_size, u64 empty_size, u64 hint_byte, struct btrfs_key *ins, int is_data, int delalloc)
fs/btrfs/extent-tree.c:btrfs_run_delayed_refs(struct btrfs_trans_handle *trans, unsigned long count)
fs/btrfs/extent-tree.c:find_free_extent(struct btrfs_root *root, struct btrfs_key *ins, struct find_free_extent_ctl *ffe_ctl)
fs/btrfs/extent-tree.c:remove_extent_backref(struct btrfs_trans_handle *trans, struct btrfs_root *root, struct btrfs_path *path, struct btrfs_extent_inline_ref *iref, int refs_to_drop, int is_data)
fs/read_write.c:__kernel_write_iter(struct file *file, struct iov_iter *from, loff_t *pos)
fs/read_write.c:do_iter_write(struct file *file, struct iov_iter *iter, loff_t *pos, rwf_t flags)
fs/read_write.c:do_sendfile(int out_fd, int in_fd, loff_t *ppos, size_t count, loff_t max)
fs/read_write.c:generic_copy_file_checks(struct file *file_in, loff_t pos_in, struct file *file_out, loff_t pos_out, size_t *req_count, unsigned int flags)
fs/read_write.c:generic_file_rw_checks(struct file *file_in, struct file *file_out)
fs/read_write.c:generic_write_checks_count(struct kiocb *iocb, loff_t *count)
fs/read_write.c:vfs_copy_file_range(struct file *file_in, loff_t pos_in, struct file *file_out, loff_t pos_out, size_t len, unsigned int flags)
fs/read_write.c:vfs_write(struct file *file, const char __user *buf, size_t count, loff_t *pos)
fs/splice.c:__do_splice(struct file *in, loff_t __user *off_in, struct file *out, loff_t __user *off_out, size_t len, unsigned int flags)
fs/splice.c:do_splice(struct file *in, loff_t *off_in, struct file *out, loff_t *off_out, size_t len, unsigned int flags)
fs/splice.c:do_splice_direct(struct file *in, loff_t *ppos, struct file *out, loff_t *opos, size_t len, unsigned int flags)
fs/splice.c:generic_file_splice_read(struct file *in, loff_t *ppos, struct pipe_inode_info *pipe, size_t len, unsigned int flags)
fs/splice.c:iter_file_splice_write(struct pipe_inode_info *pipe, struct file *out, loff_t *ppos, size_t len, unsigned int flags)
fs/splice.c:pipe_to_sendpage(struct pipe_inode_info *pipe, struct pipe_buffer *buf, struct splice_desc *sd)
fs/splice.c:splice_direct_to_actor(struct file *in, struct splice_desc *sd, splice_direct_actor *actor)
fs/splice.c:splice_from_pipe(struct pipe_inode_info *pipe, struct file *out, loff_t *ppos, size_t len, unsigned int flags, splice_actor *actor)
mm/filemap.c:__generic_file_write_iter(struct kiocb *iocb, struct iov_iter *from)
mm/filemap.c:generic_file_write_iter(struct kiocb *iocb, struct iov_iter *from)
mm/filemap.c:generic_perform_write(struct kiocb *iocb, struct iov_iter *i)
fs/btrfs/file.c:btrfs_drop_extents(struct btrfs_trans_handle *trans, struct btrfs_root *root, struct btrfs_inode *inode, struct btrfs_drop_extents_args *args)
fs/btrfs/ctree.c:btrfs_del_items(struct btrfs_trans_handle *trans, struct btrfs_root *root, struct btrfs_path *path, int slot, int nr)
fs/btrfs/ctree.c:btrfs_insert_item(struct btrfs_trans_handle *trans, struct btrfs_root *root, const struct btrfs_key *cpu_key, void *data, u32 data_size)
fs/btrfs/ctree.c:btrfs_search_slot(struct btrfs_trans_handle *trans, struct btrfs_root *root, const struct btrfs_key *key, struct btrfs_path *p, int ins_len, int cow)
func for case 6e96f5bd56bfecdaa0bfeaf2695a25cc80bfbd9a
net/netfilter/ipset/ip_set_core.c:call_ad(struct sock *ctnl, struct sk_buff *skb, struct ip_set *set, struct nlattr *tb[], enum ipset_adt adt, u32 flags, bool use_lineno)
init_extensions()
net/netfilter/ipset/ip_set_core.c:ip_set_ad(struct net *net, struct sock *ctnl, struct sk_buff *skb, enum ipset_adt adt, const struct nlmsghdr *nlh, const struct nlattr * const attr[], struct netlink_ext_ack *extack)
net/netfilter/ipset/ip_set_core.c:ip_set_alloc()
net/netfilter/ipset/ip_set_core.c:ip_set_comment_free(struct ip_set *set, void *ptr)
ip_set_core()
net/netfilter/ipset/ip_set_core.c:ip_set_create(struct net *net, struct sock *ctnl, struct sk_buff *skb, const struct nlmsghdr *nlh, const struct nlattr * const attr[], struct netlink_ext_ack *extack)
net/netfilter/ipset/ip_set_core.c:ip_set_destroy_set(struct ip_set *set)
net/netfilter/ipset/ip_set_core.c:ip_set_elem_len(struct ip_set *set, struct nlattr *tb[], size_t len, size_t align)
include/linux/netfilter/ipset/ip_set.h:ip_set_ext_destroy(struct ip_set *set, void *data)
net/netfilter/ipset/ip_set_core.c:ip_set_flush(struct net *net, struct sock *ctnl, struct sk_buff *skb, const struct nlmsghdr *nlh, const struct nlattr * const attr[], struct netlink_ext_ack *extack)
net/netfilter/ipset/ip_set_core.c:ip_set_get_extensions(struct ip_set *set, struct nlattr *tb[], struct ip_set_ext *ext)
net/netfilter/ipset/ip_set_core.c:ip_set_init_comment(struct ip_set *set, struct ip_set_comment *comment, const struct ip_set_ext *ext)
net/netfilter/ipset/ip_set_core.c:ip_set_match_extensions(struct ip_set *set, const struct ip_set_ext *ext, struct ip_set_ext *mext, u32 flags, void *data)
net/netfilter/ipset/ip_set_core.c:ip_set_put_extensions(struct sk_buff *skb, const struct ip_set *set, const void *e, bool active)
net/netfilter/ipset/ip_set_core.c:ip_set_rename(struct net *net, struct sock *ctnl, struct sk_buff *skb, const struct nlmsghdr *nlh, const struct nlattr * const attr[], struct netlink_ext_ack *extack)
net/netfilter/ipset/ip_set_core.c:ip_set_swap(struct net *net, struct sock *ctnl, struct sk_buff *skb, const struct nlmsghdr *nlh, const struct nlattr * const attr[], struct netlink_ext_ack *extack)
ahash_destroy()
net/netfilter/ipset/ip_set_hash_gen.h:htable_size(u8 hbits)
net/netfilter/ipset/ip_set_core.c:ip_set_comment_free(struct ip_set *set, void *ptr)
net/netfilter/ipset/ip_set_hash_gen.h:mtype_add(struct ip_set *set, void *value, const struct ip_set_ext *ext, struct ip_set_ext *mext, u32 flags)
net/netfilter/ipset/ip_set_hash_gen.h:mtype_add_cidr(struct htype *h, u8 cidr, u8 n)
net/netfilter/ipset/ip_set_hash_gen.h:mtype_ahash_destroy(struct ip_set *set, struct htable *t, bool ext_destroy)
net/netfilter/ipset/ip_set_hash_gen.h:mtype_del(struct ip_set *set, void *value, const struct ip_set_ext *ext, struct ip_set_ext *mext, u32 flags)
net/netfilter/ipset/ip_set_hash_gen.h:mtype_del_cidr(struct htype *h, u8 cidr, u8 n)
net/netfilter/ipset/ip_set_hash_gen.h:mtype_expire(struct ip_set *set, struct htype *h)
net/netfilter/ipset/ip_set_hash_gen.h:mtype_flush(struct ip_set *set)
net/netfilter/ipset/ip_set_hash_gen.h:mtype_gc(struct timer_list *t)
net/netfilter/ipset/ip_set_hash_gen.h:mtype_head(struct ip_set *set, struct sk_buff *skb)
net/netfilter/ipset/ip_set_hash_gen.h:mtype_list(const struct ip_set *set, struct sk_buff *skb, struct netlink_callback *cb)
net/netfilter/ipset/ip_set_hash_gen.h:mtype_resize(struct ip_set *set, bool retried)
net/netfilter/ipset/ip_set_hash_gen.h:mtype_test(struct ip_set *set, void *value, const struct ip_set_ext *ext, struct ip_set_ext *mext, u32 flags)
net/netfilter/ipset/ip_set_hash_gen.h:mtype_test_cidrs(struct ip_set *set, struct mtype_elem *d, const struct ip_set_ext *ext, struct ip_set_ext *mext, u32 flags)
net/netfilter/ipset/ip_set_hash_gen.h:tune_ahash_max(u8 curr, u32 multi)
ip_set()
include/linux/netfilter/ipset/ip_set.h:ip_set_ext_destroy(struct ip_set *set, void *data)
include/linux/netfilter/ipset/ip_set.h:ip_set_get_hostipaddr4(struct nlattr *nla, u32 *ipaddr)
include/linux/netfilter/ipset/ip_set.h:ip_set_init_counter(struct ip_set_counter *counter, const struct ip_set_ext *ext)
include/linux/netfilter/ipset/ip_set.h:ip_set_timeout_set(unsigned long *timeout, u32 value)
include/linux/netfilter/ipset/ip_set.h:nla_put_ipaddr4(struct sk_buff *skb, int type, __be32 ipaddr)
include/linux/netfilter/ipset/ip_set.h:nla_put_ipaddr6(struct sk_buff *skb, int type, const struct in6_addr *ipaddrptr)
net/netfilter/ipset/ip_set_hash_net.c:hash_net4_kadt(struct ip_set *set, const struct sk_buff *skb, const struct xt_action_param *par, enum ipset_adt adt, struct ip_set_adt_opt *opt)
net/netfilter/ipset/ip_set_hash_net.c:hash_net4_uadt(struct ip_set *set, struct nlattr *tb[], enum ipset_adt adt, u32 *lineno, u32 flags, bool retried)
net/netfilter/ipset/ip_set_hash_net.c:hash_net6_kadt(struct ip_set *set, const struct sk_buff *skb, const struct xt_action_param *par, enum ipset_adt adt, struct ip_set_adt_opt *opt)
net/netfilter/ipset/ip_set_hash_net.c:hash_net6_uadt(struct ip_set *set, struct nlattr *tb[], enum ipset_adt adt, u32 *lineno, u32 flags, bool retried)
net/netfilter/nfnetlink.c:nfnetlink_bind(struct net *net, int group)
net/netfilter/nfnetlink.c:nfnetlink_find_client()
net/netfilter/nfnetlink.c:nfnetlink_init(void)
net/netfilter/nfnetlink.c:nfnetlink_rcv(struct sk_buff *skb)
net/netfilter/nfnetlink.c:nfnetlink_rcv_batch(struct sk_buff *skb, struct nlmsghdr *nlh, u16 subsys_id, u32 genid)
net/netfilter/nfnetlink.c:nfnetlink_rcv_msg(struct sk_buff *skb, struct nlmsghdr *nlh, struct netlink_ext_ack *extack)
net/netfilter/nfnetlink.c:nfnetlink_rcv_skb_batch(struct sk_buff *skb, struct nlmsghdr *nlh)
net/netfilter/nfnetlink.c:nfnetlink_subsys_register(const struct nfnetlink_subsystem *n)
net/netlink/af_netlink.c:__netlink_sendskb(struct sock *sk, struct sk_buff *skb)
net/netlink/af_netlink.c:netlink_alloc_large_skb()
net/netlink/af_netlink.c:netlink_attachskb(struct sock *sk, struct sk_buff *skb, long *timeo, struct sock *ssk)
net/netlink/af_netlink.c:netlink_rcv_skb(struct sk_buff *skb, int (*cb)(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *))
net/netlink/af_netlink.c:netlink_sendmsg(struct socket *sock, struct msghdr *msg, size_t len)
net/netlink/af_netlink.c:netlink_trim()
net/netlink/af_netlink.c:netlink_unicast(struct sock *ssk, struct sk_buff *skb, u32 portid, int nonblock)
net/netlink/af_netlink.c:netlink_unicast_kernel(struct sock *sk, struct sk_buff *skb, struct sock *ssk)
lib/string.c:__sysfs_match_string(const char * const *array, size_t n, const char *str)
net/netfilter/ipset/ip_set_core.c:ip_set_comment_free(struct ip_set *set, void *ptr)
lib/string.c:match_string(const char * const *array, size_t n, const char *string)
lib/string.c:memchr_inv()
lib/string.c:sysfs_streq(const char *s1, const char *s2)
net/socket.c:__sys_sendmsg(int fd, struct user_msghdr __user *msg, unsigned int flags, bool forbid_cmsg_compat)
net/socket.c:sock_sendmsg(struct socket *sock, struct msghdr *msg)
net/socket.c:sock_sendmsg_nosec(struct socket *sock, struct msghdr *msg)
func for case 75a2a727e4636c7a34dbd49197b15c3de92a8f7f
mm/hugetlb.c:__unmap_hugepage_range(struct mmu_gather *tlb, struct vm_area_struct *vma, unsigned long start, unsigned long end, struct page *ref_page, zap_flags_t zap_flags)
mm/hugetlb.c:follow_hugetlb_page(struct mm_struct *mm, struct vm_area_struct *vma, struct page **pages, struct vm_area_struct **vmas, unsigned long *position, unsigned long *nr_pages, long i, unsigned int flags, int *locked)
mm/hugetlb.c:hugetlb_add_to_page_cache(struct page *page, struct address_space *mapping, pgoff_t idx)
mm/hugetlb.c:hugetlb_fault(struct mm_struct *mm, struct vm_area_struct *vma, unsigned long address, unsigned int flags)
mm/hugetlb.c:hugetlb_handle_userfault(struct vm_area_struct *vma, struct address_space *mapping, pgoff_t idx, unsigned int flags, unsigned long haddr, unsigned long addr, unsigned long reason)
mm/hugetlb.c:hugetlb_install_page(struct vm_area_struct *vma, pte_t *ptep, unsigned long addr, struct page *new_page)
mm/hugetlb.c:hugetlb_mcopy_atomic_pte(struct mm_struct *dst_mm, pte_t *dst_pte, struct vm_area_struct *dst_vma, unsigned long dst_addr, unsigned long src_addr, enum mcopy_atomic_mode mode, struct page **pagep, bool wp_copy)
mm/hugetlb.c:hugetlb_no_page(struct mm_struct *mm, struct vm_area_struct *vma, struct address_space *mapping, pgoff_t idx, unsigned long address, pte_t *ptep, pte_t old_pte, unsigned int flags)
mm/hugetlb.c:hugetlb_reserve_pages(struct inode *inode, long from, long to, struct vm_area_struct *vma, vm_flags_t vm_flags)
mm/hugetlb.c:hugetlb_vm_op_close(struct vm_area_struct *vma)
mm/hugetlb.c:hugetlb_vm_op_open(struct vm_area_struct *vma)
mm/hugetlb.c:hugetlb_wp(struct mm_struct *mm, struct vm_area_struct *vma, unsigned long address, pte_t *ptep, unsigned int flags, struct page *pagecache_page, spinlock_t *ptl)
mm/hugetlb.c:hugetlbfs_pagecache_present(struct hstate *h, struct vm_area_struct *vma, unsigned long address)
mm/hugetlb.c:make_huge_pte(struct vm_area_struct *vma, struct page *page, int writable)
mm/hugetlb.c:unmap_ref_private(struct mm_struct *mm, struct vm_area_struct *vma, struct page *page, unsigned long address)
kernel/ptrace.c:__ptrace_detach(struct task_struct *tracer, struct task_struct *p)
kernel/ptrace.c:__ptrace_may_access(struct task_struct *task, unsigned int mode)
kernel/ptrace.c:generic_ptrace_peekdata(struct task_struct *tsk, unsigned long addr, unsigned long data)
kernel/ptrace.c:ptrace_access_vm(struct task_struct *tsk, unsigned long addr, void *buf, int len, unsigned int gup_flags)
kernel/ptrace.c:ptrace_attach(struct task_struct *task, long request, unsigned long addr, unsigned long flags)
kernel/ptrace.c:ptrace_check_attach(struct task_struct *child, bool ignore_state)
kernel/ptrace.c:ptrace_detach(struct task_struct *child, unsigned int data)
kernel/ptrace.c:ptrace_getsiginfo(struct task_struct *child, kernel_siginfo_t *info)
kernel/ptrace.c:ptrace_peek_siginfo(struct task_struct *child, unsigned long addr, unsigned long data)
kernel/ptrace.c:ptrace_readdata(struct task_struct *tsk, unsigned long src, char __user *dst, int len)
kernel/ptrace.c:ptrace_request(struct task_struct *child, long request, unsigned long addr, unsigned long data)
kernel/ptrace.c:ptrace_resume(struct task_struct *child, long request, unsigned long data)
kernel/ptrace.c:ptrace_setsiginfo(struct task_struct *child, const kernel_siginfo_t *info)
kernel/ptrace.c:ptrace_traceme(void)
kernel/ptrace.c:ptrace_writedata(struct task_struct *tsk, char __user *src, unsigned long dst, int len)
mm/gup.c:__get_user_pages(struct mm_struct *mm, unsigned long start, unsigned long nr_pages, unsigned int gup_flags, struct page **pages, struct vm_area_struct **vmas, int *locked)
mm/gup.c:__get_user_pages_locked(struct mm_struct *mm, unsigned long start, unsigned long nr_pages, struct page **pages, struct vm_area_struct **vmas, int *locked, unsigned int foll_flags)
mm/gup.c:__get_user_pages_remote(struct mm_struct *mm, unsigned long start, unsigned long nr_pages, unsigned int gup_flags, struct page **pages, struct vm_area_struct **vmas, int *locked)
_range()
mm/gup.c:check_vma_flags(struct vm_area_struct *vma, unsigned long gup_flags)
mm/gup.c:faultin_page(struct vm_area_struct *vma, unsigned long address, unsigned int *flags, bool unshare, int *locked)
mm/gup.c:fixup_user_fault(struct mm_struct *mm, unsigned long address, unsigned int fault_flags, bool *unlocked)
mm/gup.c:follow_page()
mm/gup.c:follow_page_mask()
mm/gup.c:follow_page_pte()
mm/gup.c:follow_pmd_mask()
mm/gup.c:get_user_pages_unlocked(unsigned long start, unsigned long nr_pages, struct page **pages, unsigned int gup_flags)
gup_()
mm/gup.c:gup_p4d_range(pgd_t *pgdp, pgd_t pgd, unsigned long addr, unsigned long end, unsigned int flags, struct page **pages, int *nr)
mm/gup.c:gup_pgd_range(unsigned long addr, unsigned long end, unsigned int flags, struct page **pages, int *nr)
mm/gup.c:gup_pmd_range(pud_t *pudp, pud_t pud, unsigned long addr, unsigned long end, unsigned int flags, struct page **pages, int *nr)
mm/gup.c:gup_pte_range(pmd_t pmd, pmd_t *pmdp, unsigned long addr, unsigned long end, unsigned int flags, struct page **pages, int *nr)
mm/gup.c:gup_pud_range(p4d_t *p4dp, p4d_t p4d, unsigned long addr, unsigned long end, unsigned int flags, struct page **pages, int *nr)
mm/hugetlb.c:hugetlb_wp(struct mm_struct *mm, struct vm_area_struct *vma, unsigned long address, pte_t *ptep, unsigned int flags, struct page *pagecache_page, spinlock_t *ptl)
mm/memory.c:__access_remote_vm(struct mm_struct *mm, unsigned long addr, void *buf, int len, unsigned int gup_flags)
mm/memory.c:__handle_mm_fault(struct vm_area_struct *vma, unsigned long address, unsigned int flags)
mm/memory.c:do_anonymous_page(struct vm_fault *vmf)
mm/memory.c:do_cow_fault(struct vm_fault *vmf)
mm/memory.c:do_swap_page(struct vm_fault *vmf)
mm/memory.c:handle_mm_fault(struct vm_area_struct *vma, unsigned long address, unsigned int flags, struct pt_regs *regs)
mm/memory.c:handle_pte_fault(struct vm_fault *vmf)
mm/memory.c:wp_page_copy(struct vm_fault *vmf)
arch/x86/kernel/ptrace.c:arch_ptrace(struct task_struct *child, long request, unsigned long addr, unsigned long data)
arch/x86/kernel/ptrace.c:ptrace_fill_bp_fields(struct perf_event_attr *attr, int len, int type, bool disabled)
arch/x86/kernel/ptrace.c:ptrace_get_dr7(struct perf_event *bp[])
arch/x86/kernel/ptrace.c:ptrace_modify_breakpoint(struct perf_event *bp, int len, int type, int disabled)
arch/x86/kernel/ptrace.c:ptrace_register_breakpoint()
arch/x86/kernel/ptrace.c:ptrace_set_debugreg(struct task_struct *tsk, int n, unsigned long val)
arch/x86/kernel/ptrace.c:ptrace_triggered(struct perf_event *bp, struct perf_sample_data *data, struct pt_regs *regs)
arch/x86/kernel/ptrace.c:ptrace_write_dr7(struct task_struct *tsk, unsigned long data)
include/linux/hugetlb.h:arch_hugetlb_migration_supported(struct hstate *h)
include/linux/hugetlb.h:htlb_alloc_mask(struct hstate *h)
include/linux/hugetlb.h:htlb_modify_alloc_mask(struct hstate *h, gfp_t gfp_mask)
include/linux/hugetlb.h:huge_pte_lock()
include/linux/hugetlb.h:huge_pte_lockptr()
include/linux/hugetlb.h:hugepage_movable_supported(struct hstate *h)
kernel/fork.c:copy_mm(unsigned long clone_flags, struct task_struct *tsk)
kernel/fork.c:dup_mm()
kernel/fork.c:dup_mmap(struct mm_struct *mm, struct mm_struct *oldmm)
mm/mmap.c:do_mmap(struct file *file, unsigned long addr, unsigned long len, unsigned long prot, unsigned long flags, unsigned long pgoff, unsigned long *populate, struct list_head *uf)
mm/mmap.c:ksys_mmap_pgoff(unsigned long addr, unsigned long len, unsigned long prot, unsigned long flags, unsigned long fd, unsigned long pgoff)
mm/mmap.c:mmap_region(struct file *file, unsigned long addr, unsigned long len, vm_flags_t vm_flags, unsigned long pgoff, struct list_head *uf)
arch/x86/mm/fault.c:do_user_addr_fault(struct pt_regs *regs, unsigned long error_code, unsigned long address)
arch/x86/mm/fault.c:exc_page_fault()
arch/x86/mm/fault.c:handle_page_fault(struct pt_regs *regs, unsigned long error_code, unsigned long address)
func for case 789df5b54ebd19aec0b5c3900c933d1910db8ec5
debug_want_extra_isize()
fs/ext4/orphan.c:ext4_init_orphan_info(struct super_block *sb)
fs/ext4/orphan.c:ext4_orphan_add(handle_t *handle, struct inode *inode)
fs/ext4/orphan.c:ext4_orphan_cleanup(struct super_block *sb, struct ext4_super_block *es)
fs/ext4/orphan.c:ext4_orphan_del(handle_t *handle, struct inode *inode)
fs/ext4/orphan.c:ext4_orphan_file_add(handle_t *handle, struct inode *inode)
fs/ext4/orphan.c:ext4_orphan_file_block_csum_verify(struct super_block *sb, struct buffer_head *bh)
fs/ext4/orphan.c:ext4_orphan_file_block_trigger(struct jbd2_buffer_trigger_type *triggers, struct buffer_head *bh, void *data, size_t size)
fs/ext4/orphan.c:ext4_orphan_file_del(handle_t *handle, struct inode *inode)
fs/ext4/orphan.c:ext4_process_orphan(struct inode *inode, int *nr_truncates, int *nr_orphans)
fs/ext4/super.c:ext4_clear_journal_err(struct super_block *sb, struct ext4_super_block *es)
fs/ext4/super.c:ext4_commit_super(struct super_block *sb)
fs/ext4/super.c:ext4_enable_quotas(struct super_block *sb)
fs/ext4/super.c:ext4_fill_super(struct super_block *sb, struct fs_context *fc)
fs/ext4/super.c:ext4_get_journal_inode()
fs/ext4/super.c:ext4_init_journal_params(struct super_block *sb, journal_t *journal)
fs/ext4/super.c:ext4_load_journal(struct super_block *sb, struct ext4_super_block *es, unsigned long journal_devnum)
fs/ext4/super.c:ext4_mark_recovery_complete(struct super_block *sb, struct ext4_super_block *es)
fs/ext4/super.c:ext4_put_super(struct super_block *sb)
fs/ext4/super.c:ext4_quota_enable(struct super_block *sb, int type, int format_id, unsigned int flags)
fs/ext4/super.c:ext4_quota_off(struct super_block *sb, int type)
fs/ext4/super.c:ext4_quota_on(struct super_block *sb, int type, int format_id, const struct path *path)
ext4_remount()
fs/ext4/super.c:ext4_setup_super(struct super_block *sb, struct ext4_super_block *es, int read_only)
fs/ext4/super.c:ext4_update_super(struct super_block *sb)
mm/page_alloc.c:__alloc_pages()
fs/ext4/xattr.c:ext4_expand_extra_isize_ea(struct inode *inode, int new_extra_isize, struct ext4_inode *raw_inode, handle_t *handle)
fs/ext4/xattr.c:ext4_xattr_block_set(handle_t *handle, struct inode *inode, struct ext4_xattr_info *i, struct ext4_xattr_block_find *bs)
fs/ext4/xattr.c:ext4_xattr_free_space(struct ext4_xattr_entry *last, size_t *min_offs, void *base, int *total)
fs/ext4/xattr.c:ext4_xattr_ibody_set(handle_t *handle, struct inode *inode, struct ext4_xattr_info *i, struct ext4_xattr_ibody_find *is)
fs/ext4/xattr.c:ext4_xattr_inode_create()
fs/ext4/xattr.c:ext4_xattr_inode_dec_ref_all(handle_t *handle, struct inode *parent, struct buffer_head *bh, struct ext4_xattr_entry *first, bool block_csum, struct ext4_xattr_inode_array **ea_inode_array, int extra_credits, bool skip_quota)
fs/ext4/xattr.c:ext4_xattr_inode_inc_ref_all(handle_t *handle, struct inode *parent, struct ext4_xattr_entry *first)
fs/ext4/xattr.c:ext4_xattr_inode_lookup_create(handle_t *handle, struct inode *inode, const void *value, size_t value_len, struct inode **ret_inode)
fs/ext4/xattr.c:ext4_xattr_make_inode_space(handle_t *handle, struct inode *inode, struct ext4_inode *raw_inode, int isize_diff, size_t ifree, size_t bfree, int *total_ino)
fs/ext4/xattr.c:ext4_xattr_move_to_block(handle_t *handle, struct inode *inode, struct ext4_inode *raw_inode, struct ext4_xattr_entry *entry)
fs/ext4/xattr.c:ext4_xattr_release_block(handle_t *handle, struct inode *inode, struct buffer_head *bh, struct ext4_xattr_inode_array **ea_inode_array, int extra_credits)
fs/ext4/xattr.c:ext4_xattr_set(struct inode *inode, int name_index, const char *name, const void *value, size_t value_len, int flags)
fs/ext4/xattr.c:ext4_xattr_set_entry(struct ext4_xattr_info *i, struct ext4_xattr_search *s, handle_t *handle, struct inode *inode, bool is_block)
fs/ext4/xattr.c:ext4_xattr_set_handle(handle_t *handle, struct inode *inode, int name_index, const char *name, const void *value, size_t value_len, int flags)
fs/ext4/xattr.c:ext4_xattr_shift_entries(struct ext4_xattr_entry *entry, int value_offs_shift, void *to, void *from, size_t n)
mm/page_alloc.c:__alloc_pages()
mm/page_alloc.c:__alloc_pages_slowpath()
mm/page_alloc.c:__zone_watermark_ok(struct zone *z, unsigned int order, unsigned long mark, int highest_zoneidx, unsigned int alloc_flags, long free_pages)
mm/page_alloc.c:get_page_from_freelist()
mm/page_alloc.c:should_reclaim_retry(gfp_t gfp_mask, unsigned order, struct alloc_context *ac, int alloc_flags, bool did_some_progress, int *no_progress_loops)
mm/page_alloc.c:warn_alloc(gfp_t gfp_mask, nodemask_t *nodemask, const char *fmt, ...)
mm/page_alloc.c:zone_watermark_fast(struct zone *z, unsigned int order, unsigned long mark, int highest_zoneidx, unsigned int alloc_flags, gfp_t gfp_mask)
mm/page_alloc.c:zone_watermark_ok_safe(struct zone *z, unsigned int order, unsigned long mark, int highest_zoneidx)
fs/ext4/inode.c:__ext4_expand_extra_isize(struct inode *inode, unsigned int new_extra_isize, struct ext4_iloc *iloc, handle_t *handle, int *no_expand)
fs/ext4/inode.c:__ext4_mark_inode_dirty(handle_t *handle, struct inode *inode, const char *func, unsigned int line)
debug_want_extra_isize()
fs/ext4/inode.c:ext4_do_update_inode(handle_t *handle, struct inode *inode, struct ext4_iloc *iloc)
fs/ext4/inode.c:ext4_expand_extra_isize(struct inode *inode, unsigned int new_extra_isize, struct ext4_iloc *iloc)
fs/ext4/xattr.c:ext4_expand_extra_isize_ea(struct inode *inode, int new_extra_isize, struct ext4_inode *raw_inode, handle_t *handle)
fs/ext4/inode.c:ext4_inode_blocks_set(struct ext4_inode *raw_inode, struct ext4_inode_info *ei)
fs/ext4/inode.c:ext4_setattr(struct user_namespace *mnt_userns, struct dentry *dentry, struct iattr *attr)
fs/ext4/inode.c:ext4_truncate(struct inode *inode)
fs/ext4/inode.c:ext4_try_to_expand_extra_isize(struct inode *inode, unsigned int new_extra_isize, struct ext4_iloc iloc, handle_t *handle)
include/linux/gfp.h:__alloc_pages_node()
mm/slab_common.c:__kmalloc_large_node()
mm/slab_common.c:calculate_alignment(slab_flags_t flags, unsigned int align, unsigned int size)
mm/slab_common.c:create_kmalloc_cache()
kmalloc_order()
mm/slab_common.c:kmalloc_slab()
mm/slab_common.c:kmem_cache_create_usercopy()
mm/slab_common.c:new_kmalloc_cache(int idx, enum kmalloc_cache_type type, slab_flags_t flags)
slab_common()
fs/ext4/inline.c:ext4_convert_inline_data(struct inode *inode)
fs/ext4/inline.c:ext4_convert_inline_data_nolock(handle_t *handle, struct inode *inode, struct ext4_iloc *iloc)
fs/ext4/inline.c:ext4_destroy_inline_data_nolock(handle_t *handle, struct inode *inode)
fs/ext4/inline.c:ext4_find_inline_data_nolock(struct inode *inode)
fs/ext4/inline.c:ext4_inline_data_truncate(struct inode *inode, int *has_inline)
fs/ext4/inline.c:ext4_read_inline_data(struct inode *inode, void *buffer, unsigned int len, struct ext4_iloc *iloc)
fs/ext4/inline.c:ext4_try_to_write_inline_data(struct address_space *mapping, struct inode *inode, loff_t pos, unsigned len, struct page **pagep)
fs/ext4/inline.c:ext4_write_inline_data(struct inode *inode, struct ext4_iloc *iloc, void *buffer, loff_t pos, unsigned int len)
mm/page_alloc.c:__alloc_pages()
include/linux/gfp.h:__alloc_pages_node()
include/linux/gfp.h:gfp_migratetype(const gfp_t gfp_flags)
include/linux/gfp.h:gfp_zone(gfp_t flags)
fs/namespace.c:do_mount(const char *dev_name, const char __user *dir_name, const char *type_page, unsigned long flags, void *data_page)
fs/namespace.c:do_new_mount(struct path *path, const char *fstype, int sb_flags, int mnt_flags, const char *name, void *data)
fs/namespace.c:path_mount(const char *dev_name, struct path *path, const char *type_page, unsigned long flags, void *data_page)
include/linux/slab.h:__kmalloc_index(size_t size, bool size_is_constant)
kmalloc_node()
include/linux/slab.h:kmalloc_type(gfp_t flags)
func for case 7f34dec8b4c3be61baad2f552b05d2011d64ae87
drivers/media/v4l2-core/v4l2-ctrls.c:set_ctrl(struct v4l2_fh *fh, struct v4l2_ctrl *ctrl, u32 ch_flags)
drivers/media/v4l2-core/v4l2-ctrls.c:std_equal(const struct v4l2_ctrl *ctrl, u32 idx, union v4l2_ctrl_ptr ptr1, union v4l2_ctrl_ptr ptr2)
drivers/media/v4l2-core/v4l2-ctrls.c:std_init(const struct v4l2_ctrl *ctrl, u32 idx, union v4l2_ctrl_ptr ptr)
drivers/media/v4l2-core/v4l2-ctrls.c:std_init_compound(const struct v4l2_ctrl *ctrl, u32 idx, union v4l2_ctrl_ptr ptr)
drivers/media/v4l2-core/v4l2-ctrls.c:std_validate(const struct v4l2_ctrl *ctrl, u32 idx, union v4l2_ctrl_ptr ptr)
drivers/media/v4l2-core/v4l2-ctrls.c:std_validate_compound(const struct v4l2_ctrl *ctrl, u32 idx, union v4l2_ctrl_ptr ptr)
drivers/media/v4l2-core/v4l2-ctrls.c:try_or_set_cluster(struct v4l2_fh *fh, struct v4l2_ctrl *master, bool set, u32 ch_flags)
drivers/media/v4l2-core/v4l2-ctrls.c:try_set_ext_ctrls(struct v4l2_fh *fh, struct v4l2_ctrl_handler *hdl, struct video_device *vdev, struct media_device *mdev, struct v4l2_ext_controls *cs, bool set)
drivers/media/v4l2-core/v4l2-ctrls.c:try_set_ext_ctrls_common(struct v4l2_fh *fh, struct v4l2_ctrl_handler *hdl, struct v4l2_ext_controls *cs, struct video_device *vdev, bool set)
drivers/media/v4l2-core/v4l2-ctrls.c:v4l2_ctrl_new()
drivers/media/v4l2-core/v4l2-ctrls.c:v4l2_ctrl_new_custom()
drivers/media/v4l2-core/v4l2-ctrls.c:v4l2_ctrl_new_std()
drivers/media/v4l2-core/v4l2-ctrls.c:v4l2_s_ctrl(struct v4l2_fh *fh, struct v4l2_ctrl_handler *hdl, struct v4l2_control *control)
drivers/media/v4l2-core/v4l2-ctrls.c:validate_ctrls(struct v4l2_ext_controls *cs, struct v4l2_ctrl_helper *helpers, struct video_device *vdev, bool set)
drivers/media/v4l2-core/v4l2-ctrls.c:validate_new(const struct v4l2_ctrl *ctrl, union v4l2_ctrl_ptr p_new)
VIDIOC_S_CTRL()
include/media/v4l2-ctrls.h:v4l2_ctrl_grab(struct v4l2_ctrl *ctrl, bool grabbed)
include/media/v4l2-ctrls.h:v4l2_ctrl_modify_range(struct v4l2_ctrl *ctrl, s64 min, s64 max, u64 step, s64 def)
include/media/v4l2-ctrls.h:v4l2_ctrl_s_ctrl_int64(struct v4l2_ctrl *ctrl, s64 val)
include/media/v4l2-ctrls.h:v4l2_ctrl_s_ctrl_string(struct v4l2_ctrl *ctrl, const char *s)
VIDIOC_S_CTRL()
drivers/media/v4l2-core/v4l2-ioctl.c:__video_do_ioctl(struct file *file, unsigned int cmd, void *arg)
drivers/media/v4l2-core/v4l2-ioctl.c:check_ext_ctrls(struct v4l2_ext_controls *c, int allow_priv)
drivers/media/v4l2-core/v4l2-ioctl.c:v4l_g_ctrl(const struct v4l2_ioctl_ops *ops, struct file *file, void *fh, void *arg)
drivers/media/v4l2-core/v4l2-ioctl.c:v4l_g_ext_ctrls(const struct v4l2_ioctl_ops *ops, struct file *file, void *fh, void *arg)
drivers/media/v4l2-core/v4l2-ioctl.c:v4l_print_control(const void *arg, bool write_only)
drivers/media/v4l2-core/v4l2-ioctl.c:v4l_print_ext_controls(const void *arg, bool write_only)
drivers/media/v4l2-core/v4l2-ioctl.c:v4l_print_query_ext_ctrl(const void *arg, bool write_only)
drivers/media/v4l2-core/v4l2-ioctl.c:v4l_print_queryctrl(const void *arg, bool write_only)
drivers/media/v4l2-core/v4l2-ioctl.c:v4l_query_ext_ctrl(const struct v4l2_ioctl_ops *ops, struct file *file, void *fh, void *arg)
drivers/media/v4l2-core/v4l2-ioctl.c:v4l_queryctrl(const struct v4l2_ioctl_ops *ops, struct file *file, void *fh, void *arg)
drivers/media/v4l2-core/v4l2-ioctl.c:v4l_querymenu(const struct v4l2_ioctl_ops *ops, struct file *file, void *fh, void *arg)
drivers/media/v4l2-core/v4l2-ioctl.c:v4l_s_ctrl(const struct v4l2_ioctl_ops *ops, struct file *file, void *fh, void *arg)
drivers/media/v4l2-core/v4l2-ioctl.c:v4l_s_ext_ctrls(const struct v4l2_ioctl_ops *ops, struct file *file, void *fh, void *arg)
drivers/media/v4l2-core/v4l2-ioctl.c:v4l_try_ext_ctrls(const struct v4l2_ioctl_ops *ops, struct file *file, void *fh, void *arg)
drivers/media/v4l2-core/v4l2-ioctl.c:video_usercopy(struct file *file, unsigned int orig_cmd, unsigned long arg, v4l2_kioctl func)
drivers/media/v4l2-core/v4l2-dev.c:v4l2_get_unmapped_area(struct file *filp, unsigned long addr, unsigned long len, unsigned long pgoff, unsigned long flags)
drivers/media/v4l2-core/v4l2-dev.c:v4l2_ioctl(struct file *filp, unsigned int cmd, unsigned long arg)
drivers/media/v4l2-core/v4l2-dev.c:v4l2_mmap(struct file *filp, struct vm_area_struct *vm)
drivers/media/v4l2-core/v4l2-dev.c:v4l2_open(struct inode *inode, struct file *filp)
drivers/media/v4l2-core/v4l2-dev.c:v4l2_poll(struct file *filp, struct poll_table_struct *poll)
drivers/media/v4l2-core/v4l2-dev.c:v4l2_read(struct file *filp, char __user *buf, size_t sz, loff_t *off)
drivers/media/v4l2-core/v4l2-dev.c:v4l2_release(struct inode *inode, struct file *filp)
drivers/media/v4l2-core/v4l2-dev.c:v4l2_write(struct file *filp, const char __user *buf, size_t sz, loff_t *off)
lib/ubsan.c:__ubsan_handle_divrem_overflow(void *_data, void *lhs, void *rhs)
lib/ubsan.c:__ubsan_handle_load_invalid_value(void *_data, void *val)
lib/ubsan.c:__ubsan_handle_out_of_bounds(void *_data, void *index)
lib/ubsan.c:__ubsan_handle_shift_out_of_bounds(void *_data, void *lhs, void *rhs)
lib/ubsan.c:__ubsan_handle_type_mismatch_v1(void *_data, void *ptr)
lib/ubsan.c:ubsan_epilogue(void)
lib/ubsan.c:ubsan_prologue(struct source_location *loc, const char *reason)
lib/ubsan.c:ubsan_type_mismatch_common(struct type_mismatch_data_common *data, unsigned long ptr)
fs/ioctl.c:do_vfs_ioctl(struct file *filp, unsigned int fd, unsigned int cmd, unsigned long arg)
fs/ioctl.c:ioctl_fioasync(unsigned int fd, struct file *filp, int __user *argp)
fs/ioctl.c:ioctl_fionbio(struct file *filp, int __user *argp)
drivers/media/v4l2-core/v4l2-subdev.c:subdev_do_ioctl(struct file *file, unsigned int cmd, void *arg)
drivers/media/v4l2-core/v4l2-subdev.c:subdev_do_ioctl_lock(struct file *file, unsigned int cmd, void *arg)
subdev_ioctl_get_state()
func for case 8d31c0d56f794feb72c2d359795c74908dab34c0
net/ethtool/bitset.c:ethnl_bitmap32_clear(u32 *dst, unsigned int start, unsigned int end, bool *mod)
net/ethtool/bitset.c:ethnl_bitmap32_not_zero(const u32 *map, unsigned int start, unsigned int end)
net/ethtool/bitset.c:ethnl_bitset32_size(const u32 *val, const u32 *mask, unsigned int nbits, ethnl_string_array_t names, bool compact)
net/ethtool/bitset.c:ethnl_bitset_size(const unsigned long *val, const unsigned long *mask, unsigned int nbits, ethnl_string_array_t names, bool compact)
net/ethtool/bitset.c:ethnl_compact_sanity_checks(unsigned int nbits, const struct nlattr *nest, struct nlattr **tb, struct netlink_ext_ack *extack)
net/ethtool/bitset.c:ethnl_parse_bit(unsigned int *index, bool *val, unsigned int nbits, const struct nlattr *bit_attr, bool no_mask, ethnl_string_array_t names, struct netlink_ext_ack *extack)
net/ethtool/bitset.c:ethnl_put_bitset(struct sk_buff *skb, int attrtype, const unsigned long *val, const unsigned long *mask, unsigned int nbits, ethnl_string_array_t names, bool compact)
net/ethtool/bitset.c:ethnl_put_bitset32(struct sk_buff *skb, int attrtype, const u32 *val, const u32 *mask, unsigned int nbits, ethnl_string_array_t names, bool compact)
net/ethtool/bitset.c:ethnl_update_bitset(unsigned long *bitmap, unsigned int nbits, const struct nlattr *attr, ethnl_string_array_t names, struct netlink_ext_ack *extack, bool *mod)
net/ethtool/bitset.c:ethnl_update_bitset32(u32 *bitmap, unsigned int nbits, const struct nlattr *attr, ethnl_string_array_t names, struct netlink_ext_ack *extack, bool *mod)
net/ethtool/bitset.c:ethnl_update_bitset32_verbose(u32 *bitmap, unsigned int nbits, const struct nlattr *attr, struct nlattr **tb, ethnl_string_array_t names, struct netlink_ext_ack *extack, bool *mod)
not_zero()
net/ethtool/linkmodes.c:ethnl_auto_linkmodes(struct ethtool_link_ksettings *ksettings, bool req_speed, bool req_duplex)
net/ethtool/linkmodes.c:ethnl_set_linkmodes(struct sk_buff *skb, struct genl_info *info)
net/ethtool/linkmodes.c:linkmodes_fill_reply(struct sk_buff *skb, const struct ethnl_req_info *req_base, const struct ethnl_reply_data *reply_base)
net/ethtool/linkmodes.c:linkmodes_reply_size(const struct ethnl_req_info *req_base, const struct ethnl_reply_data *reply_base)
net/ethtool/common.c:convert_legacy_settings_to_link_ksettings(struct ethtool_link_ksettings *link_ksettings, const struct ethtool_cmd *legacy_settings)
net/ethtool/bitset.c:ethnl_bitmap32_not_zero(const u32 *map, unsigned int start, unsigned int end)
net/ethtool/bitset.c:ethnl_compact_sanity_checks(unsigned int nbits, const struct nlattr *nest, struct nlattr **tb, struct netlink_ext_ack *extack)
net/ethtool/linkmodes.c:ethnl_set_linkmodes(struct sk_buff *skb, struct genl_info *info)
net/ethtool/bitset.c:ethnl_update_bitset(unsigned long *bitmap, unsigned int nbits, const struct nlattr *attr, ethnl_string_array_t names, struct netlink_ext_ack *extack, bool *mod)
net/ethtool/bitset.c:ethnl_update_bitset32(u32 *bitmap, unsigned int nbits, const struct nlattr *attr, ethnl_string_array_t names, struct netlink_ext_ack *extack, bool *mod)
net/ethtool/linkmodes.c:ethnl_update_linkmodes(struct genl_info *info, struct nlattr **tb, struct ethtool_link_ksettings *ksettings, bool *mod)
net/netlink/genetlink.c:genl_family_rcv_msg(const struct genl_family *family, struct sk_buff *skb, struct nlmsghdr *nlh, struct netlink_ext_ack *extack)
net/netlink/genetlink.c:genl_family_rcv_msg_doit(const struct genl_family *family, struct sk_buff *skb, struct nlmsghdr *nlh, struct netlink_ext_ack *extack, const struct genl_ops *ops, int hdrlen, struct net *net)
genl_rcv()
net/netlink/genetlink.c:genl_rcv_msg(struct sk_buff *skb, struct nlmsghdr *nlh, struct netlink_ext_ack *extack)
net/netlink/af_netlink.c:netlink_rcv_skb(struct sk_buff *skb, int (*cb)(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *))
net/netlink/af_netlink.c:netlink_unicast(struct sock *ssk, struct sk_buff *skb, u32 portid, int nonblock)
net/netlink/af_netlink.c:netlink_unicast_kernel(struct sock *sk, struct sk_buff *skb, struct sock *ssk)
net/ethtool/ioctl.c:ethtool_get_features(struct net_device *dev, void __user *useraddr)
net/ethtool/ioctl.c:ethtool_get_link_ksettings(struct net_device *dev, void __user *useraddr)
net/ethtool/ioctl.c:ethtool_get_rxfh(struct net_device *dev, void __user *useraddr)
net/ethtool/ioctl.c:ethtool_get_rxnfc(struct net_device *dev, u32 cmd, void __user *useraddr)
net/ethtool/ioctl.c:ethtool_set_features(struct net_device *dev, void __user *useraddr)
net/ethtool/ioctl.c:ethtool_set_link_ksettings(struct net_device *dev, void __user *useraddr)
net/ethtool/ioctl.c:ethtool_set_rxfh(struct net_device *dev, void __user *useraddr)
net/ethtool/ioctl.c:ethtool_set_rxnfc(struct net_device *dev, u32 cmd, void __user *useraddr)
net/netlink/genetlink.c:genl_family_rcv_msg(const struct genl_family *family, struct sk_buff *skb, struct nlmsghdr *nlh, struct netlink_ext_ack *extack)
net/netlink/genetlink.c:genl_family_rcv_msg_doit(const struct genl_family *family, struct sk_buff *skb, struct nlmsghdr *nlh, struct netlink_ext_ack *extack, const struct genl_ops *ops, int hdrlen, struct net *net)
net/netlink/genetlink.c:genl_family_rcv_msg_dumpit(const struct genl_family *family, struct sk_buff *skb, struct nlmsghdr *nlh, struct netlink_ext_ack *extack, const struct genl_ops *ops, int hdrlen, struct net *net)
net/netlink/genetlink.c:genl_notify(const struct genl_family *family, struct sk_buff *skb, struct genl_info *info, u32 group, gfp_t flags)
net/netlink/genetlink.c:genl_rcv_msg(struct sk_buff *skb, struct nlmsghdr *nlh, struct netlink_ext_ack *extack)
net/netlink/genetlink.c:genl_register_family(struct genl_family *family)
net/netlink/genetlink.c:genl_unregister_family(const struct genl_family *family)
net/netlink/genetlink.c:genlmsg_put()
net/netlink/af_netlink.c:netlink_alloc_large_skb()
net/netlink/af_netlink.c:netlink_bind(struct socket *sock, struct sockaddr *addr, int addr_len)
net/netlink/af_netlink.c:netlink_getsockbyportid()
net/netlink/af_netlink.c:netlink_rcv_skb(struct sk_buff *skb, int (*cb)(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *))
net/netlink/af_netlink.c:netlink_sendmsg(struct socket *sock, struct msghdr *msg, size_t len)
net/netlink/af_netlink.c:netlink_trim()
net/netlink/af_netlink.c:netlink_unicast(struct sock *ssk, struct sk_buff *skb, u32 portid, int nonblock)
net/netlink/af_netlink.c:netlink_unicast_kernel(struct sock *sk, struct sk_buff *skb, struct sock *ssk)
net/ethtool/bitset.c:ethnl_bitmap32_not_zero(const u32 *map, unsigned int start, unsigned int end)
net/ethtool/bitset.c:ethnl_compact_sanity_checks(unsigned int nbits, const struct nlattr *nest, struct nlattr **tb, struct netlink_ext_ack *extack)
net/ethtool/linkmodes.c:ethnl_set_linkmodes(struct sk_buff *skb, struct genl_info *info)
net/ethtool/bitset.c:ethnl_update_bitset(unsigned long *bitmap, unsigned int nbits, const struct nlattr *attr, ethnl_string_array_t names, struct netlink_ext_ack *extack, bool *mod)
net/ethtool/bitset.c:ethnl_update_bitset32(u32 *bitmap, unsigned int nbits, const struct nlattr *attr, ethnl_string_array_t names, struct netlink_ext_ack *extack, bool *mod)
net/ethtool/linkmodes.c:ethnl_update_linkmodes(struct genl_info *info, struct nlattr **tb, struct ethtool_link_ksettings *ksettings, bool *mod)
net/netlink/genetlink.c:genl_family_rcv_msg_doit(const struct genl_family *family, struct sk_buff *skb, struct nlmsghdr *nlh, struct netlink_ext_ack *extack, const struct genl_ops *ops, int hdrlen, struct net *net)
__is_skb_forwardable()
include/linux/netdevice.h:dev_parse_header(const struct sk_buff *skb, unsigned char *haddr)
include/linux/netdevice.h:dev_validate_header(const struct net_device *dev, char *ll_header, int len)
dev_eth_ioctl()
net/core/dev_ioctl.c:dev_ifsioc(struct net *net, struct ifreq *ifr, unsigned int cmd)
net/core/dev_ioctl.c:dev_ioctl(struct net *net, unsigned int cmd, struct ifreq *ifr, bool *need_copyout)
net/socket.c:kernel_sendmsg_locked(struct sock *sk, struct msghdr *msg, struct kvec *vec, size_t num, size_t size)
net/socket.c:sock_sendmsg(struct socket *sock, struct msghdr *msg)
net/socket.c:sock_sendmsg_nosec(struct socket *sock, struct msghdr *msg)
func for case 8dc7a6aed7b8ead4c982ecdf2cd1ea5a4c3b57bb
fs/fuse/file.c:fuse_cache_write_iter(struct kiocb *iocb, struct iov_iter *from)
fs/fuse/file.c:fuse_direct_IO(struct kiocb *iocb, struct iov_iter *iter)
fs/fuse/file.c:fuse_direct_io(struct fuse_io_priv *io, struct iov_iter *iter, loff_t *ppos, int flags)
fs/fuse/file.c:fuse_direct_write_iter(struct kiocb *iocb, struct iov_iter *from)
fs/fuse/file.c:fuse_do_truncate(struct file *file)
fs/fuse/file.c:fuse_file_alloc()
fs/fuse/file.c:fuse_file_fallocate(struct file *file, int mode, loff_t offset, loff_t length)
fs/fuse/file.c:fuse_file_mmap(struct file *file, struct vm_area_struct *vma)
fs/fuse/file.c:fuse_file_open()
fs/fuse/file.c:fuse_file_read_iter(struct kiocb *iocb, struct iov_iter *to)
fs/fuse/file.c:fuse_file_write_iter(struct kiocb *iocb, struct iov_iter *from)
fs/fuse/file.c:fuse_perform_write(struct kiocb *iocb, struct address_space *mapping, struct iov_iter *ii, loff_t pos)
fs/fuse/file.c:fuse_send_write(struct fuse_io_args *ia, loff_t pos, size_t count, fl_owner_t owner)
fs/fuse/file.c:fuse_write_args_fill(struct fuse_io_args *ia, struct fuse_file *ff, loff_t pos, size_t count)
fs/fuse/file.c:fuse_write_update_attr(struct inode *inode, loff_t pos, ssize_t written)
fs/attr.c:notify_change(struct user_namespace *mnt_userns, struct dentry *dentry, struct iattr *attr, struct inode **delegated_inode)
fs/attr.c:chgrp_ok(struct user_namespace *mnt_userns, const struct inode *inode, vfsgid_t ia_vfsgid)
fs/attr.c:chown_ok(struct user_namespace *mnt_userns, const struct inode *inode, vfsuid_t ia_vfsuid)
fs/attr.c:inode_newsize_ok(const struct inode *inode, loff_t offset)
fs/attr.c:may_setattr(struct user_namespace *mnt_userns, struct inode *inode, unsigned int ia_valid)
fs/attr.c:notify_change(struct user_namespace *mnt_userns, struct dentry *dentry, struct iattr *attr, struct inode **delegated_inode)
fs/attr.c:setattr_copy(struct user_namespace *mnt_userns, struct inode *inode, const struct iattr *attr)
fs/attr.c:setattr_prepare(struct user_namespace *mnt_userns, struct dentry *dentry, struct iattr *attr)
fs/fuse/inode.c:fuse_alloc_inode()
fs/fuse/inode.c:fuse_change_attributes(struct inode *inode, struct fuse_attr *attr, u64 attr_valid, u64 attr_version)
fs/fuse/inode.c:fuse_change_attributes_common(struct inode *inode, struct fuse_attr *attr, u64 attr_valid, u32 cache_mask)
fs/fuse/inode.c:fuse_conn_init(struct fuse_conn *fc, struct fuse_mount *fm, struct user_namespace *user_ns, const struct fuse_iqueue_ops *fiq_ops, void *fiq_priv)
fs/fuse/inode.c:fuse_fill_super(struct super_block *sb, struct fs_context *fsc)
fs/fuse/inode.c:fuse_fill_super_common(struct super_block *sb, struct fuse_fs_context *ctx)
fs/fuse/inode.c:fuse_free_inode(struct inode *inode)
fs/fuse/inode.c:fuse_get_tree(struct fs_context *fsc)
fs/fuse/inode.c:fuse_init_fs_context(struct fs_context *fsc)
fs/fuse/inode.c:fuse_parse_param(struct fs_context *fsc, struct fs_parameter *param)
fs/fuse/inode.c:fuse_sb_defaults(struct super_block *sb)
fs/fuse/inode.c:fuse_send_init(struct fuse_mount *fm)
fs/fuse/inode.c:process_init_limits(struct fuse_conn *fc, struct fuse_init_out *arg)
fs/fuse/inode.c:process_init_reply(struct fuse_mount *fm, struct fuse_args *args, int error)
fs/fuse/inode.c:sanitize_global_limit(unsigned *limit)
FS_IOC_RESVSP()
fs/ioctl.c:do_vfs_ioctl(struct file *filp, unsigned int fd, unsigned int cmd, unsigned long arg)
fs/ioctl.c:ioctl_fibmap(struct file *filp, int __user *p)
fs/ioctl.c:ioctl_fiemap(struct file *filp, struct fiemap __user *ufiemap)
fs/ioctl.c:ioctl_file_clone(struct file *dst_file, unsigned long srcfd, u64 off, u64 olen, u64 destoff)
fs/ioctl.c:ioctl_file_clone_range(struct file *file, struct file_clone_range __user *argp)
fs/ioctl.c:ioctl_fssetxattr(struct file *file, void __user *argp)
fs/ioctl.c:ioctl_preallocate(struct file *filp, int mode, void __user *argp)
fs/ioctl.c:ioctl_setflags(struct file *file, unsigned int __user *argp)
fs/open.c:build_open_flags(const struct open_how *how, struct open_flags *op)
fs/open.c:dentry_open()
fs/open.c:do_dentry_open(struct file *f, struct inode *inode, int (*open)(struct inode *, struct file *))
fs/open.c:do_sys_ftruncate(unsigned int fd, loff_t length, int small)
fs/open.c:do_sys_openat2(int dfd, const char __user *filename, struct open_how *how)
fs/open.c:do_truncate(struct user_namespace *mnt_userns, struct dentry *dentry, loff_t length, unsigned int time_attrs, struct file *filp)
fs/open.c:filp_open()
fs/open.c:vfs_fallocate(struct file *file, int mode, loff_t offset, loff_t len)
fs/inode.c:__remove_privs(struct user_namespace *mnt_userns, struct dentry *dentry, int kill)
fs/inode.c:dentry_needs_remove_privs(struct dentry *dentry)
file_modified()
file_remove_privs()
fs/inode.c:init_special_inode(struct inode *inode, umode_t mode, dev_t rdev)
fs/inode.c:inode_init_owner(struct user_namespace *mnt_userns, struct inode *inode, const struct inode *dir, umode_t mode)
fs/inode.c:inode_owner_or_capable(struct user_namespace *mnt_userns, const struct inode *inode)
fs/attr.c:notify_change(struct user_namespace *mnt_userns, struct dentry *dentry, struct iattr *attr, struct inode **delegated_inode)
fs/inode.c:should_remove_suid(struct dentry *dentry)
fs/namei.c:do_mknodat(int dfd, struct filename *name, umode_t mode, unsigned int dev)
fs/namei.c:handle_truncate(struct user_namespace *mnt_userns, struct file *filp)
fs/namei.c:may_open(struct user_namespace *mnt_userns, const struct path *path, int acc_mode, int flag)
fs/attr.c:notify_change(struct user_namespace *mnt_userns, struct dentry *dentry, struct iattr *attr, struct inode **delegated_inode)
vfs_()
fs/namei.c:vfs_create(struct user_namespace *mnt_userns, struct inode *dir, struct dentry *dentry, umode_t mode, bool want_excl)
fs/namei.c:vfs_mknod(struct user_namespace *mnt_userns, struct inode *dir, struct dentry *dentry, umode_t mode, dev_t dev)
fs/namei.c:vfs_rename(struct renamedata *rd)
fs/namei.c:vfs_symlink(struct user_namespace *mnt_userns, struct inode *dir, struct dentry *dentry, const char *oldname)
fs/namei.c:vfs_unlink(struct user_namespace *mnt_userns, struct inode *dir, struct dentry *dentry, struct inode **delegated_inode)
fs/fuse/dir.c:fuse_do_setattr(struct dentry *dentry, struct iattr *attr, struct file *file)
fs/fuse/dir.c:fuse_setattr(struct user_namespace *mnt_userns, struct dentry *entry, struct iattr *attr)
fs/fuse/dir.c:fuse_setattr_fill(struct fuse_conn *fc, struct fuse_args *args, struct inode *inode, struct fuse_setattr_in *inarg_p, struct fuse_attr_out *outarg_p)
fs/attr.c:notify_change(struct user_namespace *mnt_userns, struct dentry *dentry, struct iattr *attr, struct inode **delegated_inode)
fs/fuse/dev.c:fuse_dev_do_write(struct fuse_dev *fud, struct fuse_copy_state *cs, size_t nbytes)
fs/fuse/dev.c:fuse_dev_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
fs/fuse/dev.c:fuse_dev_write(struct kiocb *iocb, struct iov_iter *from)
fs/super.c:mount_single()
fs/super.c:reconfigure_single(struct super_block *s, int flags, void *data))
fs/super.c:vfs_get_tree(struct fs_context *fc))
func for case 949ecf93b67ab1df8f890571d24ef9db50872c96
__dev_change_net_namespace()
net/core/dev.c:__dev_close_many(struct list_head *head)
net/core/dev.c:bpf_xdp_link_attach(const union bpf_attr *attr, struct bpf_prog *prog)
net/core/dev.c:bpf_xdp_link_release(struct bpf_link *link)
net/core/dev.c:bpf_xdp_link_update(struct bpf_link *link, struct bpf_prog *new_prog, struct bpf_prog *old_prog)
net/core/dev.c:dev_close(struct net_device *dev)
net/core/dev.c:dev_close_many(struct list_head *head, bool unlink)
net/core/dev.c:dev_xdp_attach(struct net_device *dev, struct netlink_ext_ack *extack, struct bpf_xdp_link *link, struct bpf_prog *new_prog, struct bpf_prog *old_prog, u32 flags)
net/core/dev.c:dev_xdp_install(struct net_device *dev, enum bpf_xdp_mode mode, bpf_op_t bpf_op, struct netlink_ext_ack *extack, u32 flags, struct bpf_prog *prog)
net/core/dev.c:dev_xdp_uninstall(struct net_device *dev)
net/core/dev.c:free_netdev(struct net_device *dev)
net/core/dev.c:netdev_run_todo(void)
netdev_wait_allrefs_any()
net/core/dev.c:register_netdevice(struct net_device *dev)
run_todo()
unregister_netdevice()
net/core/dev.c:unregister_netdevice_queue(struct net_device *dev, struct list_head *head)
wait_allrefs()
net/core/dev.c:dev_direct_xmit(struct sk_buff *skb, u16 queue_id)
include/linux/netdevice.h:dev_parse_header(const struct sk_buff *skb, unsigned char *haddr)
include/linux/netdevice.h:dev_parse_header_protocol(const struct sk_buff *skb)
dev_validate()
include/linux/netdevice.h:dev_validate_header(const struct net_device *dev, char *ll_header, int len)
include/linux/netdevice.h:netdev_reg_state()
include/linux/netdevice.h:netdev_start_xmit(struct sk_buff *skb, struct net_device *dev, struct netdev_queue *txq, bool more)
netif_addr_lock()
netif_addr_lock_bh()
include/linux/netdevice.h:netif_trans_update(struct net_device *dev)
netif_tx_()
include/linux/netdevice.h:netif_tx_disable(struct net_device *dev)
include/linux/netdevice.h:netif_tx_lock(struct net_device *dev)
include/linux/netdevice.h:netif_tx_start_all_queues(struct net_device *dev)
include/linux/netdevice.h:netif_tx_unlock(struct net_device *dev)
include/linux/netdevice.h:netif_tx_wake_all_queues(struct net_device *dev)
include/linux/netdevice.h:next_net_device()
parse_header()
unregister_netdevice()
net/core/net_namespace.c:__register_pernet_operations(struct list_head *list, struct pernet_operations *ops)
net/core/net_namespace.c:__unregister_pernet_operations(struct pernet_operations *ops)
net/core/net_namespace.c:cleanup_net(struct work_struct *work)
net/core/net_namespace.c:copy_net_ns()
get_net_ns_by_()
net/core/net_namespace.c:get_net_ns_by_fd()
net/core/net_namespace.c:get_net_ns_by_id()
net/core/net_namespace.c:get_net_ns_by_pid()
net/core/net_namespace.c:net_alloc()
net/core/net_namespace.c:net_alloc_generic()
net/core/net_namespace.c:net_assign_generic(struct net *net, unsigned int id, void *data)
net/core/net_namespace.c:netns_get()
net/core/net_namespace.c:netns_install(struct nsset *nsset, struct ns_common *ns)
net/core/net_namespace.c:register_pernet_device(struct pernet_operations *ops)
net/core/net_namespace.c:setup_net(struct net *net, struct user_namespace *user_ns)
net/core/net_namespace.c:unhash_nsid(struct net *net, struct net *last)
BPF_LINK_CREATE()
bpf_link_create()
kernel/bpf/syscall.c:bpf_link_free(struct bpf_link *link)
kernel/bpf/syscall.c:bpf_link_release(struct inode *inode, struct file *filp)
kernel/bpf/syscall.c:bpf_map_release(struct inode *inode, struct file *filp)
kernel/bpf/syscall.c:bpf_prog_attach(const union bpf_attr *attr)
kernel/bpf/syscall.c:bpf_prog_detach(const union bpf_attr *attr)
kernel/bpf/syscall.c:bpf_prog_load(union bpf_attr *attr, union bpf_attr __user *uattr)
kernel/bpf/syscall.c:link_create(union bpf_attr *attr)
unregister_netdevice()
drivers/net/wireguard/device.c:wg_destruct(struct net_device *dev)
drivers/net/wireguard/device.c:wg_netns_pre_exit(struct net *net)
drivers/net/wireguard/device.c:wg_newlink(struct net *src_net, struct net_device *dev, struct nlattr *tb[], struct nlattr *data[], struct netlink_ext_ack *extack)
drivers/net/wireguard/device.c:wg_open(struct net_device *dev)
drivers/net/wireguard/device.c:wg_pm_notification(struct notifier_block *nb, unsigned long action, void *data)
drivers/net/wireguard/device.c:wg_setup(struct net_device *dev)
drivers/net/wireguard/device.c:wg_stop(struct net_device *dev)
drivers/net/wireguard/device.c:wg_xmit(struct sk_buff *skb, struct net_device *dev)
fs/namespace.c:__put_mountpoint(struct mountpoint *mp, struct list_head *list)
fs/namespace.c:cleanup_mnt(struct mount *mnt)
fs/namespace.c:disconnect_mount(struct mount *mnt, enum umount_tree_flags how)
fs/namespace.c:do_umount(struct mount *mnt, int flags)
fs/namespace.c:mnt_get_count(struct mount *mnt)
fs/namespace.c:mntput_no_expire(struct mount *mnt)
fs/namespace.c:umount_tree(struct mount *mnt, enum umount_tree_flags how)
fs/namespace.c:unhash_mnt()
net/ipv4/udp.c:udp_destroy_sock(struct sock *sk)
net/ipv4/udp.c:udp_lib_unhash(struct sock *sk)
net/ipv4/udp.c:udp_queue_rcv_skb(struct sock *sk, struct sk_buff *skb)
func for case ac6fc97113de554dc57614c3ffa4c6a2c2668a97
drivers/hid/hid-core.c:hid_alloc_report_buf()
drivers/hid/hid-core.c:hid_close_report(struct hid_device *device)
drivers/hid/hid-core.c:hid_field_extract(const struct hid_device *hid, u8 *report, unsigned offset, unsigned n)
drivers/hid/hid-core.c:hid_free_report(struct hid_report *report)
drivers/hid/hid-core.c:hid_input_fetch_field(struct hid_device *hid, struct hid_field *field, __u8 *data)
drivers/hid/hid-core.c:hid_input_report(struct hid_device *hid, enum hid_report_type type, u8 *data, u32 size, int interrupt)
drivers/hid/hid-core.c:hid_open_report(struct hid_device *device)
drivers/hid/hid-core.c:hid_output_field(const struct hid_device *hid, struct hid_field *field, __u8 *data)
drivers/hid/hid-core.c:hid_process_event(struct hid_device *hid, struct hid_field *field, struct hid_usage *usage, __s32 value, int interrupt)
drivers/hid/hid-core.c:hid_process_report(struct hid_device *hid, struct hid_report *report, __u8 *data, int interrupt)
drivers/hid/hid-core.c:hid_register_field()
drivers/hid/hid-core.c:hid_report_raw_event(struct hid_device *hid, enum hid_report_type type, u8 *data, u32 size, int interrupt)
drivers/hid/hid-core.c:hid_scan_report(struct hid_device *hid)
drivers/hid/hid-core.c:hid_set_field(struct hid_field *field, unsigned offset, __s32 value)
drivers/hid/hid-core.c:hid_validate_values()
drivers/hid/usbhid/hid-core.c:hid_alloc_buffers(struct usb_device *dev, struct hid_device *hid)
drivers/hid/usbhid/hid-core.c:hid_ctrl(struct urb *urb)
drivers/hid/hid-core.c:hid_field_extract(const struct hid_device *hid, u8 *report, unsigned offset, unsigned n)
drivers/hid/usbhid/hid-core.c:hid_find_field_early(struct hid_device *hid, unsigned int page, unsigned int hid_code, struct hid_field **pfield)
drivers/hid/usbhid/hid-core.c:hid_find_max_report(struct hid_device *hid, unsigned int type, unsigned int *max)
drivers/hid/usbhid/hid-core.c:hid_free_buffers(struct usb_device *dev, struct hid_device *hid)
drivers/hid/hid-core.c:hid_input_fetch_field(struct hid_device *hid, struct hid_field *field, __u8 *data)
drivers/hid/hid-core.c:hid_input_report(struct hid_device *hid, enum hid_report_type type, u8 *data, u32 size, int interrupt)
drivers/hid/usbhid/hid-core.c:hid_io_error(struct hid_device *hid)
drivers/hid/usbhid/hid-core.c:hid_irq_in(struct urb *urb)
drivers/hid/hid-core.c:hid_process_report(struct hid_device *hid, struct hid_report *report, __u8 *data, int interrupt)
drivers/hid/hid-core.c:hid_report_raw_event(struct hid_device *hid, enum hid_report_type type, u8 *data, u32 size, int interrupt)
drivers/hid/usbhid/hid-core.c:hid_reset(struct work_struct *work)
drivers/hid/usbhid/hid-core.c:hid_start_in(struct hid_device *hid)
drivers/hid/usbhid/hid-core.c:hid_submit_ctrl(struct hid_device *hid)
drivers/hid/usbhid/hid-core.c:usbhid_init_reports(struct hid_device *hid)
drivers/hid/hid-core.c:hid_input_fetch_field(struct hid_device *hid, struct hid_field *field, __u8 *data)
drivers/hid/hid-core.c:hid_process_report(struct hid_device *hid, struct hid_report *report, __u8 *data, int interrupt)
drivers/hid/hid-input.c:hidinput_allocate()
drivers/hid/hid-input.c:hidinput_calc_abs_res(const struct hid_field *field, __u16 code)
drivers/hid/hid-input.c:hidinput_cleanup_hidinput(struct hid_device *hid, struct hid_input *hidinput)
drivers/hid/hid-input.c:hidinput_configure_usage(struct hid_input *hidinput, struct hid_field *field, struct hid_usage *usage, unsigned int usage_index)
drivers/hid/hid-input.c:hidinput_configure_usages(struct hid_input *hidinput, struct hid_report *report)
drivers/hid/hid-input.c:hidinput_connect(struct hid_device *hid, unsigned int force)
drivers/hid/hid-input.c:hidinput_disconnect(struct hid_device *hid)
drivers/hid/hid-input.c:hidinput_find_field(struct hid_device *hid, unsigned int type, unsigned int code, struct hid_field **field)
drivers/hid/hid-input.c:hidinput_getkeycode(struct input_dev *dev, struct input_keymap_entry *ke)
drivers/hid/hid-input.c:hidinput_handle_scroll(struct hid_usage *usage, struct input_dev *input, __s32 value)
drivers/hid/hid-input.c:hidinput_hid_event(struct hid_device *hid, struct hid_field *field, struct hid_usage *usage, __s32 value)
drivers/hid/hid-input.c:hidinput_input_event(struct input_dev *dev, unsigned int type, unsigned int code, int value)
drivers/hid/hid-input.c:hidinput_setkeycode(struct input_dev *dev, const struct input_keymap_entry *ke, unsigned int *old_keycode)
drivers/hid/hid-input.c:hidinput_setup_battery(struct hid_device *dev, unsigned report_type, struct hid_field *field, bool is_percentage)
drivers/hid/hid-input.c:hidinput_update_battery(struct hid_device *dev, int value)
drivers/usb/core/message.c:usb_bulk_msg(struct usb_device *usb_dev, unsigned int pipe, void *data, int len, int *actual_length, int timeout)
drivers/usb/core/message.c:usb_control_msg(struct usb_device *dev, unsigned int pipe, __u8 request, __u8 requesttype, __u16 value, __u16 index, void *data, __u16 size, int timeout)
drivers/usb/core/message.c:usb_disable_device(struct usb_device *dev, int skip_ep0)
drivers/usb/core/message.c:usb_internal_control_msg(struct usb_device *usb_dev, unsigned int pipe, struct usb_ctrlrequest *cmd, void *data, int len, int timeout)
drivers/usb/core/message.c:usb_reset_configuration(struct usb_device *dev)
drivers/usb/core/message.c:usb_set_configuration(struct usb_device *dev, int configuration)
drivers/usb/core/message.c:usb_set_interface(struct usb_device *dev, int interface, int alternate)
drivers/usb/core/message.c:usb_start_wait_urb(struct urb *urb, int timeout, int *actual_length)
drivers/usb/core/urb.c:usb_alloc_urb()
drivers/usb/core/urb.c:usb_anchor_urb(struct urb *urb, struct usb_anchor *anchor)
drivers/usb/core/urb.c:usb_init_urb(struct urb *urb)
drivers/usb/core/urb.c:usb_kill_anchored_urbs(struct usb_anchor *anchor)
drivers/usb/core/urb.c:usb_kill_urb(struct urb *urb)
drivers/usb/core/urb.c:usb_submit_urb(struct urb *urb, gfp_t mem_flags)
drivers/usb/core/urb.c:usb_unanchor_urb(struct urb *urb)
drivers/usb/core/urb.c:usb_unlink_urb(struct urb *urb)
drivers/usb/core/hcd.c:__usb_hcd_giveback_urb(struct urb *urb)
drivers/hid/usbhid/hid-core.c:hid_irq_in(struct urb *urb)
drivers/usb/core/hcd.c:register_root_hub(struct usb_hcd *hcd)
drivers/usb/core/hcd.c:usb_hcd_check_unlink_urb(struct usb_hcd *hcd, struct urb *urb, int status)
drivers/usb/core/hcd.c:usb_hcd_giveback_urb(struct usb_hcd *hcd, struct urb *urb, int status)
drivers/usb/core/hcd.c:usb_hcd_link_urb_to_ep(struct usb_hcd *hcd, struct urb *urb)
drivers/usb/core/hcd.c:usb_hcd_map_urb_for_dma(struct usb_hcd *hcd, struct urb *urb, gfp_t mem_flags)
drivers/usb/core/hcd.c:usb_hcd_submit_urb(struct urb *urb, gfp_t mem_flags)
drivers/usb/core/hcd.c:usb_hcd_unlink_urb(struct urb *urb, int status)
drivers/usb/gadget/udc/dummy_hcd.c:dummy_hub_control(struct usb_hcd *hcd, u16 typeReq, u16 wValue, u16 wIndex, char *buf, u16 wLength)
drivers/usb/gadget/udc/dummy_hcd.c:dummy_perform_transfer(struct urb *urb, struct dummy_request *req, u32 len)
drivers/usb/gadget/udc/dummy_hcd.c:dummy_start(struct usb_hcd *hcd)
drivers/usb/gadget/udc/dummy_hcd.c:dummy_start_ss(struct dummy_hcd *dum_hcd)
drivers/usb/gadget/udc/dummy_hcd.c:dummy_timer(struct timer_list *t)
drivers/usb/gadget/udc/dummy_hcd.c:dummy_urb_dequeue(struct usb_hcd *hcd, struct urb *urb, int status)
drivers/usb/gadget/udc/dummy_hcd.c:dummy_urb_enqueue(struct usb_hcd *hcd, struct urb *urb, gfp_t mem_flags)
drivers/usb/gadget/udc/dummy_hcd.c:handle_control_request(struct dummy_hcd *dum_hcd, struct urb *urb, struct usb_ctrlrequest *setup, int *status)
lib/ubsan.c:__ubsan_handle_shift_out_of_bounds(void *_data, void *lhs, void *rhs)
lib/ubsan.c:ubsan_prologue(struct source_location *loc, const char *reason)
lib/ubsan.c:val_to_string(char *str, size_t size, struct type_descriptor *type, void *value)
kernel/softirq.c:__irq_exit_rcu(void)
kernel/softirq.c:invoke_softirq(void)
kernel/softirq.c:irq_enter_rcu(void)
drivers/usb/core/hub.c:hub_port_connect(struct usb_hub *hub, int port1, u16 portstatus, u16 portchange)
drivers/usb/core/hub.c:hub_port_init(struct usb_hub *hub, struct usb_device *udev, int port1, int retry_counter)
drivers/usb/core/hub.c:hub_port_reset(struct usb_hub *hub, int port1, struct usb_device *udev, unsigned int delay, bool warm)
func for case b36d7e444fe532685b683ae7980f4e3a184f0ad8
net/ethtool/bitset.c:ethnl_bitmap32_clear(u32 *dst, unsigned int start, unsigned int end, bool *mod)
net/ethtool/bitset.c:ethnl_bitmap32_not_zero(const u32 *map, unsigned int start, unsigned int end)
net/ethtool/bitset.c:ethnl_bitset32_size(const u32 *val, const u32 *mask, unsigned int nbits, ethnl_string_array_t names, bool compact)
net/ethtool/bitset.c:ethnl_bitset_size(const unsigned long *val, const unsigned long *mask, unsigned int nbits, ethnl_string_array_t names, bool compact)
net/ethtool/bitset.c:ethnl_compact_sanity_checks(unsigned int nbits, const struct nlattr *nest, struct nlattr **tb, struct netlink_ext_ack *extack)
net/ethtool/bitset.c:ethnl_parse_bit(unsigned int *index, bool *val, unsigned int nbits, const struct nlattr *bit_attr, bool no_mask, ethnl_string_array_t names, struct netlink_ext_ack *extack)
net/ethtool/bitset.c:ethnl_put_bitset(struct sk_buff *skb, int attrtype, const unsigned long *val, const unsigned long *mask, unsigned int nbits, ethnl_string_array_t names, bool compact)
net/ethtool/bitset.c:ethnl_put_bitset32(struct sk_buff *skb, int attrtype, const u32 *val, const u32 *mask, unsigned int nbits, ethnl_string_array_t names, bool compact)
net/ethtool/bitset.c:ethnl_update_bitset(unsigned long *bitmap, unsigned int nbits, const struct nlattr *attr, ethnl_string_array_t names, struct netlink_ext_ack *extack, bool *mod)
net/ethtool/bitset.c:ethnl_update_bitset32(u32 *bitmap, unsigned int nbits, const struct nlattr *attr, ethnl_string_array_t names, struct netlink_ext_ack *extack, bool *mod)
net/ethtool/bitset.c:ethnl_update_bitset32_verbose(u32 *bitmap, unsigned int nbits, const struct nlattr *attr, struct nlattr **tb, ethnl_string_array_t names, struct netlink_ext_ack *extack, bool *mod)
ETHTOOL_MSG_LINKMODES_SET()
net/ethtool/linkmodes.c:ethnl_auto_linkmodes(struct ethtool_link_ksettings *ksettings, bool req_speed, bool req_duplex)
net/ethtool/linkmodes.c:ethnl_set_linkmodes(struct sk_buff *skb, struct genl_info *info)
net/ethtool/linkmodes.c:linkmodes_fill_reply(struct sk_buff *skb, const struct ethnl_req_info *req_base, const struct ethnl_reply_data *reply_base)
net/ethtool/linkmodes.c:linkmodes_reply_size(const struct ethnl_req_info *req_base, const struct ethnl_reply_data *reply_base)
_fill_info()
net/netlink/genetlink.c:ctrl_fill_info(const struct genl_family *family, u32 portid, u32 seq, u32 flags, struct sk_buff *skb, u8 cmd)
net/netlink/genetlink.c:ctrl_fill_mcgrp_info(const struct genl_family *family, const struct genl_multicast_group *grp, int grp_id, u32 portid, u32 seq, u32 flags, struct sk_buff *skb, u8 cmd)
net/netlink/genetlink.c:genl_allocate_reserve_groups(int n_groups, int *first_id)
net/netlink/genetlink.c:genl_family_rcv_msg(const struct genl_family *family, struct sk_buff *skb, struct nlmsghdr *nlh, struct netlink_ext_ack *extack)
net/netlink/genetlink.c:genl_family_rcv_msg_doit(const struct genl_family *family, struct sk_buff *skb, struct nlmsghdr *nlh, struct netlink_ext_ack *extack, const struct genl_ops *ops, int hdrlen, struct net *net)
net/netlink/genetlink.c:genl_family_rcv_msg_dumpit(const struct genl_family *family, struct sk_buff *skb, struct nlmsghdr *nlh, struct netlink_ext_ack *extack, const struct genl_ops *ops, int hdrlen, struct net *net)
net/netlink/genetlink.c:genl_notify(const struct genl_family *family, struct sk_buff *skb, struct genl_info *info, u32 group, gfp_t flags)
net/netlink/genetlink.c:genl_rcv_msg(struct sk_buff *skb, struct nlmsghdr *nlh, struct netlink_ext_ack *extack)
net/netlink/genetlink.c:genl_register_family(struct genl_family *family)
net/netlink/genetlink.c:genl_unregister_family(const struct genl_family *family)
net/netlink/genetlink.c:genl_unregister_mc_groups(const struct genl_family *family)
net/netlink/genetlink.c:genl_validate_assign_mc_groups(struct genl_family *family)
net/netlink/genetlink.c:genl_validate_ops(const struct genl_family *family)
net/netlink/genetlink.c:genlmsg_mcast(struct sk_buff *skb, u32 portid, unsigned long group, gfp_t flags)
net/netlink/genetlink.c:genlmsg_put()
rcv_msg()
net/ethtool/bitset.c:ethnl_bitmap32_not_zero(const u32 *map, unsigned int start, unsigned int end)
net/ethtool/bitset.c:ethnl_compact_sanity_checks(unsigned int nbits, const struct nlattr *nest, struct nlattr **tb, struct netlink_ext_ack *extack)
net/ethtool/linkmodes.c:ethnl_set_linkmodes(struct sk_buff *skb, struct genl_info *info)
net/ethtool/bitset.c:ethnl_update_bitset(unsigned long *bitmap, unsigned int nbits, const struct nlattr *attr, ethnl_string_array_t names, struct netlink_ext_ack *extack, bool *mod)
net/ethtool/bitset.c:ethnl_update_bitset32(u32 *bitmap, unsigned int nbits, const struct nlattr *attr, ethnl_string_array_t names, struct netlink_ext_ack *extack, bool *mod)
net/ethtool/linkmodes.c:ethnl_update_linkmodes(struct genl_info *info, struct nlattr **tb, struct ethtool_link_ksettings *ksettings, bool *mod)
net/netlink/genetlink.c:genl_family_rcv_msg_doit(const struct genl_family *family, struct sk_buff *skb, struct nlmsghdr *nlh, struct netlink_ext_ack *extack, const struct genl_ops *ops, int hdrlen, struct net *net)
net/netlink/genetlink.c:genl_rcv_msg(struct sk_buff *skb, struct nlmsghdr *nlh, struct netlink_ext_ack *extack)
net/ethtool/ioctl.c:ethtool_get_features(struct net_device *dev, void __user *useraddr)
net/ethtool/ioctl.c:ethtool_get_link_ksettings(struct net_device *dev, void __user *useraddr)
net/ethtool/ioctl.c:ethtool_set_channels(struct net_device *dev, void __user *useraddr)
net/ethtool/ioctl.c:ethtool_set_features(struct net_device *dev, void __user *useraddr)
net/ethtool/ioctl.c:ethtool_set_link_ksettings(struct net_device *dev, void __user *useraddr)
net/ethtool/ioctl.c:ethtool_set_ringparam(struct net_device *dev, void __user *useraddr)
net/ethtool/ioctl.c:ethtool_set_rxfh(struct net_device *dev, void __user *useraddr)
net/ethtool/ioctl.c:ethtool_set_rxnfc(struct net_device *dev, u32 cmd, void __user *useraddr)
get_features()
set_rxfh()
set_rxnfc()
ETHTOOL_MSG_LINKMODES_SET()
__ethtool_get_ts_info()
net/ethtool/common.c:convert_legacy_settings_to_link_ksettings(struct ethtool_link_ksettings *link_ksettings, const struct ethtool_cmd *legacy_settings)
ethtool_check_ops()
net/ethtool/ioctl.c:ethtool_get_max_rxfh_channel(struct net_device *dev, u32 *max)
net/netlink/af_netlink.c:__netlink_sendskb(struct sock *sk, struct sk_buff *skb)
net/netlink/af_netlink.c:netlink_alloc_large_skb()
net/netlink/af_netlink.c:netlink_attachskb(struct sock *sk, struct sk_buff *skb, long *timeo, struct sock *ssk)
net/netlink/af_netlink.c:netlink_rcv_skb(struct sk_buff *skb, int (*cb)(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *))
net/netlink/af_netlink.c:netlink_sendmsg(struct socket *sock, struct msghdr *msg, size_t len)
net/netlink/af_netlink.c:netlink_trim()
net/netlink/af_netlink.c:netlink_unicast(struct sock *ssk, struct sk_buff *skb, u32 portid, int nonblock)
net/netlink/af_netlink.c:netlink_unicast_kernel(struct sock *sk, struct sk_buff *skb, struct sock *ssk)
net/core/rtnetlink.c:do_setlink(const struct sk_buff *skb, struct net_device *dev, struct ifinfomsg *ifm, struct netlink_ext_ack *extack, struct nlattr **tb, char *ifname, int status)
rtnl_rcv_msg()
net/core/rtnetlink.c:rtnl_setlink(struct sk_buff *skb, struct nlmsghdr *nlh, struct netlink_ext_ack *extack)
net/ethtool/bitset.c:ethnl_update_bitset32(u32 *bitmap, unsigned int nbits, const struct nlattr *attr, ethnl_string_array_t names, struct netlink_ext_ack *extack, bool *mod)
include/net/genetlink.h:genl_has_listeners(const struct genl_family *family, struct net *net, unsigned int group)
include/net/genetlink.h:genl_set_err(const struct genl_family *family, struct net *net, u32 portid, u32 group, int code)
net/core/dev.c:__dev_change_flags(struct net_device *dev, unsigned int flags, struct netlink_ext_ack *extack)
net/core/dev.c:dev_change_flags(struct net_device *dev, unsigned int flags, struct netlink_ext_ack *extack)
net/core/dev.c:dev_get_flags(const struct net_device *dev)
func for case b5b251b9bcc4653c39164dfee969dafb903ae25e
drivers/usb/gadget/udc/dummy_hcd.c:dummy_alloc_streams(struct usb_hcd *hcd, struct usb_device *udev, struct usb_host_endpoint **eps, unsigned int num_eps, unsigned int num_streams, gfp_t mem_flags)
drivers/usb/gadget/udc/dummy_hcd.c:dummy_dequeue(struct usb_ep *_ep, struct usb_request *_req)
drivers/usb/gadget/udc/dummy_hcd.c:dummy_free_streams(struct usb_hcd *hcd, struct usb_device *udev, struct usb_host_endpoint **eps, unsigned int num_eps, gfp_t mem_flags)
drivers/usb/gadget/udc/dummy_hcd.c:dummy_hub_control(struct usb_hcd *hcd, u16 typeReq, u16 wValue, u16 wIndex, char *buf, u16 wLength)
drivers/usb/gadget/udc/dummy_hcd.c:dummy_perform_transfer(struct urb *urb, struct dummy_request *req, u32 len)
drivers/usb/gadget/udc/dummy_hcd.c:dummy_queue(struct usb_ep *_ep, struct usb_request *_req, gfp_t mem_flags)
drivers/usb/gadget/udc/dummy_hcd.c:dummy_set_halt_and_wedge(struct usb_ep *_ep, int value, int wedged)
drivers/usb/gadget/udc/dummy_hcd.c:dummy_setup(struct usb_hcd *hcd)
drivers/usb/gadget/udc/dummy_hcd.c:dummy_start(struct usb_hcd *hcd)
drivers/usb/gadget/udc/dummy_hcd.c:dummy_start_ss(struct dummy_hcd *dum_hcd)
drivers/usb/gadget/udc/dummy_hcd.c:dummy_urb_dequeue(struct usb_hcd *hcd, struct urb *urb, int status)
drivers/usb/gadget/udc/dummy_hcd.c:dummy_urb_enqueue(struct usb_hcd *hcd, struct urb *urb, gfp_t mem_flags)
drivers/usb/gadget/udc/dummy_hcd.c:dummy_validate_stream(struct dummy_hcd *dum_hcd, struct urb *urb)
free_streams()
drivers/usb/gadget/udc/dummy_hcd.c:handle_control_request(struct dummy_hcd *dum_hcd, struct urb *urb, struct usb_ctrlrequest *setup, int *status)
set_max_streams()
drivers/usb/gadget/udc/dummy_hcd.c:set_max_streams_for_pipe(struct dummy_hcd *dum_hcd, unsigned int pipe, unsigned int streams)
validate_stream()
USBDEVFS_CONTROL()
drivers/usb/core/devio.c:check_ctrlrecip(struct usb_dev_state *ps, unsigned int requesttype, unsigned int request, unsigned int index)
drivers/usb/core/devio.c:do_proc_control(struct usb_dev_state *ps, struct usbdevfs_ctrltransfer *ctrl)
drivers/usb/gadget/udc/dummy_hcd.c:dummy_hub_control(struct usb_hcd *hcd, u16 typeReq, u16 wValue, u16 wIndex, char *buf, u16 wLength)
drivers/usb/core/devio.c:proc_clearhalt(struct usb_dev_state *ps, void __user *arg)
drivers/usb/core/devio.c:proc_control(struct usb_dev_state *ps, void __user *arg)
drivers/usb/core/devio.c:proc_control_compat(struct usb_dev_state *ps, struct usbdevfs_ctrltransfer32 __user *p32)
drivers/usb/core/devio.c:proc_do_submiturb(struct usb_dev_state *ps, struct usbdevfs_urb *uurb, struct usbdevfs_iso_packet_desc __user *iso_frame_desc, void __user *arg, sigval_t userurb_sigval)
drivers/usb/core/devio.c:proc_ioctl(struct usb_dev_state *ps, struct usbdevfs_ioctl *ctl)
drivers/usb/core/devio.c:proc_ioctl_compat(struct usb_dev_state *ps, compat_uptr_t arg)
drivers/usb/core/devio.c:proc_resetdevice(struct usb_dev_state *ps)
drivers/usb/core/devio.c:proc_resetep(struct usb_dev_state *ps, void __user *arg)
drivers/usb/core/devio.c:proc_setconfig(struct usb_dev_state *ps, void __user *arg)
drivers/usb/core/devio.c:proc_setintf(struct usb_dev_state *ps, void __user *arg)
drivers/usb/core/devio.c:proc_submiturb(struct usb_dev_state *ps, void __user *arg)
drivers/usb/core/hcd.c:usb_hcd_submit_urb(struct urb *urb, gfp_t mem_flags)
drivers/usb/core/devio.c:usbdev_do_ioctl(struct file *file, unsigned int cmd, void __user *p)
usbfs_start_wait_urb()
drivers/usb/gadget/udc/dummy_hcd.c:dummy_hub_control(struct usb_hcd *hcd, u16 typeReq, u16 wValue, u16 wIndex, char *buf, u16 wLength)
drivers/usb/core/message.c:usb_control_msg(struct usb_device *dev, unsigned int pipe, __u8 request, __u8 requesttype, __u16 value, __u16 index, void *data, __u16 size, int timeout)
drivers/usb/core/message.c:usb_control_msg_recv(struct usb_device *dev, __u8 endpoint, __u8 request, __u8 requesttype, __u16 value, __u16 index, void *driver_data, __u16 size, int timeout, gfp_t memflags)
drivers/usb/core/message.c:usb_disable_device(struct usb_device *dev, int skip_ep0)
drivers/usb/core/message.c:usb_disable_device_endpoints(struct usb_device *dev, int skip_ep0)
drivers/usb/core/message.c:usb_disable_endpoint(struct usb_device *dev, unsigned int epaddr, bool reset_hardware)
drivers/usb/core/message.c:usb_enable_endpoint(struct usb_device *dev, struct usb_host_endpoint *ep, bool reset_ep)
drivers/usb/core/message.c:usb_get_descriptor(struct usb_device *dev, unsigned char type, unsigned char index, void *buf, int size)
drivers/usb/core/message.c:usb_get_device_descriptor(struct usb_device *dev, unsigned int size)
drivers/usb/core/message.c:usb_get_status(struct usb_device *dev, int recip, int type, int target, void *data)
drivers/usb/core/message.c:usb_internal_control_msg(struct usb_device *usb_dev, unsigned int pipe, struct usb_ctrlrequest *cmd, void *data, int len, int timeout)
drivers/usb/core/message.c:usb_reset_configuration(struct usb_device *dev)
drivers/usb/core/message.c:usb_reset_endpoint(struct usb_device *dev, unsigned int epaddr)
drivers/usb/core/message.c:usb_set_configuration(struct usb_device *dev, int configuration)
drivers/usb/core/message.c:usb_set_interface(struct usb_device *dev, int interface, int alternate)
drivers/usb/core/message.c:usb_start_wait_urb(struct urb *urb, int timeout, int *actual_length)
drivers/usb/core/hcd.c:rh_call_control(struct usb_hcd *hcd, struct urb *urb)
drivers/usb/core/hcd.c:usb_hcd_check_unlink_urb(struct usb_hcd *hcd, struct urb *urb, int status)
drivers/usb/core/hcd.c:usb_hcd_giveback_urb(struct usb_hcd *hcd, struct urb *urb, int status)
drivers/usb/core/hcd.c:usb_hcd_link_urb_to_ep(struct usb_hcd *hcd, struct urb *urb)
drivers/usb/core/hcd.c:usb_hcd_map_urb_for_dma(struct usb_hcd *hcd, struct urb *urb, gfp_t mem_flags)
drivers/usb/core/hcd.c:usb_hcd_submit_urb(struct urb *urb, gfp_t mem_flags)
drivers/usb/core/hcd.c:usb_hcd_unlink_urb(struct urb *urb, int status)
drivers/usb/core/hcd.c:usb_hcd_unmap_urb_for_dma(struct usb_hcd *hcd, struct urb *urb)
drivers/usb/gadget/udc/core.c:usb_gadget_connect(struct usb_gadget *gadget)
drivers/usb/gadget/udc/core.c:usb_gadget_disconnect(struct usb_gadget *gadget)
usb_gadget_register_driver_owner()
drivers/usb/gadget/udc/core.c:usb_gadget_set_selfpowered(struct usb_gadget *gadget)
drivers/usb/gadget/udc/core.c:usb_gadget_unregister_driver(struct usb_gadget_driver *driver)
drivers/usb/gadget/udc/core.c:usb_gadget_vbus_connect(struct usb_gadget *gadget)
drivers/usb/gadget/udc/core.c:usb_gadget_vbus_disconnect(struct usb_gadget *gadget)
drivers/usb/gadget/udc/core.c:usb_gadget_wakeup(struct usb_gadget *gadget)
drivers/usb/core/urb.c:usb_alloc_urb()
drivers/usb/core/urb.c:usb_anchor_urb(struct urb *urb, struct usb_anchor *anchor)
drivers/usb/core/urb.c:usb_init_urb(struct urb *urb)
drivers/usb/core/urb.c:usb_kill_urb(struct urb *urb)
drivers/usb/core/urb.c:usb_poison_urb(struct urb *urb)
drivers/usb/core/urb.c:usb_submit_urb(struct urb *urb, gfp_t mem_flags)
drivers/usb/core/urb.c:usb_unanchor_urb(struct urb *urb)
drivers/usb/core/urb.c:usb_unlink_urb(struct urb *urb)
include/linux/usb.h:init_usb_anchor(struct usb_anchor *anchor)
include/linux/usb.h:usb_fill_control_urb(struct urb *urb, struct usb_device *dev, unsigned int pipe, unsigned char *setup_packet, void *transfer_buffer, int buffer_length, usb_complete_t complete_fn, void *context)
include/linux/usb.h:usb_fill_int_urb(struct urb *urb, struct usb_device *dev, unsigned int pipe, void *transfer_buffer, int buffer_length, usb_complete_t complete_fn, void *context, int interval)
include/linux/usb.h:usb_make_path(struct usb_device *dev, char *buf, size_t size)
include/linux/usb.h:usb_maxpacket(struct usb_device *udev, int pipe, int is_out)
lib/ubsan.c:__ubsan_handle_shift_out_of_bounds(void *_data, void *lhs, void *rhs)
lib/ubsan.c:ubsan_epilogue(void)
lib/ubsan.c:ubsan_prologue(struct source_location *loc, const char *reason)
__do_sys_ioctl()
dummy_hcd()
drivers/usb/gadget/udc/dummy_hcd.c:dummy_hub_control(struct usb_hcd *hcd, u16 typeReq, u16 wValue, u16 wIndex, char *buf, u16 wLength)
drivers/usb/core/hcd.c:usb_hcd_submit_urb(struct urb *urb, gfp_t mem_flags)
drivers/usb/core/urb.c:usb_submit_urb(struct urb *urb, gfp_t mem_flags)
func for case b5ecc684bb9e49db213e88f69d4ce80f7e20238d
dep_link_up()
device_added()
genl_data_mutex()
net/nfc/netlink.c:nfc_genl_activate_target(struct sk_buff *skb, struct genl_info *info)
net/nfc/netlink.c:nfc_genl_dep_link_down(struct sk_buff *skb, struct genl_info *info)
net/nfc/netlink.c:nfc_genl_dep_link_up(struct sk_buff *skb, struct genl_info *info)
net/nfc/netlink.c:nfc_genl_device_added(struct nfc_dev *dev)
net/nfc/netlink.c:nfc_genl_device_removed(struct nfc_dev *dev)
net/nfc/netlink.c:nfc_genl_rcv_nl_event(struct notifier_block *this, unsigned long event, void *ptr)
net/nfc/netlink.c:nfc_genl_se_added(struct nfc_dev *dev, u32 se_idx, u16 type)
net/nfc/netlink.c:nfc_genl_se_removed(struct nfc_dev *dev, u32 se_idx)
net/nfc/netlink.c:nfc_genl_start_poll(struct sk_buff *skb, struct genl_info *info)
net/nfc/netlink.c:nfc_genl_stop_poll(struct sk_buff *skb, struct genl_info *info)
net/nfc/netlink.c:nfc_genl_target_lost(struct nfc_dev *dev, u32 target_idx)
net/nfc/netlink.c:nfc_genl_targets_found(struct nfc_dev *dev)
net/nfc/netlink.c:nfc_genl_tm_activated(struct nfc_dev *dev, u32 protocol)
net/nfc/netlink.c:nfc_genl_tm_deactivated(struct nfc_dev *dev)
net/nfc/netlink.c:nfc_urelease_event_work(struct work_struct *work)
req_lock()
targets_found()
tm_activated()
net/nfc/core.c:nfc_activate_target(struct nfc_dev *dev, u32 target_idx, u32 protocol)
net/nfc/core.c:nfc_allocate_device()
net/nfc/core.c:nfc_data_exchange(struct nfc_dev *dev, u32 target_idx, struct sk_buff *skb, data_exchange_cb_t cb, void *cb_context)
net/nfc/core.c:nfc_deactivate_target(struct nfc_dev *dev, u32 target_idx, u8 mode)
net/nfc/core.c:nfc_dep_link_down(struct nfc_dev *dev)
net/nfc/core.c:nfc_dep_link_up(struct nfc_dev *dev, int target_index, u8 comm_mode)
net/nfc/core.c:nfc_dev_down(struct nfc_dev *dev)
net/nfc/core.c:nfc_dev_up(struct nfc_dev *dev)
net/nfc/core.c:nfc_register_device(struct nfc_dev *dev)
net/nfc/core.c:nfc_release(struct device *d)
net/nfc/core.c:nfc_start_poll(struct nfc_dev *dev, u32 im_protocols, u32 tm_protocols)
net/nfc/core.c:nfc_stop_poll(struct nfc_dev *dev)
net/nfc/core.c:nfc_target_lost(struct nfc_dev *dev, u32 target_idx)
net/nfc/core.c:nfc_targets_found(struct nfc_dev *dev, struct nfc_target *targets, int n_targets)
net/nfc/core.c:nfc_unregister_device(struct nfc_dev *dev)
stop_poll()
kernel/locking/mutex.c:__mutex_init(struct mutex *lock, const char *name, struct lock_class_key *key)
kernel/locking/mutex.c:__mutex_lock_common(struct mutex *lock, unsigned int state, unsigned int subclass, struct lockdep_map *nest_lock, unsigned long ip, struct ww_acquire_ctx *ww_ctx, const bool use_ww_ctx)
kernel/locking/mutex.c:__mutex_trylock_common()
kernel/locking/mutex.c:__mutex_unlock_slowpath(struct mutex *lock, unsigned long ip)
mutex_lock_nested()
kernel/locking/mutex.c:mutex_optimistic_spin(struct mutex *lock, struct ww_acquire_ctx *ww_ctx, struct mutex_waiter *waiter)
kernel/locking/mutex.c:mutex_spin_on_owner(struct mutex *lock, struct task_struct *owner, struct ww_acquire_ctx *ww_ctx, struct mutex_waiter *waiter)
kernel/locking/mutex.c:mutex_trylock(struct mutex *lock)
ww_mutex()
kernel/locking/lockdep.c:__lock_acquire(struct lockdep_map *lock, unsigned int subclass, int trylock, int read, int check, int hardirqs_off, struct lockdep_map *nest_lock, unsigned long ip, int references, int pin_count)
kernel/locking/lockdep.c:check_noncircular(struct held_lock *src, struct held_lock *target, struct lock_trace **const trace)
kernel/locking/lockdep.c:check_prev_add(struct task_struct *curr, struct held_lock *prev, struct held_lock *next, u16 distance, struct lock_trace **const trace)
kernel/locking/lockdep.c:check_prevs_add(struct task_struct *curr, struct held_lock *next)
kernel/locking/lockdep.c:lock_acquire(struct lockdep_map *lock, unsigned int subclass, int trylock, int read, int check, struct lockdep_map *nest_lock, unsigned long ip)
kernel/locking/lockdep.c:mark_lock(struct task_struct *curr, struct held_lock *this, enum lock_usage_bit new_bit)
kernel/locking/lockdep.c:print_circular_bug(struct lock_list *this, struct lock_list *target, struct held_lock *check_src, struct held_lock *check_tgt)
kernel/locking/lockdep.c:validate_chain(struct task_struct *curr, struct held_lock *hlock, int chain_head, u64 chain_key)
net/netlink/genetlink.c:genl_family_rcv_msg(const struct genl_family *family, struct sk_buff *skb, struct nlmsghdr *nlh, struct netlink_ext_ack *extack)
net/netlink/genetlink.c:genl_family_rcv_msg_doit(const struct genl_family *family, struct sk_buff *skb, struct nlmsghdr *nlh, struct netlink_ext_ack *extack, const struct genl_ops *ops, int hdrlen, struct net *net)
net/netlink/genetlink.c:genl_lock_done(struct netlink_callback *cb)
net/netlink/genetlink.c:genl_notify(const struct genl_family *family, struct sk_buff *skb, struct genl_info *info, u32 group, gfp_t flags)
net/netlink/genetlink.c:genl_rcv_msg(struct sk_buff *skb, struct nlmsghdr *nlh, struct netlink_ext_ack *extack)
net/netlink/genetlink.c:genl_register_family(struct genl_family *family)
net/netlink/genetlink.c:genl_start(struct netlink_callback *cb)
net/netlink/genetlink.c:genl_unregister_family(const struct genl_family *family)
net/netlink/af_netlink.c:netlink_connect(struct socket *sock, struct sockaddr *addr, int alen, int flags)
net/netlink/af_netlink.c:netlink_getsockbyportid()
net/netlink/af_netlink.c:netlink_insert(struct sock *sk, u32 portid)
net/netlink/af_netlink.c:netlink_lookup()
net/netlink/af_netlink.c:netlink_rcv_skb(struct sk_buff *skb, int (*cb)(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *))
net/netlink/af_netlink.c:netlink_sendmsg(struct socket *sock, struct msghdr *msg, size_t len)
net/netlink/af_netlink.c:netlink_unicast(struct sock *ssk, struct sk_buff *skb, u32 portid, int nonblock)
net/netlink/af_netlink.c:netlink_unicast_kernel(struct sock *sk, struct sk_buff *skb, struct sock *ssk)
nci_mutex()
nci_register_device()
nfc_devlist_mutex()
drivers/nfc/virtual_ncidev.c:virtual_ncidev_close(struct inode *inode, struct file *file)
drivers/nfc/virtual_ncidev.c:virtual_ncidev_open(struct inode *inode, struct file *file)
net/socket.c:____sys_sendmsg(struct socket *sock, struct msghdr *msg_sys, unsigned int flags, struct used_address *used_address, unsigned int allowed_msghdr_flags)
net/socket.c:___sys_sendmsg(struct socket *sock, struct user_msghdr __user *msg, struct msghdr *msg_sys, unsigned int flags, struct used_address *used_address, unsigned int allowed_msghdr_flags)
net/socket.c:__sys_sendmsg(int fd, struct user_msghdr __user *msg, unsigned int flags, bool forbid_cmsg_compat)
dump_stack()
lib/dump_stack.c:dump_stack_lvl(const char *log_lvl)
lib/dump_stack.c:dump_stack_print_info(const char *log_lvl)
lib/dump_stack.c:dump_stack_set_arch_desc(const char *fmt, ...)
nci_request()
nci_set_local_general_bytes()
nci_start_poll()
func for case b929091c762f0a3060a9941dcacfed0c3b4a903d
net/can/j1939/transport.c:__j1939_session_cancel(struct j1939_session *session, enum j1939_xtp_abort err)
net/can/j1939/transport.c:j1939_session_activate(struct j1939_session *session)
net/can/j1939/transport.c:j1939_session_deactivate(struct j1939_session *session)
net/can/j1939/transport.c:j1939_session_fresh_new()
net/can/j1939/transport.c:j1939_session_new()
net/can/j1939/transport.c:j1939_session_tx_dat(struct j1939_session *session)
net/can/j1939/transport.c:j1939_session_tx_rts(struct j1939_session *session)
net/can/j1939/transport.c:j1939_tp_rxtimer(struct hrtimer *hrtimer)
net/can/j1939/transport.c:j1939_xtp_rx_abort_one(struct j1939_priv *priv, struct sk_buff *skb, bool reverse, bool transmitter)
net/can/j1939/transport.c:j1939_xtp_rx_eoma_one(struct j1939_session *session, struct sk_buff *skb)
net/can/j1939/transport.c:j1939_xtp_rx_rts_session_active(struct j1939_session *session, struct sk_buff *skb)
net/can/j1939/transport.c:j1939_xtp_rx_rts_session_new()
net/can/j1939/transport.c:j1939_xtp_tx_abort(struct j1939_priv *priv, const struct j1939_sk_buff_cb *re_skcb, bool swap_src_dst, enum j1939_xtp_abort err, pgn_t pgn)
net/can/j1939/transport.c:j1939_xtp_txnext_receiver(struct j1939_session *session)
net/can/j1939/transport.c:j1939_xtp_txnext_transmiter(struct j1939_session *session)
net/can/j1939/socket.c:j1939_sk_bind(struct socket *sock, struct sockaddr *uaddr, int len)
net/can/j1939/socket.c:j1939_sk_connect(struct socket *sock, struct sockaddr *uaddr, int len, int flags)
net/can/j1939/socket.c:j1939_sk_errqueue(struct j1939_session *session, enum j1939_sk_errqueue_type type)
net/can/j1939/socket.c:j1939_sk_get_incomplete_session()
net/can/j1939/socket.c:j1939_sk_netdev_event_netdown(struct j1939_priv *priv)
j1939_sk_queue_()
net/can/j1939/socket.c:j1939_sk_queue_activate_next(struct j1939_session *session)
net/can/j1939/socket.c:j1939_sk_queue_activate_next_locked(struct j1939_session *session)
net/can/j1939/socket.c:j1939_sk_queue_drop_all(struct j1939_priv *priv, struct j1939_sock *jsk, int err)
net/can/j1939/socket.c:j1939_sk_queue_session(struct j1939_session *session)
net/can/j1939/socket.c:j1939_sk_recv_one(struct j1939_sock *jsk, struct sk_buff *oskb)
net/can/j1939/socket.c:j1939_sk_recvmsg(struct socket *sock, struct msghdr *msg, size_t size, int flags)
net/can/j1939/socket.c:j1939_sk_release(struct socket *sock)
net/can/j1939/socket.c:j1939_sk_send_loop(struct j1939_priv *priv, struct sock *sk, struct msghdr *msg, size_t size)
net/can/j1939/socket.c:j1939_sk_sendmsg(struct socket *sock, struct msghdr *msg, size_t size)
net/can/j1939/socket.c:j1939_sk_sock_destruct(struct sock *sk)
net/can/j1939/main.c:__j1939_priv_release(struct kref *kref)
active_session_list_lock()
net/can/j1939/main.c:j1939_can_recv(struct sk_buff *iskb, void *data)
net/can/j1939/main.c:j1939_can_rx_register(struct j1939_priv *priv)
net/can/j1939/main.c:j1939_can_rx_unregister(struct j1939_priv *priv)
net/can/j1939/main.c:j1939_netdev_notify(struct notifier_block *nb, unsigned long msg, void *data)
net/can/j1939/main.c:j1939_netdev_start()
net/can/j1939/main.c:j1939_priv_create()
net/can/j1939/main.c:j1939_send_one(struct j1939_priv *priv, struct sk_buff *skb)
j1939_socks_lock()
sk_session_queue_lock()
kernel/locking/lockdep.c:__lock_acquire(struct lockdep_map *lock, unsigned int subclass, int trylock, int read, int check, int hardirqs_off, struct lockdep_map *nest_lock, unsigned long ip, int references, int pin_count)
kernel/locking/lockdep.c:check_irq_usage(struct task_struct *curr, struct held_lock *prev, struct held_lock *next)
kernel/locking/lockdep.c:check_noncircular(struct held_lock *src, struct held_lock *target, struct lock_trace **const trace)
kernel/locking/lockdep.c:check_prev_add(struct task_struct *curr, struct held_lock *prev, struct held_lock *next, u16 distance, struct lock_trace **const trace)
kernel/locking/lockdep.c:check_prevs_add(struct task_struct *curr, struct held_lock *next)
kernel/locking/lockdep.c:mark_usage(struct task_struct *curr, struct held_lock *hlock, int check)
kernel/locking/lockdep.c:print_circular_bug(struct lock_list *this, struct lock_list *target, struct held_lock *check_src, struct held_lock *check_tgt)
kernel/locking/lockdep.c:validate_chain(struct task_struct *curr, struct held_lock *hlock, int chain_head, u64 chain_key)
af_can()
net/can/af_can.c:can_create(struct net *net, struct socket *sock, int protocol, int kern)
net/can/af_can.c:can_proto_register(const struct can_proto *cp)
net/can/af_can.c:can_rcv(struct sk_buff *skb, struct net_device *dev, struct packet_type *pt, struct net_device *orig_dev)
net/can/af_can.c:can_rcv_filter(struct can_dev_rcv_lists *dev_rcv_lists, struct sk_buff *skb)
net/can/af_can.c:can_receive(struct sk_buff *skb, struct net_device *dev)
net/can/af_can.c:can_rx_register(struct net *net, struct net_device *dev, canid_t can_id, canid_t mask, void (*func)(struct sk_buff *, void *), void *data, char *ident, struct sock *sk)
net/can/af_can.c:can_rx_unregister(struct net *net, struct net_device *dev, canid_t can_id, canid_t mask, void (*func)(struct sk_buff *, void *), void *data)
net/can/af_can.c:can_send(struct sk_buff *skb, int loop)
kernel/locking/lockdep.c:__lock_acquire(struct lockdep_map *lock, unsigned int subclass, int trylock, int read, int check, int hardirqs_off, struct lockdep_map *nest_lock, unsigned long ip, int references, int pin_count)
__raw_spin_lock_bh()
_raw_spin_lock_bh()
kernel/locking/lockdep.c:check_prev_add(struct task_struct *curr, struct held_lock *prev, struct held_lock *next, u16 distance, struct lock_trace **const trace)
kernel/locking/lockdep.c:check_prevs_add(struct task_struct *curr, struct held_lock *next)
kernel/locking/lockdep.c:lock_acquire(struct lockdep_map *lock, unsigned int subclass, int trylock, int read, int check, struct lockdep_map *nest_lock, unsigned long ip)
spin_lock_bh()
kernel/locking/lockdep.c:validate_chain(struct task_struct *curr, struct held_lock *hlock, int chain_head, u64 chain_key)
net/can/j1939/transport.c:__j1939_session_cancel(struct j1939_session *session, enum j1939_xtp_abort err)
net/can/j1939/transport.c:j1939_session_activate(struct j1939_session *session)
net/can/j1939/transport.c:j1939_session_completed(struct j1939_session *session)
net/can/j1939/socket.c:j1939_sk_errqueue(struct j1939_session *session, enum j1939_sk_errqueue_type type)
net/can/j1939/socket.c:j1939_sk_queue_activate_next(struct j1939_session *session)
j1939_socks_lock()
net/can/j1939/transport.c:j1939_tp_recv(struct j1939_priv *priv, struct sk_buff *skb)
net/can/j1939/transport.c:j1939_tp_rxtimer(struct hrtimer *hrtimer)
net/can/j1939/transport.c:j1939_xtp_rx_eoma(struct j1939_priv *priv, struct sk_buff *skb, bool transmitter)
kernel/time/hrtimer.c:__hrtimer_run_queues(struct hrtimer_cpu_base *cpu_base, ktime_t now, unsigned long flags, unsigned int active_mask)
kernel/time/hrtimer.c:hrtimer_interrupt(struct clock_event_device *dev)
kernel/time/hrtimer.c:hrtimer_run_softirq(struct softirq_action *h)
net/core/dev.c:__dev_notify_flags(struct net_device *dev, unsigned int old_flags, unsigned int gchanges)
net/core/dev.c:call_netdevice_notifiers_info(unsigned long val, struct netdev_notifier_info *info)
net/core/dev.c:dev_change_flags(struct net_device *dev, unsigned int flags, struct netlink_ext_ack *extack)
kernel/softirq.c:__irq_exit_rcu(void)
kernel/softirq.c:do_softirq(void)
kernel/softirq.c:invoke_softirq(void)
func for case b96fbfdb1cf23b90ac7ee98b9c66235110e4a943
include/net/red.h:red_set_parms(struct red_parms *p, u32 qth_min, u32 qth_max, u8 Wlog, u8 Plog, u8 Scell_log, u8 *stab, u32 max_P)
net/sched/sch_sfq.c:sfq_change(struct Qdisc *sch, struct nlattr *opt)
net/sched/sch_sfq.c:sfq_classify(struct sk_buff *skb, struct Qdisc *sch, int *qerr)
net/sched/sch_sfq.c:sfq_dec(struct sfq_sched_data *q, sfq_index x)
net/sched/sch_sfq.c:sfq_dequeue()
net/sched/sch_sfq.c:sfq_drop(struct Qdisc *sch, struct sk_buff **to_free)
net/sched/sch_sfq.c:sfq_dump(struct Qdisc *sch, struct sk_buff *skb)
net/sched/sch_sfq.c:sfq_dump_class_stats(struct Qdisc *sch, unsigned long cl, struct gnet_dump *d)
net/sched/sch_sfq.c:sfq_enqueue(struct sk_buff *skb, struct Qdisc *sch, struct sk_buff **to_free)
net/sched/sch_sfq.c:sfq_inc(struct sfq_sched_data *q, sfq_index x)
net/sched/sch_sfq.c:sfq_init(struct Qdisc *sch, struct nlattr *opt, struct netlink_ext_ack *extack)
net/sched/sch_sfq.c:sfq_link(struct sfq_sched_data *q, sfq_index x)
net/sched/sch_sfq.c:sfq_perturbation(struct timer_list *t)
net/sched/sch_sfq.c:sfq_rehash(struct Qdisc *sch)
net/sched/sch_sfq.c:sfq_walk(struct Qdisc *sch, struct qdisc_walker *arg)
net/sched/sch_sfq.c:slot_dequeue_head()
include/net/red.h:red_action(const struct red_parms *p, struct red_vars *v, unsigned long qavg)
include/net/red.h:red_adaptative_algo(struct red_parms *p, struct red_vars *v)
include/net/red.h:red_calc_qavg_from_idle_time(const struct red_parms *p, const struct red_vars *v)
include/net/red.h:red_calc_qavg_no_idle_time(const struct red_parms *p, const struct red_vars *v, unsigned int backlog)
include/net/red.h:red_check_params(u32 qth_min, u32 qth_max, u8 Wlog)
include/net/red.h:red_get_flags(unsigned char qopt_flags, unsigned char historic_mask, struct nlattr *flags_attr, unsigned char supported_mask, struct nla_bitfield32 *p_flags, unsigned char *p_userbits, struct netlink_ext_ack *extack)
include/net/red.h:red_mark_probability(const struct red_parms *p, const struct red_vars *v, unsigned long qavg)
red_parms()
include/net/red.h:red_set_parms(struct red_parms *p, u32 qth_min, u32 qth_max, u8 Wlog, u8 Plog, u8 Scell_log, u8 *stab, u32 max_P)
include/net/red.h:red_set_vars(struct red_vars *v)
net/sched/sch_api.c:qdisc_alloc_handle(struct net_device *dev)
net/sched/sch_api.c:qdisc_block_indexes_set(struct Qdisc *sch, struct nlattr **tca, struct netlink_ext_ack *extack)
net/sched/sch_api.c:qdisc_change(struct Qdisc *sch, struct nlattr **tca, struct netlink_ext_ack *extack)
net/sched/sch_api.c:qdisc_create()
net/sched/sch_api.c:qdisc_graft(struct net_device *dev, struct Qdisc *parent, struct sk_buff *skb, struct nlmsghdr *n, u32 classid, struct Qdisc *new, struct Qdisc *old, struct netlink_ext_ack *extack)
net/sched/sch_api.c:qdisc_hash_add(struct Qdisc *q, bool invisible)
net/sched/sch_api.c:qdisc_lookup_default()
net/sched/sch_api.c:qdisc_lookup_ops()
net/sched/sch_api.c:qdisc_notify(struct net *net, struct sk_buff *oskb, struct nlmsghdr *n, u32 clid, struct Qdisc *old, struct Qdisc *new)
net/sched/sch_api.c:qdisc_offload_graft_helper(struct net_device *dev, struct Qdisc *sch, struct Qdisc *new, struct Qdisc *old, enum tc_setup_type type, void *type_data, struct netlink_ext_ack *extack)
net/sched/sch_api.c:qdisc_set_default(const char *name)
net/sched/sch_api.c:qdisc_tree_reduce_backlog(struct Qdisc *sch, int n, int len)
net/sched/sch_api.c:register_qdisc(struct Qdisc_ops *qops)
sch_api()
net/sched/sch_api.c:tc_modify_qdisc(struct sk_buff *skb, struct nlmsghdr *n, struct netlink_ext_ack *extack)
net/sched/sch_api.c:unregister_qdisc(struct Qdisc_ops *qops)
net/core/rtnetlink.c:rtnetlink_rcv_msg(struct sk_buff *skb, struct nlmsghdr *nlh, struct netlink_ext_ack *extack)
net/core/rtnetlink.c:rtnl_configure_link(struct net_device *dev, const struct ifinfomsg *ifm)
net/core/rtnetlink.c:rtnl_create_link()
net/core/rtnetlink.c:rtnl_dellink(struct sk_buff *skb, struct nlmsghdr *nlh, struct netlink_ext_ack *extack)
net/core/rtnetlink.c:rtnl_getlink(struct sk_buff *skb, struct nlmsghdr *nlh, struct netlink_ext_ack *extack)
net/core/rtnetlink.c:rtnl_link_register(struct rtnl_link_ops *ops)
rtnl_newlink_create()
net/core/rtnetlink.c:rtnl_setlink(struct sk_buff *skb, struct nlmsghdr *nlh, struct netlink_ext_ack *extack)
af_netlink()
netlink_broadcast()
net/netlink/af_netlink.c:netlink_create(struct net *net, struct socket *sock, int protocol, int kern)
net/netlink/af_netlink.c:netlink_getsockopt(struct socket *sock, int level, int optname, char __user *optval, int __user *optlen)
net/netlink/af_netlink.c:netlink_rcv_skb(struct sk_buff *skb, int (*cb)(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *))
net/netlink/af_netlink.c:netlink_sendmsg(struct socket *sock, struct msghdr *msg, size_t len)
net/netlink/af_netlink.c:netlink_setsockopt(struct socket *sock, int level, int optname, sockptr_t optval, unsigned int optlen)
net/netlink/af_netlink.c:netlink_unicast(struct sock *ssk, struct sk_buff *skb, u32 portid, int nonblock)
net/netlink/af_netlink.c:netlink_unicast_kernel(struct sock *sk, struct sk_buff *skb, struct sock *ssk)
nl_route_sched()
net/sched/sch_generic.c:attach_default_qdiscs(struct net_device *dev)
net/sched/sch_generic.c:attach_one_default_qdisc(struct net_device *dev, struct netdev_queue *dev_queue, void *_unused)
net/sched/sch_generic.c:dev_graft_qdisc()
net/sched/sch_generic.c:dev_init_scheduler(struct net_device *dev)
net/sched/sch_generic.c:qdisc_alloc()
net/sched/sch_generic.c:qdisc_create_dflt()
net/sched/sch_generic.c:qdisc_destroy(struct Qdisc *qdisc)
net/sched/sch_generic.c:qdisc_reset(struct Qdisc *qdisc)
sch_generic()
net/sched/sch_sfq.c:sfq_init(struct Qdisc *sch, struct nlattr *opt, struct netlink_ext_ack *extack)
net/socket.c:____sys_sendmsg(struct socket *sock, struct msghdr *msg_sys, unsigned int flags, struct used_address *used_address, unsigned int allowed_msghdr_flags)
net/socket.c:___sys_sendmsg(struct socket *sock, struct user_msghdr __user *msg, struct msghdr *msg_sys, unsigned int flags, struct used_address *used_address, unsigned int allowed_msghdr_flags)
net/socket.c:__sys_sendmsg(int fd, struct user_msghdr __user *msg, unsigned int flags, bool forbid_cmsg_compat)
net/socket.c:__sys_setsockopt(int fd, int level, int optname, char __user *user_optval, int optlen)
net/socket.c:__sys_socket(int family, int type, int protocol)
net/socket.c:sendmsg_copy_msghdr(struct msghdr *msg, struct user_msghdr __user *umsg, unsigned flags, struct iovec **iov)
net/socket.c:sock_create_lite(int family, int type, int protocol, struct socket **res)
net/socket.c:sock_do_ioctl(struct net *net, struct socket *sock, unsigned int cmd, unsigned long arg)
net/sched/cls_api.c:tc_del_tfilter(struct sk_buff *skb, struct nlmsghdr *n, struct netlink_ext_ack *extack)
net/sched/cls_api.c:tc_get_tfilter(struct sk_buff *skb, struct nlmsghdr *n, struct netlink_ext_ack *extack)
net/sched/cls_api.c:tc_new_tfilter(struct sk_buff *skb, struct nlmsghdr *n, struct netlink_ext_ack *extack)
lib/ubsan.c:__ubsan_handle_shift_out_of_bounds(void *_data, void *lhs, void *rhs)
lib/ubsan.c:ubsan_epilogue(void)
lib/ubsan.c:ubsan_prologue(struct source_location *loc, const char *reason)
net/core/dev.c:__dev_queue_xmit(struct sk_buff *skb, struct net_device *sb_dev)
net/core/dev.c:dev_queue_xmit_nit(struct sk_buff *skb, struct net_device *dev)
net/core/dev.c:netif_receive_skb(struct sk_buff *skb)
func for case bf7780df648105d40e1fdbb0566defda3605ed93
net/core/gro.c:__napi_gro_flush_chain(struct napi_struct *napi, u32 index, bool flush_old)
net/core/gro.c:__skb_gro_checksum_complete(struct sk_buff *skb)
net/core/gro.c:dev_gro_receive(struct napi_struct *napi, struct sk_buff *skb)
net/core/gro.c:gro_list_prepare(const struct list_head *head, const struct sk_buff *skb)
net/core/gro.c:gro_pull_from_frag0(struct sk_buff *skb, int grow)
net/core/gro.c:napi_frags_finish(struct napi_struct *napi, struct sk_buff *skb, gro_result_t ret)
net/core/gro.c:napi_frags_skb()
net/core/gro.c:napi_get_frags()
net/core/gro.c:napi_gro_complete(struct napi_struct *napi, struct sk_buff *skb)
net/core/gro.c:napi_gro_flush(struct napi_struct *napi, bool flush_old)
net/core/gro.c:napi_reuse_skb(struct napi_struct *napi, struct sk_buff *skb)
net/core/gro.c:napi_skb_finish(struct napi_struct *napi, struct sk_buff *skb, gro_result_t ret)
net/core/gro.c:skb_gro_receive(struct sk_buff *p, struct sk_buff *skb)
net/core/gro.c:skb_gro_reset_offset(struct sk_buff *skb, u32 nhoff)
net/core/gro.c:skb_mac_gso_segment()
include/linux/skbuff.h:__pskb_pull()
include/linux/skbuff.h:__pskb_trim(struct sk_buff *skb, unsigned int len)
include/linux/skbuff.h:__skb_cow(struct sk_buff *skb, unsigned int headroom, int cloned)
include/linux/skbuff.h:__skb_grow(struct sk_buff *skb, unsigned int len)
__skb_pull()
include/linux/skbuff.h:__skb_set_length(struct sk_buff *skb, unsigned int len)
include/linux/skbuff.h:pskb_may_pull(struct sk_buff *skb, unsigned int len)
include/linux/skbuff.h:skb_header_unclone(struct sk_buff *skb, gfp_t pri)
net/core/gro.c:skb_mac_gso_segment()
include/linux/skbuff.h:skb_mac_header_rebuild(struct sk_buff *skb)
include/linux/skbuff.h:skb_orphan(struct sk_buff *skb)
include/linux/skbuff.h:skb_orphan_frags(struct sk_buff *skb, gfp_t gfp_mask)
include/linux/skbuff.h:skb_probe_transport_header(struct sk_buff *skb)
include/linux/skbuff.h:skb_put_data()
include/linux/skbuff.h:skb_share_check()
include/linux/skbuff.h:skb_tailroom_reserve(struct sk_buff *skb, unsigned int mtu, unsigned int needed_tailroom)
include/linux/skbuff.h:skb_unshare()
__skb_pull()
net/core/skbuff.c:pskb_carve(struct sk_buff *skb, const u32 len, gfp_t gfp)
net/core/skbuff.c:pskb_expand_head(struct sk_buff *skb, int nhead, int ntail, gfp_t gfp_mask)
net/core/skbuff.c:pskb_extract()
net/core/skbuff.c:skb_clone()
net/core/skbuff.c:skb_condense(struct sk_buff *skb)
net/core/skbuff.c:skb_copy()
net/core/skbuff.c:skb_copy_expand()
net/core/skbuff.c:skb_ensure_writable(struct sk_buff *skb, unsigned int write_len)
net/core/skbuff.c:skb_expand_head()
net/core/skbuff.c:skb_maybe_pull_tail(struct sk_buff *skb, unsigned int len, unsigned int max)
net/core/skbuff.c:skb_realloc_headroom()
net/core/skbuff.c:skb_segment()
net/core/skbuff.c:skb_segment_list()
net/core/skbuff.c:skb_zerocopy_clone(struct sk_buff *nskb, struct sk_buff *orig, gfp_t gfp_mask)
net/core/dev.c:__skb_gso_segment()
net/core/dev.c:dev_hard_start_xmit()
net/core/dev.c:gso_features_check(const struct sk_buff *skb, struct net_device *dev, netdev_features_t features)
net/core/dev.c:harmonize_features(struct sk_buff *skb, netdev_features_t features)
net/core/dev.c:netif_skb_features(struct sk_buff *skb)
net/core/gro.c:skb_mac_gso_segment()
net/core/dev.c:validate_xmit_skb()
net/core/dev.c:validate_xmit_skb_list()
net/core/dev.c:xmit_one(struct sk_buff *skb, struct net_device *dev, struct netdev_queue *txq, bool more)
net/packet/af_packet.c:packet_bind(struct socket *sock, struct sockaddr *uaddr, int addr_len)
net/packet/af_packet.c:packet_do_bind(struct sock *sk, const char *name, int ifindex, __be16 proto)
net/packet/af_packet.c:packet_parse_headers(struct sk_buff *skb, struct socket *sock)
net/packet/af_packet.c:packet_rcv(struct sk_buff *skb, struct net_device *dev, struct packet_type *pt, struct net_device *orig_dev)
net/packet/af_packet.c:packet_sendmsg(struct socket *sock, struct msghdr *msg, size_t len)
net/packet/af_packet.c:packet_snd(struct socket *sock, struct msghdr *msg, size_t len)
sk_buff()
net/packet/af_packet.c:tpacket_fill_skb(struct packet_sock *po, struct sk_buff *skb, void *frame, struct net_device *dev, void *data, int tp_len, __be16 proto, unsigned char *addr, int hlen, int copylen, const struct sockcm_cookie *sockc)
net/packet/af_packet.c:tpacket_snd(struct packet_sock *po, struct msghdr *msg)
sk_buff()
net/core/tso.c:tso_build_hdr(const struct sk_buff *skb, char *hdr, struct tso_t *tso, int size, bool is_last)
net/core/tso.c:tso_start(struct sk_buff *skb, struct tso_t *tso)
af_netlink()
net/netlink/af_netlink.c:netlink_bind(struct socket *sock, struct sockaddr *addr, int addr_len)
net/netlink/af_netlink.c:netlink_broadcast(struct sock *ssk, struct sk_buff *skb, u32 portid, u32 group, gfp_t allocation)
net/netlink/af_netlink.c:netlink_create(struct net *net, struct socket *sock, int protocol, int kern)
net/netlink/af_netlink.c:netlink_getsockopt(struct socket *sock, int level, int optname, char __user *optval, int __user *optlen)
net/netlink/af_netlink.c:netlink_rcv_skb(struct sk_buff *skb, int (*cb)(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *))
net/netlink/af_netlink.c:netlink_sendmsg(struct socket *sock, struct msghdr *msg, size_t len)
net/netlink/af_netlink.c:netlink_setsockopt(struct socket *sock, int level, int optname, sockptr_t optval, unsigned int optlen)
net/netlink/af_netlink.c:netlink_unicast(struct sock *ssk, struct sk_buff *skb, u32 portid, int nonblock)
include/linux/netdevice.h:can_checksum_protocol(netdev_features_t features, __be16 protocol)
include/linux/netdevice.h:net_gso_ok(netdev_features_t features, int gso_type)
include/linux/netdevice.h:skb_gso_error_unwind(struct sk_buff *skb, __be16 protocol, int pulled_hlen, u16 mac_offset, int mac_len)
net/sched/sch_generic.c:__qdisc_run(struct Qdisc *q)
net/sched/sch_generic.c:qdisc_restart(struct Qdisc *q, int *packets)
net/sched/sch_generic.c:sch_direct_xmit(struct sk_buff *skb, struct Qdisc *q, struct net_device *dev, struct netdev_queue *txq, spinlock_t *root_lock, bool validate)
func for case ca2299cf11b3e3d3d0f44ac479410a14eecbd326
net/qrtr/qrtr.c:__qrtr_bind(struct socket *sock, const struct sockaddr_qrtr *addr, int zapped)
net/qrtr/qrtr.c:__qrtr_node_release(struct kref *kref)
net/qrtr/qrtr.c:qrtr_autobind(struct socket *sock)
net/qrtr/qrtr.c:qrtr_bcast_enqueue(struct qrtr_node *node, struct sk_buff *skb, int type, struct sockaddr_qrtr *from, struct sockaddr_qrtr *to)
net/qrtr/qrtr.c:qrtr_bind(struct socket *sock, struct sockaddr *saddr, int len)
net/qrtr/qrtr.c:qrtr_create(struct net *net, struct socket *sock, int protocol, int kern)
net/qrtr/qrtr.c:qrtr_endpoint_post(struct qrtr_endpoint *ep, const void *data, size_t len)
net/qrtr/qrtr.c:qrtr_endpoint_register(struct qrtr_endpoint *ep, unsigned int nid)
net/qrtr/qrtr.c:qrtr_endpoint_unregister(struct qrtr_endpoint *ep)
net/qrtr/qrtr.c:qrtr_local_enqueue(struct qrtr_node *node, struct sk_buff *skb, int type, struct sockaddr_qrtr *from, struct sockaddr_qrtr *to)
net/qrtr/qrtr.c:qrtr_node_enqueue(struct qrtr_node *node, struct sk_buff *skb, int type, struct sockaddr_qrtr *from, struct sockaddr_qrtr *to)
net/qrtr/qrtr.c:qrtr_port_assign(struct qrtr_sock *ipc, int *port)
net/qrtr/qrtr.c:qrtr_port_remove(struct qrtr_sock *ipc)
net/qrtr/qrtr.c:qrtr_tx_resume(struct qrtr_node *node, struct sk_buff *skb)
net/qrtr/qrtr.c:qrtr_tx_wait(struct qrtr_node *node, int dest_node, int dest_port, int type)
lib/idr.c:ida_alloc_range(struct ida *ida, unsigned int min, unsigned int max, gfp_t gfp)
lib/idr.c:ida_destroy(struct ida *ida)
lib/idr.c:ida_dump_entry(void *entry, unsigned long index)
lib/idr.c:ida_free(struct ida *ida, unsigned int id)
lib/idr.c:idr_alloc(struct idr *idr, void *ptr, int start, int end, gfp_t gfp)
lib/idr.c:idr_alloc_cyclic(struct idr *idr, void *ptr, int start, int end, gfp_t gfp)
lib/idr.c:idr_alloc_u32(struct idr *idr, void *ptr, u32 *nextid, unsigned long max, gfp_t gfp)
lib/idr.c:idr_for_each(const struct idr *idr, int (*fn)(int id, void *p, void *data), void *data)
lib/idr.c:idr_get_next_ul()
lib/idr.c:idr_replace()
net/qrtr/qrtr.c:__qrtr_bind(struct socket *sock, const struct sockaddr_qrtr *addr, int zapped)
lib/idr.c:idr_alloc(struct idr *idr, void *ptr, int start, int end, gfp_t gfp)
lib/idr.c:idr_alloc_cyclic(struct idr *idr, void *ptr, int start, int end, gfp_t gfp)
lib/idr.c:idr_alloc_u32(struct idr *idr, void *ptr, u32 *nextid, unsigned long max, gfp_t gfp)
idr_find()
lib/idr.c:idr_for_each(const struct idr *idr, int (*fn)(int id, void *p, void *data), void *data)
lib/idr.c:idr_get_next()
idr_remove()
lib/idr.c:idr_replace()
net/qrtr/qrtr.c:qrtr_bind(struct socket *sock, struct sockaddr *saddr, int len)
net/qrtr/qrtr.c:qrtr_port_assign(struct qrtr_sock *ipc, int *port)
net/socket.c:__sock_create(struct net *net, int family, int type, int protocol, struct socket **res, int kern)
net/socket.c:__sys_bind(int fd, struct sockaddr __user *umyaddr, int addrlen)
net/socket.c:__sys_socket(int family, int type, int protocol)
net/socket.c:sock_alloc()
net/socket.c:sock_alloc_file()
net/socket.c:sock_alloc_inode()
net/socket.c:sock_create_lite(int family, int type, int protocol, struct socket **res)
net/socket.c:sock_map_fd(struct socket *sock, int flags)
lib/radix-tree.c:__radix_tree_create(struct radix_tree_root *root, unsigned long index, struct radix_tree_node **nodep, void __rcu ***slotp)
lib/radix-tree.c:__radix_tree_replace(struct radix_tree_root *root, struct radix_tree_node *node, void __rcu **slot, void *item)
lib/radix-tree.c:idr_get_free()
lib/radix-tree.c:radix_tree_delete_item()
lib/radix-tree.c:radix_tree_extend(struct radix_tree_root *root, gfp_t gfp, unsigned long index, unsigned int shift)
lib/radix-tree.c:radix_tree_insert(struct radix_tree_root *root, unsigned long index, void *item)
lib/radix-tree.c:radix_tree_node_alloc()
lib/radix-tree.c:radix_tree_shrink(struct radix_tree_root *root)
net/qrtr/qrtr.c:__qrtr_bind(struct socket *sock, const struct sockaddr_qrtr *addr, int zapped)
arch/x86/entry/common.c:do_syscall_64(unsigned long nr, struct pt_regs *regs)
lib/idr.c:idr_alloc(struct idr *idr, void *ptr, int start, int end, gfp_t gfp)
net/qrtr/qrtr.c:qrtr_port_assign(struct qrtr_sock *ipc, int *port)
arch/x86/kernel/traps.c:do_error_trap(struct pt_regs *regs, long error_code, char *str, unsigned long trapnr, int signr, int sicode, void __user *addr)
arch/x86/kernel/traps.c:fixup_bug(struct pt_regs *regs, int trapnr)
handle_bug()
kernel/panic.c:__warn(const char *file, int line, void *caller, unsigned taint, struct pt_regs *regs, struct warn_args *args)
kernel/panic.c:warn_slowpath_fmt(const char *file, int line, unsigned taint, const char *fmt, ...)
func for case cd246a3e7f0fd69a115b910b3b2cf6fa96351278
fs/nilfs2/btree.c:__nilfs_btree_get_block(const struct nilfs_bmap *btree, __u64 ptr, struct buffer_head **bhp, const struct nilfs_btree_readahead_info *ra)
fs/nilfs2/btree.c:nilfs_btree_alloc_path()
fs/nilfs2/btree.c:nilfs_btree_carry_left(struct nilfs_bmap *btree, struct nilfs_btree_path *path, int level, __u64 *keyp, __u64 *ptrp)
fs/nilfs2/btree.c:nilfs_btree_carry_right(struct nilfs_bmap *btree, struct nilfs_btree_path *path, int level, __u64 *keyp, __u64 *ptrp)
fs/nilfs2/btree.c:nilfs_btree_commit_insert(struct nilfs_bmap *btree, struct nilfs_btree_path *path, int maxlevel, __u64 key, __u64 ptr)
fs/nilfs2/btree.c:nilfs_btree_do_insert(struct nilfs_bmap *btree, struct nilfs_btree_path *path, int level, __u64 *keyp, __u64 *ptrp)
nilfs_btree_get_nonroot_node()
fs/nilfs2/btree.c:nilfs_btree_grow(struct nilfs_bmap *btree, struct nilfs_btree_path *path, int level, __u64 *keyp, __u64 *ptrp)
fs/nilfs2/btree.c:nilfs_btree_insert(struct nilfs_bmap *btree, __u64 key, __u64 ptr)
fs/nilfs2/btree.c:nilfs_btree_node_init(struct nilfs_btree_node *node, int flags, int level, int nchildren, int ncmax, const __u64 *keys, const __u64 *ptrs)
fs/nilfs2/btree.c:nilfs_btree_node_insert(struct nilfs_btree_node *node, int index, __u64 key, __u64 ptr, int ncmax)
fs/nilfs2/btree.c:nilfs_btree_node_move_left(struct nilfs_btree_node *left, struct nilfs_btree_node *right, int n, int lncmax, int rncmax)
fs/nilfs2/btree.c:nilfs_btree_node_move_right(struct nilfs_btree_node *left, struct nilfs_btree_node *right, int n, int lncmax, int rncmax)
fs/nilfs2/btree.c:nilfs_btree_prepare_insert(struct nilfs_bmap *btree, struct nilfs_btree_path *path, int *levelp, __u64 key, __u64 ptr, struct nilfs_bmap_stats *stats)
fs/nilfs2/btree.c:nilfs_btree_split(struct nilfs_bmap *btree, struct nilfs_btree_path *path, int level, __u64 *keyp, __u64 *ptrp)
do_()
fs/nilfs2/bmap.c:nilfs_bmap_assign(struct nilfs_bmap *bmap, struct buffer_head **bh, unsigned long blocknr, union nilfs_binfo *binfo)
fs/nilfs2/bmap.c:nilfs_bmap_data_get_key(const struct nilfs_bmap *bmap, const struct buffer_head *bh)
fs/nilfs2/bmap.c:nilfs_bmap_do_delete(struct nilfs_bmap *bmap, __u64 key)
fs/nilfs2/bmap.c:nilfs_bmap_do_insert(struct nilfs_bmap *bmap, __u64 key, __u64 ptr)
fs/nilfs2/bmap.c:nilfs_bmap_do_truncate(struct nilfs_bmap *bmap, __u64 key)
fs/nilfs2/bmap.c:nilfs_bmap_find_target_in_group(const struct nilfs_bmap *bmap)
fs/nilfs2/bmap.c:nilfs_bmap_find_target_seq(const struct nilfs_bmap *bmap, __u64 key)
fs/nilfs2/bmap.c:nilfs_bmap_last_key(struct nilfs_bmap *bmap, __u64 *keyp)
fs/nilfs2/bmap.c:nilfs_bmap_lookup_at_level(struct nilfs_bmap *bmap, __u64 key, int level, __u64 *ptrp)
fs/nilfs2/bmap.c:nilfs_bmap_lookup_contig(struct nilfs_bmap *bmap, __u64 key, __u64 *ptrp, unsigned int maxblocks)
fs/nilfs2/bmap.c:nilfs_bmap_mark(struct nilfs_bmap *bmap, __u64 key, int level)
fs/nilfs2/bmap.c:nilfs_bmap_propagate(struct nilfs_bmap *bmap, struct buffer_head *bh)
fs/nilfs2/bmap.c:nilfs_bmap_read(struct nilfs_bmap *bmap, struct nilfs_inode *raw_inode)
fs/nilfs2/bmap.c:nilfs_bmap_seek_key(struct nilfs_bmap *bmap, __u64 start, __u64 *keyp)
fs/nilfs2/bmap.c:nilfs_bmap_write(struct nilfs_bmap *bmap, struct nilfs_inode *raw_inode)
fs/nilfs2/inode.c:__nilfs_read_inode(struct super_block *sb, struct nilfs_root *root, unsigned long ino, struct inode *inode)
fs/nilfs2/inode.c:nilfs_get_block(struct inode *inode, sector_t blkoff, struct buffer_head *bh_result, int create)
fs/nilfs2/inode.c:nilfs_iget()
fs/nilfs2/inode.c:nilfs_iget_set(struct inode *inode, void *opaque)
fs/nilfs2/inode.c:nilfs_iget_test(struct inode *inode, void *opaque)
fs/nilfs2/inode.c:nilfs_insert_inode_locked(struct inode *inode, struct nilfs_root *root, unsigned long ino)
fs/nilfs2/inode.c:nilfs_new_inode()
fs/nilfs2/inode.c:nilfs_read_inode_common(struct inode *inode, struct nilfs_inode *raw_inode)
fs/nilfs2/inode.c:nilfs_set_inode_flags(struct inode *inode)
fs/nilfs2/inode.c:nilfs_truncate(struct inode *inode)
fs/nilfs2/inode.c:nilfs_truncate_bmap(struct nilfs_inode_info *ii, unsigned long from)
fs/nilfs2/inode.c:nilfs_update_inode(struct inode *inode, struct buffer_head *ibh, int flags)
fs/nilfs2/inode.c:nilfs_write_begin(struct file *file, struct address_space *mapping, loff_t pos, unsigned len, struct page **pagep, void **fsdata)
fs/nilfs2/inode.c:nilfs_write_end(struct file *file, struct address_space *mapping, loff_t pos, unsigned len, unsigned copied, struct page *page, void *fsdata)
fs/nilfs2/inode.c:nilfs_write_inode_common(struct inode *inode, struct nilfs_inode *raw_inode, int has_bmap)
fs/buffer.c:__block_write_begin_int(struct folio *folio, loff_t pos, unsigned len, get_block_t *get_block, const struct iomap *iomap)
fs/buffer.c:alloc_page_buffers()
fs/buffer.c:block_write_begin(struct address_space *mapping, loff_t pos, unsigned len, struct page **pagep, get_block_t *get_block)
fs/buffer.c:block_write_end(struct file *file, struct address_space *mapping, loff_t pos, unsigned len, unsigned copied, struct page *page, void *fsdata)
fs/buffer.c:cont_write_begin(struct file *file, struct address_space *mapping, loff_t pos, unsigned len, struct page **pagep, void **fsdata, get_block_t *get_block, loff_t *bytes)
fs/buffer.c:create_empty_buffers(struct page *page, unsigned long blocksize, unsigned long b_state)
fs/buffer.c:init_page_buffers(struct page *page, struct block_device *bdev, sector_t block, int size)
fs/buffer.c:mark_buffer_dirty(struct buffer_head *bh)
mm/filemap.c:__generic_file_write_iter(struct kiocb *iocb, struct iov_iter *from)
mm/filemap.c:filemap_fault(struct vm_fault *vmf)
mm/filemap.c:filemap_get_pages(struct kiocb *iocb, struct iov_iter *iter, struct folio_batch *fbatch)
mm/filemap.c:filemap_map_pages(struct vm_fault *vmf, pgoff_t start_pgoff, pgoff_t end_pgoff)
mm/filemap.c:filemap_read(struct kiocb *iocb, struct iov_iter *iter, ssize_t already_read)
mm/filemap.c:filemap_update_page(struct kiocb *iocb, struct address_space *mapping, struct iov_iter *iter, struct folio *folio)
mm/filemap.c:folio_end_writeback(struct folio *folio)
mm/filemap.c:generic_file_write_iter(struct kiocb *iocb, struct iov_iter *from)
mm/filemap.c:generic_perform_write(struct kiocb *iocb, struct iov_iter *i)
fs/nilfs2/super.c:nilfs_attach_checkpoint(struct super_block *sb, __u64 cno, int curr_mnt, struct nilfs_root **rootp)
fs/nilfs2/super.c:nilfs_cleanup_super(struct super_block *sb)
fs/nilfs2/super.c:nilfs_fill_super(struct super_block *sb, void *data, int silent)
fs/nilfs2/super.c:nilfs_init_cachep(void)
fs/nilfs2/super.c:nilfs_put_super(struct super_block *sb)
fs/nilfs2/super.c:nilfs_read_super_block()
fs/nilfs2/super.c:nilfs_setup_super(struct super_block *sb, int is_mount)
fs/nilfs2/super.c:nilfs_store_magic_and_option(struct super_block *sb, struct nilfs_super_block *sbp, char *data)
put_super()
fs/nilfs2/segment.c:nilfs_segctor_add_file_block(struct nilfs_sc_info *sci, struct buffer_head *bh, struct inode *inode, unsigned int binfo_size)
fs/nilfs2/segment.c:nilfs_segctor_collect_blocks(struct nilfs_sc_info *sci, int mode)
fs/nilfs2/segment.c:nilfs_segctor_collect_dirty_files(struct nilfs_sc_info *sci, struct the_nilfs *nilfs)
fs/nilfs2/segment.c:nilfs_segctor_complete_write(struct nilfs_sc_info *sci)
fs/nilfs2/segment.c:nilfs_segctor_construct(struct nilfs_sc_info *sci, int mode)
fs/nilfs2/segment.c:nilfs_segctor_do_construct(struct nilfs_sc_info *sci, int mode)
fs/nilfs2/segment.c:nilfs_segctor_prepare_write(struct nilfs_sc_info *sci)
fs/nilfs2/segment.c:nilfs_segctor_update_segusage(struct nilfs_sc_info *sci, struct inode *sufile)
fs/nilfs2/the_nilfs.c:load_nilfs(struct the_nilfs *nilfs, struct super_block *sb)
fs/nilfs2/btree.c:nilfs_btree_insert(struct nilfs_bmap *btree, __u64 key, __u64 ptr)
fs/nilfs2/the_nilfs.c:nilfs_load_super_block(struct the_nilfs *nilfs, struct super_block *sb, int blocksize, struct nilfs_super_block **sbpp)
fs/nilfs2/the_nilfs.c:nilfs_store_disk_layout(struct the_nilfs *nilfs, struct nilfs_super_block *sbp)
the_nilfs()
fs/read_write.c:ksys_write(unsigned int fd, const char __user *buf, size_t count)
fs/read_write.c:new_sync_write(struct file *filp, const char __user *buf, size_t len, loff_t *ppos)
read_write()
fs/read_write.c:vfs_write(struct file *file, const char __user *buf, size_t count, loff_t *pos)
fs/nilfs2/mdt.c:nilfs_mdt_get_block(struct inode *inode, unsigned long blkoff, int create, void (*init_block)(struct inode *, struct buffer_head *, void *), struct buffer_head **out_bh)
fs/nilfs2/mdt.c:nilfs_mdt_insert_new_block(struct inode *inode, unsigned long block, struct buffer_head *bh, void (*init_block)(struct inode *, struct buffer_head *, void *))
fs/nilfs2/mdt.c:nilfs_mdt_read_block(struct inode *inode, unsigned long block, int readahead, struct buffer_head **out_bh)
func for case cdf00205127303ca523678fbb9d7eb7613632dba
fs/io_uring.c:__io_sqe_files_unregister(struct io_ring_ctx *ctx)
fs/io_uring.c:io_account_mem(struct io_ring_ctx *ctx, unsigned long nr_pages, enum io_mem_account acct)
fs/io_uring.c:io_allocate_scq_urings(struct io_ring_ctx *ctx, struct io_uring_params *p)
fs/io_uring.c:io_ring_ctx_alloc()
fs/io_uring.c:io_ring_ctx_free(struct io_ring_ctx *ctx)
fs/io_uring.c:io_ring_ctx_wait_and_kill(struct io_ring_ctx *ctx)
fs/io_uring.c:io_ring_exit_work(struct work_struct *work)
fs/io_uring.c:io_sqe_file_register(struct io_ring_ctx *ctx, struct file *file, int index)
fs/io_uring.c:io_sqe_files_register(struct io_ring_ctx *ctx, void __user *arg, unsigned nr_args)
fs/io_uring.c:io_sqe_files_unregister(struct io_ring_ctx *ctx)
io_uring()
fs/io_uring.c:io_uring_alloc_task_context(struct task_struct *task)
fs/io_uring.c:io_uring_create(unsigned entries, struct io_uring_params *p, struct io_uring_params __user *params)
fs/io_uring.c:io_uring_get_file()
fs/io_uring.c:io_uring_release(struct inode *inode, struct file *file)
fs/io_uring.c:io_uring_setup(u32 entries, struct io_uring_params __user *params)
fs/file_table.c:__alloc_file()
fs/file_table.c:__fput(struct file *file)
fs/file_table.c:alloc_empty_file()
fs/file_table.c:alloc_empty_file_noaccount()
fs/file_table.c:alloc_file()
fs/file_table.c:alloc_file_clone()
fs/file_table.c:alloc_file_pseudo()
fs/file_table.c:file_free_rcu(struct rcu_head *head)
fs/file_table.c:__fput(struct file *file)
io_uring()
fs/io_uring.c:io_uring_release(struct inode *inode, struct file *file)
fs/io_uring.c:io_uring_setup(u32 entries, struct io_uring_params __user *params)
task_work()
kernel/task_work.c:task_work_cancel()
kernel/task_work.c:task_work_run(void)
kernel/entry/common.c:exit_to_user_mode_loop(struct pt_regs *regs, unsigned long ti_work)
kernel/entry/common.c:exit_to_user_mode_prepare(struct pt_regs *regs)
kernel/entry/common.c:syscall_exit_to_user_mode_prepare(struct pt_regs *regs)
kernel/entry/common.c:exit_to_user_mode_loop(struct pt_regs *regs, unsigned long ti_work)
io_uring()
kernel/task_work.c:task_work_run(void)
include/linux/tracehook.h:tracehook_notify_resume(struct pt_regs *regs)
func for case d21cb12ee03822236d82ba4e83a1f8968e7832fb
mm/filemap.c:__filemap_add_folio(struct address_space *mapping, struct folio *folio, pgoff_t index, gfp_t gfp, void **shadowp)
mm/filemap.c:__folio_lock_or_retry(struct folio *folio, struct mm_struct *mm, unsigned int flags)
mm/filemap.c:filemap_add_folio(struct address_space *mapping, struct folio *folio, pgoff_t index, gfp_t gfp)
mm/filemap.c:filemap_create_folio(struct file *file, struct address_space *mapping, pgoff_t index, struct folio_batch *fbatch)
mm/filemap.c:filemap_fault(struct vm_fault *vmf)
mm/filemap.c:filemap_free_folio(struct address_space *mapping, struct folio *folio)
mm/filemap.c:filemap_get_pages(struct kiocb *iocb, size_t count, struct folio_batch *fbatch, bool need_uptodate)
mm/filemap.c:filemap_release_folio(struct folio *folio, gfp_t gfp)
mm/filemap.c:filemap_remove_folio(struct folio *folio)
mm/filemap.c:filemap_unaccount_folio(struct address_space *mapping, struct folio *folio)
mm/filemap.c:filemap_update_page(struct kiocb *iocb, struct address_space *mapping, size_t count, struct folio *folio, bool need_uptodate)
folio_put_testzero()
mm/filemap.c:folio_wait_bit_common(struct folio *folio, int bit_nr, int state, enum behavior behavior)
mm/filemap.c:page_cache_delete(struct address_space *mapping, struct folio *folio, void *shadow)
put_page_testzero()
mm/filemap.c:filemap_fault(struct vm_fault *vmf)
fs/udf/file.c:udf_file_write_iter(struct kiocb *iocb, struct iov_iter *from)
fs/udf/file.c:udf_ioctl(struct file *filp, unsigned int cmd, unsigned long arg)
fs/udf/file.c:udf_page_mkwrite(struct vm_fault *vmf)
fs/udf/file.c:udf_setattr(struct mnt_idmap *idmap, struct dentry *dentry, struct iattr *attr)
mm/memory.c:__do_fault(struct vm_fault *vmf)
mm/memory.c:__handle_mm_fault(struct vm_area_struct *vma, unsigned long address, unsigned int flags)
mm/memory.c:copy_present_page(struct vm_area_struct *dst_vma, struct vm_area_struct *src_vma, pte_t *dst_pte, pte_t *src_pte, unsigned long addr, int *rss, struct folio **prealloc, struct page *page)
mm/memory.c:copy_present_pte(struct vm_area_struct *dst_vma, struct vm_area_struct *src_vma, pte_t *dst_pte, pte_t *src_pte, unsigned long addr, int *rss, struct folio **prealloc)
mm/memory.c:do_anonymous_page(struct vm_fault *vmf)
mm/memory.c:do_fault(struct vm_fault *vmf)
mm/memory.c:do_read_fault(struct vm_fault *vmf)
mm/memory.c:do_set_pte(struct vm_fault *vmf, struct page *page, unsigned long addr)
mm/memory.c:do_swap_page(struct vm_fault *vmf)
mm/filemap.c:filemap_fault(struct vm_fault *vmf)
mm/memory.c:finish_fault(struct vm_fault *vmf)
mm/memory.c:handle_mm_fault(struct vm_area_struct *vma, unsigned long address, unsigned int flags, struct pt_regs *regs)
mm/memory.c:handle_pte_fault(struct vm_fault *vmf)
mm/memory.c:pte_unmap_same(struct vm_fault *vmf)
mm/memory.c:vm_normal_page()
mm/memory.c:wp_page_copy(struct vm_fault *vmf)
fs/udf/inode.c:inode_getblk(struct inode *inode, struct udf_map_rq *map)
fs/udf/inode.c:udf_direct_IO(struct kiocb *iocb, struct iov_iter *iter)
fs/udf/inode.c:udf_do_extend_file(struct inode *inode, struct extent_position *last_pos, struct kernel_long_ad *last_ext, loff_t new_block_bytes)
fs/udf/inode.c:udf_expand_file_adinicb(struct inode *inode)
fs/udf/inode.c:udf_extend_file(struct inode *inode, loff_t newsize)
fs/udf/inode.c:udf_map_block(struct inode *inode, struct udf_map_rq *map)
fs/udf/inode.c:udf_read_inode(struct inode *inode, bool hidden_inode)
fs/udf/inode.c:udf_write_begin(struct file *file, struct address_space *mapping, loff_t pos, unsigned len, struct page **pagep, void **fsdata)
fs/udf/super.c:udf_fill_super(struct super_block *sb, void *options, int silent)
fs/udf/super.c:udf_load_logicalvol(struct super_block *sb, sector_t block, struct kernel_lb_addr *fileset)
fs/udf/super.c:udf_load_metadata_files(struct super_block *sb, int partition, int type1_index)
fs/udf/super.c:udf_load_partdesc(struct super_block *sb, sector_t block)
fs/udf/super.c:udf_load_pvoldesc(struct super_block *sb, sector_t block)
fs/udf/super.c:udf_load_vat(struct super_block *sb, int p_index, int type1_index)
fs/udf/super.c:udf_load_vrs(struct super_block *sb, struct udf_options *uopt, int silent, struct kernel_lb_addr *fileset)
fs/udf/super.c:udf_sb_free_partitions(struct super_block *sb)
fs/udf/truncate.c:extent_trunc(struct inode *inode, struct extent_position *epos, struct kernel_lb_addr *eloc, int8_t etype, uint32_t elen, uint32_t nelen)
fs/udf/truncate.c:udf_discard_prealloc(struct inode *inode)
fs/udf/truncate.c:udf_truncate_extents(struct inode *inode)
fs/udf/truncate.c:udf_truncate_tail_extent(struct inode *inode)
mm/gup.c:__get_user_pages_locked(struct mm_struct *mm, unsigned long start, unsigned long nr_pages, struct page **pages, struct vm_area_struct **vmas, int *locked, unsigned int foll_flags)
mm/gup.c:fault_in_readable(const char __user *uaddr, size_t size)
mm/gup.c:faultin_page(struct vm_area_struct *vma, unsigned long address, unsigned int *flags, bool unshare, int *locked)
mm/gup.c:fixup_user_fault(struct mm_struct *mm, unsigned long address, unsigned int fault_flags, bool *unlocked)
mm/gup.c:get_user_pages_fast(unsigned long start, int nr_pages, unsigned int gup_flags, struct page **pages)
mm/gup.c:gup_pte_range(pmd_t pmd, pmd_t *pmdp, unsigned long addr, unsigned long end, unsigned int flags, struct page **pages, int *nr)
mm/gup.c:internal_get_user_pages_fast(unsigned long start, unsigned long nr_pages, unsigned int gup_flags, struct page **pages)
mm/gup.c:try_grab_page(struct page *page, unsigned int flags)
fs/read_write.c:ksys_write(unsigned int fd, const char __user *buf, size_t count)
fs/read_write.c:new_sync_write(struct file *filp, const char __user *buf, size_t len, loff_t *ppos)
fs/read_write.c:vfs_write(struct file *file, const char __user *buf, size_t count, loff_t *pos)
fs/open.c:do_dentry_open(struct file *f, struct inode *inode, int (*open)(struct inode *, struct file *))
fs/open.c:do_sys_ftruncate(unsigned int fd, loff_t length, int small)
fs/open.c:do_sys_openat2(int dfd, const char __user *filename, struct open_how *how)
udf_new_tag()
udf_read_tagged()
udf_update_tag()
func for case d2ad6548d6f4f8f52f8fa250310fb027f04cfd18
net/ieee802154/nl802154.c:__cfg802154_rdev_from_attrs()
_from_attrs()
net/ieee802154/nl802154.c:ieee802154_llsec_parse_dev_addr(struct nlattr *nla, struct ieee802154_addr *addr)
net/ieee802154/nl802154.c:ieee802154_llsec_parse_device(struct nlattr *nla, struct ieee802154_llsec_device *dev)
net/ieee802154/nl802154.c:ieee802154_llsec_parse_key_id(struct nlattr *nla, struct ieee802154_llsec_key_id *desc)
llsec_parse()
net/ieee802154/nl802154.c:nl802154_add_llsec_devkey(struct sk_buff *skb, struct genl_info *info)
net/ieee802154/nl802154.c:nl802154_add_llsec_key(struct sk_buff *skb, struct genl_info *info)
net/ieee802154/nl802154.c:nl802154_del_interface(struct sk_buff *skb, struct genl_info *info)
net/ieee802154/nl802154.c:nl802154_del_llsec_dev(struct sk_buff *skb, struct genl_info *info)
net/ieee802154/nl802154.c:nl802154_del_llsec_devkey(struct sk_buff *skb, struct genl_info *info)
net/ieee802154/nl802154.c:nl802154_del_llsec_key(struct sk_buff *skb, struct genl_info *info)
net/ieee802154/nl802154.c:nl802154_new_interface(struct sk_buff *skb, struct genl_info *info)
net/ieee802154/nl802154.c:nl802154_pre_doit(const struct genl_split_ops *ops, struct sk_buff *skb, struct genl_info *info)
net/ieee802154/nl802154.c:nl802154_send_devkey(struct sk_buff *msg, u32 cmd, u32 portid, u32 seq, int flags, struct cfg802154_registered_device *rdev, struct net_device *dev, __le64 extended_addr, const struct ieee802154_llsec_device_key *devkey)
net/ieee802154/nl802154.c:nl802154_set_llsec_params(struct sk_buff *skb, struct genl_info *info)
net/ieee802154/nl802154.c:nl802154_trigger_scan(struct sk_buff *skb, struct genl_info *info)
include/net/netlink.h:__nlmsg_parse(const struct nlmsghdr *nlh, int hdrlen, struct nlattr *tb[], int maxtype, const struct nla_policy *policy, unsigned int validate, struct netlink_ext_ack *extack)
include/net/netlink.h:nla_align_64bit(struct sk_buff *skb, int padattr)
include/net/netlink.h:nla_get_bitfield32(const struct nlattr *nla)
include/net/netlink.h:nla_get_in6_addr(const struct nlattr *nla)
nla_get_u8()
include/net/netlink.h:nla_nest_start_noflag()
include/net/netlink.h:nla_next()
include/net/netlink.h:nla_parse_nested(struct nlattr *tb[], int maxtype, const struct nlattr *nla, const struct nla_policy *policy, struct netlink_ext_ack *extack)
include/net/netlink.h:nla_put_u8(struct sk_buff *skb, int attrtype, u8 value)
include/net/netlink.h:nla_total_size_64bit(int payload)
include/net/netlink.h:nlmsg_append()
include/net/netlink.h:nlmsg_multicast(struct sock *sk, struct sk_buff *skb, u32 portid, unsigned int group, gfp_t flags)
include/net/netlink.h:nlmsg_next()
include/net/netlink.h:nlmsg_put()
include/net/netlink.h:nlmsg_trim(struct sk_buff *skb, const void *mark)
include/net/netlink.h:nlmsg_validate_deprecated(const struct nlmsghdr *nlh, int hdrlen, int maxtype, const struct nla_policy *policy, struct netlink_ext_ack *extack)
af_netlink()
net/netlink/af_netlink.c:netlink_broadcast(struct sock *ssk, struct sk_buff *skb, u32 portid, u32 group, gfp_t allocation)
net/netlink/af_netlink.c:netlink_getsockbyportid()
net/netlink/af_netlink.c:netlink_insert(struct sock *sk, u32 portid)
net/netlink/af_netlink.c:netlink_rcv_skb(struct sk_buff *skb, int (*cb)(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *))
net/netlink/af_netlink.c:netlink_sendmsg(struct socket *sock, struct msghdr *msg, size_t len)
net/netlink/af_netlink.c:netlink_trim()
net/netlink/af_netlink.c:netlink_unicast(struct sock *ssk, struct sk_buff *skb, u32 portid, int nonblock)
net/netlink/af_netlink.c:netlink_unicast_kernel(struct sock *sk, struct sk_buff *skb, struct sock *ssk)
net/netlink/genetlink.c:genl_family_rcv_msg(const struct genl_family *family, struct sk_buff *skb, struct nlmsghdr *nlh, struct netlink_ext_ack *extack)
net/netlink/genetlink.c:genl_family_rcv_msg_doit(const struct genl_family *family, struct sk_buff *skb, struct nlmsghdr *nlh, struct netlink_ext_ack *extack, const struct genl_split_ops *ops, int hdrlen, struct net *net)
net/netlink/genetlink.c:genl_get_cmd(u32 cmd, u8 flags, const struct genl_family *family, struct genl_split_ops *op)
net/netlink/genetlink.c:genl_header_check(const struct genl_family *family, struct nlmsghdr *nlh, struct genlmsghdr *hdr, struct netlink_ext_ack *extack)
net/netlink/genetlink.c:genl_notify(const struct genl_family *family, struct sk_buff *skb, struct genl_info *info, u32 group, gfp_t flags)
net/netlink/genetlink.c:genl_rcv_msg(struct sk_buff *skb, struct nlmsghdr *nlh, struct netlink_ext_ack *extack)
net/netlink/genetlink.c:genl_unregister_family(const struct genl_family *family)
net/netlink/genetlink.c:genlmsg_put()
net/ieee802154/core.c:cfg802154_netdev_notifier_call(struct notifier_block *nb, unsigned long state, void *ptr)
net/ieee802154/core.c:cfg802154_rdev_by_wpan_phy_idx()
net/ieee802154/core.c:cfg802154_switch_netns(struct cfg802154_registered_device *rdev, struct net *net)
net/ieee802154/core.c:wpan_phy_find()
net/ieee802154/core.c:wpan_phy_iter(struct device *dev, void *_data)
net/ieee802154/core.c:wpan_phy_new()
net/ieee802154/core.c:wpan_phy_register(struct wpan_phy *phy)
net/ieee802154/core.c:wpan_phy_unregister(struct wpan_phy *phy)
net/socket.c:kernel_sendmsg_locked(struct sock *sk, struct msghdr *msg, struct kvec *vec, size_t num, size_t size)
net/socket.c:sock_sendmsg(struct socket *sock, struct msghdr *msg)
net/socket.c:sock_sendmsg_nosec(struct socket *sock, struct msghdr *msg)
func for case d524c1aac21f8ea2759b6314c2e48bfa230c38b0
net/rds/send.c:__rds_send_complete(struct rds_sock *rs, struct rds_message *rm, int status)
allocated_mr()
net/rds/send.c:rds_atomic_send_complete(struct rds_message *rm, int status)
net/rds/send.c:rds_cmsg_send(struct rds_sock *rs, struct rds_message *rm, struct msghdr *msg, int *allocated_mr, struct rds_iov_vector_arr *vct)
net/rds/send.c:rds_rdma_bytes(struct msghdr *msg, size_t *rdma_bytes)
net/rds/send.c:rds_rdma_send_complete(struct rds_message *rm, int status)
net/rds/send.c:rds_rm_size(struct msghdr *msg, int num_sgs, struct rds_iov_vector_arr *vct)
net/rds/send.c:rds_send_drop_to(struct rds_sock *rs, struct sockaddr_in6 *dest)
net/rds/send.c:rds_send_mprds_hash(struct rds_sock *rs, struct rds_connection *conn, int nonblock)
net/rds/send.c:rds_send_path_drop_acked(struct rds_conn_path *cp, u64 ack, is_acked_func is_acked)
net/rds/send.c:rds_send_path_reset(struct rds_conn_path *cp)
net/rds/send.c:rds_send_probe(struct rds_conn_path *cp, __be16 sport, __be16 dport, u8 h_flags)
net/rds/send.c:rds_send_queue_rm(struct rds_sock *rs, struct rds_connection *conn, struct rds_conn_path *cp, struct rds_message *rm, __be16 sport, __be16 dport, int *queued)
net/rds/send.c:rds_send_remove_from_sock(struct list_head *messages, int status)
net/rds/send.c:rds_send_xmit(struct rds_conn_path *cp)
net/rds/send.c:rds_sendmsg(struct socket *sock, struct msghdr *msg, size_t payload_len)
net/rds/rdma.c:__rds_rdma_map(struct rds_sock *rs, struct rds_get_mr_args *args, u64 *cookie_ret, struct rds_mr **mr_ret, struct rds_conn_path *cp)
page_alloc()
net/rds/rdma.c:rds_atomic_free_op(struct rm_atomic_op *ao)
net/rds/rdma.c:rds_cmsg_atomic(struct rds_sock *rs, struct rds_message *rm, struct cmsghdr *cmsg)
net/rds/rdma.c:rds_cmsg_rdma_args(struct rds_sock *rs, struct rds_message *rm, struct cmsghdr *cmsg, struct rds_iov_vector *vec)
net/rds/rdma.c:rds_cmsg_rdma_dest(struct rds_sock *rs, struct rds_message *rm, struct cmsghdr *cmsg)
net/rds/rdma.c:rds_free_mr(struct rds_sock *rs, sockptr_t optval, int optlen)
net/rds/rdma.c:rds_get_mr_for_dest(struct rds_sock *rs, sockptr_t optval, int optlen)
net/rds/rdma.c:rds_mr_tree_walk()
net/rds/rdma.c:rds_pages_in_vec(struct rds_iovec *vec)
net/rds/rdma.c:rds_pin_pages(unsigned long user_addr, unsigned int nr_pages, struct page **pages, int write)
net/rds/rdma.c:rds_rdma_drop_keys(struct rds_sock *rs)
net/rds/rdma.c:rds_rdma_extra_size(struct rds_rdma_args *args, struct rds_iov_vector *iov)
net/rds/rdma.c:rds_rdma_free_op(struct rm_rdma_op *ro)
net/rds/rdma.c:rds_rdma_pages(struct rds_iovec iov[], int nr_iovecs)
net/rds/rdma.c:rds_rdma_unuse(struct rds_sock *rs, u32 r_key, int force)
mm/page_alloc.c:__alloc_pages_nodemask()
mm/page_alloc.c:__alloc_pages_slowpath()
mm/page_alloc.c:__free_one_page(struct page *page, unsigned long pfn, struct zone *zone, unsigned int order, int migratetype, fpi_t fpi_flags)
mm/page_alloc.c:__rmqueue()
mm/page_alloc.c:__rmqueue_fallback(struct zone *zone, int order, int start_migratetype, unsigned int alloc_flags)
mm/page_alloc.c:alloc_contig_pages()
mm/page_alloc.c:alloc_contig_range(unsigned long start, unsigned long end, unsigned migratetype, gfp_t gfp_mask)
mm/page_alloc.c:alloc_pages_exact()
mm/page_alloc.c:check_new_pages(struct page *page, unsigned int order)
mm/page_alloc.c:free_pages_prepare(struct page *page, unsigned int order, bool check_free)
mm/page_alloc.c:get_page_from_freelist()
page_alloc()
mm/page_alloc.c:post_alloc_hook(struct page *page, unsigned int order, gfp_t gfp_flags)
mm/page_alloc.c:prep_new_page(struct page *page, unsigned int order, gfp_t gfp_flags, unsigned int alloc_flags)
mm/page_alloc.c:rmqueue_pcplist()
mm/page_alloc.c:zone_watermark_ok_safe(struct zone *z, unsigned int order, unsigned long mark, int highest_zoneidx)
mm/slab_common.c:__kmem_cache_alloc_bulk(struct kmem_cache *s, gfp_t flags, size_t nr, void **p)
mm/slab_common.c:create_boot_cache(struct kmem_cache *s, const char *name, unsigned int size, slab_flags_t flags, unsigned int useroffset, unsigned int usersize)
mm/slab_common.c:create_kmalloc_cache()
mm/slab_common.c:create_kmalloc_caches(slab_flags_t flags)
mm/slab_common.c:kmalloc_order()
kmalloc_order_trace()
mm/slab_common.c:kmalloc_slab()
mm/slab_common.c:new_kmalloc_cache(int idx, enum kmalloc_cache_type type, slab_flags_t flags)
slab_common()
net/rds/af_rds.c:__rds_create(struct socket *sock, struct sock *sk, int protocol)
af_rds()
net/rds/af_rds.c:rds_connect(struct socket *sock, struct sockaddr *uaddr, int addr_len, int flags)
net/rds/af_rds.c:rds_getname(struct socket *sock, struct sockaddr *uaddr, int peer)
net/rds/af_rds.c:rds_getsockopt(struct socket *sock, int level, int optname, char __user *optval, int __user *optlen)
net/rds/af_rds.c:rds_ioctl(struct socket *sock, unsigned int cmd, unsigned long arg)
net/rds/af_rds.c:rds_poll(struct file *file, struct socket *sock, poll_table *wait)
net/rds/af_rds.c:rds_release(struct socket *sock)
net/rds/af_rds.c:rds_setsockopt(struct socket *sock, int level, int optname, sockptr_t optval, unsigned int optlen)
net/rds/message.c:rds_message_add_extension(struct rds_header *hdr, unsigned int type, const void *data, unsigned int len)
net/rds/message.c:rds_message_alloc()
net/rds/message.c:rds_message_alloc_sgs()
net/rds/message.c:rds_message_copy_from_user(struct rds_message *rm, struct iov_iter *from, bool zcopy)
net/rds/message.c:rds_message_inc_copy_to_user(struct rds_incoming *inc, struct iov_iter *to)
net/rds/message.c:rds_message_map_pages()
net/rds/message.c:rds_message_next_extension(struct rds_header *hdr, unsigned int *pos, void *buf, unsigned int *buflen)
net/rds/message.c:rds_message_zcopy_from_user(struct rds_message *rm, struct iov_iter *from)
include/linux/gfp.h:__alloc_pages_node()
__folio_alloc_node()
alloc_pages_bulk_array_node()
include/linux/gfp.h:alloc_pages_node()
include/linux/gfp.h:gfp_migratetype(const gfp_t gfp_flags)
include/linux/gfp.h:gfp_zone(gfp_t flags)
net/core/sock.c:sock_getsockopt(struct socket *sock, int level, int optname, char __user *optval, int __user *optlen)
net/core/sock.c:sock_init_data(struct socket *sock, struct sock *sk)
net/core/sock.c:sock_setsockopt(struct socket *sock, int level, int optname, sockptr_t optval, unsigned int optlen)
net/socket.c:____sys_sendmsg(struct socket *sock, struct msghdr *msg_sys, unsigned int flags, struct used_address *used_address, unsigned int allowed_msghdr_flags)
net/socket.c:___sys_sendmsg(struct socket *sock, struct user_msghdr __user *msg, struct msghdr *msg_sys, unsigned int flags, struct used_address *used_address, unsigned int allowed_msghdr_flags)
mm/page_alloc.c:__alloc_pages_nodemask()
net/socket.c:sock_sendmsg_nosec(struct socket *sock, struct msghdr *msg)
func for case d58fe2a53afa4ffbfaf3df368acb70d137e46c9f
fs/f2fs/inode.c:__get_inode_rdev(struct inode *inode, struct f2fs_inode *ri)
fs/f2fs/inode.c:__recover_inline_status(struct inode *inode, struct page *ipage)
fs/f2fs/inode.c:__set_inode_rdev(struct inode *inode, struct f2fs_inode *ri)
fs/f2fs/inode.c:__written_first_block(struct f2fs_sb_info *sbi, struct f2fs_inode *ri)
fs/f2fs/inode.c:do_read_inode(struct inode *inode)
fs/f2fs/inode.c:f2fs_evict_inode(struct inode *inode)
fs/f2fs/inode.c:f2fs_handle_failed_inode(struct inode *inode)
fs/f2fs/inode.c:f2fs_iget()
fs/f2fs/inode.c:f2fs_inode_chksum_verify(struct f2fs_sb_info *sbi, struct page *page)
fs/f2fs/inode.c:f2fs_set_inode_flags(struct inode *inode)
fs/f2fs/inode.c:f2fs_update_inode(struct inode *inode, struct page *node_page)
fs/f2fs/inode.c:f2fs_update_inode_page(struct inode *inode)
fs/f2fs/inode.c:f2fs_write_inode(struct inode *inode, struct writeback_control *wbc)
fs/f2fs/inode.c:sanity_check_compress_inode(struct inode *inode, struct f2fs_inode *ri)
fs/f2fs/inode.c:sanity_check_inode(struct inode *inode, struct page *node_page)
fs/f2fs/inode.c:__recover_inline_status(struct inode *inode, struct page *ipage)
fs/f2fs/f2fs.h:data_blkaddr(struct inode *inode, struct page *node_page, unsigned int offset)
fs/f2fs/f2fs.h:dec_valid_node_count(struct f2fs_sb_info *sbi, struct inode *inode, bool is_inode)
fs/f2fs/inode.c:do_read_inode(struct inode *inode)
fs/f2fs/f2fs.h:f2fs_grab_cache_page()
fs/f2fs/inode.c:f2fs_iget()
fs/f2fs/f2fs.h:f2fs_kmem_cache_alloc()
fs/f2fs/f2fs.h:f2fs_kmem_cache_alloc_nofail()
fs/f2fs/f2fs.h:f2fs_put_dnode(struct dnode_of_data *dn)
fs/f2fs/f2fs.h:f2fs_put_page(struct page *page, int unlock)
fs/f2fs/f2fs.h:get_inline_info(struct inode *inode, struct f2fs_inode *ri)
grab_cache_page()
fs/f2fs/f2fs.h:inc_valid_node_count(struct f2fs_sb_info *sbi, struct inode *inode, bool is_inode)
fs/f2fs/f2fs.h:inline_data_addr()
kmem_cache_alloc()
fs/f2fs/f2fs.h:set_raw_inline(struct inode *inode, struct f2fs_inode *ri)
fs/f2fs/f2fs.h:verify_blkaddr(struct f2fs_sb_info *sbi, block_t blkaddr, int type)
fs/f2fs/super.c:__f2fs_commit_super(struct buffer_head *bh, struct f2fs_super_block *super)
fs/f2fs/super.c:default_options(struct f2fs_sb_info *sbi, bool remount)
fs/f2fs/super.c:f2fs_commit_super(struct f2fs_sb_info *sbi, bool recover)
fs/f2fs/super.c:f2fs_fill_super(struct super_block *sb, void *data, int silent)
fs/f2fs/super.c:f2fs_handle_critical_error(struct f2fs_sb_info *sbi, unsigned char reason, bool irq_context)
fs/f2fs/super.c:f2fs_remount(struct super_block *sb, int *flags, char *data)
fs/f2fs/super.c:f2fs_sanity_check_ckpt(struct f2fs_sb_info *sbi)
fs/f2fs/super.c:f2fs_scan_devices(struct f2fs_sb_info *sbi)
fs/f2fs/super.c:f2fs_setup_casefold(struct f2fs_sb_info *sbi)
fs/f2fs/super.c:f2fs_tuning_parameters(struct f2fs_sb_info *sbi)
fs/f2fs/super.c:init_sb_info(struct f2fs_sb_info *sbi)
fs/f2fs/super.c:parse_options(struct super_block *sb, char *options, bool is_remount)
fs/f2fs/super.c:read_raw_super_block(struct f2fs_sb_info *sbi, struct f2fs_super_block **raw_super, int *valid_super_block, int *recovery)
fs/f2fs/super.c:sanity_check_area_boundary(struct f2fs_sb_info *sbi, struct buffer_head *bh)
fs/f2fs/super.c:sanity_check_raw_super(struct f2fs_sb_info *sbi, struct buffer_head *bh)
fs/f2fs/recovery.c:add_fsync_inode()
fs/f2fs/recovery.c:check_index_in_prev_nodes(struct f2fs_sb_info *sbi, block_t blkaddr, struct dnode_of_data *dn)
fs/f2fs/recovery.c:do_recover_data(struct f2fs_sb_info *sbi, struct inode *inode, struct page *page)
fs/f2fs/recovery.c:f2fs_recover_fsync_data(struct f2fs_sb_info *sbi, bool check_only)
fs/f2fs/recovery.c:f2fs_space_for_roll_forward(struct f2fs_sb_info *sbi)
fs/f2fs/recovery.c:find_fsync_dnodes(struct f2fs_sb_info *sbi, struct list_head *head, bool check_only)
fs/f2fs/recovery.c:recover_data(struct f2fs_sb_info *sbi, struct list_head *inode_list, struct list_head *tmp_inode_list, struct list_head *dir_list)
fs/f2fs/recovery.c:recover_inline_flags(struct inode *inode, struct f2fs_inode *ri)
fs/f2fs/recovery.c:recover_inode(struct inode *inode, struct page *page)
fs/f2fs/recovery.c:sanity_check_node_chain(struct f2fs_sb_info *sbi, block_t blkaddr, block_t *blkaddr_fast, bool *is_detecting)
fs/f2fs/checkpoint.c:commit_checkpoint(struct f2fs_sb_info *sbi, void *src, block_t blk_addr)
fs/f2fs/checkpoint.c:do_checkpoint(struct f2fs_sb_info *sbi, struct cp_control *cpc)
fs/f2fs/checkpoint.c:f2fs_checkpoint_chksum(struct f2fs_sb_info *sbi, struct f2fs_checkpoint *ckpt)
fs/f2fs/checkpoint.c:f2fs_get_valid_checkpoint(struct f2fs_sb_info *sbi)
fs/f2fs/checkpoint.c:f2fs_write_checkpoint(struct f2fs_sb_info *sbi, struct cp_control *cpc)
fs/f2fs/checkpoint.c:get_checkpoint_version(struct f2fs_sb_info *sbi, block_t cp_addr, struct f2fs_checkpoint **cp_block, struct page **cp_page, unsigned long long *version)
fs/f2fs/checkpoint.c:update_ckpt_flags(struct f2fs_sb_info *sbi, struct cp_control *cpc)
fs/f2fs/checkpoint.c:validate_checkpoint()
build_()
fs/f2fs/segment.c:build_sit_entries(struct f2fs_sb_info *sbi)
fs/f2fs/segment.c:build_sit_info(struct f2fs_sb_info *sbi)
fs/f2fs/segment.c:change_curseg(struct f2fs_sb_info *sbi, int type)
fs/f2fs/segment.c:f2fs_allocate_data_block(struct f2fs_sb_info *sbi, struct page *page, block_t old_blkaddr, block_t *new_blkaddr, struct f2fs_summary *sum, int type, struct f2fs_io_info *fio)
fs/f2fs/segment.c:get_new_segment(struct f2fs_sb_info *sbi, unsigned int *newseg, bool new_sec, int dir)
fs/f2fs/segment.c:new_curseg(struct f2fs_sb_info *sbi, int type, bool new_sec)
fs/f2fs/segment.c:reset_curseg(struct f2fs_sb_info *sbi, int type, int modified)
fs/f2fs/segment.c:update_sit_entry(struct f2fs_sb_info *sbi, block_t blkaddr, int del)
__get_data_block()
fs/f2fs/data.c:f2fs_map_blocks(struct inode *inode, struct f2fs_map_blocks *map, int flag)
fs/f2fs/data.c:f2fs_read_multi_pages(struct compress_ctx *cc, struct bio **bio_ret, unsigned nr_pages, sector_t *last_block_in_bio, bool is_readahead, bool for_write)
fs/f2fs/data.c:f2fs_read_single_page(struct inode *inode, struct page *page, unsigned nr_pages, struct f2fs_map_blocks *map, struct bio **bio_ret, sector_t *last_block_in_bio, bool is_readahead)
fs/f2fs/data.c:f2fs_submit_page_read(struct inode *inode, struct page *page, block_t blkaddr, blk_opf_t op_flags, bool for_write)
fs/f2fs/data.c:f2fs_write_end_io(struct bio *bio)
get_data_block_dio()
get_data_block_dio_write()
fs/super.c:get_tree_bdev(struct fs_context *fc, int (*fill_super)(struct super_block *, struct fs_context *)))
fs/super.c:mount_bdev()
fs/super.c:vfs_get_tree(struct fs_context *fc))
fs/f2fs/node.c:cache_nat_entry(struct f2fs_sb_info *sbi, nid_t nid, struct f2fs_nat_entry *ne)
fs/f2fs/node.c:f2fs_get_node_info(struct f2fs_sb_info *sbi, nid_t nid, struct node_info *ni, bool checkpoint_context)
fs/f2fs/node.c:set_node_addr(struct f2fs_sb_info *sbi, struct node_info *ni, block_t new_blkaddr, bool fsync_done)
fs/namespace.c:do_mount(const char *dev_name, const char __user *dir_name, const char *type_page, unsigned long flags, void *data_page)
fs/namespace.c:do_new_mount(struct path *path, const char *fstype, int sb_flags, int mnt_flags, const char *name, void *data)
fs/namespace.c:path_mount(const char *dev_name, struct path *path, const char *type_page, unsigned long flags, void *data_page)
func for case d92cc44e8c8ce5af6d2bea9f7a73cee791989fc8
fs/ext4/xattr.c:ext4_expand_extra_isize_ea(struct inode *inode, int new_extra_isize, struct ext4_inode *raw_inode, handle_t *handle)
fs/ext4/xattr.c:ext4_xattr_block_set(handle_t *handle, struct inode *inode, struct ext4_xattr_info *i, struct ext4_xattr_block_find *bs)
fs/ext4/xattr.c:ext4_xattr_ibody_set(handle_t *handle, struct inode *inode, struct ext4_xattr_info *i, struct ext4_xattr_ibody_find *is)
fs/ext4/xattr.c:ext4_xattr_inode_create()
fs/ext4/xattr.c:ext4_xattr_inode_dec_ref_all(handle_t *handle, struct inode *parent, struct buffer_head *bh, struct ext4_xattr_entry *first, bool block_csum, struct ext4_xattr_inode_array **ea_inode_array, int extra_credits, bool skip_quota)
fs/ext4/xattr.c:ext4_xattr_inode_get(struct inode *inode, struct ext4_xattr_entry *entry, void *buffer, size_t size)
fs/ext4/xattr.c:ext4_xattr_inode_iget(struct inode *parent, unsigned long ea_ino, u32 ea_inode_hash, struct inode **ea_inode)
fs/ext4/xattr.c:ext4_xattr_inode_inc_ref_all(handle_t *handle, struct inode *parent, struct ext4_xattr_entry *first)
fs/ext4/xattr.c:ext4_xattr_inode_lookup_create(handle_t *handle, struct inode *inode, const void *value, size_t value_len, struct inode **ret_inode)
ext4_xattr_inode_set_class()
fs/ext4/xattr.c:ext4_xattr_inode_update_ref(handle_t *handle, struct inode *ea_inode, int ref_change)
fs/ext4/xattr.c:ext4_xattr_inode_write(handle_t *handle, struct inode *ea_inode, const void *buf, int bufsize)
fs/ext4/xattr.c:ext4_xattr_make_inode_space(handle_t *handle, struct inode *inode, struct ext4_inode *raw_inode, int isize_diff, size_t ifree, size_t bfree, int *total_ino)
fs/ext4/xattr.c:ext4_xattr_move_to_block(handle_t *handle, struct inode *inode, struct ext4_inode *raw_inode, struct ext4_xattr_entry *entry)
fs/ext4/xattr.c:ext4_xattr_set_handle(handle_t *handle, struct inode *inode, int name_index, const char *name, const void *value, size_t value_len, int flags)
kernel/locking/lockdep.c:__lock_acquire(struct lockdep_map *lock, unsigned int subclass, int trylock, int read, int check, int hardirqs_off, struct lockdep_map *nest_lock, unsigned long ip, int references, int pin_count, int sync)
kernel/locking/lockdep.c:__lock_set_class(struct lockdep_map *lock, const char *name, struct lock_class_key *key, unsigned int subclass, unsigned long ip)
kernel/locking/lockdep.c:assign_lock_key(struct lockdep_map *lock)
kernel/locking/lockdep.c:check_flags(unsigned long flags)
kernel/locking/lockdep.c:is_dynamic_key(const struct lock_class_key *key)
kernel/locking/lockdep.c:lock_class_cache_is_registered(struct lockdep_map *lock)
kernel/locking/lockdep.c:lock_set_class(struct lockdep_map *lock, const char *name, struct lock_class_key *key, unsigned int subclass, unsigned long ip)
kernel/locking/lockdep.c:lockdep_init_map_type(struct lockdep_map *lock, const char *name, struct lock_class_key *key, int subclass, u8 inner, u8 outer, u8 lock_type)
kernel/locking/lockdep.c:lockdep_register_key(struct lock_class_key *key)
kernel/locking/lockdep.c:lockdep_reset_lock_imm(struct lockdep_map *lock)
kernel/locking/lockdep.c:lockdep_reset_lock_reg(struct lockdep_map *lock)
kernel/locking/lockdep.c:lockdep_unregister_key(struct lock_class_key *key)
kernel/locking/lockdep.c:look_up_lock_class()
kernel/locking/lockdep.c:register_lock_class()
kernel/locking/lockdep.c:verify_lock_unused(struct lockdep_map *lock, struct held_lock *hlock, int subclass)
fs/ext4/inode.c:__ext4_expand_extra_isize(struct inode *inode, unsigned int new_extra_isize, struct ext4_iloc *iloc, handle_t *handle, int *no_expand)
fs/ext4/inode.c:__ext4_iget()
fs/ext4/inode.c:__ext4_mark_inode_dirty(handle_t *handle, struct inode *inode, const char *func, unsigned int line)
fs/ext4/inode.c:ext4_do_update_inode(handle_t *handle, struct inode *inode, struct ext4_iloc *iloc)
fs/ext4/inode.c:ext4_evict_inode(struct inode *inode)
fs/ext4/inode.c:ext4_expand_extra_isize(struct inode *inode, unsigned int new_extra_isize, struct ext4_iloc *iloc)
fs/ext4/inode.c:ext4_fill_raw_inode(struct inode *inode, struct ext4_inode *raw_inode)
fs/ext4/inode.c:ext4_iget_extra_inode(struct inode *inode, struct ext4_inode *raw_inode, struct ext4_inode_info *ei)
fs/ext4/inode.c:ext4_inode_attach_jinode(struct inode *inode)
fs/ext4/inode.c:ext4_inode_blocks_set(struct ext4_inode *raw_inode, struct ext4_inode_info *ei)
fs/ext4/inode.c:ext4_inode_csum_set(struct inode *inode, struct ext4_inode *raw, struct ext4_inode_info *ei)
fs/ext4/inode.c:ext4_inode_csum_verify(struct inode *inode, struct ext4_inode *raw, struct ext4_inode_info *ei)
fs/ext4/inode.c:ext4_mark_iloc_dirty(handle_t *handle, struct inode *inode, struct ext4_iloc *iloc)
fs/ext4/inode.c:ext4_set_inode_flags(struct inode *inode, bool init)
fs/ext4/inode.c:ext4_try_to_expand_extra_isize(struct inode *inode, unsigned int new_extra_isize, struct ext4_iloc iloc, handle_t *handle)
fs/ext4/xattr.c:ext4_xattr_inode_iget(struct inode *parent, unsigned long ea_ino, u32 ea_inode_hash, struct inode **ea_inode)
fs/ext4/super.c:__ext4_fill_super(struct fs_context *fc, struct super_block *sb)
fs/ext4/super.c:ext4_apply_options(struct fs_context *fc, struct super_block *sb)
fs/ext4/super.c:ext4_check_feature_compatibility(struct super_block *sb, struct ext4_super_block *es, int silent)
fs/ext4/super.c:ext4_check_opt_consistency(struct fs_context *fc, struct super_block *sb)
fs/ext4/super.c:ext4_feature_set_ok(struct super_block *sb, int readonly)
fs/ext4/super.c:ext4_fill_super(struct super_block *sb, struct fs_context *fc)
fs/ext4/super.c:ext4_setup_super(struct super_block *sb, struct ext4_super_block *es, int read_only)
fs/ext4/super.c:ext4_validate_options(struct fs_context *fc)
fs/ext4/orphan.c:ext4_init_orphan_info(struct super_block *sb)
fs/ext4/orphan.c:ext4_orphan_add(handle_t *handle, struct inode *inode)
fs/ext4/orphan.c:ext4_orphan_cleanup(struct super_block *sb, struct ext4_super_block *es)
fs/ext4/orphan.c:ext4_orphan_del(handle_t *handle, struct inode *inode)
fs/ext4/orphan.c:ext4_orphan_file_add(handle_t *handle, struct inode *inode)
fs/ext4/orphan.c:ext4_orphan_file_block_trigger(struct jbd2_buffer_trigger_type *triggers, struct buffer_head *bh, void *data, size_t size)
fs/ext4/orphan.c:ext4_orphan_file_del(handle_t *handle, struct inode *inode)
fs/ext4/orphan.c:ext4_process_orphan(struct inode *inode, int *nr_truncates, int *nr_orphans)
fs/namespace.c:attach_recursive_mnt(struct mount *source_mnt, struct mount *dest_mnt, struct mountpoint *dest_mp, bool moving)
fs/namespace.c:do_mount(const char *dev_name, const char __user *dir_name, const char *type_page, unsigned long flags, void *data_page)
fs/namespace.c:do_new_mount(struct path *path, const char *fstype, int sb_flags, int mnt_flags, const char *name, void *data)
fs/namespace.c:do_new_mount_fc(struct fs_context *fc, struct path *mountpoint, unsigned int mnt_flags)
fs/namespace.c:graft_tree(struct mount *mnt, struct mount *p, struct mountpoint *mp)
fs/namespace.c:lock_mount()
fs/namespace.c:path_mount(const char *dev_name, struct path *path, const char *type_page, unsigned long flags, void *data_page)
fs/namespace.c:vfs_kern_mount()
fs/inode.c:__destroy_inode(struct inode *inode)
fs/inode.c:alloc_inode()
fs/inode.c:clear_inode(struct inode *inode)
fs/inode.c:destroy_inode(struct inode *inode)
fs/inode.c:evict_inodes(struct super_block *sb)
fs/ext4/inode.c:ext4_evict_inode(struct inode *inode)
fs/inode.c:inode_init_always(struct super_block *sb, struct inode *inode)
fs/inode.c:inode_init_once(struct inode *inode)
fs/inode.c:iput_final(struct inode *inode)
fs/super.c:get_tree_bdev(struct fs_context *fc, int (*fill_super)(struct super_block *, struct fs_context *)))
fs/super.c:mount_bdev()
fs/super.c:vfs_get_tree(struct fs_context *fc))
fs/ext4/xattr.c:ext4_xattr_inode_get(struct inode *inode, struct ext4_xattr_entry *entry, void *buffer, size_t size)
fs/ext4/xattr.c:ext4_xattr_inode_iget(struct inode *parent, unsigned long ea_ino, u32 ea_inode_hash, struct inode **ea_inode)
ext4_xattr_inode_set_class()
func for case daa1858cc0258eb026f89eecf342f6b3fdad7b05
net/core/dev.c:__dev_queue_xmit(struct sk_buff *skb, struct net_device *sb_dev)
net/core/dev.c:__dev_xmit_skb(struct sk_buff *skb, struct Qdisc *q, struct net_device *dev, struct netdev_queue *txq)
net/sched/cls_api.c:__tcf_classify(struct sk_buff *skb, const struct tcf_proto *tp, const struct tcf_proto *orig_tp, struct tcf_result *res, bool compat_mode, u32 *last_executed_chain)
net/sched/ematch.c:__tcf_em_tree_match(struct sk_buff *skb, struct tcf_ematch_tree *tree, struct tcf_pkt_info *info)
net/sched/cls_basic.c:basic_classify(struct sk_buff *skb, const struct tcf_proto *tp, struct tcf_result *res)
net/core/dev.c:dev_qdisc_enqueue(struct sk_buff *skb, struct Qdisc *q, struct sk_buff **to_free, struct netdev_queue *txq)
dev_queue_xmit()
net/sched/em_cmp.c:em_cmp_match(struct sk_buff *skb, struct tcf_ematch *em, struct tcf_pkt_info *info)
neigh_hh_output()
neigh_output()
net/sched/sch_prio.c:prio_classify()
net/sched/sch_prio.c:prio_enqueue(struct sk_buff *skb, struct Qdisc *sch, struct sk_buff **to_free)
net/sched/cls_api.c:tcf_classify(struct sk_buff *skb, const struct tcf_block *block, const struct tcf_proto *tp, struct tcf_result *res, bool compat_mode)
tcf_em_match()
include/net/pkt_cls.h:tcf_em_tree_match(struct sk_buff *skb, struct tcf_ematch_tree *tree, struct tcf_pkt_info *info)
TCF_EM_CMP()
net/sched/cls_basic.c:basic_change(struct net *net, struct sk_buff *in_skb, struct tcf_proto *tp, unsigned long base, u32 handle, struct nlattr **tca, void **arg, u32 flags, struct netlink_ext_ack *extack)
net/sched/cls_basic.c:basic_classify(struct sk_buff *skb, const struct tcf_proto *tp, struct tcf_result *res)
net/sched/cls_basic.c:basic_delete(struct tcf_proto *tp, void *arg, bool *last, bool rtnl_held, struct netlink_ext_ack *extack)
net/sched/cls_basic.c:basic_destroy(struct tcf_proto *tp, bool rtnl_held, struct netlink_ext_ack *extack)
net/sched/cls_basic.c:basic_dump(struct net *net, struct tcf_proto *tp, void *fh, struct sk_buff *skb, struct tcmsg *t, bool rtnl_held)
net/sched/cls_basic.c:basic_get()
net/sched/cls_basic.c:basic_init(struct tcf_proto *tp)
net/sched/cls_basic.c:basic_set_parms(struct net *net, struct tcf_proto *tp, struct basic_filter *f, unsigned long base, struct nlattr **tb, struct nlattr *est, u32 flags, struct netlink_ext_ack *extack)
net/sched/em_cmp.c:em_cmp_match(struct sk_buff *skb, struct tcf_ematch *em, struct tcf_pkt_info *info)
net/sched/cls_api.c:__tcf_classify(struct sk_buff *skb, const struct tcf_proto *tp, const struct tcf_proto *orig_tp, struct tcf_result *res, bool compat_mode, u32 *last_executed_chain)
cls_api()
net/sched/em_cmp.c:em_cmp_match(struct sk_buff *skb, struct tcf_ematch *em, struct tcf_pkt_info *info)
net/sched/cls_api.c:tc_new_tfilter(struct sk_buff *skb, struct nlmsghdr *n, struct netlink_ext_ack *extack)
net/sched/cls_api.c:tcf_block_create()
net/sched/cls_api.c:tcf_block_get_ext(struct tcf_block **p_block, struct Qdisc *q, struct tcf_block_ext_info *ei, struct netlink_ext_ack *extack)
net/sched/cls_api.c:tcf_block_insert(struct tcf_block *block, struct net *net, struct netlink_ext_ack *extack)
net/sched/cls_api.c:tcf_block_remove(struct tcf_block *block, struct net *net)
net/sched/cls_api.c:tcf_chain_create()
net/sched/cls_api.c:tcf_chain_destroy(struct tcf_chain *chain, bool free_block)
net/sched/cls_api.c:tcf_chain_tp_insert(struct tcf_chain *chain, struct tcf_chain_info *chain_info, struct tcf_proto *tp)
net/sched/cls_api.c:tcf_chain_tp_remove(struct tcf_chain *chain, struct tcf_chain_info *chain_info, struct tcf_proto *tp)
net/sched/cls_api.c:tcf_classify(struct sk_buff *skb, const struct tcf_block *block, const struct tcf_proto *tp, struct tcf_result *res, bool compat_mode)
net/sched/cls_api.c:tcf_fill_node(struct net *net, struct sk_buff *skb, struct tcf_proto *tp, struct tcf_block *block, struct Qdisc *q, u32 parent, void *fh, u32 portid, u32 seq, u16 flags, int event, bool terse_dump, bool rtnl_held)
net/sched/cls_api.c:tcf_proto_create()
net/sched/cls_api.c:tcf_proto_destroy(struct tcf_proto *tp, bool rtnl_held, bool sig_destroy, struct netlink_ext_ack *extack)
net/sched/cls_api.c:tfilter_notify(struct net *net, struct sk_buff *oskb, struct nlmsghdr *n, struct tcf_proto *tp, struct tcf_block *block, struct Qdisc *q, u32 parent, void *fh, int event, bool unicast, bool rtnl_held)
net/sched/ematch.c:__tcf_em_tree_match(struct sk_buff *skb, struct tcf_ematch_tree *tree, struct tcf_pkt_info *info)
net/sched/em_cmp.c:em_cmp_match(struct sk_buff *skb, struct tcf_ematch *em, struct tcf_pkt_info *info)
net/sched/ematch.c:tcf_em_tree_destroy(struct tcf_ematch_tree *tree)
net/sched/ematch.c:tcf_em_tree_dump(struct sk_buff *skb, struct tcf_ematch_tree *tree, int tlv)
net/sched/ematch.c:tcf_em_tree_validate(struct tcf_proto *tp, struct nlattr *nla, struct tcf_ematch_tree *tree)
net/sched/ematch.c:tcf_em_validate(struct tcf_proto *tp, struct tcf_ematch_tree_hdr *tree_hdr, struct tcf_ematch *em, struct nlattr *nla, int idx)
net/core/dev.c:__dev_queue_xmit(struct sk_buff *skb, struct net_device *sb_dev)
net/core/dev.c:__netif_receive_skb_core(struct sk_buff **pskb, bool pfmemalloc, struct packet_type **ppt_prev)
net/core/dev.c:dev_hard_start_xmit()
net/core/dev.c:dev_loopback_xmit(struct net *net, struct sock *sk, struct sk_buff *skb)
net/core/dev.c:netif_receive_skb_internal(struct sk_buff *skb)
net/core/dev.c:skb_checksum_help(struct sk_buff *skb)
net/core/dev.c:validate_xmit_skb()
net/core/dev.c:xmit_one(struct sk_buff *skb, struct net_device *dev, struct netdev_queue *txq, bool more)
af_netlink()
net/netlink/af_netlink.c:netlink_alloc_large_skb()
netlink_broadcast_filtered()
net/netlink/af_netlink.c:netlink_getsockbyportid()
net/netlink/af_netlink.c:netlink_insert(struct sock *sk, u32 portid)
net/netlink/af_netlink.c:netlink_rcv_skb(struct sk_buff *skb, int (*cb)(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *))
net/netlink/af_netlink.c:netlink_sendmsg(struct socket *sock, struct msghdr *msg, size_t len)
net/netlink/af_netlink.c:netlink_trim()
net/netlink/af_netlink.c:netlink_unicast(struct sock *ssk, struct sk_buff *skb, u32 portid, int nonblock)
net/ipv6/addrconf.c:addrconf_add_linklocal(struct inet6_dev *idev, const struct in6_addr *addr, u32 flags)
net/ipv6/addrconf.c:addrconf_dad_begin(struct inet6_ifaddr *ifp)
net/ipv6/addrconf.c:addrconf_dad_completed(struct inet6_ifaddr *ifp, bool bump_id, bool send_na)
net/ipv6/addrconf.c:addrconf_dad_failure(struct sk_buff *skb, struct inet6_ifaddr *ifp)
net/ipv6/addrconf.c:addrconf_dad_kick(struct inet6_ifaddr *ifp)
net/ipv6/addrconf.c:addrconf_dad_stop(struct inet6_ifaddr *ifp, int dad_failed)
net/ipv6/addrconf.c:addrconf_dad_work(struct work_struct *w)
net/ipv6/addrconf.c:ipv6_add_addr()
em_cmp()
net/sched/em_cmp.c:em_cmp_match(struct sk_buff *skb, struct tcf_ematch *em, struct tcf_pkt_info *info)
pkt_cls()
net/sched/sch_prio.c:prio_classify()
net/sched/sch_prio.c:prio_dequeue()
net/sched/sch_prio.c:prio_enqueue(struct sk_buff *skb, struct Qdisc *sch, struct sk_buff **to_free)
kernel/workqueue.c:create_worker()
kernel/workqueue.c:process_scheduled_works(struct worker *worker)
kernel/workqueue.c:worker_thread(void *__worker)
func for case de88544daafacdbc8ec3b2d75ca9e7e0f03346e0
net/ipv4/tcp_input.c:tcp_ack(struct sock *sk, const struct sk_buff *skb, int flag)
net/ipv4/tcp_input.c:tcp_collapse(struct sock *sk, struct sk_buff_head *list, struct rb_root *root, struct sk_buff *head, struct sk_buff *tail, u32 start, u32 end)
net/ipv4/tcp_input.c:tcp_collapse_ofo_queue(struct sock *sk)
net/ipv4/tcp_input.c:tcp_data_queue(struct sock *sk, struct sk_buff *skb)
net/ipv4/tcp_input.c:tcp_data_queue_ofo(struct sock *sk, struct sk_buff *skb)
net/ipv4/tcp_input.c:tcp_enter_loss(struct sock *sk)
net/ipv4/tcp_input.c:tcp_fastretrans_alert(struct sock *sk, const u32 prior_snd_una, int num_dupack, int *ack_flag, int *rexmit)
net/ipv4/tcp_input.c:tcp_process_loss(struct sock *sk, int flag, int num_dupack, int *rexmit)
net/ipv4/tcp_input.c:tcp_prune_queue(struct sock *sk)
net/ipv4/tcp_input.c:tcp_rcv_state_process(struct sock *sk, struct sk_buff *skb)
tcp_sacktag_()
net/ipv4/tcp_input.c:tcp_sacktag_one(struct sock *sk, struct tcp_sacktag_state *state, u8 sacked, u32 start_seq, u32 end_seq, int dup_sack, int pcount, u64 xmit_time)
net/ipv4/tcp_input.c:tcp_sacktag_write_queue(struct sock *sk, const struct sk_buff *ack_skb, u32 prior_snd_una, struct tcp_sacktag_state *state)
net/ipv4/tcp_input.c:tcp_timeout_mark_lost(struct sock *sk)
net/ipv4/tcp_input.c:tcp_try_rmem_schedule(struct sock *sk, struct sk_buff *skb, unsigned int size)
net/ipv4/tcp_input.c:tcp_validate_incoming(struct sock *sk, struct sk_buff *skb, const struct tcphdr *th, int syn_inerr)
net/ipv4/tcp_timer.c:retransmits_timed_out(struct sock *sk, unsigned int boundary, unsigned int timeout)
net/ipv4/tcp_timer.c:tcp_clamp_rto_to_user_timeout(const struct sock *sk)
net/ipv4/tcp_timer.c:tcp_delack_timer(struct timer_list *t)
net/ipv4/tcp_timer.c:tcp_delack_timer_handler(struct sock *sk)
net/ipv4/tcp_timer.c:tcp_fastopen_synack_timer(struct sock *sk, struct request_sock *req)
net/ipv4/tcp_timer.c:tcp_init_xmit_timers(struct sock *sk)
net/ipv4/tcp_timer.c:tcp_keepalive_timer(struct timer_list *t)
net/ipv4/tcp_timer.c:tcp_mtu_probing(struct inet_connection_sock *icsk, struct sock *sk)
net/ipv4/tcp_timer.c:tcp_orphan_retries(struct sock *sk, bool alive)
net/ipv4/tcp_timer.c:tcp_out_of_resources(struct sock *sk, bool do_reset)
net/ipv4/tcp_timer.c:tcp_probe_timer(struct sock *sk)
net/ipv4/tcp_timer.c:tcp_retransmit_timer(struct sock *sk)
net/ipv4/tcp_timer.c:tcp_write_timeout(struct sock *sk)
net/ipv4/tcp_timer.c:tcp_write_timer(struct timer_list *t)
net/ipv4/tcp_timer.c:tcp_write_timer_handler(struct sock *sk)
net/ipv4/tcp.c:__tcp_splice_read(struct sock *sk, struct tcp_splice_state *tss)
net/ipv4/tcp.c:do_tcp_setsockopt(struct sock *sk, int level, int optname, sockptr_t optval, unsigned int optlen)
skb_entail()
net/ipv4/tcp.c:tcp_disconnect(struct sock *sk, int flags)
net/ipv4/tcp.c:tcp_init_sock(struct sock *sk)
net/ipv4/tcp.c:tcp_push(struct sock *sk, int flags, int mss_now, int nonagle, int size_goal)
net/ipv4/tcp.c:tcp_remove_empty_skb(struct sock *sk)
net/ipv4/tcp.c:tcp_repair_options_est(struct sock *sk, sockptr_t optbuf, unsigned int len)
net/ipv4/tcp.c:tcp_repair_set_window(struct tcp_sock *tp, sockptr_t optbuf, int len)
net/ipv4/tcp.c:tcp_rtx_queue_purge(struct sock *sk)
net/ipv4/tcp.c:tcp_sendmsg_locked(struct sock *sk, struct msghdr *msg, size_t size)
net/ipv4/tcp.c:tcp_setsockopt(struct sock *sk, int level, int optname, sockptr_t optval, unsigned int optlen)
net/ipv4/tcp.c:tcp_splice_data_recv(read_descriptor_t *rd_desc, struct sk_buff *skb, unsigned int offset, size_t len)
net/ipv4/tcp.c:tcp_splice_read(struct socket *sock, loff_t *ppos, struct pipe_inode_info *pipe, size_t len, unsigned int flags)
net/ipv4/tcp.c:tcp_write_queue_purge(struct sock *sk)
net/core/sock.c:__sk_destruct(struct rcu_head *head)
net/core/sock.c:__sk_free(struct sock *sk)
net/core/sock.c:sk_destruct(struct sock *sk)
net/core/sock.c:sk_free(struct sock *sk)
net/core/sock.c:sock_alloc_send_pskb()
net/core/sock.c:sock_init_data(struct socket *sock, struct sock *sk)
net/core/sock.c:sock_setsockopt(struct socket *sock, int level, int optname, sockptr_t optval, unsigned int optlen)
net/core/sock.c:sock_wfree(struct sk_buff *skb)
net/ipv4/tcp_output.c:__tcp_push_pending_frames(struct sock *sk, unsigned int cur_mss, int nonagle)
net/ipv4/tcp_output.c:__tcp_retransmit_skb(struct sock *sk, struct sk_buff *skb, int segs)
net/ipv4/tcp_output.c:tcp_fragment(struct sock *sk, enum tcp_queue tcp_queue, struct sk_buff *skb, u32 len, unsigned int mss_now, gfp_t gfp)
tcp_output()
net/ipv4/tcp_output.c:tcp_retransmit_skb(struct sock *sk, struct sk_buff *skb, int segs)
net/ipv4/tcp_output.c:tcp_schedule_loss_probe(struct sock *sk, bool advancing_rto)
net/ipv4/tcp_output.c:tcp_send_loss_probe(struct sock *sk)
net/ipv4/tcp_output.c:tcp_write_xmit(struct sock *sk, unsigned int mss_now, int nonagle, int push_one, gfp_t gfp)
net/ipv4/tcp_output.c:tcp_xmit_retransmit_queue(struct sock *sk)
tcp_ipv4()
net/ipv4/tcp_ipv4.c:tcp_v4_conn_request(struct sock *sk, struct sk_buff *skb)
net/ipv4/tcp_ipv4.c:tcp_v4_connect(struct sock *sk, struct sockaddr *uaddr, int addr_len)
net/ipv4/tcp_ipv4.c:tcp_v4_destroy_sock(struct sock *sk)
net/ipv4/tcp_ipv4.c:tcp_v4_do_rcv(struct sock *sk, struct sk_buff *skb)
net/ipv4/tcp_ipv4.c:tcp_v4_err(struct sk_buff *skb, u32 info)
net/ipv4/tcp_ipv4.c:tcp_v4_rcv(struct sk_buff *skb)
net/ipv4/tcp_ipv4.c:tcp_v4_send_reset(const struct sock *sk, struct sk_buff *skb)
net/ipv4/tcp_ipv4.c:tcp_v4_timewait_ack(struct sock *sk, struct sk_buff *skb)
kernel/time/timer.c:__mod_timer(struct timer_list *timer, unsigned long expires, unsigned int options)
kernel/time/timer.c:__run_timers(struct timer_base *base)
kernel/time/timer.c:add_timer_on(struct timer_list *timer, int cpu)
kernel/time/timer.c:call_timer_fn(struct timer_list *timer, void (*fn)(struct timer_list *), unsigned long baseclk)
kernel/time/timer.c:del_timer_sync(struct timer_list *timer)
kernel/time/timer.c:detach_if_pending(struct timer_list *timer, struct timer_base *base, bool clear_pending)
kernel/time/timer.c:expire_timers(struct timer_base *base, struct hlist_head *head)
kernel/time/timer.c:run_timer_softirq(struct softirq_action *h)
TCP_REPAIR_OPTIONS()
net/ipv4/tcp_input.c:tcp_enter_loss(struct sock *sk)
tcp_input()
tcp_offload()
net/ipv4/tcp_timer.c:tcp_retransmit_timer(struct sock *sk)
tcp_timer()
net/netlink/af_netlink.c:netlink_getsockopt(struct socket *sock, int level, int optname, char __user *optval, int __user *optlen)
net/netlink/af_netlink.c:netlink_recvmsg(struct socket *sock, struct msghdr *msg, size_t len, int flags)
net/netlink/af_netlink.c:netlink_setsockopt(struct socket *sock, int level, int optname, sockptr_t optval, unsigned int optlen)
fs/splice.c:do_splice(struct file *in, loff_t *off_in, struct file *out, loff_t *off_out, size_t len, unsigned int flags)
fs/splice.c:link_pipe(struct pipe_inode_info *ipipe, struct pipe_inode_info *opipe, size_t len, unsigned int flags)
fs/splice.c:splice_pipe_to_pipe(struct pipe_inode_info *ipipe, struct pipe_inode_info *opipe, size_t len, unsigned int flags)
func for case deb061ff946b02c2f4821f91683d89a68b2f45f8
fs/hfsplus/inode.c:hfsplus_cat_read_inode(struct inode *inode, struct hfs_find_data *fd)
fs/hfsplus/inode.c:hfsplus_cat_write_inode(struct inode *inode)
fs/hfsplus/inode.c:hfsplus_delete_inode(struct inode *inode)
fs/hfsplus/inode.c:hfsplus_direct_IO(struct kiocb *iocb, struct iov_iter *iter)
fs/hfsplus/inode.c:hfsplus_file_fsync(struct file *file, loff_t start, loff_t end, int datasync)
fs/hfsplus/inode.c:hfsplus_file_release(struct inode *inode, struct file *file)
fs/hfsplus/inode.c:hfsplus_fileattr_set(struct user_namespace *mnt_userns, struct dentry *dentry, struct fileattr *fa)
fs/hfsplus/inode.c:hfsplus_get_perms(struct inode *inode, struct hfsplus_perm *perms, int dir)
fs/hfsplus/inode.c:hfsplus_getattr(struct user_namespace *mnt_userns, const struct path *path, struct kstat *stat, u32 request_mask, unsigned int query_flags)
fs/hfsplus/inode.c:hfsplus_inode_read_fork(struct inode *inode, struct hfsplus_fork_raw *fork)
fs/hfsplus/inode.c:hfsplus_new_inode()
fs/hfsplus/inode.c:hfsplus_release_folio(struct folio *folio, gfp_t mask)
fs/hfsplus/inode.c:hfsplus_setattr(struct user_namespace *mnt_userns, struct dentry *dentry, struct iattr *attr)
fs/hfsplus/inode.c:hfsplus_write_begin(struct file *file, struct address_space *mapping, loff_t pos, unsigned len, struct page **pagep, void **fsdata)
fs/fs-writeback.c:write_inode(struct inode *inode, struct writeback_control *wbc)
fs/hfsplus/catalog.c:hfsplus_cat_build_key(struct super_block *sb, hfsplus_btree_key *key, u32 parent, const struct qstr *str)
fs/hfsplus/catalog.c:hfsplus_cat_build_key_uni(hfsplus_btree_key *key, u32 parent, struct hfsplus_unistr *name)
fs/hfsplus/catalog.c:hfsplus_cat_build_record(hfsplus_cat_entry *entry, u32 cnid, struct inode *inode)
fs/hfsplus/catalog.c:hfsplus_cat_set_perms(struct inode *inode, struct hfsplus_perm *perms)
fs/hfsplus/inode.c:hfsplus_cat_write_inode(struct inode *inode)
fs/hfsplus/catalog.c:hfsplus_create_cat(u32 cnid, struct inode *dir, const struct qstr *str, struct inode *inode)
fs/hfsplus/catalog.c:hfsplus_delete_cat(u32 cnid, struct inode *dir, const struct qstr *str)
fs/hfsplus/catalog.c:hfsplus_fill_cat_thread(struct super_block *sb, hfsplus_cat_entry *entry, int type, u32 parentid, const struct qstr *str)
fs/hfsplus/catalog.c:hfsplus_find_cat(struct super_block *sb, u32 cnid, struct hfs_find_data *fd)
fs/hfsplus/catalog.c:hfsplus_rename_cat(u32 cnid, struct inode *src_dir, const struct qstr *src_name, struct inode *dst_dir, const struct qstr *dst_name)
fs/hfsplus/catalog.c:hfsplus_subfolders_dec(struct inode *dir)
fs/hfsplus/btree.c:hfs_bmap_alloc()
fs/hfsplus/btree.c:hfs_bmap_free(struct hfs_bnode *node)
fs/hfsplus/btree.c:hfs_bmap_new_bmap()
fs/hfsplus/btree.c:hfs_btree_open()
fs/hfsplus/btree.c:hfs_btree_write(struct hfs_btree *tree)
fs/hfsplus/btree.c:hfsplus_calc_btree_clump_size(u32 block_size, u32 node_size, u64 sectors, int file_id)
fs/hfsplus/super.c:hfsplus_evict_inode(struct inode *inode)
fs/hfsplus/super.c:hfsplus_fill_super(struct super_block *sb, void *data, int silent)
fs/hfsplus/super.c:hfsplus_iget()
fs/hfsplus/super.c:hfsplus_put_super(struct super_block *sb)
fs/hfsplus/super.c:hfsplus_remount(struct super_block *sb, int *flags, char *data)
fs/hfsplus/super.c:hfsplus_sync_fs(struct super_block *sb, int wait)
fs/hfsplus/super.c:hfsplus_system_read_inode(struct inode *inode)
fs/hfsplus/super.c:hfsplus_system_write_inode(struct inode *inode)
fs/fs-writeback.c:write_inode(struct inode *inode, struct writeback_control *wbc)
fs/fs-writeback.c:__writeback_single_inode(struct inode *inode, struct writeback_control *wbc)
fs/hfsplus/inode.c:hfsplus_cat_write_inode(struct inode *inode)
fs/fs-writeback.c:requeue_inode(struct inode *inode, struct bdi_writeback *wb, struct writeback_control *wbc)
fs/fs-writeback.c:wb_do_writeback(struct bdi_writeback *wb)
fs/fs-writeback.c:wb_workfn(struct work_struct *work)
fs/fs-writeback.c:wb_writeback(struct bdi_writeback *wb, struct wb_writeback_work *work)
fs/fs-writeback.c:write_inode_now(struct inode *inode, int sync)
fs/fs-writeback.c:writeback_sb_inodes(struct super_block *sb, struct bdi_writeback *wb, struct wb_writeback_work *work)
fs/fs-writeback.c:writeback_single_inode(struct inode *inode, struct writeback_control *wbc)
fs/hfsplus/bnode.c:__hfs_bnode_create()
fs/hfsplus/bnode.c:hfs_bnode_clear(struct hfs_bnode *node, int off, int len)
fs/hfsplus/bnode.c:hfs_bnode_copy(struct hfs_bnode *dst_node, int dst, struct hfs_bnode *src_node, int src, int len)
fs/hfsplus/bnode.c:hfs_bnode_create()
fs/hfsplus/bnode.c:hfs_bnode_find()
fs/hfsplus/bnode.c:hfs_bnode_move(struct hfs_bnode *node, int dst, int src, int len)
fs/hfsplus/bnode.c:hfs_bnode_read(struct hfs_bnode *node, void *buf, int off, int len)
fs/hfsplus/bnode.c:hfs_bnode_write(struct hfs_bnode *node, void *buf, int off, int len)
fs/buffer.c:__block_write_full_page(struct inode *inode, struct page *page, get_block_t *get_block, struct writeback_control *wbc, bh_end_io_t *handler)
fs/buffer.c:__sync_dirty_buffer(struct buffer_head *bh, blk_opf_t op_flags)
fs/buffer.c:block_write_begin(struct address_space *mapping, loff_t pos, unsigned len, struct page **pagep, get_block_t *get_block)
fs/buffer.c:block_write_end(struct file *file, struct address_space *mapping, loff_t pos, unsigned len, unsigned copied, struct page *page, void *fsdata)
fs/buffer.c:block_write_full_page(struct page *page, get_block_t *get_block, struct writeback_control *wbc)
fs/hfsplus/inode.c:hfsplus_cat_write_inode(struct inode *inode)
fs/buffer.c:mark_buffer_dirty(struct buffer_head *bh)
fs/buffer.c:submit_bh_wbc(blk_opf_t opf, struct buffer_head *bh, struct writeback_control *wbc)
fs/buffer.c:write_dirty_buffer(struct buffer_head *bh, blk_opf_t op_flags)
process_one_work()
fs/fs-writeback.c:wb_workfn(struct work_struct *work)
kernel/workqueue.c:worker_thread(void *__worker)
hfsplus_fill_defaults()
hfsplus_parse_options()
fs/hfsplus/xattr.c:__hfsplus_setxattr(struct inode *inode, const char *name, const void *value, size_t size, int flags)
fs/hfsplus/xattr.c:hfsplus_osx_setxattr(const struct xattr_handler *handler, struct user_namespace *mnt_userns, struct dentry *unused, struct inode *inode, const char *name, const void *buffer, size_t size, int flags)
fs/hfsplus/xattr.c:hfsplus_setxattr(struct inode *inode, const char *name, const void *value, size_t size, int flags, const char *prefix, size_t prefixlen)
func for case e2907149c69cbccae0842eb502b8af4f6fac52a0
fs/xfs/libxfs/xfs_btree.c:__xfs_btree_check_lblock(struct xfs_btree_cur *cur, struct xfs_btree_block *block, int level, struct xfs_buf *bp)
fs/xfs/libxfs/xfs_btree.c:__xfs_btree_check_sblock(struct xfs_btree_cur *cur, struct xfs_btree_block *block, int level, struct xfs_buf *bp)
fs/xfs/libxfs/xfs_btree.c:xfs_btree_check_ptr(struct xfs_btree_cur *cur, const union xfs_btree_ptr *ptr, int index, int level)
fs/xfs/libxfs/xfs_btree.c:xfs_btree_get_buf_block(struct xfs_btree_cur *cur, const union xfs_btree_ptr *ptr, struct xfs_btree_block **block, struct xfs_buf **bpp)
fs/xfs/libxfs/xfs_btree.c:xfs_btree_get_leaf_keys(struct xfs_btree_cur *cur, struct xfs_btree_block *block, union xfs_btree_key *key)
fs/xfs/libxfs/xfs_btree.c:xfs_btree_get_node_keys(struct xfs_btree_cur *cur, struct xfs_btree_block *block, union xfs_btree_key *key)
fs/xfs/libxfs/xfs_btree.c:xfs_btree_get_rec(struct xfs_btree_cur *cur, /* btree cursor */ union xfs_btree_rec **recp, /* output: btree record */ int *stat)
fs/xfs/libxfs/xfs_btree.c:xfs_btree_get_sibling(struct xfs_btree_cur *cur, struct xfs_btree_block *block, union xfs_btree_ptr *ptr, int lr)
fs/xfs/libxfs/xfs_btree.c:xfs_btree_init_block_cur(struct xfs_btree_cur *cur, struct xfs_buf *bp, int level, int numrecs)
fs/xfs/libxfs/xfs_btree.c:xfs_btree_init_block_int(struct xfs_mount *mp, struct xfs_btree_block *buf, xfs_daddr_t blkno, xfs_btnum_t btnum, __u16 level, __u16 numrecs, __u64 owner, unsigned int flags)
fs/xfs/libxfs/xfs_btree.c:xfs_btree_lookup(struct xfs_btree_cur *cur, /* btree cursor */ xfs_lookup_t dir, /* <=, ==, or >= */ int *stat)
fs/xfs/libxfs/xfs_btree.c:xfs_btree_lookup_get_block(struct xfs_btree_cur *cur, /* btree cursor */ int level, /* level in the btree */ const union xfs_btree_ptr *pp, /* ptr to btree block */ struct xfs_btree_block **blkp)
fs/xfs/libxfs/xfs_btree.c:xfs_btree_ptr_addr()
fs/xfs/libxfs/xfs_btree.c:xfs_btree_read_buf_block(struct xfs_btree_cur *cur, const union xfs_btree_ptr *ptr, int flags, struct xfs_btree_block **block, struct xfs_buf **bpp)
fs/xfs/libxfs/xfs_btree.c:xfs_btree_set_sibling(struct xfs_btree_cur *cur, struct xfs_btree_block *block, const union xfs_btree_ptr *ptr, int lr)
fs/xfs/libxfs/xfs_refcount.c:xfs_refcount_adjust(struct xfs_btree_cur *cur, xfs_agblock_t agbno, xfs_extlen_t aglen, xfs_agblock_t *new_agbno, xfs_extlen_t *new_aglen, enum xfs_refc_adjust_op adj)
fs/xfs/libxfs/xfs_refcount.c:xfs_refcount_adjust_cow(struct xfs_btree_cur *cur, xfs_agblock_t agbno, xfs_extlen_t aglen, enum xfs_refc_adjust_op adj)
fs/xfs/libxfs/xfs_refcount.c:xfs_refcount_adjust_cow_extents(struct xfs_btree_cur *cur, xfs_agblock_t agbno, xfs_extlen_t aglen, enum xfs_refc_adjust_op adj)
fs/xfs/libxfs/xfs_refcount.c:xfs_refcount_adjust_extents(struct xfs_btree_cur *cur, xfs_agblock_t *agbno, xfs_extlen_t *aglen, enum xfs_refc_adjust_op adj)
fs/xfs/libxfs/xfs_refcount.c:xfs_refcount_delete(struct xfs_btree_cur *cur, int *i)
fs/xfs/libxfs/xfs_refcount.c:xfs_refcount_find_left_extents(struct xfs_btree_cur *cur, struct xfs_refcount_irec *left, struct xfs_refcount_irec *cleft, enum xfs_refc_domain domain, xfs_agblock_t agbno, xfs_extlen_t aglen)
fs/xfs/libxfs/xfs_refcount.c:xfs_refcount_find_right_extents(struct xfs_btree_cur *cur, struct xfs_refcount_irec *right, struct xfs_refcount_irec *cright, enum xfs_refc_domain domain, xfs_agblock_t agbno, xfs_extlen_t aglen)
fs/xfs/libxfs/xfs_refcount.c:xfs_refcount_find_shared(struct xfs_btree_cur *cur, xfs_agblock_t agbno, xfs_extlen_t aglen, xfs_agblock_t *fbno, xfs_extlen_t *flen, bool find_end_of_shared)
fs/xfs/libxfs/xfs_refcount.c:xfs_refcount_insert(struct xfs_btree_cur *cur, struct xfs_refcount_irec *irec, int *i)
fs/xfs/libxfs/xfs_refcount.c:xfs_refcount_merge_center_extents(struct xfs_btree_cur *cur, struct xfs_refcount_irec *left, struct xfs_refcount_irec *center, struct xfs_refcount_irec *right, unsigned long long extlen, xfs_extlen_t *aglen)
fs/xfs/libxfs/xfs_refcount.c:xfs_refcount_merge_extents(struct xfs_btree_cur *cur, enum xfs_refc_domain domain, xfs_agblock_t *agbno, xfs_extlen_t *aglen, enum xfs_refc_adjust_op adjust, bool *shape_changed)
fs/xfs/libxfs/xfs_refcount.c:xfs_refcount_merge_left_extent(struct xfs_btree_cur *cur, struct xfs_refcount_irec *left, struct xfs_refcount_irec *cleft, xfs_agblock_t *agbno, xfs_extlen_t *aglen)
fs/xfs/libxfs/xfs_refcount.c:xfs_refcount_merge_right_extent(struct xfs_btree_cur *cur, struct xfs_refcount_irec *right, struct xfs_refcount_irec *cright, xfs_extlen_t *aglen)
fs/xfs/libxfs/xfs_refcount.c:xfs_refcount_recover_cow_leftovers(struct xfs_mount *mp, struct xfs_perag *pag)
fs/xfs/libxfs/xfs_refcount.c:xfs_refcount_split_extent(struct xfs_btree_cur *cur, enum xfs_refc_domain domain, xfs_agblock_t agbno, bool *shape_changed)
init_common()
init_cursor()
fs/xfs/libxfs/xfs_btree.c:xfs_btree_lookup_get_block(struct xfs_btree_cur *cur, /* btree cursor */ int level, /* level in the btree */ const union xfs_btree_ptr *pp, /* ptr to btree block */ struct xfs_btree_block **blkp)
fs/xfs/libxfs/xfs_refcount_btree.c:xfs_refcountbt_alloc_block(struct xfs_btree_cur *cur, const union xfs_btree_ptr *start, union xfs_btree_ptr *new, int *stat)
fs/xfs/libxfs/xfs_refcount_btree.c:xfs_refcountbt_calc_reserves(struct xfs_mount *mp, struct xfs_trans *tp, struct xfs_perag *pag, xfs_extlen_t *ask, xfs_extlen_t *used)
fs/xfs/libxfs/xfs_refcount_btree.c:xfs_refcountbt_commit_staged_btree(struct xfs_btree_cur *cur, struct xfs_trans *tp, struct xfs_buf *agbp)
fs/xfs/libxfs/xfs_refcount_btree.c:xfs_refcountbt_compute_maxlevels(struct xfs_mount *mp)
fs/xfs/libxfs/xfs_refcount_btree.c:xfs_refcountbt_free_block(struct xfs_btree_cur *cur, struct xfs_buf *bp)
fs/xfs/libxfs/xfs_refcount_btree.c:xfs_refcountbt_init_common()
fs/xfs/libxfs/xfs_refcount_btree.c:xfs_refcountbt_init_cur_cache(void)
fs/xfs/libxfs/xfs_refcount_btree.c:xfs_refcountbt_init_cursor()
fs/xfs/libxfs/xfs_refcount_btree.c:xfs_refcountbt_init_high_key_from_rec(union xfs_btree_key *key, const union xfs_btree_rec *rec)
fs/xfs/libxfs/xfs_refcount_btree.c:xfs_refcountbt_init_rec_from_cur(struct xfs_btree_cur *cur, union xfs_btree_rec *rec)
fs/xfs/libxfs/xfs_refcount_btree.c:xfs_refcountbt_max_size(struct xfs_mount *mp, xfs_agblock_t agblocks)
fs/xfs/libxfs/xfs_refcount_btree.c:xfs_refcountbt_read_verify(struct xfs_buf *bp)
fs/xfs/libxfs/xfs_refcount_btree.c:xfs_refcountbt_set_root(struct xfs_btree_cur *cur, const union xfs_btree_ptr *ptr, int inc)
fs/xfs/libxfs/xfs_refcount_btree.c:xfs_refcountbt_verify(struct xfs_buf *bp)
fs/xfs/libxfs/xfs_refcount_btree.c:xfs_refcountbt_write_verify(struct xfs_buf *bp)
xfs_log_recover()
fs/xfs/xfs_log_recover.c:xlog_do_recover(struct xlog *log, xfs_daddr_t head_blk, xfs_daddr_t tail_blk)
fs/xfs/xfs_log_recover.c:xlog_recover_add_to_trans(struct xlog *log, struct xlog_recover *trans, char *dp, int len)
fs/xfs/xfs_log_recover.c:xlog_recover_commit_trans(struct xlog *log, struct xlog_recover *trans, int pass, struct list_head *buffer_list)
fs/xfs/xfs_log_recover.c:xlog_recover_finish(struct xlog *log)
fs/xfs/xfs_log_recover.c:xlog_recover_process(struct xlog *log, struct hlist_head rhash[], struct xlog_rec_header *rhead, char *dp, int pass, struct list_head *buffer_list)
fs/xfs/xfs_log_recover.c:xlog_recover_process_data(struct xlog *log, struct hlist_head rhash[], struct xlog_rec_header *rhead, char *dp, int pass, struct list_head *buffer_list)
fs/xfs/xfs_log_recover.c:xlog_recover_process_ophdr(struct xlog *log, struct hlist_head rhash[], struct xlog_rec_header *rhead, struct xlog_op_header *ohead, char *dp, char *end, int pass, struct list_head *buffer_list)
fs/xfs/xfs_log_recover.c:xlog_recovery_process_trans(struct xlog *log, struct xlog_recover *trans, char *dp, unsigned int len, unsigned int flags, int pass, struct list_head *buffer_list)
fs/xfs/xfs_mount.c:xfs_check_new_dalign(struct xfs_mount *mp, int new_dalign, bool *update_sb)
fs/xfs/xfs_mount.c:xfs_check_sizes(struct xfs_mount *mp)
xfs_mount()
fs/xfs/xfs_mount.c:xfs_mount_setup_inode_geom(struct xfs_mount *mp)
fs/xfs/xfs_mount.c:xfs_mountfs(struct xfs_mount *mp)
fs/xfs/xfs_mount.c:xfs_readsb(struct xfs_mount *mp, int flags)
fs/xfs/xfs_mount.c:xfs_set_low_space_thresholds(struct xfs_mount *mp)
fs/xfs/xfs_mount.c:xfs_update_alignment(struct xfs_mount *mp)
fs/xfs/xfs_mount.c:xfs_validate_new_dalign(struct xfs_mount *mp)
xfs_reflink()
fs/xfs/xfs_reflink.c:xfs_reflink_allocate_cow(struct xfs_inode *ip, struct xfs_bmbt_irec *imap, struct xfs_bmbt_irec *cmap, bool *shared, uint *lockmode, bool convert_now)
fs/xfs/xfs_reflink.c:xfs_reflink_cancel_cow_blocks(struct xfs_inode *ip, struct xfs_trans **tpp, xfs_fileoff_t offset_fsb, xfs_fileoff_t end_fsb, bool cancel_real)
fs/xfs/xfs_reflink.c:xfs_reflink_cancel_cow_range(struct xfs_inode *ip, xfs_off_t offset, xfs_off_t count, bool cancel_real)
fs/xfs/xfs_reflink.c:xfs_reflink_convert_cow_locked(struct xfs_inode *ip, xfs_fileoff_t offset_fsb, xfs_filblks_t count_fsb)
fs/xfs/xfs_reflink.c:xfs_reflink_end_cow(struct xfs_inode *ip, xfs_off_t offset, xfs_off_t count)
fs/xfs/xfs_reflink.c:xfs_reflink_end_cow_extent(struct xfs_inode *ip, xfs_fileoff_t *offset_fsb, xfs_fileoff_t end_fsb)
fs/xfs/xfs_reflink.c:xfs_reflink_fill_cow_hole(struct xfs_inode *ip, struct xfs_bmbt_irec *imap, struct xfs_bmbt_irec *cmap, bool *shared, uint *lockmode, bool convert_now)
fs/xfs/xfs_reflink.c:xfs_reflink_recover_cow(struct xfs_mount *mp)
fs/xfs/libxfs/xfs_btree.h:xfs_btree_alloc_cursor()
fs/xfs/libxfs/xfs_btree.c:xfs_btree_lookup(struct xfs_btree_cur *cur, /* btree cursor */ xfs_lookup_t dir, /* <=, ==, or >= */ int *stat)
fs/xfs/libxfs/xfs_btree.c:xfs_btree_lookup_get_block(struct xfs_btree_cur *cur, /* btree cursor */ int level, /* level in the btree */ const union xfs_btree_ptr *pp, /* ptr to btree block */ struct xfs_btree_block **blkp)
fs/xfs/libxfs/xfs_btree.c:xfs_btree_query_range(struct xfs_btree_cur *cur, const union xfs_btree_irec *low_rec, const union xfs_btree_irec *high_rec, xfs_btree_query_range_fn fn, void *priv)
fs/xfs/libxfs/xfs_btree.c:xfs_btree_simple_query_range(struct xfs_btree_cur *cur, const union xfs_btree_key *low_key, const union xfs_btree_key *high_key, xfs_btree_query_range_fn fn, void *priv)
fs/xfs/libxfs/xfs_refcount.c:xfs_refcount_recover_cow_leftovers(struct xfs_mount *mp, struct xfs_perag *pag)
fs/xfs/xfs_reflink.c:xfs_reflink_recover_cow(struct xfs_mount *mp)
fs/xfs/xfs_log_recover.c:xlog_recover_finish(struct xlog *log)
fs/xfs/xfs_super.c:xfs_fs_fill_super(struct super_block *sb, struct fs_context *fc)
fs/xfs/xfs_super.c:xfs_init_mount_workqueues(struct xfs_mount *mp)
fs/xfs/xfs_super.c:xfs_setup_devices(struct xfs_mount *mp)
mm/slub.c:___slab_alloc()
kmem_cache_alloc()
mm/slub.c:slab_alloc_node()
mm/kasan/report.c:kasan_report(unsigned long addr, size_t size, bool is_write, unsigned long ip)
mm/kasan/report.c:print_address_description(void *addr, u8 tag, struct kasan_report_info *info)
mm/kasan/report.c:print_report(struct kasan_report_info *info)
func for case e58343393efd3e0657ca37cf4466fc38d1f4d4df
drivers/dma-buf/udmabuf.c:begin_cpu_udmabuf(struct dma_buf *buf, enum dma_data_direction direction)
drivers/dma-buf/udmabuf.c:get_sg_table()
put_sg_table()
drivers/dma-buf/udmabuf.c:release_udmabuf(struct dma_buf *buf)
drivers/dma-buf/udmabuf.c:udmabuf_create(struct miscdevice *device, struct udmabuf_create_list *head, struct udmabuf_create_item *list)
drivers/dma-buf/udmabuf.c:udmabuf_dev_init(void)
drivers/dma-buf/udmabuf.c:udmabuf_ioctl_create(struct file *filp, unsigned long arg)
drivers/dma-buf/udmabuf.c:udmabuf_ioctl_create_list(struct file *filp, unsigned long arg)
drivers/dma-buf/udmabuf.c:udmabuf_vm_fault(struct vm_fault *vmf)
drivers/dma-buf/dma-buf.c:__dma_buf_begin_cpu_access(struct dma_buf *dmabuf, enum dma_data_direction direction)
drivers/dma-buf/dma-buf.c:__map_dma_buf()
drivers/dma-buf/dma-buf.c:dma_buf_begin_cpu_access(struct dma_buf *dmabuf, enum dma_data_direction direction)
drivers/dma-buf/dma-buf.c:dma_buf_detach(struct dma_buf *dmabuf, struct dma_buf_attachment *attach)
drivers/dma-buf/dma-buf.c:dma_buf_export()
drivers/dma-buf/dma-buf.c:dma_buf_get()
drivers/dma-buf/dma-buf.c:dma_buf_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
drivers/dma-buf/dma-buf.c:dma_buf_map_attachment()
drivers/dma-buf/dma-buf.c:dma_buf_mmap(struct dma_buf *dmabuf, struct vm_area_struct *vma, unsigned long pgoff)
drivers/dma-buf/dma-buf.c:dma_buf_move_notify(struct dma_buf *dmabuf)
drivers/dma-buf/dma-buf.c:dma_buf_release(struct dentry *dentry)
drivers/dma-buf/dma-buf.c:dma_buf_unmap_attachment(struct dma_buf_attachment *attach, struct sg_table *sg_table, enum dma_data_direction direction)
drivers/dma-buf/dma-buf.c:dma_buf_vmap(struct dma_buf *dmabuf, struct iosys_map *map)
drivers/dma-buf/dma-buf.c:dma_buf_vunmap(struct dma_buf *dmabuf, struct iosys_map *map)
drivers/dma-buf/dma-buf.c:mangle_sg_table(struct sg_table *sg_table)
dma_buf_attach()
drivers/dma-buf/dma-buf.c:dma_buf_begin_cpu_access(struct dma_buf *dmabuf, enum dma_data_direction direction)
drivers/dma-buf/dma-buf.c:dma_buf_detach(struct dma_buf *dmabuf, struct dma_buf_attachment *attach)
drivers/dma-buf/dma-buf.c:dma_buf_end_cpu_access(struct dma_buf *dmabuf, enum dma_data_direction direction)
drivers/dma-buf/dma-buf.c:dma_buf_export()
drivers/dma-buf/dma-buf.c:dma_buf_fd(struct dma_buf *dmabuf, int flags)
drivers/dma-buf/dma-buf.c:dma_buf_map_attachment()
drivers/dma-buf/dma-buf.c:dma_buf_mmap(struct dma_buf *dmabuf, struct vm_area_struct *vma, unsigned long pgoff)
drivers/dma-buf/dma-buf.c:dma_buf_release(struct dentry *dentry)
drivers/dma-buf/dma-buf.c:dma_buf_unmap_attachment(struct dma_buf_attachment *attach, struct sg_table *sg_table, enum dma_data_direction direction)
drivers/dma-buf/dma-buf.c:dma_buf_vmap(struct dma_buf *dmabuf, struct iosys_map *map)
drivers/dma-buf/dma-buf.c:dma_buf_vunmap(struct dma_buf *dmabuf, struct iosys_map *map)
dma_unmap_sgtable()
put_sg_table()
drivers/dma-buf/udmabuf.c:release_udmabuf(struct dma_buf *buf)
drivers/dma-buf/dma-resv.c:dma_resv_add_fence(struct dma_resv *obj, struct dma_fence *fence, enum dma_resv_usage usage)
drivers/dma-buf/dma-resv.c:dma_resv_copy_fences(struct dma_resv *dst, struct dma_resv *src)
drivers/dma-buf/dma-resv.c:dma_resv_fini(struct dma_resv *obj)
drivers/dma-buf/dma-resv.c:dma_resv_get_fences(struct dma_resv *obj, enum dma_resv_usage usage, unsigned int *num_fences, struct dma_fence ***fences)
drivers/dma-buf/dma-resv.c:dma_resv_list_entry(struct dma_resv_list *list, unsigned int index, struct dma_resv *resv, struct dma_fence **fence, enum dma_resv_usage *usage)
drivers/dma-buf/dma-resv.c:dma_resv_list_free(struct dma_resv_list *list)
drivers/dma-buf/dma-resv.c:dma_resv_replace_fences(struct dma_resv *obj, uint64_t context, struct dma_fence *replacement, enum dma_resv_usage usage)
drivers/dma-buf/dma-resv.c:dma_resv_reserve_fences(struct dma_resv *obj, unsigned int num_fences)
include/linux/dma-mapping.h:dma_alloc_wc()
include/linux/dma-mapping.h:dma_map_single_attrs(struct device *dev, void *ptr, size_t size, enum dma_data_direction dir, unsigned long attrs)
include/linux/dma-mapping.h:dma_mapping_error(struct device *dev, dma_addr_t dma_addr)
include/linux/dma-mapping.h:dma_set_mask_and_coherent(struct device *dev, u64 mask)
include/linux/dma-mapping.h:dma_set_min_align_mask(struct device *dev, unsigned int min_align_mask)
include/linux/dma-mapping.h:dma_set_seg_boundary(struct device *dev, unsigned long mask)
dma_unmap_sgtable()
fs/file_table.c:__alloc_file()
fs/file_table.c:__fput(struct file *file)
fs/file_table.c:alloc_empty_file()
fs/file_table.c:alloc_empty_file_noaccount()
fs/file_table.c:alloc_file()
fs/file_table.c:alloc_file_clone()
fs/file_table.c:alloc_file_pseudo()
fs/file_table.c:file_free_rcu(struct rcu_head *head)
fs/open.c:build_open_flags(const struct open_how *how, struct open_flags *op)
fs/open.c:dentry_open()
fs/open.c:do_dentry_open(struct file *f, struct inode *inode, int (*open)(struct inode *, struct file *))
fs/open.c:do_sys_openat2(int dfd, const char __user *filename, struct open_how *how)
fs/open.c:filp_close(struct file *filp, fl_owner_t id)
fs/open.c:filp_open()
fs/open.c:finish_open(struct file *file, struct dentry *dentry, int (*open)(struct inode *, struct file *))
fs/open.c:open_with_fake_path()
mm/mmap.c:do_mmap(struct file *file, unsigned long addr, unsigned long len, unsigned long prot, unsigned long flags, unsigned long pgoff, unsigned long *populate, struct list_head *uf)
mm/mmap.c:mmap_region(struct file *file, unsigned long addr, unsigned long len, vm_flags_t vm_flags, unsigned long pgoff, struct list_head *uf)
mm/mmap.c:vm_brk_flags(unsigned long addr, unsigned long request, unsigned long flags)
fs/fcntl.c:do_fcntl(int fd, unsigned int cmd, unsigned long arg, struct file *filp)
fs/fcntl.c:f_setown(struct file *filp, unsigned long arg, int force)
fs/fcntl.c:fcntl_rw_hint(struct file *file, unsigned int cmd, unsigned long arg)
func for case e6028c53b349b6a97a83fe01a2013ac52db59710
net/9p/trans_fd.c:p9_conn_cancel(struct p9_conn *m, int err)
net/9p/trans_fd.c:p9_conn_create(struct p9_client *client)
net/9p/trans_fd.c:p9_conn_destroy(struct p9_conn *m)
net/9p/trans_fd.c:p9_fd_close(struct p9_client *client)
net/9p/trans_fd.c:p9_fd_create(struct p9_client *client, const char *addr, char *args)
net/9p/trans_fd.c:p9_fd_open(struct p9_client *client, int rfd, int wfd)
net/9p/trans_fd.c:p9_fd_poll(struct p9_client *client, struct poll_table_struct *pt, int *err)
net/9p/trans_fd.c:p9_fd_read(struct p9_client *client, void *v, int len)
net/9p/trans_fd.c:p9_fd_request(struct p9_client *client, struct p9_req_t *req)
net/9p/trans_fd.c:p9_fd_write(struct p9_client *client, void *v, int len)
net/9p/trans_fd.c:p9_mux_poll_stop(struct p9_conn *m)
net/9p/trans_fd.c:p9_poll_mux(struct p9_conn *m)
net/9p/trans_fd.c:p9_read_work(struct work_struct *work)
net/9p/trans_fd.c:p9_socket_open(struct p9_client *client, struct socket *csocket)
net/9p/trans_fd.c:p9_write_work(struct work_struct *work)
trans_fd()
fs/read_write.c:__kernel_read(struct file *file, void *buf, size_t count, loff_t *pos)
fs/read_write.c:compat_readv(struct file *file, const struct compat_iovec __user *vec, unsigned long vlen, loff_t *pos, rwf_t flags)
fs/read_write.c:compat_rw_copy_check_uvector(int type, const struct compat_iovec __user *uvector, unsigned long nr_segs, unsigned long fast_segs, struct iovec *fast_pointer, struct iovec **ret_pointer)
fs/read_write.c:do_compat_preadv64(unsigned long fd, const struct compat_iovec __user *vec, unsigned long vlen, loff_t pos, rwf_t flags)
fs/read_write.c:do_iter_read(struct file *file, struct iov_iter *iter, loff_t *pos, rwf_t flags)
fs/read_write.c:do_iter_readv_writev(struct file *filp, struct iov_iter *iter, loff_t *ppos, int type, rwf_t flags)
fs/read_write.c:do_preadv(unsigned long fd, const struct iovec __user *vec, unsigned long vlen, loff_t pos, rwf_t flags)
fs/read_write.c:do_readv(unsigned long fd, const struct iovec __user *vec, unsigned long vlen, rwf_t flags)
fs/read_write.c:ksys_read(unsigned int fd, char __user *buf, size_t count)
fs/read_write.c:new_sync_read(struct file *filp, char __user *buf, size_t len, loff_t *ppos)
fs/read_write.c:rw_copy_check_uvector(int type, const struct iovec __user * uvector, unsigned long nr_segs, unsigned long fast_segs, struct iovec *fast_pointer, struct iovec **ret_pointer)
fs/read_write.c:rw_verify_area(int read_write, struct file *file, const loff_t *ppos, size_t count)
fs/read_write.c:vfs_iocb_iter_read(struct file *file, struct kiocb *iocb, struct iov_iter *iter)
fs/read_write.c:vfs_read(struct file *file, char __user *buf, size_t count, loff_t *pos)
fs/read_write.c:vfs_readv(struct file *file, const struct iovec __user *vec, unsigned long vlen, loff_t *pos, rwf_t flags)
fs/read_write.c:__kernel_read(struct file *file, void *buf, size_t count, loff_t *pos)
net/9p/trans_fd.c:p9_read_work(struct work_struct *work)
fs/9p/vfs_file.c:v9fs_file_do_lock(struct file *filp, int cmd, struct file_lock *fl)
fs/9p/vfs_file.c:v9fs_file_flock_dotl(struct file *filp, int cmd, struct file_lock *fl)
fs/9p/vfs_file.c:v9fs_file_fsync(struct file *filp, loff_t start, loff_t end, int datasync)
fs/9p/vfs_file.c:v9fs_file_getlock(struct file *filp, struct file_lock *fl)
fs/9p/vfs_file.c:v9fs_file_lock(struct file *filp, int cmd, struct file_lock *fl)
fs/9p/vfs_file.c:v9fs_file_lock_dotl(struct file *filp, int cmd, struct file_lock *fl)
fs/9p/vfs_file.c:v9fs_file_open(struct inode *inode, struct file *file)
fs/9p/vfs_file.c:v9fs_file_read_iter(struct kiocb *iocb, struct iov_iter *to)
fs/9p/vfs_file.c:v9fs_file_write_iter(struct kiocb *iocb, struct iov_iter *from)
fs/9p/vfs_file.c:v9fs_mmap_vm_close(struct vm_area_struct *vma)
fs/9p/vfs_file.c:v9fs_vm_page_mkwrite(struct vm_fault *vmf)
fs/9p/fid.c:build_path_from_dentry(struct v9fs_session_info *v9ses, struct dentry *dentry, const unsigned char ***names)
v9fs_fid_add()
fs/9p/fid.c:v9fs_fid_find()
v9fs_fid_find_inode()
fs/9p/fid.c:v9fs_fid_lookup_with_uid()
v9fs_is_writeable()
v9fs_open_fid_add()
fs/open.c:build_open_flags(const struct open_how *how, struct open_flags *op)
fs/open.c:dentry_open()
fs/open.c:do_dentry_open(struct file *f, struct inode *inode, int (*open)(struct inode *, struct file *))
fs/open.c:do_faccessat(int dfd, const char __user *filename, int mode, int flags)
fs/open.c:do_sys_openat2(int dfd, const char __user *filename, struct open_how *how)
fs/open.c:do_truncate(struct dentry *dentry, loff_t length, unsigned int time_attrs, struct file *filp)
fs/open.c:filp_open()
fs/open.c:vfs_fallocate(struct file *file, int mode, loff_t offset, loff_t len)
kernel/workqueue.c:__queue_work(int cpu, struct workqueue_struct *wq, struct work_struct *work)
kernel/workqueue.c:insert_work(struct pool_workqueue *pwq, struct work_struct *work, struct list_head *head, unsigned int extra_flags)
kernel/workqueue.c:manage_workers(struct worker *worker)
panic_on_warn()
process_one_work()
kernel/workqueue.c:process_scheduled_works(struct worker *worker)
pwq_activate_first_inactive()
kernel/workqueue.c:worker_set_flags(struct worker *worker, unsigned int flags)
kernel/workqueue.c:worker_thread(void *__worker)
fs/9p/vfs_inode.c:v9fs_alloc_inode()
fs/9p/vfs_inode.c:v9fs_get_inode()
fs/9p/vfs_inode.c:v9fs_init_inode(struct v9fs_session_info *v9ses, struct inode *inode, umode_t mode, dev_t rdev)
fs/9p/vfs_inode.c:v9fs_qid_iget()
fs/9p/vfs_inode.c:v9fs_refresh_inode(struct p9_fid *fid, struct inode *inode)
fs/9p/vfs_inode.c:v9fs_stat2inode(struct p9_wstat *stat, struct inode *inode, struct super_block *sb, unsigned int flags)
fs/9p/vfs_inode.c:v9fs_vfs_atomic_open(struct inode *dir, struct dentry *dentry, struct file *file, unsigned flags, umode_t mode)
fs/9p/vfs_inode.c:v9fs_vfs_getattr(const struct path *path, struct kstat *stat, u32 request_mask, unsigned int flags)
vfs_inode()
drivers/tty/tty_io.c:tty_open(struct inode *inode, struct file *filp)
drivers/tty/tty_io.c:tty_read(struct file *file, char __user *buf, size_t count, loff_t *ppos)
drivers/tty/tty_io.c:tty_release(struct inode *inode, struct file *filp)
fs/read_write.c:__kernel_read(struct file *file, void *buf, size_t count, loff_t *pos)
drop_inode()
fs/9p/vfs_super.c:v9fs_fill_super(struct super_block *sb, struct v9fs_session_info *v9ses, int flags)
fs/9p/vfs_super.c:v9fs_mount()
fs/9p/vfs_super.c:v9fs_statfs(struct dentry *dentry, struct kstatfs *buf)
write_inode()
fs/read_write.c:__kernel_read(struct file *file, void *buf, size_t count, loff_t *pos)
fs/namei.c:do_filp_open()
fs/namei.c:filename_create()
net/9p/trans_fd.c:p9_read_work(struct work_struct *work)
fs/namei.c:path_openat()
func for case e9d3ca982b76224e183481018baa693a26655ac4
mm/page_alloc.c:__alloc_pages()
fs/ext4/inline.c:ext4_add_dirent_to_inline(handle_t *handle, struct ext4_filename *fname, struct inode *dir, struct inode *inode, struct ext4_iloc *iloc, void *inline_start, int inline_size)
fs/ext4/inline.c:ext4_convert_inline_data(struct inode *inode)
fs/ext4/inline.c:ext4_convert_inline_data_nolock(handle_t *handle, struct inode *inode, struct ext4_iloc *iloc)
fs/ext4/inline.c:ext4_create_inline_data(handle_t *handle, struct inode *inode, unsigned len)
fs/ext4/inline.c:ext4_da_convert_inline_data_to_extent(struct address_space *mapping, struct inode *inode, void **fsdata)
fs/ext4/inline.c:ext4_da_write_inline_data_begin(struct address_space *mapping, struct inode *inode, loff_t pos, unsigned len, struct page **pagep, void **fsdata)
fs/ext4/inline.c:ext4_destroy_inline_data_nolock(handle_t *handle, struct inode *inode)
fs/ext4/inline.c:ext4_finish_convert_inline_dir(handle_t *handle, struct inode *inode, struct buffer_head *dir_block, void *buf, int inline_size)
fs/ext4/inline.c:ext4_inline_data_truncate(struct inode *inode, int *has_inline)
fs/ext4/inline.c:ext4_prepare_inline_data(handle_t *handle, struct inode *inode, unsigned int len)
fs/ext4/inline.c:ext4_read_inline_data(struct inode *inode, void *buffer, unsigned int len, struct ext4_iloc *iloc)
fs/ext4/inline.c:ext4_try_add_inline_entry(handle_t *handle, struct ext4_filename *fname, struct inode *dir, struct inode *inode)
fs/ext4/inline.c:ext4_update_inline_data(handle_t *handle, struct inode *inode, unsigned int len)
fs/ext4/inline.c:ext4_update_inline_dir(handle_t *handle, struct inode *dir, struct ext4_iloc *iloc)
fs/ext4/inline.c:ext4_write_inline_data(struct inode *inode, struct ext4_iloc *iloc, void *buffer, loff_t pos, unsigned int len)
mm/page_alloc.c:__alloc_pages()
fs/ext4/namei.c:add_dirent_to_buf(handle_t *handle, struct ext4_filename *fname, struct inode *dir, struct inode *inode, struct ext4_dir_entry_2 *de, struct buffer_head *bh)
fs/ext4/namei.c:ext4_add_entry(handle_t *handle, struct dentry *dentry, struct inode *inode)
fs/ext4/namei.c:ext4_add_nondir(handle_t *handle, struct dentry *dentry, struct inode **inodep)
fs/ext4/namei.c:ext4_create(struct user_namespace *mnt_userns, struct inode *dir, struct dentry *dentry, umode_t mode, bool excl)
fs/ext4/namei.c:ext4_delete_entry(handle_t *handle, struct inode *dir, struct ext4_dir_entry_2 *de_del, struct buffer_head *bh)
fs/ext4/namei.c:ext4_dx_add_entry(handle_t *handle, struct ext4_filename *fname, struct inode *dir, struct inode *inode)
fs/ext4/namei.c:ext4_find_dest_de(struct inode *dir, struct inode *inode, struct buffer_head *bh, void *buf, int buf_size, struct ext4_filename *fname, struct ext4_dir_entry_2 **dest_de)
fs/ext4/namei.c:ext4_generic_delete_entry(struct inode *dir, struct ext4_dir_entry_2 *de_del, struct buffer_head *bh, void *entry_buf, int buf_size, int csum_size)
fs/ext4/namei.c:ext4_init_new_dir(handle_t *handle, struct inode *dir, struct inode *inode)
fs/ext4/namei.c:ext4_insert_dentry(struct inode *dir, struct inode *inode, struct ext4_dir_entry_2 *de, int buf_size, struct ext4_filename *fname)
fs/ext4/namei.c:ext4_mkdir(struct user_namespace *mnt_userns, struct inode *dir, struct dentry *dentry, umode_t mode)
fs/ext4/inline.c:ext4_try_add_inline_entry(handle_t *handle, struct ext4_filename *fname, struct inode *dir, struct inode *inode)
fs/ext4/inline.c:ext4_update_inline_data(handle_t *handle, struct inode *inode, unsigned int len)
fs/ext4/inline.c:ext4_update_inline_dir(handle_t *handle, struct inode *dir, struct ext4_iloc *iloc)
fs/ext4/namei.c:make_indexed_dir(handle_t *handle, struct ext4_filename *fname, struct inode *dir, struct inode *inode, struct buffer_head *bh)
mm/page_alloc.c:__alloc_pages()
__alloc_pages_nodemask()
mm/page_alloc.c:__alloc_pages_slowpath()
mm/page_alloc.c:__free_one_page(struct page *page, unsigned long pfn, struct zone *zone, unsigned int order, int migratetype, fpi_t fpi_flags)
mm/page_alloc.c:__rmqueue()
mm/page_alloc.c:__rmqueue_fallback(struct zone *zone, int order, int start_migratetype, unsigned int alloc_flags)
mm/page_alloc.c:__rmqueue_pcplist()
mm/page_alloc.c:__zone_watermark_ok(struct zone *z, unsigned int order, unsigned long mark, int highest_zoneidx, unsigned int alloc_flags, long free_pages)
mm/page_alloc.c:check_new_page_bad(struct page *page)
mm/page_alloc.c:free_pages_prepare(struct page *page, unsigned int order, bool check_free, fpi_t fpi_flags)
mm/page_alloc.c:get_page_from_freelist()
mm/page_alloc.c:post_alloc_hook(struct page *page, unsigned int order, gfp_t gfp_flags)
mm/page_alloc.c:prep_new_page(struct page *page, unsigned int order, gfp_t gfp_flags, unsigned int alloc_flags)
mm/page_alloc.c:rmqueue_pcplist()
mm/page_alloc.c:zone_watermark_fast(struct zone *z, unsigned int order, unsigned long mark, int highest_zoneidx, unsigned int alloc_flags, gfp_t gfp_mask)
mm/page_alloc.c:zone_watermark_ok_safe(struct zone *z, unsigned int order, unsigned long mark, int highest_zoneidx)
fs/ext4/super.c:ext4_commit_super(struct super_block *sb)
fs/ext4/super.c:ext4_fill_super(struct super_block *sb, struct fs_context *fc)
fs/ext4/super.c:ext4_load_journal(struct super_block *sb, struct ext4_super_block *es, unsigned long journal_devnum)
ext4_remount()
ext4_set_test_dummy_encryption()
fs/ext4/super.c:ext4_setup_super(struct super_block *sb, struct ext4_super_block *es, int read_only)
handle_mount_opt()
fs/ext4/super.c:parse_options(struct fs_context *fc, char *options)
fs/ext4/inode.c:__ext4_expand_extra_isize(struct inode *inode, unsigned int new_extra_isize, struct ext4_iloc *iloc, handle_t *handle, int *no_expand)
debug_want_extra_isize()
fs/ext4/inode.c:ext4_do_update_inode(handle_t *handle, struct inode *inode, struct ext4_iloc *iloc)
fs/ext4/inode.c:ext4_expand_extra_isize(struct inode *inode, unsigned int new_extra_isize, struct ext4_iloc *iloc)
fs/ext4/inode.c:ext4_iget_extra_inode(struct inode *inode, struct ext4_inode *raw_inode, struct ext4_inode_info *ei)
fs/ext4/inode.c:ext4_setattr(struct user_namespace *mnt_userns, struct dentry *dentry, struct iattr *attr)
fs/ext4/inode.c:ext4_try_to_expand_extra_isize(struct inode *inode, unsigned int new_extra_isize, struct ext4_iloc iloc, handle_t *handle)
fs/ext4/inline.c:ext4_update_inline_data(handle_t *handle, struct inode *inode, unsigned int len)
fs/ext4/inode.c:ext4_write_inode(struct inode *inode, struct writeback_control *wbc)
extra_isize()
mm/page_alloc.c:__alloc_pages()
include/linux/gfp.h:__alloc_pages_node()
mm/slab_common.c:__kmalloc_large_node()
mm/slab_common.c:calculate_alignment(slab_flags_t flags, unsigned int align, unsigned int size)
mm/slab_common.c:create_cache()
mm/slab_common.c:create_kmalloc_caches(slab_flags_t flags)
kmalloc_order()
mm/slab_common.c:kmem_cache_create_usercopy()
mm/slab_common.c:new_kmalloc_cache(int idx, enum kmalloc_cache_type type, slab_flags_t flags)
slab_common()
mm/page_alloc.c:__alloc_pages()
fs/namei.c:do_filp_open()
fs/namei.c:filename_create()
fs/namei.c:lookup_open()
fs/namei.c:may_open(struct user_namespace *mnt_userns, const struct path *path, int acc_mode, int flag)
fs/namei.c:open_last_lookups()
fs/namei.c:path_openat()
fs/namei.c:vfs_create(struct user_namespace *mnt_userns, struct inode *dir, struct dentry *dentry, umode_t mode, bool want_excl)
fs/namei.c:vfs_mkdir(struct user_namespace *mnt_userns, struct inode *dir, struct dentry *dentry, umode_t mode)
mm/page_alloc.c:__alloc_pages()
include/linux/gfp.h:__alloc_pages_node()
include/linux/gfp.h:alloc_pages_node()
include/linux/gfp.h:gfp_zone(gfp_t flags)
gfpflags_to_migratetype()
fs/ext4/xattr.c:ext4_expand_extra_isize_ea(struct inode *inode, int new_extra_isize, struct ext4_inode *raw_inode, handle_t *handle)
fs/ext4/xattr.c:ext4_xattr_block_set(handle_t *handle, struct inode *inode, struct ext4_xattr_info *i, struct ext4_xattr_block_find *bs)
fs/ext4/xattr.c:ext4_xattr_set_handle(handle_t *handle, struct inode *inode, int name_index, const char *name, const void *value, size_t value_len, int flags)
fs/ext4/extents.c:ext4_ext_convert_to_initialized(handle_t *handle, struct inode *inode, struct ext4_map_blocks *map, struct ext4_ext_path **ppath, int flags)
fs/ext4/extents.c:ext4_ext_handle_unwritten_extents(handle_t *handle, struct inode *inode, struct ext4_map_blocks *map, struct ext4_ext_path **ppath, int flags, unsigned int allocated, ext4_fsblk_t newblock)
fs/ext4/extents.c:ext4_ext_map_blocks(handle_t *handle, struct inode *inode, struct ext4_map_blocks *map, int flags)
func for case ee107e687b29b99d101ba328f28abfad4e58a91a
block/bsg.c:bsg_init(void)
block/bsg.c:bsg_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
block/bsg.c:bsg_register_queue()
block/bsg.c:bsg_sg_io(struct bsg_device *bd, fmode_t mode, void __user *uarg)
block/bsg.c:bsg_unregister_queue(struct bsg_device *bd)
drivers/scsi/scsi_sysfs.c:__scsi_remove_device(struct scsi_device *sdev)
drivers/scsi/scsi_sysfs.c:__scsi_remove_target(struct scsi_target *starget)
drivers/scsi/scsi_sysfs.c:scsi_access_state_name()
drivers/scsi/scsi_sysfs.c:scsi_bus_match(struct device *dev, struct device_driver *gendrv)
drivers/scsi/scsi_sysfs.c:scsi_bus_uevent(struct device *dev, struct kobj_uevent_env *env)
drivers/scsi/scsi_sysfs.c:scsi_device_dev_release_usercontext(struct work_struct *work)
drivers/scsi/scsi_sysfs.c:scsi_device_state_name()
drivers/scsi/scsi_sysfs.c:scsi_host_state_name()
drivers/scsi/scsi_sysfs.c:scsi_remove_target(struct device *dev)
scsi_sysfs()
drivers/scsi/scsi_sysfs.c:scsi_sysfs_add_host(struct Scsi_Host *shost)
drivers/scsi/scsi_sysfs.c:scsi_sysfs_add_sdev(struct scsi_device *sdev)
drivers/scsi/scsi_sysfs.c:scsi_sysfs_device_initialize(struct scsi_device *sdev)
drivers/scsi/scsi_sysfs.c:scsi_target_add(struct scsi_target *starget)
drivers/scsi/scsi_sysfs.c:store_host_reset(struct device *dev, struct device_attribute *attr, const char *buf, size_t count)
drivers/scsi/scsi_sysfs.c:store_shost_state(struct device *dev, struct device_attribute *attr, const char *buf, size_t count)
drivers/scsi/scsi_scan.c:__scsi_scan_target(struct device *parent, unsigned int channel, unsigned int id, u64 lun, enum scsi_scan_mode rescan)
drivers/scsi/scsi_scan.c:scsi_add_lun(struct scsi_device *sdev, unsigned char *inq_result, blist_flags_t *bflags, int async)
drivers/scsi/scsi_scan.c:scsi_alloc_sdev()
drivers/scsi/scsi_scan.c:scsi_alloc_target()
drivers/scsi/scsi_scan.c:scsi_finish_async_scan(struct async_scan_data *data)
drivers/scsi/scsi_scan.c:scsi_probe_and_add_lun(struct scsi_target *starget, u64 lun, blist_flags_t *bflagsp, struct scsi_device **sdevp, enum scsi_scan_mode rescan, void *hostdata)
drivers/scsi/scsi_scan.c:scsi_probe_lun(struct scsi_device *sdev, unsigned char *inq_result, int result_len, blist_flags_t *bflags)
drivers/scsi/scsi_scan.c:scsi_report_lun_scan(struct scsi_target *starget, blist_flags_t bflags, enum scsi_scan_mode rescan)
drivers/scsi/scsi_sysfs.c:scsi_scan(struct Scsi_Host *shost, const char *str)
drivers/scsi/scsi_scan.c:scsi_scan_host(struct Scsi_Host *shost)
drivers/scsi/scsi_scan.c:scsi_scan_host_selected(struct Scsi_Host *shost, unsigned int channel, unsigned int id, u64 lun, enum scsi_scan_mode rescan)
drivers/scsi/scsi_scan.c:scsi_scan_target(struct device *parent, unsigned int channel, unsigned int id, u64 lun, enum scsi_scan_mode rescan)
drivers/scsi/scsi_scan.c:scsi_sequential_lun_scan(struct scsi_target *starget, blist_flags_t bflags, int scsi_level, enum scsi_scan_mode rescan)
drivers/scsi/scsi_scan.c:scsi_sysfs_add_devices(struct Scsi_Host *shost)
drivers/scsi/scsi_scan.c:scsi_target_destroy(struct scsi_target *starget)
drivers/scsi/scsi_scan.c:scsi_unlock_floptical(struct scsi_device *sdev, unsigned char *result)
drivers/base/core.c:device_add(struct device *dev)
drivers/base/core.c:device_create_sys_dev_entry(struct device *dev)
drivers/base/core.c:device_del(struct device *dev)
drivers/base/core.c:device_initialize(struct device *dev)
drivers/base/core.c:device_private_init(struct device *dev)
drivers/base/core.c:device_release(struct kobject *kobj)
drivers/base/core.c:device_remove_sys_dev_entry(struct device *dev)
drivers/base/core.c:kill_device(struct device *dev)
__register_chrdev()
cdev_add()
cdev_alloc()
cdev_device_add()
cdev_init()
cdev_purge()
cdev_put()
char_dev()
chrdev_open()
kobject_add()
kobject_cleanup()
kobject_del()
kobject_init()
kobject_init_and_add()
kobject_put()
kobject_release()
kobject_set_name_vargs()
mm/util.c:kmemdup_nul()
mm/util.c:kstrdup_const()
mm/util.c:kvfree_sensitive(const void *addr, size_t len)
mm/util.c:memdup_user()
mm/util.c:memdup_user_nul()
mm/util.c:strndup_user()
mm/util.c:vmemdup_user()
kvasprintf_const()
create_worker()
process_scheduled_works()
worker_thread()
async_run_entry_fn()
func for case f1b41b503f18f268d11e52f80deffcd0c62e0865
net/mac80211/sta_info.c:__sta_info_destroy_part1(struct sta_info *sta)
net/mac80211/sta_info.c:__sta_info_destroy_part2(struct sta_info *sta)
net/mac80211/sta_info.c:ieee80211_find_sta()
net/mac80211/sta_info.c:ieee80211_find_sta_by_ifaddr()
sta_info()
net/mac80211/sta_info.c:sta_info_alloc()
net/mac80211/sta_info.c:sta_info_cleanup(struct timer_list *t)
net/mac80211/sta_info.c:sta_info_destroy_addr_bss(struct ieee80211_sub_if_data *sdata, const u8 *addr)
net/mac80211/sta_info.c:sta_info_free(struct ieee80211_local *local, struct sta_info *sta)
net/mac80211/sta_info.c:sta_info_get_bss()
net/mac80211/sta_info.c:sta_info_get_by_idx()
net/mac80211/sta_info.c:sta_info_init(struct ieee80211_local *local)
net/mac80211/sta_info.c:sta_info_insert_check(struct sta_info *sta)
sta_info_insert_rcu()
net/mac80211/sta_info.c:sta_info_move_state(struct sta_info *sta, enum ieee80211_sta_state new_state)
net/mac80211/sta_info.c:sta_prepare_rate_control(struct ieee80211_local *local, struct sta_info *sta, gfp_t gfp)
net/mac80211/ibss.c:__ieee80211_sta_join_ibss(struct ieee80211_sub_if_data *sdata, const u8 *bssid, const int beacon_int, struct cfg80211_chan_def *req_chandef, const u32 basic_rates, const u16 capability, u64 tsf, bool creator)
net/mac80211/ibss.c:ieee80211_ibss_build_presp()
net/mac80211/ibss.c:ieee80211_ibss_csa_beacon(struct ieee80211_sub_if_data *sdata, struct cfg80211_csa_settings *csa_settings)
net/mac80211/ibss.c:ieee80211_ibss_disconnect(struct ieee80211_sub_if_data *sdata)
net/mac80211/ibss.c:ieee80211_ibss_finish_csa(struct ieee80211_sub_if_data *sdata)
ieee80211_ibss_finish_sta()
net/mac80211/ibss.c:ieee80211_ibss_join(struct ieee80211_sub_if_data *sdata, struct cfg80211_ibss_params *params)
net/mac80211/ibss.c:ieee80211_ibss_leave(struct ieee80211_sub_if_data *sdata)
net/mac80211/ibss.c:ieee80211_ibss_process_chanswitch(struct ieee80211_sub_if_data *sdata, struct ieee802_11_elems *elems, bool beacon)
net/mac80211/ibss.c:ieee80211_ibss_rx_no_sta(struct ieee80211_sub_if_data *sdata, const u8 *bssid, const u8 *addr, u32 supp_rates)
net/mac80211/ibss.c:ieee80211_ibss_work(struct ieee80211_sub_if_data *sdata)
net/mac80211/ibss.c:ieee80211_rx_bss_info(struct ieee80211_sub_if_data *sdata, struct ieee80211_mgmt *mgmt, size_t len, struct ieee80211_rx_status *rx_status, struct ieee802_11_elems *elems)
net/mac80211/ibss.c:ieee80211_sta_create_ibss(struct ieee80211_sub_if_data *sdata)
net/mac80211/ibss.c:ieee80211_sta_join_ibss(struct ieee80211_sub_if_data *sdata, struct ieee80211_bss *bss)
net/mac80211/ibss.c:ieee80211_update_sta_info(struct ieee80211_sub_if_data *sdata, struct ieee80211_mgmt *mgmt, size_t len, struct ieee80211_rx_status *rx_status, struct ieee802_11_elems *elems, struct ieee80211_channel *channel)
sta_info_insert_rcu()
net/mac80211/iface.c:ieee80211_change_mac(struct net_device *dev, void *addr)
net/mac80211/iface.c:ieee80211_check_concurrent_iface(struct ieee80211_sub_if_data *sdata, enum nl80211_iftype iftype)
net/mac80211/iface.c:ieee80211_do_open(struct wireless_dev *wdev, bool coming_up)
net/mac80211/iface.c:ieee80211_do_stop(struct ieee80211_sub_if_data *sdata, bool going_down)
net/mac80211/iface.c:ieee80211_if_add(struct ieee80211_local *local, const char *name, unsigned char name_assign_type, struct wireless_dev **new_wdev, enum nl80211_iftype type, struct vif_params *params)
net/mac80211/iface.c:ieee80211_if_remove(struct ieee80211_sub_if_data *sdata)
ieee80211_iface_process_skb()
ieee80211_iface_process_status()
net/mac80211/iface.c:ieee80211_iface_work(struct work_struct *work)
net/mac80211/iface.c:ieee80211_set_multicast_list(struct net_device *dev)
ieee80211_set_sdata_offload_flags()
ieee80211_set_vif_encap_ops()
net/mac80211/iface.c:ieee80211_setup_sdata(struct ieee80211_sub_if_data *sdata, enum nl80211_iftype type)
net/mac80211/iface.c:ieee80211_teardown_sdata(struct ieee80211_sub_if_data *sdata)
net/mac80211/iface.c:ieee80211_verify_mac(struct ieee80211_sub_if_data *sdata, u8 *addr, bool check_dup)
net/mac80211/mlme.c:ieee80211_assoc_success(struct ieee80211_sub_if_data *sdata, struct cfg80211_bss *cbss, struct ieee80211_mgmt *mgmt, size_t len, struct ieee802_11_elems *elems)
net/mac80211/mlme.c:ieee80211_do_assoc(struct ieee80211_sub_if_data *sdata)
net/mac80211/mlme.c:ieee80211_mgd_assoc(struct ieee80211_sub_if_data *sdata, struct cfg80211_assoc_request *req)
net/mac80211/mlme.c:ieee80211_mgd_auth(struct ieee80211_sub_if_data *sdata, struct cfg80211_auth_request *req)
net/mac80211/mlme.c:ieee80211_rx_mgmt_assoc_resp(struct ieee80211_sub_if_data *sdata, struct ieee80211_mgmt *mgmt, size_t len)
net/mac80211/mlme.c:ieee80211_rx_mgmt_beacon(struct ieee80211_sub_if_data *sdata, struct ieee80211_mgmt *mgmt, size_t len, struct ieee80211_rx_status *rx_status)
net/mac80211/mlme.c:ieee80211_set_associated(struct ieee80211_sub_if_data *sdata, struct cfg80211_bss *cbss, u32 bss_info_changed)
net/mac80211/mlme.c:ieee80211_sta_rx_queued_mgmt(struct ieee80211_sub_if_data *sdata, struct sk_buff *skb)
sta_info()
sta_info_insert_rcu()
net/packet/af_packet.c:packet_bind(struct socket *sock, struct sockaddr *uaddr, int addr_len)
net/packet/af_packet.c:packet_create(struct net *net, struct socket *sock, int protocol, int kern)
net/packet/af_packet.c:packet_do_bind(struct sock *sk, const char *name, int ifindex, __be16 proto)
net/packet/af_packet.c:packet_rcv(struct sk_buff *skb, struct net_device *dev, struct packet_type *pt, struct net_device *orig_dev)
net/packet/af_packet.c:packet_release(struct socket *sock)
net/packet/af_packet.c:packet_snd(struct socket *sock, struct msghdr *msg, size_t len)
net/packet/af_packet.c:tpacket_rcv(struct sk_buff *skb, struct net_device *dev, struct packet_type *pt, struct net_device *orig_dev)
net/packet/af_packet.c:tpacket_snd(struct packet_sock *po, struct msghdr *msg)
net/mac80211/tx.c:ieee80211_tx(struct ieee80211_sub_if_data *sdata, struct sta_info *sta, struct sk_buff *skb, bool txpending)
net/mac80211/tx.c:ieee80211_tx_control_port(struct wiphy *wiphy, struct net_device *dev, const u8 *buf, size_t len, const u8 *dest, __be16 proto, bool unencrypted, u64 *cookie)
net/mac80211/tx.c:ieee80211_tx_frags(struct ieee80211_local *local, struct ieee80211_vif *vif, struct sta_info *sta, struct sk_buff_head *skbs, bool txpending)
net/mac80211/tx.c:ieee80211_tx_h_check_assoc(struct ieee80211_tx_data *tx)
net/mac80211/tx.c:ieee80211_tx_h_select_key(struct ieee80211_tx_data *tx)
net/mac80211/tx.c:ieee80211_tx_prepare(struct ieee80211_sub_if_data *sdata, struct ieee80211_tx_data *tx, struct sta_info *sta, struct sk_buff *skb)
net/mac80211/tx.c:ieee80211_tx_prepare_skb(struct ieee80211_hw *hw, struct ieee80211_vif *vif, struct sk_buff *skb, int band, struct ieee80211_sta **sta)
net/mac80211/tx.c:ieee80211_xmit(struct ieee80211_sub_if_data *sdata, struct sta_info *sta, struct sk_buff *skb)
net/mac80211/rx.c:ieee80211_rx_h_action(struct ieee80211_rx_data *rx)
net/mac80211/rx.c:ieee80211_rx_h_amsdu(struct ieee80211_rx_data *rx)
net/mac80211/rx.c:ieee80211_rx_h_ctrl(struct ieee80211_rx_data *rx, struct sk_buff_head *frames)
net/mac80211/rx.c:ieee80211_rx_h_data(struct ieee80211_rx_data *rx)
net/mac80211/rx.c:ieee80211_rx_h_decrypt(struct ieee80211_rx_data *rx)
net/mac80211/rx.c:ieee80211_rx_h_defragment(struct ieee80211_rx_data *rx)
net/mac80211/rx.c:ieee80211_rx_h_mgmt(struct ieee80211_rx_data *rx)
net/mac80211/rx.c:ieee80211_rx_h_sta_process(struct ieee80211_rx_data *rx)
ieee80211_ibss_finish_sta()
sta_info()
sta_info_insert_rcu()
net/mac80211/util.c:ieee80211_build_probe_req()
net/mac80211/util.c:ieee80211_send_auth(struct ieee80211_sub_if_data *sdata, u16 transaction, u16 auth_alg, u16 status, const u8 *extra, size_t extra_len, const u8 *da, const u8 *bssid, const u8 *key, u8 key_len, u8 key_idx, u32 tx_flags)
net/mac80211/util.c:ieee80211_send_deauth_disassoc(struct ieee80211_sub_if_data *sdata, const u8 *da, const u8 *bssid, u16 stype, u16 reason, bool send_frame, u8 *frame_buf)
net/wireless/core.c:cfg80211_init_wdev(struct cfg80211_registered_device *rdev, struct wireless_dev *wdev)
cfg80211_register_wdev()
net/wireless/core.c:cfg80211_stop_iface(struct wiphy *wiphy, struct wireless_dev *wdev, gfp_t gfp)
func for case f1d54f488af5e3967ea8e664e514cb1c2820db45
fs/btrfs/extent_io.c:__alloc_extent_buffer()
fs/btrfs/extent-io-tree.c:__clear_extent_bit(struct extent_io_tree *tree, u64 start, u64 end, u32 bits, struct extent_state **cached_state, gfp_t mask, struct extent_changeset *changeset)
fs/btrfs/extent_io.c:alloc_extent_buffer()
fs/btrfs/extent_io.c:attach_extent_buffer_page(struct extent_buffer *eb, struct page *page, struct btrfs_subpage *prealloc)
fs/btrfs/extent_io.c:btrfs_release_extent_buffer_pages(struct extent_buffer *eb)
fs/btrfs/extent_io.c:check_buffer_tree_ref(struct extent_buffer *eb)
fs/btrfs/extent_io.c:clear_extent_buffer_dirty(const struct extent_buffer *eb)
fs/btrfs/extent_io.c:detach_extent_buffer_page(struct extent_buffer *eb, struct page *page)
extent_io()
fs/btrfs/extent_io.c:find_extent_buffer()
fs/btrfs/extent_io.c:free_extent_buffer(struct extent_buffer *eb)
fs/btrfs/extent_io.c:grab_extent_buffer()
fs/btrfs/extent_io.c:set_extent_buffer_dirty(struct extent_buffer *eb)
fs/btrfs/extent_io.c:try_release_extent_buffer(struct page *page)
fs/btrfs/extent_io.c:try_release_extent_mapping(struct page *page, gfp_t mask)
fs/btrfs/extent_io.c:try_release_extent_state(struct extent_io_tree *tree, struct page *page, gfp_t mask)
fs/btrfs/extent_io.c:try_release_subpage_extent_buffer(struct page *page)
__btrfs_direct_write()
__btrfs_drop_extents()
fs/btrfs/file.c:btrfs_buffered_write(struct kiocb *iocb, struct iov_iter *i)
fs/btrfs/file.c:btrfs_dirty_pages(struct btrfs_inode *inode, struct page **pages, size_t num_pages, loff_t pos, size_t write_bytes, struct extent_state **cached, bool noreserve)
fs/btrfs/file.c:btrfs_drop_extents(struct btrfs_trans_handle *trans, struct btrfs_root *root, struct btrfs_inode *inode, struct btrfs_drop_extents_args *args)
fs/btrfs/file.c:btrfs_fallocate(struct file *file, int mode, loff_t offset, loff_t len)
btrfs_file_write_iter()
btrfs_insert_clone_extent()
fs/btrfs/file.c:btrfs_mark_extent_written(struct btrfs_trans_handle *trans, struct btrfs_inode *inode, u64 start, u64 end)
fs/btrfs/file.c:btrfs_punch_hole(struct file *file, loff_t offset, loff_t len)
fs/btrfs/file.c:btrfs_punch_hole_lock_range(struct inode *inode, const u64 lockstart, const u64 lockend, struct extent_state **cached_state)
btrfs_punch_hole_range()
fs/btrfs/file.c:btrfs_sync_file(struct file *file, loff_t start, loff_t end, int datasync)
fs/btrfs/file.c:btrfs_zero_range(struct inode *inode, loff_t offset, loff_t len, const int mode)
dirty_pages()
drop_extents()
fs/btrfs/file.c:fill_holes(struct btrfs_trans_handle *trans, struct btrfs_inode *inode, struct btrfs_path *path, u64 offset, u64 end)
punch_hole()
__btrfs_releasepage()
fs/btrfs/inode.c:btrfs_clear_delalloc_extent(struct inode *vfs_inode, struct extent_state *state, u32 bits)
btrfs_direct_IO()
btrfs_invalidatepage()
btrfs_release_folio()
fs/btrfs/inode.c:btrfs_run_delalloc_range(struct btrfs_inode *inode, struct page *locked_page, u64 start, u64 end, int *page_started, unsigned long *nr_written, struct writeback_control *wbc)
fs/btrfs/inode.c:btrfs_truncate(struct inode *inode, bool skip_writeback)
btrfs_writepage()
do_invalidatepage()
invalidate_complete_page2()
mm/truncate.c:invalidate_inode_pages2_range(struct address_space *mapping, pgoff_t start, pgoff_t end)
invalidate_mapping_pages()
truncate_cleanup_page()
mm/truncate.c:truncate_inode_pages_final(struct address_space *mapping)
mm/truncate.c:truncate_inode_pages_range(struct address_space *mapping, loff_t lstart, loff_t lend)
mm/truncate.c:truncate_pagecache_range(struct inode *inode, loff_t lstart, loff_t lend)
fs/btrfs/extent-io-tree.c:__clear_extent_bit(struct extent_io_tree *tree, u64 start, u64 end, u32 bits, struct extent_state **cached_state, gfp_t mask, struct extent_changeset *changeset)
btree_read_extent_buffer_pages()
btree_readpage_end_io_hook()
btree_submit_bio_hook()
fs/btrfs/disk-io.c:btrfs_clean_tree_block(struct extent_buffer *buf)
fs/btrfs/disk-io.c:btrfs_destroy_marked_extents(struct btrfs_fs_info *fs_info, struct extent_io_tree *dirty_pages, int mark)
fs/btrfs/disk-io.c:btrfs_destroy_pinned_extent(struct btrfs_fs_info *fs_info, struct extent_io_tree *unpin)
fs/btrfs/disk-io.c:btrfs_wq_submit_bio(struct inode *inode, struct bio *bio, int mirror_num, u64 dio_file_offset, extent_submit_bio_start_t *submit_bio_start)
clean_tree_block()
destroy_marked_extents()
destroy_pinned_extent()
fs/btrfs/extent_io.c:read_extent_buffer_pages(struct extent_buffer *eb, int wait, int mirror_num)
readpage_end_io_hook()
submit_bio_hook()
fs/btrfs/disk-io.c:verify_parent_transid(struct extent_io_tree *io_tree, struct extent_buffer *eb, u64 parent_transid, int atomic)
wq_submit_bio()
fs/btrfs/extent-tree.c:__btrfs_free_extent(struct btrfs_trans_handle *trans, struct btrfs_delayed_ref_node *node, u64 parent, u64 root_objectid, u64 owner_objectid, u64 owner_offset, int refs_to_drop, struct btrfs_delayed_extent_op *extent_op)
fs/btrfs/extent-tree.c:__btrfs_inc_extent_ref(struct btrfs_trans_handle *trans, struct btrfs_delayed_ref_node *node, u64 parent, u64 root_objectid, u64 owner, u64 offset, int refs_to_add, struct btrfs_delayed_extent_op *extent_op)
fs/btrfs/extent-tree.c:__btrfs_run_delayed_refs(struct btrfs_trans_handle *trans, unsigned long nr)
fs/btrfs/extent-io-tree.c:__clear_extent_bit(struct extent_io_tree *tree, u64 start, u64 end, u32 bits, struct extent_state **cached_state, gfp_t mask, struct extent_changeset *changeset)
fs/btrfs/extent-tree.c:btrfs_free_extent(struct btrfs_trans_handle *trans, struct btrfs_ref *ref)
fs/btrfs/extent-tree.c:btrfs_inc_extent_ref(struct btrfs_trans_handle *trans, struct btrfs_ref *generic_ref)
fs/btrfs/extent-tree.c:btrfs_run_delayed_refs(struct btrfs_trans_handle *trans, unsigned long count)
fs/btrfs/extent-tree.c:insert_inline_extent_backref(struct btrfs_trans_handle *trans, struct btrfs_path *path, u64 bytenr, u64 num_bytes, u64 parent, u64 root_objectid, u64 owner, u64 offset, int refs_to_add, struct btrfs_delayed_extent_op *extent_op)
fs/btrfs/extent-tree.c:remove_extent_backref(struct btrfs_trans_handle *trans, struct btrfs_root *root, struct btrfs_path *path, struct btrfs_extent_inline_ref *iref, int refs_to_drop, int is_data)
fs/read_write.c:ksys_write(unsigned int fd, const char __user *buf, size_t count)
fs/read_write.c:new_sync_write(struct file *filp, const char __user *buf, size_t len, loff_t *ppos)
fs/read_write.c:vfs_write(struct file *file, const char __user *buf, size_t count, loff_t *pos)
fs/open.c:build_open_flags(const struct open_how *how, struct open_flags *op)
fs/open.c:dentry_open()
fs/open.c:do_sys_openat2(int dfd, const char __user *filename, struct open_how *how)
fs/btrfs/transaction.c:btrfs_commit_transaction(struct btrfs_trans_handle *trans)
fs/btrfs/transaction.c:btrfs_wait_extents(struct btrfs_fs_info *fs_info, struct extent_io_tree *dirty_pages)
fs/btrfs/transaction.c:btrfs_write_and_wait_transaction(struct btrfs_trans_handle *trans)
func for case f55849742bdcdf58f6eaae61e747ac00e5c061f4
mm/mprotect.c:can_change_pte_writable(struct vm_area_struct *vma, unsigned long addr, pte_t pte)
mm/mprotect.c:change_p4d_range(struct mmu_gather *tlb, struct vm_area_struct *vma, pgd_t *pgd, unsigned long addr, unsigned long end, pgprot_t newprot, unsigned long cp_flags)
mm/mprotect.c:change_pmd_range(struct mmu_gather *tlb, struct vm_area_struct *vma, pud_t *pud, unsigned long addr, unsigned long end, pgprot_t newprot, unsigned long cp_flags)
mm/mprotect.c:change_protection_range(struct mmu_gather *tlb, struct vm_area_struct *vma, unsigned long addr, unsigned long end, pgprot_t newprot, unsigned long cp_flags)
mm/mprotect.c:change_pte_range(struct mmu_gather *tlb, struct vm_area_struct *vma, pmd_t *pmd, unsigned long addr, unsigned long end, pgprot_t newprot, unsigned long cp_flags)
mm/mprotect.c:change_pud_range(struct mmu_gather *tlb, struct vm_area_struct *vma, p4d_t *p4d, unsigned long addr, unsigned long end, pgprot_t newprot, unsigned long cp_flags)
mm/mprotect.c:do_mprotect_pkey(unsigned long start, size_t len, unsigned long prot, int pkey)
mm/mprotect.c:mprotect_fixup(struct mmu_gather *tlb, struct vm_area_struct *vma, struct vm_area_struct **pprev, unsigned long start, unsigned long end, unsigned long newflags)
mm/userfaultfd.c:__mcopy_atomic(struct mm_struct *dst_mm, unsigned long dst_start, unsigned long src_start, unsigned long len, enum mcopy_atomic_mode mcopy_mode, atomic_t *mmap_changing, __u64 mode)
mm/userfaultfd.c:__mcopy_atomic_hugetlb(struct mm_struct *dst_mm, struct vm_area_struct *dst_vma, unsigned long dst_start, unsigned long src_start, unsigned long len, enum mcopy_atomic_mode mode, bool wp_copy)
mm/userfaultfd.c:mcontinue_atomic_pte(struct mm_struct *dst_mm, pmd_t *dst_pmd, struct vm_area_struct *dst_vma, unsigned long dst_addr, bool wp_copy)
mm/userfaultfd.c:mcopy_atomic_pte(struct mm_struct *dst_mm, pmd_t *dst_pmd, struct vm_area_struct *dst_vma, unsigned long dst_addr, unsigned long src_addr, struct page **pagep, bool wp_copy)
mm/userfaultfd.c:mfill_atomic_install_pte(struct mm_struct *dst_mm, pmd_t *dst_pmd, struct vm_area_struct *dst_vma, unsigned long dst_addr, struct page *page, bool newly_allocated, bool wp_copy)
mm/userfaultfd.c:mfill_atomic_pte(struct mm_struct *dst_mm, pmd_t *dst_pmd, struct vm_area_struct *dst_vma, unsigned long dst_addr, unsigned long src_addr, struct page **page, enum mcopy_atomic_mode mode, bool wp_copy)
mm/userfaultfd.c:mfill_zeropage_pte(struct mm_struct *dst_mm, pmd_t *dst_pmd, struct vm_area_struct *dst_vma, unsigned long dst_addr)
mm/userfaultfd.c:mwriteprotect_range(struct mm_struct *dst_mm, unsigned long start, unsigned long len, bool enable_wp, atomic_t *mmap_changing)
mm/mprotect.c:change_protection_range(struct mmu_gather *tlb, struct vm_area_struct *vma, unsigned long addr, unsigned long end, pgprot_t newprot, unsigned long cp_flags)
make_pte_marker_entry()
include/linux/swapops.h:pfn_swap_entry_to_page()
include/linux/swapops.h:pmd_to_swp_entry(pmd_t pmd)
include/linux/swapops.h:pte_swp_clear_flags(pte_t pte)
include/linux/swapops.h:pte_to_swp_entry(pte_t pte)
include/linux/swapops.h:swp_entry_to_pmd(swp_entry_t entry)
include/linux/swapops.h:swp_entry_to_pte(swp_entry_t entry)
mm/userfaultfd.c:uffd_wp_range(struct mm_struct *dst_mm, struct vm_area_struct *dst_vma, unsigned long start, unsigned long len, bool enable_wp)
UFFDIO_REGISTER()
fs/userfaultfd.c:handle_userfault(struct vm_fault *vmf, unsigned long reason)
fs/userfaultfd.c:userfaultfd_ctx_put(struct userfaultfd_ctx *ctx)
fs/userfaultfd.c:userfaultfd_ioctl(struct file *file, unsigned cmd, unsigned long arg)
fs/userfaultfd.c:userfaultfd_must_wait(struct userfaultfd_ctx *ctx, unsigned long address, unsigned long flags, unsigned long reason)
fs/userfaultfd.c:userfaultfd_register(struct userfaultfd_ctx *ctx, unsigned long arg)
fs/userfaultfd.c:userfaultfd_unregister(struct userfaultfd_ctx *ctx, unsigned long arg)
fs/userfaultfd.c:userfaultfd_writeprotect(struct userfaultfd_ctx *ctx, unsigned long arg)
vma_can_userfault()
UFFDIO_WRITEPROTECT()
mm/memory.c:copy_present_pte(struct vm_area_struct *dst_vma, struct vm_area_struct *src_vma, pte_t *dst_pte, pte_t *src_pte, unsigned long addr, int *rss, struct page **prealloc)
mm/memory.c:copy_pte_range(struct vm_area_struct *dst_vma, struct vm_area_struct *src_vma, pmd_t *dst_pmd, pmd_t *src_pmd, unsigned long addr, unsigned long end)
mm/memory.c:do_page_mkwrite(struct vm_fault *vmf)
do_wp_page()
mm/memory.c:fault_dirty_shared_page(struct vm_fault *vmf)
mm/memory.c:finish_mkwrite_fault(struct vm_fault *vmf)
mm/memory.c:handle_pte_fault(struct vm_fault *vmf)
mm/memory.c:wp_page_copy(struct vm_fault *vmf)
do_page_add_anon_rmap()
mm/rmap.c:page_add_new_anon_rmap(struct page *page, struct vm_area_struct *vma, unsigned long address)
page_mkclean()
page_referenced()
page_referenced_one()
mm/rmap.c:page_remove_rmap(struct page *page, struct vm_area_struct *vma, bool compound)
mm/rmap.c:rmap_walk_anon(struct folio *folio, struct rmap_walk_control *rwc, bool locked)
mm/rmap.c:try_to_unmap_one(struct folio *folio, struct vm_area_struct *vma, unsigned long address, void *arg)
hpage_pincount_available()
page_is_devmap_managed()
page_maybe_dma_pinned()
include/linux/mm.h:page_needs_cow_for_dma(struct vm_area_struct *vma, struct page *page)
page_trans_huge_mapcount()
include/linux/mm.h:vma_init(struct vm_area_struct *vma, struct mm_struct *mm)
include/linux/mm.h:vma_is_foreign(struct vm_area_struct *vma)
include/linux/mm.h:vma_is_temporary_stack(struct vm_area_struct *vma)
UFFDIO_API()
UFFDIO_REGISTER()
UFFDIO_WRITEPROTECT()
fs/ioctl.c:do_vfs_ioctl(struct file *filp, unsigned int fd, unsigned int cmd, unsigned long arg)
ksys_ioctl()
fs/userfaultfd.c:userfaultfd_ioctl(struct file *file, unsigned cmd, unsigned long arg)
mm/page_alloc.c:alloc_contig_pages()
mm/page_alloc.c:free_contig_range(unsigned long pfn, unsigned long nr_pages)
page_alloc()
mm/page_alloc.c:set_pageblock_migratetype(struct page *page, int migratetype)
func for case f7c5a86e747f9b7ce333e7295875cd4ede2c7a0d
net/xdp/xdp_umem.c:xdp_put_umem(struct xdp_umem *umem, bool defer_cleanup)
net/xdp/xdp_umem.c:xdp_umem_account_pages(struct xdp_umem *umem)
net/xdp/xdp_umem.c:xdp_umem_create()
net/xdp/xdp_umem.c:xdp_umem_pin_pages(struct xdp_umem *umem, unsigned long address)
net/xdp/xdp_umem.c:xdp_umem_reg(struct xdp_umem *umem, struct xdp_umem_reg *mr)
net/xdp/xdp_umem.c:xdp_umem_release(struct xdp_umem *umem)
net/xdp/xdp_umem.c:xdp_umem_unaccount_pages(struct xdp_umem *umem)
XDP_UMEM_REG()
net/xdp/xsk.c:__xsk_map_redirect(truct xdp_sock *xs, struct xdp_buff *xdp) {)
net/xdp/xsk.c:__xsk_rcv(truct xdp_sock *xs, struct xdp_buff *xdp) {)
net/xdp/xsk.c:__xsk_rcv_zc(truct xdp_sock *xs, struct xdp_buff *xdp, u32 len) {)
net/xdp/xsk.c:xsk_bind(truct socket *sock, struct sockaddr *addr, int addr_len) {)
net/xdp/xsk.c:xsk_clear_pool_at_qid(truct net_device *dev, u16 queue_id) {)
net/xdp/xsk.c:xsk_delete_from_maps(truct xdp_sock *xs) {)
net/xdp/xsk.c:xsk_generic_rcv(truct xdp_sock *xs, struct xdp_buff *xdp) {)
net/xdp/xsk.c:xsk_init_queue(32 entries, struct xsk_queue **queue, bool umem_queue) {)
net/xdp/xsk.c:xsk_rcv(truct xdp_sock *xs, struct xdp_buff *xdp) {)
net/xdp/xsk.c:xsk_reg_pool_at_qid(truct net_device *dev, struct xsk_buff_pool *pool, u16 queue_id) {)
net/xdp/xsk.c:xsk_setsockopt(truct socket *sock, int level, int optname, sockptr_t optval, unsigned int optlen) {)
net/xdp/xsk.c:xsk_tx_peek_desc(truct xsk_buff_pool *pool, struct xdp_desc *desc) {)
net/xdp/xsk.c:xsk_tx_peek_release_desc_batch(truct xsk_buff_pool *pool, struct xdp_desc *descs, u32 max_entries) {)
net/xdp/xsk.c:xsk_tx_release(truct xsk_buff_pool *pool) {)
net/xdp/xsk.c:xsk_unbind_dev(truct xdp_sock *xs) {)
mm/util.c:__account_locked_vm(struct mm_struct *mm, unsigned long pages, bool inc, struct task_struct *task, bool bypass_rlim)
mm/util.c:__vm_enough_memory(struct mm_struct *mm, long pages, int cap_sys_admin)
mm/util.c:account_locked_vm(struct mm_struct *mm, unsigned long pages, bool inc)
mm/util.c:folio_copy(struct folio *dst, struct folio *src)
mm/util.c:kmemdup_nul()
kvmalloc_array()
mm/util.c:kvmalloc_node()
mm/util.c:memcmp_pages(struct page *page1, struct page *page2)
mm/util.c:memdup_user()
mm/util.c:memdup_user_nul()
mm/util.c:strndup_user()
mm/util.c:vm_mmap(struct file *file, unsigned long addr, unsigned long len, unsigned long prot, unsigned long flag, unsigned long offset)
mm/util.c:vm_mmap_pgoff(struct file *file, unsigned long addr, unsigned long len, unsigned long prot, unsigned long flag, unsigned long pgoff)
mm/util.c:vmemdup_user()
include/linux/slab.h:__kmalloc_index(size_t size, bool size_is_constant)
include/linux/slab.h:kmalloc_type(gfp_t flags)
include/linux/slab.h:kmem_cache_alloc_node_trace()
mm/util.c:kvmalloc_node()
XDP_UMEM_REG()
net/socket.c:__sys_setsockopt(int fd, int level, int optname, char __user *user_optval, int optlen)
mm/util.c:kvmalloc_node()
net/socket.c:sock_alloc()
net/socket.c:sock_alloc_file()
net/socket.c:sock_do_ioctl(struct net *net, struct socket *sock, unsigned int cmd, unsigned long arg)
net/socket.c:sock_ioctl(struct file *file, unsigned cmd, unsigned long arg)
net/socket.c:sock_map_fd(struct socket *sock, int flags)
net/socket.c:sockfd_lookup()
net/socket.c:sockfd_lookup_light()
mm/util.c:kvmalloc_node()
xdp_umem()
net/xdp/xdp_umem.c:xdp_umem_create()
xdp_umem_get_data()
net/xdp/xdp_umem.c:xdp_umem_pin_pages(struct xdp_umem *umem, unsigned long address)
net/xdp/xdp_umem.c:xdp_umem_reg(struct xdp_umem *umem, struct xdp_umem_reg *mr)
net/xdp/xdp_umem.c:xdp_umem_release(struct xdp_umem *umem)
net/xdp/xdp_umem.c:xdp_umem_unpin_pages(struct xdp_umem *umem)
xdp_umem_validate()
net/xdp/xsk.c:xsk_setsockopt(truct socket *sock, int level, int optname, sockptr_t optval, unsigned int optlen) {)
XDP_UMEM_REG()
net/core/dev.c:dev_change_xdp_fd(struct net_device *dev, struct netlink_ext_ack *extack, int fd, int expected_fd, u32 flags)
net/core/dev.c:dev_xdp_attach(struct net_device *dev, struct netlink_ext_ack *extack, struct bpf_xdp_link *link, struct bpf_prog *new_prog, struct bpf_prog *old_prog, u32 flags)
net/core/dev.c:dev_xdp_install(struct net_device *dev, enum bpf_xdp_mode mode, bpf_op_t bpf_op, struct netlink_ext_ack *extack, u32 flags, struct bpf_prog *prog)
mm/util.c:kvmalloc_node()
__alloc_pages_nodemask()
mm/page_alloc.c:get_page_from_freelist()
mm/util.c:kvmalloc_node()
page_alloc()
mm/page_alloc.c:zone_watermark_ok_safe(struct zone *z, unsigned int order, unsigned long mark, int highest_zoneidx)
mm/vmalloc.c:__vmalloc_node_range()
mm/vmalloc.c:alloc_vmap_area()
mm/vmalloc.c:free_vmap_area(struct vmap_area *va)
func for case ffb9228cab75ad9d812af93d19e9637873d18439
net/ipv4/ip_gre.c:__gre_tunnel_init(struct net_device *dev)
net/ipv4/ip_gre.c:__ipgre_rcv(struct sk_buff *skb, const struct tnl_ptk_info *tpi, struct ip_tunnel_net *itn, int hdr_len, bool raw_proto)
net/ipv4/ip_gre.c:erspan_fb_xmit(struct sk_buff *skb, struct net_device *dev)
net/ipv4/ip_gre.c:erspan_rcv(struct sk_buff *skb, struct tnl_ptk_info *tpi, int gre_hdr_len)
net/ipv4/ip_gre.c:erspan_xmit(struct sk_buff *skb, struct net_device *dev)
net/ipv4/ip_gre.c:gre_err(struct sk_buff *skb, u32 info)
net/ipv4/ip_gre.c:gre_fb_xmit(struct sk_buff *skb, struct net_device *dev, __be16 proto)
net/ipv4/ip_gre.c:gre_fill_metadata_dst(struct net_device *dev, struct sk_buff *skb)
net/ipv4/ip_gre.c:gre_rcv(struct sk_buff *skb)
net/ipv4/ip_gre.c:gre_tap_xmit(struct sk_buff *skb, struct net_device *dev)
ip_gre()
net/ipv4/ip_gre.c:ipgre_err(struct sk_buff *skb, u32 info, const struct tnl_ptk_info *tpi)
net/ipv4/ip_gre.c:ipgre_header(struct sk_buff *skb, struct net_device *dev, unsigned short type, const void *daddr, const void *saddr, unsigned int len)
net/ipv4/ip_gre.c:ipgre_rcv(struct sk_buff *skb, const struct tnl_ptk_info *tpi, int hdr_len)
net/ipv4/ip_gre.c:ipgre_tunnel_init(struct net_device *dev)
net/ipv4/ip_gre.c:ipgre_xmit(struct sk_buff *skb, struct net_device *dev)
sk_buff()
net/bpf/test_run.c:bpf_ctx_finish(const union bpf_attr *kattr, union bpf_attr __user *uattr, const void *data, u32 size)
net/bpf/test_run.c:bpf_ctx_init()
net/bpf/test_run.c:bpf_prog_test_run_raw_tp(struct bpf_prog *prog, const union bpf_attr *kattr, union bpf_attr __user *uattr)
net/bpf/test_run.c:bpf_prog_test_run_skb(struct bpf_prog *prog, const union bpf_attr *kattr, union bpf_attr __user *uattr)
net/bpf/test_run.c:bpf_prog_test_run_syscall(struct bpf_prog *prog, const union bpf_attr *kattr, union bpf_attr __user *uattr)
net/bpf/test_run.c:bpf_prog_test_run_tracing(struct bpf_prog *prog, const union bpf_attr *kattr, union bpf_attr __user *uattr)
net/bpf/test_run.c:bpf_prog_test_run_xdp(struct bpf_prog *prog, const union bpf_attr *kattr, union bpf_attr __user *uattr)
net/bpf/test_run.c:bpf_test_finish(const union bpf_attr *kattr, union bpf_attr __user *uattr, const void *data, struct skb_shared_info *sinfo, u32 size, u32 retval, u32 duration)
net/bpf/test_run.c:bpf_test_run(struct bpf_prog *prog, void *ctx, u32 repeat, u32 *retval, u32 *time, bool xdp)
net/bpf/test_run.c:convert___skb_to_skb(struct sk_buff *skb, struct __sk_buff *__skb)
net/bpf/test_run.c:convert_skb_to___skb(struct sk_buff *skb, struct __sk_buff *__skb)
sk_buff()
skb_transport_header()
test_run()
net/bpf/test_run.c:xdp_convert_md_to_buff(struct xdp_md *xdp_md, struct xdp_buff *xdp)
net/bpf/test_run.c:xdp_recv_frames(struct xdp_frame **frames, int nframes, struct sk_buff **skbs, struct net_device *dev)
net/bpf/test_run.c:xdp_test_run_batch(struct xdp_test_data *xdp, struct bpf_prog *prog, u32 repeat)
net/bpf/test_run.c:xdp_test_run_setup(struct xdp_test_data *xdp, struct xdp_buff *orig_ctx)
PROG_LOAD()
PROG_TEST_RUN()
kernel/bpf/core.c:alloc_new_pack()
bpf_jit_binary()
kernel/bpf/core.c:bpf_jit_binary_alloc()
kernel/bpf/core.c:bpf_jit_binary_pack_alloc()
kernel/bpf/core.c:bpf_jit_blind_constants()
kernel/bpf/core.c:bpf_jit_blind_insn(const struct bpf_insn *from, const struct bpf_insn *aux, struct bpf_insn *to_buff, bool emit_zext)
kernel/bpf/core.c:bpf_jit_free(struct bpf_prog *fp)
kernel/bpf/core.c:bpf_jit_get_func_addr(const struct bpf_prog *prog, const struct bpf_insn *insn, bool extra_pass, u64 *func_addr, bool *func_addr_fixed)
kernel/bpf/core.c:bpf_jit_prog_release_other(struct bpf_prog *fp, struct bpf_prog *fp_other)
kernel/bpf/core.c:bpf_prog_alloc()
kernel/bpf/core.c:bpf_prog_alloc_no_stats()
kernel/bpf/core.c:bpf_prog_clone_create()
kernel/bpf/core.c:bpf_prog_clone_free(struct bpf_prog *fp)
kernel/bpf/core.c:bpf_prog_pack_alloc()
kernel/bpf/core.c:bpf_prog_pack_free(struct bpf_binary_header *hdr)
kernel/bpf/core.c:bpf_prog_realloc()
net/ipv4/ip_gre.c:ipgre_xmit(struct sk_buff *skb, struct net_device *dev)
net/core/filter.c:__bpf_redirect_common(struct sk_buff *skb, struct net_device *dev, u32 flags)
net/core/filter.c:__bpf_redirect_no_mac(struct sk_buff *skb, struct net_device *dev, u32 flags)
net/core/filter.c:__bpf_tx_skb(struct net_device *dev, struct sk_buff *skb)
net/core/filter.c:bpf_check_classic(const struct sock_filter *filter, unsigned int flen)
net/core/filter.c:bpf_convert_filter(struct sock_filter *prog, int len, struct bpf_prog *new_prog, int *new_len, bool *seen_ld_abs)
net/core/filter.c:bpf_prog_create_from_user(struct bpf_prog **pfp, struct sock_fprog *fprog, bpf_aux_classic_check_t trans, bool save_orig)
net/core/filter.c:sk_attach_bpf(u32 ufd, struct sock *sk)
net/core/filter.c:skb_do_redirect(struct sk_buff *skb)
include/linux/skbuff.h:skb_ext_reset(struct sk_buff *skb)
include/linux/skbuff.h:skb_header_unclone(struct sk_buff *skb, gfp_t pri)
include/linux/skbuff.h:skb_mac_header_rebuild(struct sk_buff *skb)
include/linux/skbuff.h:skb_orphan(struct sk_buff *skb)
include/linux/skbuff.h:skb_probe_transport_header(struct sk_buff *skb)
include/linux/skbuff.h:skb_set_redirected(struct sk_buff *skb, bool from_ingress)
include/linux/skbuff.h:skb_share_check()
include/linux/skbuff.h:skb_unshare()
net/core/dev.c:__dev_queue_xmit(struct sk_buff *skb, struct net_device *sb_dev)
net/core/dev.c:bpf_prog_run_generic_xdp(struct sk_buff *skb, struct xdp_buff *xdp, struct bpf_prog *xdp_prog)
net/core/dev.c:dev_hard_start_xmit()
net/core/dev.c:dev_xdp_attach(struct net_device *dev, struct netlink_ext_ack *extack, struct bpf_xdp_link *link, struct bpf_prog *new_prog, struct bpf_prog *old_prog, u32 flags)
net/core/dev.c:dev_xdp_install(struct net_device *dev, enum bpf_xdp_mode mode, bpf_op_t bpf_op, struct netlink_ext_ack *extack, u32 flags, struct bpf_prog *prog)
net/core/dev.c:do_xdp_generic(struct bpf_prog *xdp_prog, struct sk_buff *skb)
net/ipv4/ip_gre.c:ipgre_xmit(struct sk_buff *skb, struct net_device *dev)
net/core/dev.c:netif_receive_skb_internal(struct sk_buff *skb)
net/core/dev.c:xmit_one(struct sk_buff *skb, struct net_device *dev, struct netdev_queue *txq, bool more)
kernel/bpf/syscall.c:__sys_bpf(int cmd, bpfptr_t uattr, unsigned int size)
kernel/bpf/syscall.c:bpf_link_get_info_by_fd(struct file *file, struct bpf_link *link, const union bpf_attr *attr, union bpf_attr __user *uattr)
kernel/bpf/syscall.c:bpf_map_get_info_by_fd(struct file *file, struct bpf_map *map, const union bpf_attr *attr, union bpf_attr __user *uattr)
kernel/bpf/syscall.c:bpf_obj_get_info_by_fd(const union bpf_attr *attr, union bpf_attr __user *uattr)
kernel/bpf/syscall.c:bpf_prog_get_info_by_fd(struct file *file, struct bpf_prog *prog, const union bpf_attr *attr, union bpf_attr __user *uattr)
kernel/bpf/syscall.c:bpf_prog_load(union bpf_attr *attr, bpfptr_t uattr)
kernel/bpf/syscall.c:bpf_prog_test_run(const union bpf_attr *attr, union bpf_attr __user *uattr)
kern_sys_bpf()
skb_transport_header()
include/linux/bpf.h:bpf_prog_run_array(const struct bpf_prog_array *array, const void *ctx, bpf_prog_run_fn run_prog)
bpf_prog_run_array_sleepable()
include/linux/bpf.h:bpf_tracing_ctx_access(int off, int size, enum bpf_access_type type)
net/core/skbuff.c:__skb_pad(struct sk_buff *skb, int pad, bool free_on_error)
net/ipv4/ip_gre.c:ipgre_xmit(struct sk_buff *skb, struct net_device *dev)
net/core/skbuff.c:skb_ensure_writable(struct sk_buff *skb, unsigned int write_len)
net/core/skbuff.c:skb_maybe_pull_tail(struct sk_buff *skb, unsigned int len, unsigned int max)
skb_transport_header()
skb_transport_offset()
include/net/gre.h:gre_build_header(struct sk_buff *skb, int hdr_len, __be16 flags, __be16 proto, __be32 key, __be32 seq)
include/net/gre.h:gre_flags_to_tnl_flags(__be16 flags)
include/net/gre.h:gre_tnl_flags_to_gre_flags(__be16 tflags)
func for case 0784eb04ffd5b9955880826669badef2ffb32285
fs/btrfs/ordered-data.c:alloc_ordered_extent()
fs/btrfs/ordered-data.c:btrfs_dec_test_ordered_pending(struct btrfs_inode *inode, struct btrfs_ordered_extent **cached, u64 file_offset, u64 io_size)
fs/btrfs/inode.c:btrfs_dio_end_io(struct btrfs_bio *bbio)
fs/btrfs/ordered-data.c:btrfs_finish_ordered_extent(struct btrfs_ordered_extent *ordered, struct page *page, u64 file_offset, u64 len, bool uptodate)
fs/btrfs/ordered-data.c:btrfs_lock_and_flush_ordered_range(struct btrfs_inode *inode, u64 start, u64 end, struct extent_state **cached_state)
fs/btrfs/ordered-data.c:btrfs_lookup_ordered_extent()
fs/btrfs/ordered-data.c:btrfs_lookup_ordered_range()
fs/btrfs/ordered-data.c:btrfs_mark_ordered_io_finished(struct btrfs_inode *inode, struct page *page, u64 file_offset, u64 num_bytes, bool uptodate)
fs/btrfs/ordered-data.c:btrfs_put_ordered_extent(struct btrfs_ordered_extent *entry)
fs/btrfs/ordered-data.c:btrfs_remove_ordered_extent(struct btrfs_inode *btrfs_inode, struct btrfs_ordered_extent *entry)
fs/btrfs/ordered-data.c:btrfs_start_ordered_extent(struct btrfs_ordered_extent *entry)
fs/btrfs/ordered-data.c:btrfs_try_lock_ordered_range(struct btrfs_inode *inode, u64 start, u64 end, struct extent_state **cached_state)
fs/btrfs/ordered-data.c:btrfs_wait_ordered_range(struct inode *inode, u64 start, u64 len)
fs/btrfs/ordered-data.c:can_finish_ordered_extent(struct btrfs_ordered_extent *ordered, struct page *page, u64 file_offset, u64 len, bool uptodate)
fs/btrfs/ordered-data.c:insert_ordered_extent(struct btrfs_ordered_extent *entry)
fs/btrfs/inode.c:btrfs_clear_delalloc_extent(struct btrfs_inode *inode, struct extent_state *state, u32 bits)
fs/btrfs/inode.c:btrfs_create_dio_extent()
btrfs_dio_()
fs/btrfs/inode.c:btrfs_dio_end_io(struct btrfs_bio *bbio)
fs/btrfs/inode.c:btrfs_dio_iomap_begin(struct inode *inode, loff_t start, loff_t length, unsigned int flags, struct iomap *iomap, struct iomap *srcmap)
fs/btrfs/inode.c:btrfs_dio_iomap_end(struct inode *inode, loff_t pos, loff_t length, ssize_t written, unsigned int flags, struct iomap *iomap)
fs/btrfs/inode.c:btrfs_dio_submit_io(const struct iomap_iter *iter, struct bio *bio, loff_t file_offset)
fs/btrfs/inode.c:btrfs_finish_one_ordered(struct btrfs_ordered_extent *ordered_extent)
fs/btrfs/inode.c:btrfs_get_blocks_direct_write(struct extent_map **map, struct inode *inode, struct btrfs_dio_data *dio_data, u64 start, u64 *lenp, unsigned int iomap_flags)
fs/btrfs/inode.c:btrfs_new_extent_direct()
fs/btrfs/inode.c:btrfs_run_delalloc_range(struct btrfs_inode *inode, struct page *locked_page, u64 start, u64 end, int *page_started, unsigned long *nr_written, struct writeback_control *wbc)
fs/btrfs/inode.c:btrfs_set_extent_delalloc(struct btrfs_inode *inode, u64 start, u64 end, unsigned int extra_bits, struct extent_state **cached_state)
fs/btrfs/inode.c:can_nocow_extent(struct inode *inode, u64 offset, u64 *len, u64 *orig_start, u64 *orig_block_len, u64 *ram_bytes, bool nowait, bool strict)
finish_ordered_extent()
fs/btrfs/inode.c:insert_ordered_extent_file_extent(struct btrfs_trans_handle *trans, struct btrfs_ordered_extent *oe)
fs/btrfs/inode.c:lock_extent_direct(struct inode *inode, u64 lockstart, u64 lockend, struct extent_state **cached_state, unsigned int iomap_flags)
fs/btrfs/inode.c:run_delalloc_nocow(struct btrfs_inode *inode, struct page *locked_page, const u64 start, const u64 end, int *page_started, unsigned long *nr_written)
fs/btrfs/file.c:btrfs_check_nocow_lock(struct btrfs_inode *inode, loff_t pos, size_t *write_bytes, bool nowait)
fs/btrfs/file.c:btrfs_direct_write(struct kiocb *iocb, struct iov_iter *from)
fs/btrfs/file.c:btrfs_dirty_pages(struct btrfs_inode *inode, struct page **pages, size_t num_pages, loff_t pos, size_t write_bytes, struct extent_state **cached, bool noreserve)
fs/btrfs/file.c:btrfs_do_write_iter(struct kiocb *iocb, struct iov_iter *from, const struct btrfs_ioctl_encoded_io_args *encoded)
fs/btrfs/file.c:btrfs_drop_extents(struct btrfs_trans_handle *trans, struct btrfs_root *root, struct btrfs_inode *inode, struct btrfs_drop_extents_args *args)
fs/btrfs/file.c:btrfs_fallocate(struct file *file, int mode, loff_t offset, loff_t len)
fs/btrfs/file.c:btrfs_insert_replace_extent(struct btrfs_trans_handle *trans, struct btrfs_inode *inode, struct btrfs_path *path, struct btrfs_replace_extent_info *extent_info, const u64 replace_len, const u64 bytes_to_drop)
fs/btrfs/file.c:btrfs_mark_extent_written(struct btrfs_trans_handle *trans, struct btrfs_inode *inode, u64 start, u64 end)
fs/btrfs/file.c:btrfs_punch_hole(struct file *file, loff_t offset, loff_t len)
fs/btrfs/file.c:btrfs_replace_file_extents(struct btrfs_inode *inode, struct btrfs_path *path, const u64 start, const u64 end, struct btrfs_replace_extent_info *extent_info, struct btrfs_trans_handle **trans_out)
fs/btrfs/file.c:btrfs_sync_file(struct file *file, loff_t start, loff_t end, int datasync)
fs/btrfs/file.c:btrfs_write_check(struct kiocb *iocb, struct iov_iter *from, size_t count)
fs/btrfs/file.c:btrfs_zero_range(struct inode *inode, loff_t offset, loff_t len, const int mode)
fs/btrfs/file.c:lock_and_cleanup_extent_if_need(struct btrfs_inode *inode, struct page **pages, size_t num_pages, loff_t pos, size_t write_bytes, u64 *lockstart, u64 *lockend, bool nowait, struct extent_state **cached_state)
fs/btrfs/file.c:prepare_pages(struct inode *inode, struct page **pages, size_t num_pages, loff_t pos, size_t write_bytes, bool force_uptodate, bool nowait)
fs/btrfs/extent_io.c:alloc_new_bio(struct btrfs_inode *inode, struct btrfs_bio_ctrl *bio_ctrl, u64 disk_bytenr, u64 file_offset)
btrfs_bio_add_page()
btrfs_repair_one_sector()
end_bio()
fs/btrfs/extent_io.c:end_bio_extent_readpage(struct btrfs_bio *bbio)
fs/btrfs/extent_io.c:end_bio_extent_writepage(struct btrfs_bio *bbio)
extent_io()
fs/btrfs/extent_io.c:process_one_page(struct btrfs_fs_info *fs_info, struct address_space *mapping, struct page *page, struct page *locked_page, unsigned long page_ops, u64 start, u64 end)
repair_io_failure()
fs/btrfs/extent_io.c:submit_extent_page(struct btrfs_bio_ctrl *bio_ctrl, u64 disk_bytenr, struct page *page, size_t size, unsigned long pg_offset)
fs/btrfs/ctree.c:btrfs_cow_block(struct btrfs_trans_handle *trans, struct btrfs_root *root, struct extent_buffer *buf, struct extent_buffer *parent, int parent_slot, struct extent_buffer **cow_ret, enum btrfs_lock_nesting nest)
fs/btrfs/ctree.c:btrfs_del_items(struct btrfs_trans_handle *trans, struct btrfs_root *root, struct btrfs_path *path, int slot, int nr)
fs/btrfs/ctree.c:btrfs_insert_item(struct btrfs_trans_handle *trans, struct btrfs_root *root, const struct btrfs_key *cpu_key, void *data, u32 data_size)
fs/btrfs/ctree.c:btrfs_realloc_node(struct btrfs_trans_handle *trans, struct btrfs_root *root, struct extent_buffer *parent, int start_slot, u64 *last_ret, struct btrfs_key *progress)
fs/btrfs/ctree.c:btrfs_search_old_slot(struct btrfs_root *root, const struct btrfs_key *key, struct btrfs_path *p, u64 time_seq)
fs/btrfs/ctree.c:btrfs_search_slot(struct btrfs_trans_handle *trans, struct btrfs_root *root, const struct btrfs_key *key, struct btrfs_path *p, int ins_len, int cow)
fs/btrfs/ctree.c:btrfs_search_slot_for_read(struct btrfs_root *root, const struct btrfs_key *key, struct btrfs_path *p, int find_higher, int return_any)
fs/btrfs/ctree.c:split_leaf(struct btrfs_trans_handle *trans, struct btrfs_root *root, const struct btrfs_key *ins_key, struct btrfs_path *path, int data_size, int extend)
fs/btrfs/disk-io.c:btrfs_check_super_csum(struct btrfs_fs_info *fs_info, const struct btrfs_super_block *disk_sb)
fs/btrfs/disk-io.c:btrfs_end_super_write(struct bio *bio)
fs/btrfs/disk-io.c:btrfs_read_dev_one_super()
fs/btrfs/disk-io.c:btrfs_read_dev_super()
fs/btrfs/disk-io.c:btrfs_read_extent_buffer(struct extent_buffer *eb, struct btrfs_tree_parent_check *check)
fs/btrfs/disk-io.c:btrfs_validate_super(struct btrfs_fs_info *fs_info, struct btrfs_super_block *sb, int mirror_num)
fs/btrfs/disk-io.c:btrfs_validate_write_super(struct btrfs_fs_info *fs_info, struct btrfs_super_block *sb)
verify_parent_transid()
fs/iomap/direct-io.c:__iomap_dio_rw()
end_io()
fs/iomap/direct-io.c:iomap_dio_bio_end_io(struct bio *bio)
fs/iomap/direct-io.c:iomap_dio_bio_iter(const struct iomap_iter *iter, struct iomap_dio *dio)
fs/iomap/direct-io.c:iomap_dio_complete(struct iomap_dio *dio)
fs/iomap/direct-io.c:iomap_dio_complete_work(struct work_struct *work)
fs/iomap/direct-io.c:iomap_dio_iter(const struct iomap_iter *iter, struct iomap_dio *dio)
fs/iomap/direct-io.c:iomap_dio_submit_bio(const struct iomap_iter *iter, struct iomap_dio *dio, struct bio *bio, loff_t pos)
fs/iomap/direct-io.c:iomap_dio_zero(const struct iomap_iter *iter, struct iomap_dio *dio, loff_t pos, unsigned len)
fs/btrfs/transaction.c:btrfs_commit_transaction(struct btrfs_trans_handle *trans)
fs/btrfs/transaction.c:btrfs_wait_extents(struct btrfs_fs_info *fs_info, struct extent_io_tree *dirty_pages)
fs/btrfs/transaction.c:btrfs_write_and_wait_transaction(struct btrfs_trans_handle *trans)
fs/read_write.c:do_iter_write(struct file *file, struct iov_iter *iter, loff_t *pos, rwf_t flags)
fs/read_write.c:do_pwritev(unsigned long fd, const struct iovec __user *vec, unsigned long vlen, loff_t pos, rwf_t flags)
fs/read_write.c:vfs_writev(struct file *file, const struct iovec __user *vec, unsigned long vlen, loff_t *pos, rwf_t flags)
fs/open.c:do_dentry_open(struct file *f, struct inode *inode, int (*open)(struct inode *, struct file *))
fs/open.c:do_sys_openat2(int dfd, const char __user *filename, struct open_how *how)
fs/open.c:vfs_fallocate(struct file *file, int mode, loff_t offset, loff_t len)
func for case 11cb6eec3ac0b37e657e8af0612342e140379e49
drivers/bluetooth/hci_vhci.c:__vhci_create_device(struct vhci_data *data, __u8 opcode)
hci_vhci()
drivers/bluetooth/hci_vhci.c:vhci_create_device(struct vhci_data *data, __u8 opcode)
drivers/bluetooth/hci_vhci.c:vhci_get_codec_config_data(struct hci_dev *hdev, __u8 type, struct bt_codec *codec, __u8 *vnd_len, __u8 **vnd_data)
drivers/bluetooth/hci_vhci.c:vhci_get_user(struct vhci_data *data, struct iov_iter *from)
drivers/bluetooth/hci_vhci.c:vhci_open(struct inode *inode, struct file *file)
drivers/bluetooth/hci_vhci.c:vhci_open_timeout(struct work_struct *work)
drivers/bluetooth/hci_vhci.c:vhci_put_user(struct vhci_data *data, struct sk_buff *skb, char __user *buf, int count)
drivers/bluetooth/hci_vhci.c:vhci_read(struct file *file, char __user *buf, size_t count, loff_t *pos)
drivers/bluetooth/hci_vhci.c:vhci_release(struct inode *inode, struct file *file)
drivers/bluetooth/hci_vhci.c:vhci_send_frame(struct hci_dev *hdev, struct sk_buff *skb)
drivers/bluetooth/hci_vhci.c:vhci_setup(struct hci_dev *hdev)
drivers/bluetooth/hci_vhci.c:vhci_suspend_work(struct work_struct *work)
drivers/bluetooth/hci_vhci.c:vhci_write(struct kiocb *iocb, struct iov_iter *from)
net/core/skbuff.c:__alloc_skb()
net/core/skbuff.c:__skb_clone()
net/core/skbuff.c:alloc_skb_with_frags()
net/core/skbuff.c:kfree_skbmem(struct sk_buff *skb)
net/core/skbuff.c:pskb_expand_head(struct sk_buff *skb, int nhead, int ntail, gfp_t gfp_mask)
net/core/skbuff.c:skb_attempt_defer_free(struct sk_buff *skb)
net/core/skbuff.c:skb_clone()
net/core/skbuff.c:skb_condense(struct sk_buff *skb)
net/core/skbuff.c:skb_copy()
net/core/skbuff.c:skb_copy_expand()
net/core/skbuff.c:skb_expand_head()
net/core/skbuff.c:skb_free_head(struct sk_buff *skb)
net/core/skbuff.c:skb_release_data(struct sk_buff *skb)
net/core/skbuff.c:skb_zerocopy_clone(struct sk_buff *nskb, struct sk_buff *orig, gfp_t gfp_mask)
net/core/skbuff.c:skb_zerocopy_iter_stream(struct sock *sk, struct sk_buff *skb, struct msghdr *msg, int len, struct ubuf_info *uarg)
include/linux/skbuff.h:__pskb_trim(struct sk_buff *skb, unsigned int len)
include/linux/skbuff.h:__skb_grow(struct sk_buff *skb, unsigned int len)
include/linux/skbuff.h:__skb_set_length(struct sk_buff *skb, unsigned int len)
include/linux/skbuff.h:net_zcopy_put_abort(struct ubuf_info *uarg, bool have_uref)
include/linux/skbuff.h:skb_header_unclone(struct sk_buff *skb, gfp_t pri)
include/linux/skbuff.h:skb_orphan(struct sk_buff *skb)
include/linux/skbuff.h:skb_orphan_frags(struct sk_buff *skb, gfp_t gfp_mask)
skb_put_()
include/linux/skbuff.h:skb_put_data()
include/linux/skbuff.h:skb_put_zero()
include/linux/skbuff.h:skb_share_check()
include/linux/skbuff.h:skb_unclone(struct sk_buff *skb, gfp_t pri)
include/linux/skbuff.h:skb_unref(struct sk_buff *skb)
include/linux/skbuff.h:skb_unshare()
skb_zcopy_()
include/linux/skbuff.h:skb_zcopy_clear(struct sk_buff *skb, bool zerocopy_success)
include/linux/skbuff.h:skb_zcopy_set(struct sk_buff *skb, struct ubuf_info *uarg, bool *have_ref)
include/net/bluetooth/bluetooth.h:bt_skb_alloc()
include/net/bluetooth/bluetooth.h:bt_skb_send_alloc()
include/net/bluetooth/bluetooth.h:bt_skb_sendmmsg()
include/net/bluetooth/bluetooth.h:bt_skb_sendmsg()
include/net/bluetooth/bluetooth.h:state_to_string()
net/bluetooth/hci_core.c:__hci_cmd_send(struct hci_dev *hdev, u16 opcode, u32 plen, const void *param)
net/bluetooth/hci_core.c:hci_alloc_dev_priv()
hci_core()
net/bluetooth/hci_core.c:hci_recv_frame(struct hci_dev *hdev, struct sk_buff *skb)
net/bluetooth/hci_core.c:hci_register_dev(struct hci_dev *hdev)
net/bluetooth/hci_core.c:hci_release_dev(struct hci_dev *hdev)
net/bluetooth/hci_core.c:hci_send_cmd(struct hci_dev *hdev, __u16 opcode, __u32 plen, const void *param)
net/bluetooth/hci_core.c:hci_send_frame(struct hci_dev *hdev, struct sk_buff *skb)
net/bluetooth/hci_core.c:hci_unregister_dev(struct hci_dev *hdev)
sk_buff()
drivers/bluetooth/hci_vhci.c:vhci_write(struct kiocb *iocb, struct iov_iter *from)
fs/read_write.c:__kernel_write(struct file *file, const void *buf, size_t count, loff_t *pos)
fs/read_write.c:do_iter_write(struct file *file, struct iov_iter *iter, loff_t *pos, rwf_t flags)
fs/read_write.c:do_writev(unsigned long fd, const struct iovec __user *vec, unsigned long vlen, rwf_t flags)
fs/read_write.c:ksys_write(unsigned int fd, const char __user *buf, size_t count)
fs/read_write.c:new_sync_write(struct file *filp, const char __user *buf, size_t len, loff_t *ppos)
syz_emit_vhci()
fs/read_write.c:vfs_iocb_iter_write(struct file *file, struct kiocb *iocb, struct iov_iter *iter)
fs/read_write.c:vfs_write(struct file *file, const char __user *buf, size_t count, loff_t *pos)
fs/read_write.c:vfs_writev(struct file *file, const struct iovec __user *vec, unsigned long vlen, loff_t *pos, rwf_t flags)
drivers/bluetooth/hci_vhci.c:vhci_write(struct kiocb *iocb, struct iov_iter *from)
net/bluetooth/hci_sock.c:hci_sock_bind(struct socket *sock, struct sockaddr *addr, int addr_len)
net/bluetooth/hci_sock.c:hci_sock_bound_ioctl(struct sock *sk, unsigned int cmd, unsigned long arg)
net/bluetooth/hci_sock.c:hci_sock_create(struct net *net, struct socket *sock, int protocol, int kern)
net/bluetooth/hci_sock.c:hci_sock_dev_event(struct hci_dev *hdev, int event)
net/bluetooth/hci_sock.c:hci_sock_ioctl(struct socket *sock, unsigned int cmd, unsigned long arg)
net/bluetooth/hci_sock.c:hci_sock_recvmsg(struct socket *sock, struct msghdr *msg, size_t len, int flags)
net/bluetooth/hci_sock.c:hci_sock_release(struct socket *sock)
net/bluetooth/hci_sock.c:hci_sock_sendmsg(struct socket *sock, struct msghdr *msg, size_t len)
drivers/bluetooth/btusb.c:btusb_free_frags(struct btusb_data *data)
drivers/bluetooth/btusb.c:btusb_send_frame(struct hci_dev *hdev, struct sk_buff *skb)
drivers/bluetooth/btusb.c:btusb_tx_complete(struct urb *urb)
net/bluetooth/l2cap_core.c:l2cap_data_channel(struct l2cap_conn *conn, u16 cid, struct sk_buff *skb)
net/bluetooth/l2cap_core.c:l2cap_recv_acldata(struct hci_conn *hcon, struct sk_buff *skb, u16 flags)
net/bluetooth/l2cap_core.c:l2cap_recv_frame(struct l2cap_conn *conn, struct sk_buff *skb)
func for case 14f3125f37b7c76896b25c222159f6c205ff7e08
add_key()
del_key()
get_key()
net/mac80211/cfg.c:ieee80211_add_key(struct wiphy *wiphy, struct net_device *dev, u8 key_idx, bool pairwise, const u8 *mac_addr, struct key_params *params)
net/mac80211/cfg.c:ieee80211_add_nan_func(struct wiphy *wiphy, struct wireless_dev *wdev, struct cfg80211_nan_func *nan_func)
net/mac80211/cfg.c:ieee80211_add_station(struct wiphy *wiphy, struct net_device *dev, const u8 *mac, struct station_parameters *params)
net/mac80211/cfg.c:ieee80211_change_iface(struct wiphy *wiphy, struct net_device *dev, enum nl80211_iftype type, struct vif_params *params)
net/mac80211/cfg.c:ieee80211_change_station(struct wiphy *wiphy, struct net_device *dev, const u8 *mac, struct station_parameters *params)
net/mac80211/cfg.c:ieee80211_del_key(struct wiphy *wiphy, struct net_device *dev, u8 key_idx, bool pairwise, const u8 *mac_addr)
net/mac80211/cfg.c:ieee80211_dump_station(struct wiphy *wiphy, struct net_device *dev, int idx, u8 *mac, struct station_info *sinfo)
net/mac80211/cfg.c:ieee80211_get_key(struct wiphy *wiphy, struct net_device *dev, u8 key_idx, bool pairwise, const u8 *mac_addr, void *cookie, void (*callback)(void *cookie, struct key_params *params))
net/mac80211/cfg.c:ieee80211_get_station(struct wiphy *wiphy, struct net_device *dev, const u8 *mac, struct station_info *sinfo)
net/mac80211/cfg.c:ieee80211_nan_change_conf(struct wiphy *wiphy, struct wireless_dev *wdev, struct cfg80211_nan_conf *conf, u32 changes)
net/mac80211/cfg.c:ieee80211_set_mon_options(struct ieee80211_sub_if_data *sdata, struct vif_params *params)
net/mac80211/cfg.c:ieee80211_set_mu_mimo_follow(struct ieee80211_sub_if_data *sdata, struct vif_params *params)
net/mac80211/cfg.c:ieee80211_set_tx(struct ieee80211_sub_if_data *sdata, const u8 *mac_addr, u8 key_idx)
net/mac80211/cfg.c:ieee80211_start_nan(struct wiphy *wiphy, struct wireless_dev *wdev, struct cfg80211_nan_conf *conf)
net/mac80211/cfg.c:sta_apply_parameters(struct ieee80211_local *local, struct sta_info *sta, struct station_parameters *params)
DEFAULT_MGMT()
DEL_KEY()
net/mac80211/key.c:__ieee80211_key_destroy(struct ieee80211_key *key, bool delay_tailroom)
net/mac80211/key.c:__ieee80211_set_default_key(struct ieee80211_sub_if_data *sdata, int idx, bool uni, bool multi)
net/mac80211/key.c:__ieee80211_set_default_mgmt_key(struct ieee80211_sub_if_data *sdata, int idx)
net/mac80211/key.c:ieee80211_free_keys(struct ieee80211_sub_if_data *sdata, bool force_synchronize)
net/mac80211/key.c:ieee80211_free_keys_iface(struct ieee80211_sub_if_data *sdata, struct list_head *keys)
net/mac80211/key.c:ieee80211_free_sta_keys(struct ieee80211_local *local, struct sta_info *sta)
net/mac80211/key.c:ieee80211_key_alloc()
net/mac80211/key.c:ieee80211_key_disable_hw_accel(struct ieee80211_key *key)
net/mac80211/key.c:ieee80211_key_enable_hw_accel(struct ieee80211_key *key)
net/mac80211/key.c:ieee80211_key_free_common(struct ieee80211_key *key)
net/mac80211/key.c:ieee80211_key_identical(struct ieee80211_sub_if_data *sdata, struct ieee80211_key *old, struct ieee80211_key *new)
net/mac80211/key.c:ieee80211_key_link(struct ieee80211_key *key, struct ieee80211_sub_if_data *sdata, struct sta_info *sta)
net/mac80211/key.c:ieee80211_key_replace(struct ieee80211_sub_if_data *sdata, struct sta_info *sta, bool pairwise, struct ieee80211_key *old, struct ieee80211_key *new)
net/mac80211/key.c:ieee80211_pairwise_rekey(struct ieee80211_key *old, struct ieee80211_key *new)
net/mac80211/key.c:ieee80211_remove_key(struct ieee80211_key_conf *keyconf)
NL80211_CMD_DEL_KEY()
net/wireless/nl80211.c:get_key_callback(void *c, struct key_params *params)
net/mac80211/cfg.c:ieee80211_del_key(struct wiphy *wiphy, struct net_device *dev, u8 key_idx, bool pairwise, const u8 *mac_addr)
ieee80211_key()
net/wireless/nl80211.c:nl80211_crypto_settings(struct cfg80211_registered_device *rdev, struct genl_info *info, struct cfg80211_crypto_settings *settings, int cipher_limit)
net/wireless/nl80211.c:nl80211_del_key(struct sk_buff *skb, struct genl_info *info)
net/wireless/nl80211.c:nl80211_get_key(struct sk_buff *skb, struct genl_info *info)
net/wireless/nl80211.c:nl80211_new_key(struct sk_buff *skb, struct genl_info *info)
net/wireless/nl80211.c:nl80211_parse_key(struct genl_info *info, struct key_parse *k)
net/wireless/nl80211.c:nl80211_parse_key_new(struct genl_info *info, struct nlattr *key, struct key_parse *k)
net/wireless/nl80211.c:nl80211_parse_key_old(struct genl_info *info, struct key_parse *k)
net/wireless/nl80211.c:nl80211_parse_sta_channel_info(struct genl_info *info, struct station_parameters *params)
net/wireless/nl80211.c:nl80211_parse_sta_txpower_setting(struct genl_info *info, struct station_parameters *params)
net/wireless/nl80211.c:nl80211_parse_sta_wme(struct genl_info *info, struct station_parameters *params)
net/wireless/nl80211.c:nl80211_parse_tx_bitrate_mask(struct genl_info *info, struct nlattr *attrs[], enum nl80211_attrs attr, struct cfg80211_bitrate_mask *mask, struct net_device *dev)
net/wireless/nl80211.c:nl80211_set_key(struct sk_buff *skb, struct genl_info *info)
net/wireless/nl80211.c:nl80211_set_station_tdls(struct genl_info *info, struct station_parameters *params)
nl80211_validate_key_link_id()
net/mac80211/main.c:ieee80211_configure_filter(struct ieee80211_local *local)
net/mac80211/cfg.c:ieee80211_del_key(struct wiphy *wiphy, struct net_device *dev, u8 key_idx, bool pairwise, const u8 *mac_addr)
net/mac80211/main.c:ieee80211_free_hw(struct ieee80211_hw *hw)
net/mac80211/main.c:ieee80211_hw_config(struct ieee80211_local *local, u32 changed)
net/mac80211/main.c:ieee80211_init(void)
net/mac80211/main.c:ieee80211_init_cipher_suites(struct ieee80211_local *local)
net/mac80211/main.c:ieee80211_register_hw(struct ieee80211_hw *hw)
net/mac80211/main.c:ieee80211_restart_hw(struct ieee80211_hw *hw)
net/mac80211/main.c:ieee80211_unregister_hw(struct ieee80211_hw *hw)
net/mac80211/iface.c:ieee80211_change_mac(struct net_device *dev, void *addr)
net/mac80211/iface.c:ieee80211_do_open(struct wireless_dev *wdev, bool coming_up)
net/mac80211/iface.c:ieee80211_do_stop(struct ieee80211_sub_if_data *sdata, bool going_down)
net/mac80211/iface.c:ieee80211_if_add(struct ieee80211_local *local, const char *name, unsigned char name_assign_type, struct wireless_dev **new_wdev, enum nl80211_iftype type, struct vif_params *params)
net/mac80211/iface.c:ieee80211_if_remove(struct ieee80211_sub_if_data *sdata)
net/mac80211/iface.c:ieee80211_setup_sdata(struct ieee80211_sub_if_data *sdata, enum nl80211_iftype type)
net/mac80211/iface.c:ieee80211_teardown_sdata(struct ieee80211_sub_if_data *sdata)
net/mac80211/iface.c:ieee80211_verify_mac(struct ieee80211_sub_if_data *sdata, u8 *addr, bool check_dup)
net/mac80211/mlme.c:ieee80211_destroy_assoc_data(struct ieee80211_sub_if_data *sdata, bool assoc, bool abandon)
net/mac80211/mlme.c:ieee80211_destroy_auth_data(struct ieee80211_sub_if_data *sdata, bool assoc)
ieee80211_disconnect()
net/mac80211/mlme.c:ieee80211_mgd_deauth(struct ieee80211_sub_if_data *sdata, struct cfg80211_deauth_request *req)
net/mac80211/mlme.c:ieee80211_mgd_disassoc(struct ieee80211_sub_if_data *sdata, struct cfg80211_disassoc_request *req)
net/mac80211/mlme.c:ieee80211_report_disconnect(struct ieee80211_sub_if_data *sdata, const u8 *buf, size_t len, bool tx, u16 reason)
net/mac80211/mlme.c:ieee80211_set_disassoc(struct ieee80211_sub_if_data *sdata, u16 stype, u16 reason, bool tx, u8 *frame_buf)
net/mac80211/mlme.c:ieee80211_sta_rx_queued_mgmt(struct ieee80211_sub_if_data *sdata, struct sk_buff *skb)
net/mac80211/util.c:ieee80211_build_preq_ies(struct ieee80211_sub_if_data *sdata, u8 *buffer, size_t buffer_len, struct ieee80211_scan_ies *ie_desc, const u8 *ie, size_t ie_len, u8 bands_used, u32 *rate_masks, struct cfg80211_chan_def *chandef, u32 flags)
net/mac80211/util.c:ieee80211_build_probe_req()
net/mac80211/util.c:ieee80211_parse_bitrates(struct cfg80211_chan_def *chandef, const struct ieee80211_supported_band *sband, const u8 *srates, int srates_len, u32 *rates)
net/mac80211/util.c:ieee80211_regulatory_limit_wmm_params(struct ieee80211_sub_if_data *sdata, struct ieee80211_tx_queue_params *qparam, int ac)
net/mac80211/util.c:ieee80211_send_auth(struct ieee80211_sub_if_data *sdata, u16 transaction, u16 auth_alg, u16 status, const u8 *extra, size_t extra_len, const u8 *da, const u8 *bssid, const u8 *key, u8 key_len, u8 key_idx, u32 tx_flags)
net/mac80211/util.c:ieee80211_send_deauth_disassoc(struct ieee80211_sub_if_data *sdata, const u8 *da, const u8 *bssid, u16 stype, u16 reason, bool send_frame, u8 *frame_buf)
net/mac80211/util.c:ieee80211_set_wmm_default(struct ieee80211_sub_if_data *sdata, bool bss_notify, bool enable_qos)
net/mac80211/util.c:ieee80211_sta_get_rates(struct ieee80211_sub_if_data *sdata, struct ieee802_11_elems *elems, enum nl80211_band band, u32 *basic_rates)
net/netlink/genetlink.c:genl_family_rcv_msg(const struct genl_family *family, struct sk_buff *skb, struct nlmsghdr *nlh, struct netlink_ext_ack *extack)
net/netlink/genetlink.c:genl_family_rcv_msg_doit(const struct genl_family *family, struct sk_buff *skb, struct nlmsghdr *nlh, struct netlink_ext_ack *extack, const struct genl_ops *ops, int hdrlen, struct net *net)
net/netlink/genetlink.c:genl_rcv_msg(struct sk_buff *skb, struct nlmsghdr *nlh, struct netlink_ext_ack *extack)
net/netlink/af_netlink.c:netlink_rcv_skb(struct sk_buff *skb, int (*cb)(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *))
net/netlink/af_netlink.c:netlink_sendmsg(struct socket *sock, struct msghdr *msg, size_t len)
net/netlink/af_netlink.c:netlink_unicast(struct sock *ssk, struct sk_buff *skb, u32 portid, int nonblock)
net/wireless/rdev-ops.h:rdev_add_key(struct cfg80211_registered_device *rdev, struct net_device *netdev, u8 key_index, bool pairwise, const u8 *mac_addr, struct key_params *params)
net/wireless/rdev-ops.h:rdev_del_key(struct cfg80211_registered_device *rdev, struct net_device *netdev, u8 key_index, bool pairwise, const u8 *mac_addr)
net/wireless/rdev-ops.h:rdev_get_key(struct cfg80211_registered_device *rdev, struct net_device *netdev, u8 key_index, bool pairwise, const u8 *mac_addr, void *cookie, void (*callback)(void *cookie, struct key_params*))
func for case 1fbd9fd0ef463a9811d2c5b7d206f119cf259601
_exit()
_init()
_mem()
_register()
_unregister()
smc_net_exit()
net/smc/af_smc.c:smc_net_init(struct net *net)
smc_sysctl()
smc_sysctl_exit()
smc_sysctl_header_free()
smc_sysctl_header_init()
smc_sysctl_init()
smc_sysctl_mem_init()
smc_sysctl_net_exit()
net/smc/smc_sysctl.c:smc_sysctl_net_init(struct net *net)
smc_sysctl_ops_free()
smc_sysctl_ops_init()
smc_sysctl_register()
smc_sysctl_table_free()
smc_sysctl_table_init()
smc_sysctl_unregister()
net/smc/af_smc.c:__smc_connect(struct smc_sock *smc)
net/smc/af_smc.c:__smc_release(struct smc_sock *smc)
_work()
af_smc()
net/smc/af_smc.c:smc_accept(struct socket *sock, struct socket *new_sock, int flags, bool kern)
net/smc/af_smc.c:smc_clcsock_accept(struct smc_sock *lsmc, struct smc_sock **new_smc)
net/smc/af_smc.c:smc_connect(struct socket *sock, struct sockaddr *addr, int alen, int flags)
net/smc/af_smc.c:smc_connect_work(struct work_struct *work)
smc_create()
net/smc/af_smc.c:smc_exit(void)
net/smc/af_smc.c:smc_init(void)
net/smc/af_smc.c:smc_listen(struct socket *sock, int backlog)
net/smc/af_smc.c:smc_listen_work(struct work_struct *work)
net/smc/af_smc.c:smc_net_init(struct net *net)
net/smc/af_smc.c:smc_release(struct socket *sock)
net/smc/af_smc.c:smc_sock_alloc()
net/smc/af_smc.c:smc_tcp_listen_work(struct work_struct *work)
__net_gen_cookie()
net/core/net_namespace.c:alloc_netid(struct net *net, struct net *peer, int reqid)
net/core/net_namespace.c:cleanup_net(struct work_struct *work)
net/core/net_namespace.c:copy_net_ns()
net/core/net_namespace.c:net_alloc()
net/core/net_namespace.c:net_alloc_generic()
net/core/net_namespace.c:net_assign_generic(struct net *net, unsigned int id, void *data)
ops_()
net/core/net_namespace.c:ops_exit_list(const struct pernet_operations *ops, struct list_head *net_exit_list)
net/core/net_namespace.c:ops_free_list(const struct pernet_operations *ops, struct list_head *net_exit_list)
net/core/net_namespace.c:ops_init(const struct pernet_operations *ops, struct net *net)
net/core/net_namespace.c:peernet2id_alloc(struct net *net, struct net *peer, gfp_t gfp)
net/core/net_namespace.c:register_pernet_operations(struct list_head *list, struct pernet_operations *ops)
net/core/net_namespace.c:setup_net(struct net *net, struct user_namespace *user_ns)
net/core/net_namespace.c:unhash_nsid(struct net *net, struct net *last)
net/core/net_namespace.c:unregister_pernet_operations(struct pernet_operations *ops)
kernel/nsproxy.c:copy_namespaces(unsigned long flags, struct task_struct *tsk)
kernel/nsproxy.c:create_new_namespaces()
kernel/nsproxy.c:free_nsproxy(struct nsproxy *ns)
kernel/nsproxy.c:prepare_nsset(unsigned flags, struct nsset *nsset)
kernel/nsproxy.c:unshare_nsproxy_namespaces(unsigned long unshare_flags, struct nsproxy **new_nsp, struct cred *new_cred, struct fs_struct *new_fs)
kernel/nsproxy.c:validate_nsset(struct nsset *nsset, struct pid *pid)
mm/util.c:kmemdup_nul()
mm/util.c:kvmalloc_node()
mm/util.c:memdup_user()
mm/util.c:memdup_user_nul()
mm/util.c:strndup_user()
mm/util.c:vm_mmap(struct file *file, unsigned long addr, unsigned long len, unsigned long prot, unsigned long flag, unsigned long offset)
mm/util.c:vmemdup_user()
kernel/fork.c:copy_files(unsigned long clone_flags, struct task_struct *tsk)
kernel/fork.c:copy_fs(unsigned long clone_flags, struct task_struct *tsk)
kernel/fork.c:copy_mm(unsigned long clone_flags, struct task_struct *tsk)
kernel/fork.c:copy_process()
kernel/fork.c:ksys_unshare(unsigned long unshare_flags)
kernel/fork.c:unshare_fd(unsigned long unshare_flags, unsigned int max_fds, struct files_struct **new_fdp)
kernel/fork.c:unshare_files(void)
kernel/fork.c:unshare_fs(unsigned long unshare_flags, struct fs_struct **new_fsp)
net/smc/af_smc.c:smc_net_init(struct net *net)
smc_sysctl()
net/smc/smc_sysctl.c:smc_sysctl_net_init(struct net *net)
af_smc()
smc_core()
net/smc/af_smc.c:smc_net_init(struct net *net)
smc_sysctl()
net/smc/smc_sysctl.c:smc_sysctl_net_init(struct net *net)
net/smc/smc_pnet.c:smc_pnet_create_pnetids_list(struct net *net)
net/smc/smc_pnet.c:smc_pnet_destroy_pnetids_list(struct net *net)
net/smc/smc_pnet.c:smc_pnet_net_init(struct net *net)
func for case 223c64b1a2c03f0d67d64fdf69606ee2d5e26672
_free()
_purge()
_release()
net/batman-adv/network-coding.c:batadv_nc_fwd_flush(struct batadv_priv *bat_priv, struct batadv_nc_path *nc_path, struct batadv_nc_packet *nc_packet))
net/batman-adv/network-coding.c:batadv_nc_init_bat_priv(struct batadv_priv *bat_priv))
net/batman-adv/network-coding.c:batadv_nc_mesh_free(struct batadv_priv *bat_priv))
net/batman-adv/network-coding.c:batadv_nc_mesh_init(struct batadv_priv *bat_priv))
net/batman-adv/network-coding.c:batadv_nc_node_release(struct kref *ref))
net/batman-adv/network-coding.c:batadv_nc_path_release(struct kref *ref))
net/batman-adv/network-coding.c:batadv_nc_process_nc_paths(struct batadv_priv *bat_priv, struct batadv_hashtable *hash, bool (*process_fn)(struct batadv_priv *, struct batadv_nc_path *, struct batadv_nc_packet *)))
net/batman-adv/network-coding.c:batadv_nc_purge_orig(struct batadv_priv *bat_priv, struct batadv_orig_node *orig_node, bool (*to_purge)(struct batadv_priv *, struct batadv_nc_node *)))
net/batman-adv/network-coding.c:batadv_nc_purge_orig_hash(struct batadv_priv *bat_priv))
net/batman-adv/network-coding.c:batadv_nc_purge_orig_nc_nodes(struct batadv_priv *bat_priv, struct list_head *list, spinlock_t *lock, bool (*to_purge)(struct batadv_priv *, struct batadv_nc_node *)))
net/batman-adv/network-coding.c:batadv_nc_purge_paths(struct batadv_priv *bat_priv, struct batadv_hashtable *hash, bool (*to_purge)(struct batadv_priv *, struct batadv_nc_path *)))
net/batman-adv/network-coding.c:batadv_nc_sniffed_purge(struct batadv_priv *bat_priv, struct batadv_nc_path *nc_path, struct batadv_nc_packet *nc_packet))
net/batman-adv/network-coding.c:batadv_nc_to_purge_nc_path_coding(struct batadv_priv *bat_priv, struct batadv_nc_path *nc_path))
net/batman-adv/network-coding.c:batadv_nc_to_purge_nc_path_decoding(struct batadv_priv *bat_priv, struct batadv_nc_path *nc_path))
net/batman-adv/network-coding.c:batadv_nc_worker(struct work_struct *work))
net/batman-adv/main.c:batadv_batman_skb_recv(struct sk_buff *skb, struct net_device *dev, struct packet_type *ptype, struct net_device *orig_dev)
net/batman-adv/main.c:batadv_get_vid(struct sk_buff *skb, size_t header_len)
net/batman-adv/main.c:batadv_init(void)
net/batman-adv/main.c:batadv_is_my_mac(struct batadv_priv *bat_priv, const u8 *addr)
net/batman-adv/main.c:batadv_max_header_len(void)
net/batman-adv/main.c:batadv_mesh_free(struct net_device *soft_iface)
net/batman-adv/main.c:batadv_mesh_init(struct net_device *soft_iface)
net/batman-adv/network-coding.c:batadv_nc_mesh_free(struct batadv_priv *bat_priv))
net/batman-adv/main.c:batadv_recv_handler_init(void)
net/batman-adv/main.c:batadv_skb_crc32(struct sk_buff *skb, u8 *payload_ptr)
net/batman-adv/main.c:batadv_skb_set_priority(struct sk_buff *skb, int offset)
net/batman-adv/main.c:batadv_throw_uevent(struct batadv_priv *bat_priv, enum batadv_uev_type type, enum batadv_uev_action action, const char *data)
debug_timer_assert_init()
timer_list()
kernel/workqueue.c:__cancel_work_timer(struct work_struct *work, bool is_dwork)
kernel/workqueue.c:__flush_work(struct work_struct *work, bool from_cancel)
kernel/workqueue.c:__queue_work(int cpu, struct workqueue_struct *wq, struct work_struct *work)
kernel/workqueue.c:delayed_work_timer_fn(struct timer_list *t)
kernel/workqueue.c:destroy_workqueue(struct workqueue_struct *wq)
kernel/workqueue.c:drain_workqueue(struct workqueue_struct *wq)
kernel/workqueue.c:flush_workqueue(struct workqueue_struct *wq)
kernel/workqueue.c:insert_work(struct pool_workqueue *pwq, struct work_struct *work, struct list_head *head, unsigned int extra_flags)
kernel/workqueue.c:put_unbound_pool(struct worker_pool *pool)
kernel/workqueue.c:pwq_unbound_release_workfn(struct work_struct *work)
kernel/workqueue.c:queue_work_on(int cpu, struct workqueue_struct *wq, struct work_struct *work)
kernel/workqueue.c:rescuer_thread(void *__rescuer)
kernel/workqueue.c:start_flush_work(struct work_struct *work, struct wq_barrier *barr, bool from_cancel)
kernel/workqueue.c:try_to_grab_pending(struct work_struct *work, bool is_dwork, unsigned long *flags)
kernel/workqueue.c:worker_thread(void *__worker)
lib/debugobjects.c:__debug_object_init(void *addr, const struct debug_obj_descr *descr, int onstack)
lib/debugobjects.c:debug_object_activate(void *addr, const struct debug_obj_descr *descr)
lib/debugobjects.c:debug_object_active_state(void *addr, const struct debug_obj_descr *descr, unsigned int expect, unsigned int next)
lib/debugobjects.c:debug_object_assert_init(void *addr, const struct debug_obj_descr *descr)
lib/debugobjects.c:debug_object_deactivate(void *addr, const struct debug_obj_descr *descr)
lib/debugobjects.c:debug_object_destroy(void *addr, const struct debug_obj_descr *descr)
lib/debugobjects.c:debug_object_free(void *addr, const struct debug_obj_descr *descr)
lib/debugobjects.c:debug_print_object(struct debug_obj *obj, char *msg)
net/batman-adv/soft-interface.c:batadv_interface_rx(struct net_device *soft_iface, struct sk_buff *skb, int hdr_size, struct batadv_orig_node *orig_node)
net/batman-adv/soft-interface.c:batadv_interface_tx(struct sk_buff *skb, struct net_device *soft_iface)
net/batman-adv/soft-interface.c:batadv_softif_destroy_netlink(struct net_device *soft_iface, struct list_head *head)
net/batman-adv/soft-interface.c:batadv_softif_free(struct net_device *dev)
net/batman-adv/soft-interface.c:batadv_softif_init_early(struct net_device *dev)
net/batman-adv/soft-interface.c:batadv_softif_init_late(struct net_device *dev)
net/batman-adv/soft-interface.c:batadv_softif_newlink(struct net *src_net, struct net_device *dev, struct nlattr *tb[], struct nlattr *data[], struct netlink_ext_ack *extack)
net/batman-adv/soft-interface.c:batadv_softif_validate(struct nlattr *tb[], struct nlattr *data[], struct netlink_ext_ack *extack)
kernel/time/timer.c:__mod_timer(struct timer_list *timer, unsigned long expires, unsigned int options)
kernel/time/timer.c:add_timer_on(struct timer_list *timer, int cpu)
kernel/time/timer.c:call_timer_fn(struct timer_list *timer, void (*fn)(struct timer_list *), unsigned long baseclk)
lib/debugobjects.c:debug_object_assert_init(void *addr, const struct debug_obj_descr *descr)
kernel/time/timer.c:del_timer(struct timer_list *timer)
kernel/time/timer.c:detach_if_pending(struct timer_list *timer, struct timer_base *base, bool clear_pending)
kernel/time/timer.c:detach_timer(struct timer_list *timer, bool clear_pending)
kernel/time/timer.c:do_init_timer(struct timer_list *timer, void (*func)(struct timer_list *), unsigned int flags, const char *name, struct lock_class_key *key)
kernel/time/timer.c:expire_timers(struct timer_base *base, struct hlist_head *head)
__rtnl_newlink()
net/core/rtnetlink.c:rtnl_configure_link(struct net_device *dev, const struct ifinfomsg *ifm)
net/core/rtnetlink.c:rtnl_create_link()
net/core/rtnetlink.c:rtnl_dellink(struct sk_buff *skb, struct nlmsghdr *nlh, struct netlink_ext_ack *extack)
net/core/rtnetlink.c:rtnl_group_changelink(const struct sk_buff *skb, struct net *net, int group, struct ifinfomsg *ifm, struct netlink_ext_ack *extack, struct nlattr **tb)
net/core/rtnetlink.c:rtnl_link_register(struct rtnl_link_ops *ops)
rtnl_newlink_create()
net/core/rtnetlink.c:rtnl_setlink(struct sk_buff *skb, struct nlmsghdr *nlh, struct netlink_ext_ack *extack)
kernel/workqueue.c:__cancel_work_timer(struct work_struct *work, bool is_dwork)
debug_timer_assert_init()
kernel/time/timer.c:del_timer(struct timer_list *timer)
kernel/workqueue.c:try_to_grab_pending(struct work_struct *work, bool is_dwork, unsigned long *flags)
net/batman-adv/network-coding.c:batadv_nc_mesh_free(struct batadv_priv *bat_priv))
net/batman-adv/translation-table.c:batadv_tt_global_purge(struct batadv_priv *bat_priv)
net/batman-adv/translation-table.c:batadv_tt_local_purge(struct batadv_priv *bat_priv, int timeout)
net/batman-adv/translation-table.c:batadv_tt_purge(struct work_struct *work)
debug_timer_assert_init()
net/core/dev.c:dev_close(struct net_device *dev)
net/core/dev.c:register_netdevice(struct net_device *dev)
net/core/dev.c:unregister_netdevice_many(struct list_head *head)
func for case 2e1943a94647f7732dd6fc60368642d6e8dc91b1
net/bluetooth/hci_core.c:hci_acldata_packet(struct hci_dev *hdev, struct sk_buff *skb)
net/bluetooth/hci_core.c:hci_add_acl_hdr(struct sk_buff *skb, __u16 handle, __u16 flags)
net/bluetooth/hci_core.c:hci_chan_sent()
net/bluetooth/hci_core.c:hci_dev_do_close(struct hci_dev *hdev)
net/bluetooth/hci_core.c:hci_discovery_set_state(struct hci_dev *hdev, int state)
net/bluetooth/hci_core.c:hci_link_tx_to(struct hci_dev *hdev, __u8 type)
net/bluetooth/hci_core.c:hci_queue_acl(struct hci_chan *chan, struct sk_buff_head *queue, struct sk_buff *skb, __u16 flags)
net/bluetooth/hci_core.c:hci_recv_frame(struct hci_dev *hdev, struct sk_buff *skb)
net/bluetooth/hci_core.c:hci_reset_req(struct hci_request *req, unsigned long opt)
net/bluetooth/hci_core.c:hci_rx_work(struct work_struct *work)
net/bluetooth/hci_core.c:hci_sched_acl(struct hci_dev *hdev)
net/bluetooth/hci_core.c:hci_sched_acl_blk(struct hci_dev *hdev)
net/bluetooth/hci_core.c:hci_sched_acl_pkt(struct hci_dev *hdev)
net/bluetooth/hci_core.c:hci_send_acl(struct hci_chan *chan, struct sk_buff *skb, __u16 flags)
net/bluetooth/hci_core.c:hci_send_frame(struct hci_dev *hdev, struct sk_buff *skb)
net/bluetooth/hci_core.c:hci_send_acl(struct hci_chan *chan, struct sk_buff *skb, __u16 flags)
net/bluetooth/l2cap_core.c:l2cap_chan_close(struct l2cap_chan *chan, int reason)
net/bluetooth/l2cap_core.c:l2cap_chan_del(struct l2cap_chan *chan, int err)
net/bluetooth/l2cap_core.c:l2cap_conn_del(struct hci_conn *hcon, int err)
net/bluetooth/l2cap_core.c:l2cap_do_move_cancel(struct l2cap_chan *chan, int result)
net/bluetooth/l2cap_core.c:l2cap_do_move_respond(struct l2cap_chan *chan, int result)
net/bluetooth/l2cap_core.c:l2cap_logical_finish_move(struct l2cap_chan *chan, struct hci_chan *hchan)
net/bluetooth/l2cap_core.c:l2cap_move_channel_req(struct l2cap_conn *conn, struct l2cap_cmd_hdr *cmd, u16 cmd_len, void *data)
net/bluetooth/l2cap_core.c:l2cap_move_channel_rsp(struct l2cap_conn *conn, struct l2cap_cmd_hdr *cmd, u16 cmd_len, void *data)
net/bluetooth/l2cap_core.c:l2cap_move_continue(struct l2cap_conn *conn, u16 icid, u16 result)
net/bluetooth/l2cap_core.c:l2cap_move_done(struct l2cap_chan *chan)
net/bluetooth/l2cap_core.c:l2cap_move_fail(struct l2cap_conn *conn, u8 ident, u16 icid, u16 result)
net/bluetooth/l2cap_core.c:l2cap_move_setup(struct l2cap_chan *chan)
net/bluetooth/l2cap_core.c:l2cap_move_start(struct l2cap_chan *chan)
net/bluetooth/l2cap_core.c:l2cap_send_move_chan_cfm_icid(struct l2cap_conn *conn, u16 icid)
net/bluetooth/l2cap_core.c:l2cap_send_move_chan_rsp(struct l2cap_chan *chan, u16 result)
net/bluetooth/hci_conn.c:hci_chan_create()
net/bluetooth/hci_event.c:hci_chan_selected_evt(struct hci_dev *hdev, struct sk_buff *skb)
net/bluetooth/hci_event.c:hci_conn_complete_evt(struct hci_dev *hdev, struct sk_buff *skb)
net/bluetooth/hci_event.c:hci_conn_request_evt(struct hci_dev *hdev, struct sk_buff *skb)
net/bluetooth/hci_event.c:hci_disconn_complete_evt(struct hci_dev *hdev, struct sk_buff *skb)
net/bluetooth/hci_event.c:hci_disconn_loglink_complete_evt(struct hci_dev *hdev, struct sk_buff *skb)
net/bluetooth/hci_event.c:hci_disconn_phylink_complete_evt(struct hci_dev *hdev, struct sk_buff *skb)
hci_event()
net/bluetooth/hci_event.c:hci_event_packet(struct hci_dev *hdev, struct sk_buff *skb)
net/bluetooth/hci_event.c:hci_le_conn_complete_evt(struct hci_dev *hdev, struct sk_buff *skb)
net/bluetooth/hci_event.c:hci_le_meta_evt(struct hci_dev *hdev, struct sk_buff *skb)
net/bluetooth/hci_event.c:hci_loglink_complete_evt(struct hci_dev *hdev, struct sk_buff *skb)
net/bluetooth/hci_event.c:hci_phy_link_complete_evt(struct hci_dev *hdev, struct sk_buff *skb)
net/bluetooth/hci_event.c:hci_remote_ext_features_evt(struct hci_dev *hdev, struct sk_buff *skb)
net/bluetooth/hci_event.c:hci_remote_features_evt(struct hci_dev *hdev, struct sk_buff *skb)
net/bluetooth/hci_event.c:hci_sync_conn_complete_evt(struct hci_dev *hdev, struct sk_buff *skb)
net/bluetooth/hci_conn.c:hci_acl_create_connection(struct hci_conn *conn)
net/bluetooth/hci_conn.c:hci_chan_create()
net/bluetooth/hci_conn.c:hci_chan_del(struct hci_chan *chan)
hci_conn()
net/bluetooth/hci_conn.c:hci_conn_add()
net/bluetooth/hci_conn.c:hci_conn_cleanup(struct hci_conn *conn)
net/bluetooth/hci_conn.c:hci_conn_del(struct hci_conn *conn)
net/bluetooth/hci_conn.c:hci_connect_acl()
net/bluetooth/hci_conn.c:hci_disconnect(struct hci_conn *conn, __u8 reason)
include/net/bluetooth/hci_core.h:hci_conn_drop(struct hci_conn *conn)
include/net/bluetooth/hci_core.h:hci_conn_hash_add(struct hci_dev *hdev, struct hci_conn *c)
include/net/bluetooth/hci_core.h:hci_conn_hash_del(struct hci_dev *hdev, struct hci_conn *c)
include/net/bluetooth/hci_core.h:hci_conn_hash_lookup_handle()
include/net/bluetooth/hci_core.h:hci_conn_hold(struct hci_conn *conn)
include/net/bluetooth/hci_core.h:hci_conn_lookup_type(struct hci_dev *hdev, __u16 handle)
include/net/bluetooth/hci_core.h:hci_connect_cfm(struct hci_conn *conn, __u8 status)
hci_core()
include/net/bluetooth/hci_core.h:hci_disconn_cfm(struct hci_conn *conn, __u8 reason)
net/bluetooth/hci_core.c:hci_send_acl(struct hci_chan *chan, struct sk_buff *skb, __u16 flags)
mm/kasan/common.c:__kasan_kmalloc()
mm/kasan/common.c:__kasan_slab_free(struct kmem_cache *cache, void *object, unsigned long ip, bool quarantine)
mm/kasan/common.c:kasan_cache_create(struct kmem_cache *cache, unsigned int *size, slab_flags_t *flags)
mm/kasan/common.c:kasan_kmalloc_large()
mm/kasan/common.c:kasan_poison_shadow(const void *address, size_t size, u8 value)
mm/kasan/common.c:kasan_set_free_info(struct kmem_cache *cache, void *object, u8 tag)
mm/kasan/common.c:kasan_unpoison_shadow(const void *address, size_t size)
mm/kasan/common.c:save_stack(gfp_t flags)
mm/slab.c:___cache_free(struct kmem_cache *cachep, void *objp, unsigned long caller)
mm/slab.c:cache_alloc_refill()
mm/slab.c:cache_free_debugcheck()
mm/slab.c:drain_array(struct kmem_cache *cachep, struct kmem_cache_node *n, struct array_cache *ac, int node)
mm/slab.c:free_block(struct kmem_cache *cachep, void **objpp, int nr_objects, int node, struct list_head *list)
mm/slab.c:kmem_cache_alloc_node_trace()
mm/slab.c:kmem_cache_alloc_trace()
mm/slab.c:kmem_cache_free(struct kmem_cache *cachep, void *objp)
hci_core()
net/bluetooth/hci_core.c:hci_send_acl(struct hci_chan *chan, struct sk_buff *skb, __u16 flags)
l2cap_core()
lib/dump_stack.c:dump_stack(void)
dump_stack_lvl()
lib/dump_stack.c:dump_stack_print_info(const char *log_lvl)
hci_core()
net/bluetooth/hci_event.c:hci_disconn_loglink_complete_evt(struct hci_dev *hdev, struct sk_buff *skb)
hci_event()
net/bluetooth/hci_core.c:hci_send_acl(struct hci_chan *chan, struct sk_buff *skb, __u16 flags)
l2cap_core()
net/bluetooth/l2cap_core.c:l2cap_move_channel_rsp(struct l2cap_conn *conn, struct l2cap_cmd_hdr *cmd, u16 cmd_len, void *data)
mm/kasan/report.c:describe_object_addr(struct kmem_cache *cache, void *object, const void *addr)
mm/kasan/report.c:kasan_report(unsigned long addr, size_t size, bool is_write, unsigned long ip)
mm/kasan/report.c:print_address_description(void *addr, u8 tag)
func for case 362b5b49fced29361c0ba3007a2b3e5cd13776b5
drivers/infiniband/core/cma.c:_cma_cancel_listens(struct rdma_id_private *id_priv)
drivers/infiniband/core/cma.c:_destroy_id(struct rdma_id_private *id_priv, enum rdma_cm_state state)
drivers/infiniband/core/cma.c:cma_cancel_operation(struct rdma_id_private *id_priv, enum rdma_cm_state state)
drivers/infiniband/core/cma.c:cma_ib_handler(struct ib_cm_id *cm_id, const struct ib_cm_event *ib_event)
drivers/infiniband/core/cma.c:cma_ib_listen(struct rdma_id_private *id_priv)
drivers/infiniband/core/cma.c:cma_iw_handler(struct iw_cm_id *iw_id, struct iw_cm_event *iw_event)
drivers/infiniband/core/cma.c:cma_iw_listen(struct rdma_id_private *id_priv, int backlog)
drivers/infiniband/core/cma.c:cma_leave_mc_groups(struct rdma_id_private *id_priv)
drivers/infiniband/core/cma.c:cma_listen_handler(struct rdma_cm_id *id, struct rdma_cm_event *event)
drivers/infiniband/core/cma.c:cma_listen_on_all(struct rdma_id_private *id_priv)
drivers/infiniband/core/cma.c:cma_listen_on_dev(struct rdma_id_private *id_priv, struct cma_device *cma_dev, struct rdma_id_private **to_destroy)
drivers/infiniband/core/cma.c:cma_release_port(struct rdma_id_private *id_priv)
drivers/infiniband/core/cma.c:cma_work_handler(struct work_struct *_work)
drivers/infiniband/core/cma.c:destroy_mc(struct rdma_id_private *id_priv, struct cma_multicast *mc)
list_add_tail()
drivers/infiniband/core/cma.c:rdma_listen(truct rdma_cm_id *id, int backlog) {)
alloc_ctx()
drivers/infiniband/core/ucma.c:ucma_alloc_ctx()
drivers/infiniband/core/ucma.c:ucma_bind(struct ucma_file *file, const char __user *inbuf, int in_len, int out_len)
drivers/infiniband/core/ucma.c:ucma_cleanup_ctx_events(struct ucma_context *ctx)
drivers/infiniband/core/ucma.c:ucma_cleanup_mc_events(struct ucma_multicast *mc)
drivers/infiniband/core/ucma.c:ucma_cleanup_multicast(struct ucma_context *ctx)
drivers/infiniband/core/ucma.c:ucma_close(struct inode *inode, struct file *filp)
drivers/infiniband/core/ucma.c:ucma_connect(struct ucma_file *file, const char __user *inbuf, int in_len, int out_len)
drivers/infiniband/core/ucma.c:ucma_connect_event_handler(struct rdma_cm_id *cm_id, struct rdma_cm_event *event)
drivers/infiniband/core/ucma.c:ucma_create_id(struct ucma_file *file, const char __user *inbuf, int in_len, int out_len)
drivers/infiniband/core/ucma.c:ucma_destroy_id(struct ucma_file *file, const char __user *inbuf, int in_len, int out_len)
drivers/infiniband/core/ucma.c:ucma_destroy_private_ctx(struct ucma_context *ctx)
drivers/infiniband/core/ucma.c:ucma_event_handler(struct rdma_cm_id *cm_id, struct rdma_cm_event *event)
drivers/infiniband/core/ucma.c:ucma_listen(struct ucma_file *file, const char __user *inbuf, int in_len, int out_len)
drivers/infiniband/core/ucma.c:ucma_resolve_ip(struct ucma_file *file, const char __user *inbuf, int in_len, int out_len)
drivers/infiniband/core/ucma.c:ucma_write(struct file *filp, const char __user *buf, size_t len, loff_t *pos)
include/linux/list.h:__list_add(struct list_head *new, struct list_head *prev, struct list_head *next)
lib/list_debug.c:__list_add_valid(struct list_head *new, struct list_head *prev, struct list_head *next)
lib/list_debug.c:__list_del_entry_valid(struct list_head *entry)
drivers/infiniband/core/cma.c:__rdma_create_id()
drivers/infiniband/core/cma.c:cma_listen_on_all(struct rdma_id_private *id_priv)
list_add()
list_add_tail()
drivers/infiniband/core/cma.c:rdma_create_user_id()
drivers/infiniband/core/cma.c:rdma_listen(truct rdma_cm_id *id, int backlog) {)
drivers/infiniband/core/ucma.c:ucma_close(struct inode *inode, struct file *filp)
drivers/infiniband/core/ucma.c:ucma_close_id(struct work_struct *work)
drivers/infiniband/core/ucma.c:ucma_create_id(struct ucma_file *file, const char __user *inbuf, int in_len, int out_len)
drivers/infiniband/core/ucma.c:ucma_destroy_private_ctx(struct ucma_context *ctx)
drivers/infiniband/core/ucma.c:ucma_listen(struct ucma_file *file, const char __user *inbuf, int in_len, int out_len)
drivers/infiniband/core/ucma.c:ucma_write(struct file *filp, const char __user *buf, size_t len, loff_t *pos)
include/linux/list.h:__list_add(struct list_head *new, struct list_head *prev, struct list_head *next)
include/linux/list.h:__list_cut_position(struct list_head *list, struct list_head *head, struct list_head *entry)
include/linux/list.h:__list_del_entry(struct list_head *entry)
include/linux/list.h:__list_splice(const struct list_head *list, struct list_head *prev, struct list_head *next)
include/linux/list.h:list_cut_before(struct list_head *list, struct list_head *head, struct list_head *entry)
include/linux/list.h:list_cut_position(struct list_head *list, struct list_head *head, struct list_head *entry)
include/linux/list.h:list_replace(struct list_head *old, struct list_head *new)
include/linux/list.h:list_swap(struct list_head *entry1, struct list_head *entry2)
mm/slub.c:__slab_free(struct kmem_cache *s, struct slab *slab, void *head, void *tail, int cnt, unsigned long addr)
mm/slub.c:check_valid_pointer(struct kmem_cache *s, struct slab *slab, void *object)
mm/slub.c:do_slab_free(struct kmem_cache *s, struct slab *slab, void *head, void *tail, int cnt, unsigned long addr)
mm/slub.c:free_consistency_checks(struct kmem_cache *s, struct slab *slab, void *object, unsigned long addr)
mm/slub.c:free_debug_processing(struct kmem_cache *s, struct slab *slab, void *head, void *tail, int bulk_cnt, unsigned long addr)
mm/slub.c:slab_free(struct kmem_cache *s, struct slab *slab, void *head, void *tail, int cnt, unsigned long addr)
mm/slub.c:slab_free_freelist_hook(struct kmem_cache *s, void **head, void **tail, int *cnt)
mm/slub.c:slab_free_hook(struct kmem_cache *s, void *x, bool init)
mm/kasan/common.c:____kasan_kmalloc()
mm/kasan/common.c:____kasan_slab_free(struct kmem_cache *cache, void *object, unsigned long ip, bool quarantine, bool init)
mm/kasan/common.c:__kasan_cache_create(struct kmem_cache *cache, unsigned int *size, slab_flags_t *flags)
mm/kasan/common.c:__kasan_kmalloc_large()
mm/kasan/common.c:__kasan_krealloc()
mm/kasan/common.c:__kasan_slab_alloc()
mm/kasan/common.c:__kasan_slab_free_mempool(void *ptr, unsigned long ip)
mm/kasan/common.c:set_alloc_info(struct kmem_cache *cache, void *object, gfp_t flags, bool is_kmalloc)
mm/kasan/report.c:__kasan_report(unsigned long addr, size_t size, bool is_write, unsigned long ip)
mm/kasan/report.c:describe_object_addr(struct kmem_cache *cache, void *object, const void *addr)
mm/kasan/report.c:describe_object_stacks(struct kmem_cache *cache, void *object, const void *addr, u8 tag)
mm/kasan/report.c:end_report(unsigned long *flags, unsigned long addr)
mm/kasan/report.c:print_address_description(void *addr, u8 tag)
mm/kasan/report.c:print_error_description(struct kasan_access_info *info)
mm/kasan/report.c:print_memory_metadata(const void *addr)
mm/kasan/report.c:start_report(unsigned long *flags)
kernel/exit.c:__exit_signal(struct task_struct *tsk)
kernel/exit.c:do_exit(long code)
kernel/exit.c:release_task(struct task_struct *p)
net/core/sock.c:__sk_destruct(struct rcu_head *head)
net/core/sock.c:sk_alloc()
net/core/sock.c:sk_free(struct sock *sk)
fs/file_table.c:__fput(struct file *file)
fs/file_table.c:file_free(struct file *f)
fs/file_table.c:file_free_rcu(struct rcu_head *head)
func for case 64182208616de0ae5ebd9b1652cb213485d61fce
disable_se()
enable_se()
net/nfc/netlink.c:nfc_genl_device_added(struct nfc_dev *dev)
net/nfc/netlink.c:nfc_genl_device_removed(struct nfc_dev *dev)
net/nfc/netlink.c:nfc_genl_disable_se(struct sk_buff *skb, struct genl_info *info)
net/nfc/netlink.c:nfc_genl_enable_se(struct sk_buff *skb, struct genl_info *info)
net/nfc/netlink.c:nfc_genl_llc_get_params(struct sk_buff *skb, struct genl_info *info)
net/nfc/netlink.c:nfc_genl_llc_sdreq(struct sk_buff *skb, struct genl_info *info)
net/nfc/netlink.c:nfc_genl_llc_set_params(struct sk_buff *skb, struct genl_info *info)
net/nfc/netlink.c:nfc_genl_se_added(struct nfc_dev *dev, u32 se_idx, u16 type)
net/nfc/netlink.c:nfc_genl_se_connectivity(struct nfc_dev *dev, u8 se_idx)
net/nfc/netlink.c:nfc_genl_se_io(struct sk_buff *skb, struct genl_info *info)
net/nfc/netlink.c:nfc_genl_se_removed(struct nfc_dev *dev, u32 se_idx)
net/nfc/netlink.c:nfc_genl_se_transaction(struct nfc_dev *dev, u8 se_idx, struct nfc_evt_transaction *evt_transaction)
net/nfc/netlink.c:nfc_genl_send_se(struct sk_buff *msg, struct nfc_dev *dev, u32 portid, u32 seq, struct netlink_callback *cb, int flags)
net/nfc/netlink.c:nfc_se_io(struct nfc_dev *dev, u32 se_idx, u8 *apdu, size_t apdu_length, se_io_cb_t cb, void *cb_context)
net/nfc/netlink.c:se_io_cb(void *context, u8 *apdu, size_t apdu_len, int err)
net/nfc/core.c:nfc_add_se(struct nfc_dev *dev, u32 se_idx, u16 type)
net/nfc/core.c:nfc_alloc_send_skb()
net/nfc/core.c:nfc_allocate_device()
net/nfc/core.c:nfc_data_exchange(struct nfc_dev *dev, u32 target_idx, struct sk_buff *skb, data_exchange_cb_t cb, void *cb_context)
net/nfc/core.c:nfc_dev_down(struct nfc_dev *dev)
net/nfc/core.c:nfc_dev_up(struct nfc_dev *dev)
net/nfc/core.c:nfc_disable_se(struct nfc_dev *dev, u32 se_idx)
net/nfc/core.c:nfc_enable_se(struct nfc_dev *dev, u32 se_idx)
net/nfc/core.c:nfc_fw_download(struct nfc_dev *dev, const char *firmware_name)
net/nfc/netlink.c:nfc_genl_se_io(struct sk_buff *skb, struct genl_info *info)
net/nfc/core.c:nfc_init(void)
net/nfc/core.c:nfc_register_device(struct nfc_dev *dev)
net/nfc/core.c:nfc_release(struct device *d)
net/nfc/core.c:nfc_remove_se(struct nfc_dev *dev, u32 se_idx)
net/nfc/core.c:nfc_se_transaction(struct nfc_dev *dev, u8 se_idx, struct nfc_evt_transaction *evt_transaction)
net/nfc/core.c:nfc_unregister_device(struct nfc_dev *dev)
net/netlink/genetlink.c:ctrl_dumpfamily(struct sk_buff *skb, struct netlink_callback *cb)
net/netlink/genetlink.c:ctrl_fill_info(const struct genl_family *family, u32 portid, u32 seq, u32 flags, struct sk_buff *skb, u8 cmd)
net/netlink/genetlink.c:ctrl_fill_mcgrp_info(const struct genl_family *family, const struct genl_multicast_group *grp, int grp_id, u32 portid, u32 seq, u32 flags, struct sk_buff *skb, u8 cmd)
net/netlink/genetlink.c:ctrl_getfamily(struct sk_buff *skb, struct genl_info *info)
net/netlink/genetlink.c:genl_family_rcv_msg(const struct genl_family *family, struct sk_buff *skb, struct nlmsghdr *nlh, struct netlink_ext_ack *extack)
net/netlink/genetlink.c:genl_family_rcv_msg_doit(const struct genl_family *family, struct sk_buff *skb, struct nlmsghdr *nlh, struct netlink_ext_ack *extack, const struct genl_split_ops *ops, int hdrlen, struct net *net)
net/netlink/genetlink.c:genl_family_rcv_msg_dumpit(const struct genl_family *family, struct sk_buff *skb, struct nlmsghdr *nlh, struct netlink_ext_ack *extack, const struct genl_split_ops *ops, int hdrlen, struct net *net)
net/netlink/genetlink.c:genl_lock_done(struct netlink_callback *cb)
net/netlink/genetlink.c:genl_notify(const struct genl_family *family, struct sk_buff *skb, struct genl_info *info, u32 group, gfp_t flags)
net/netlink/genetlink.c:genl_rcv_msg(struct sk_buff *skb, struct nlmsghdr *nlh, struct netlink_ext_ack *extack)
net/netlink/genetlink.c:genl_register_family(struct genl_family *family)
net/netlink/genetlink.c:genl_start(struct netlink_callback *cb)
net/netlink/genetlink.c:genl_unregister_family(const struct genl_family *family)
net/netlink/genetlink.c:genlmsg_mcast(struct sk_buff *skb, u32 portid, unsigned long group, gfp_t flags)
net/netlink/genetlink.c:genlmsg_put()
net/nfc/netlink.c:nfc_genl_se_io(struct sk_buff *skb, struct genl_info *info)
net/nfc/nci/core.c:nci_op_ntf_packet(struct nci_dev *ndev, __u16 ntf_opcode, struct sk_buff *skb, const struct nci_driver_ops *ops, size_t n_ops)
net/nfc/nci/core.c:nci_op_rsp_packet(struct nci_dev *ndev, __u16 rsp_opcode, struct sk_buff *skb, const struct nci_driver_ops *ops, size_t n_ops)
net/nfc/nci/core.c:nci_recv_frame(struct nci_dev *ndev, struct sk_buff *skb)
net/nfc/nci/core.c:nci_request(struct nci_dev *ndev, void (*req)(struct nci_dev *ndev, const void *opt), const void *opt, __u32 timeout)
net/nfc/nci/core.c:nci_se_io(struct nfc_dev *nfc_dev, u32 se_idx, u8 *apdu, size_t apdu_length, se_io_cb_t cb, void *cb_context)
net/nfc/nci/core.c:nci_send_cmd(struct nci_dev *ndev, __u16 opcode, __u8 plen, const void *payload)
net/nfc/nci/core.c:nci_send_frame(struct nci_dev *ndev, struct sk_buff *skb)
net/nfc/nci/core.c:nci_transceive(struct nfc_dev *nfc_dev, struct nfc_target *target, struct sk_buff *skb, data_exchange_cb_t cb, void *cb_context)
sk_buff()
net/nfc/hci/core.c:hci_se_io(struct nfc_dev *nfc_dev, u32 se_idx, u8 *apdu, size_t apdu_length, se_io_cb_t cb, void *cb_context)
net/nfc/hci/core.c:nfc_hci_allocate_device()
net/nfc/hci/core.c:nfc_hci_failure(struct nfc_hci_dev *hdev, int err)
net/nfc/hci/core.c:nfc_hci_msg_rx_work(struct work_struct *work)
net/nfc/hci/core.c:nfc_hci_msg_tx_work(struct work_struct *work)
net/nfc/hci/core.c:nfc_hci_recv_from_llc(struct nfc_hci_dev *hdev, struct sk_buff *skb)
net/nfc/hci/core.c:nfc_hci_register_device(struct nfc_hci_dev *hdev)
net/nfc/hci/core.c:nfc_hci_unregister_device(struct nfc_hci_dev *hdev)
mm/slab_common.c:__do_kmalloc_node()
mm/slab_common.c:create_cache()
mm/slab_common.c:create_kmalloc_cache()
mm/slab_common.c:kmalloc_fix_flags(gfp_t flags)
mm/slab_common.c:kmalloc_size_roundup(size_t size)
mm/slab_common.c:kmalloc_trace()
mm/slab_common.c:kmem_cache_create_usercopy()
mm/slab_common.c:kmem_cache_destroy(struct kmem_cache *s)
mm/slab_common.c:shutdown_cache(struct kmem_cache *s)
slab_common()
NFC_CMD_SE_IO()
net/socket.c:____sys_sendmsg(struct socket *sock, struct msghdr *msg_sys, unsigned int flags, struct used_address *used_address, unsigned int allowed_msghdr_flags)
net/socket.c:___sys_sendmsg(struct socket *sock, struct user_msghdr __user *msg, struct msghdr *msg_sys, unsigned int flags, struct used_address *used_address, unsigned int allowed_msghdr_flags)
net/socket.c:sendmsg_copy_msghdr(struct msghdr *msg, struct user_msghdr __user *umsg, unsigned flags, struct iovec **iov)
net/nfc/netlink.c:nfc_genl_se_io(struct sk_buff *skb, struct genl_info *info)
include/net/nfc/nfc.h:nfc_set_vendor_cmds(struct nfc_dev *dev, const struct nfc_vendor_cmd *cmds, int n_cmds)
func for case 64bdf1f25f8db3d754e7b56c4d0f63a17edd8839
net/can/j1939/transport.c:__j1939_session_cancel(struct j1939_session *session, enum j1939_xtp_abort err)
net/can/j1939/transport.c:j1939_session_activate(struct j1939_session *session)
net/can/j1939/transport.c:j1939_session_deactivate(struct j1939_session *session)
net/can/j1939/transport.c:j1939_session_destroy(struct j1939_session *session)
net/can/j1939/transport.c:j1939_session_fresh_new()
net/can/j1939/transport.c:j1939_session_get_by_addr_locked()
net/can/j1939/transport.c:j1939_session_new()
net/can/j1939/transport.c:j1939_session_skb_drop_old(struct j1939_session *session)
net/can/j1939/transport.c:j1939_session_skb_queue(struct j1939_session *session, struct sk_buff *skb)
net/can/j1939/transport.c:j1939_tp_cmd_recv(struct j1939_priv *priv, struct sk_buff *skb)
net/can/j1939/transport.c:j1939_tp_rxtimer(struct hrtimer *hrtimer)
net/can/j1939/transport.c:j1939_xtp_rx_abort_one(struct j1939_priv *priv, struct sk_buff *skb, bool reverse, bool transmitter)
net/can/j1939/transport.c:j1939_xtp_rx_rts_session_active(struct j1939_session *session, struct sk_buff *skb)
net/can/j1939/transport.c:j1939_xtp_rx_rts_session_new()
net/can/j1939/transport.c:j1939_xtp_tx_abort(struct j1939_priv *priv, const struct j1939_sk_buff_cb *re_skcb, bool swap_src_dst, enum j1939_xtp_abort err, pgn_t pgn)
net/can/j1939/main.c:__j1939_priv_release(struct kref *kref)
net/can/j1939/main.c:j1939_can_recv(struct sk_buff *iskb, void *data)
net/can/j1939/main.c:j1939_can_rx_register(struct j1939_priv *priv)
net/can/j1939/main.c:j1939_can_rx_unregister(struct j1939_priv *priv)
net/can/j1939/main.c:j1939_netdev_notify(struct notifier_block *nb, unsigned long msg, void *data)
net/can/j1939/main.c:j1939_netdev_start()
net/can/j1939/main.c:j1939_priv_create()
net/can/j1939/main.c:j1939_send_one(struct j1939_priv *priv, struct sk_buff *skb)
net/can/af_can.c:can_create(struct net *net, struct socket *sock, int protocol, int kern)
net/can/af_can.c:can_proto_register(const struct can_proto *cp)
net/can/af_can.c:can_rcv(struct sk_buff *skb, struct net_device *dev, struct packet_type *pt, struct net_device *orig_dev)
net/can/af_can.c:can_rcv_filter(struct can_dev_rcv_lists *dev_rcv_lists, struct sk_buff *skb)
net/can/af_can.c:can_receive(struct sk_buff *skb, struct net_device *dev)
net/can/af_can.c:can_rx_register(struct net *net, struct net_device *dev, canid_t can_id, canid_t mask, void (*func)(struct sk_buff *, void *), void *data, char *ident, struct sock *sk)
net/can/af_can.c:can_rx_unregister(struct net *net, struct net_device *dev, canid_t can_id, canid_t mask, void (*func)(struct sk_buff *, void *), void *data)
net/can/af_can.c:can_send(struct sk_buff *skb, int loop)
net/socket.c:__sock_create(struct net *net, int family, int type, int protocol, struct socket **res, int kern)
net/socket.c:__sys_connect(int fd, struct sockaddr __user *uservaddr, int addrlen)
net/socket.c:__sys_socket(int family, int type, int protocol)
net/socket.c:sock_alloc()
net/socket.c:sock_alloc_file()
net/socket.c:sock_create_lite(int family, int type, int protocol, struct socket **res)
net/socket.c:sock_do_ioctl(struct net *net, struct socket *sock, unsigned int cmd, unsigned long arg)
net/socket.c:sock_map_fd(struct socket *sock, int flags)
net/core/dev.c:__netif_receive_skb_core(struct sk_buff **pskb, bool pfmemalloc, struct packet_type **ppt_prev)
net/core/dev.c:netif_receive_skb_internal(struct sk_buff *skb)
net/core/dev.c:process_backlog(struct napi_struct *napi, int quota)
net/can/j1939/transport.c:j1939_session_deactivate(struct j1939_session *session)
net/can/j1939/transport.c:j1939_xtp_rx_abort_one(struct j1939_priv *priv, struct sk_buff *skb, bool reverse, bool transmitter)
kernel/softirq.c:do_softirq(void)
kernel/softirq.c:invoke_softirq(void)
kernel/softirq.c:run_ksoftirqd(unsigned int cpu)
func for case 6bb7224cd01f8742533b486573005f65d512fdf6
net/sctp/stream_sched_prio.c:sctp_sched_prio_dequeue()
net/sctp/stream_sched_prio.c:sctp_sched_prio_dequeue_done(struct sctp_outq *q, struct sctp_chunk *ch)
net/sctp/stream_sched_prio.c:sctp_sched_prio_free(struct sctp_stream *stream)
net/sctp/stream_sched_prio.c:sctp_sched_prio_get_head()
net/sctp/stream_sched_prio.c:sctp_sched_prio_new_head()
net/sctp/stream_sched_prio.c:sctp_sched_prio_sched(struct sctp_stream *stream, struct sctp_stream_out_ext *soute)
net/sctp/stream_sched_prio.c:sctp_sched_prio_sched_all(struct sctp_stream *stream)
net/sctp/stream_sched_prio.c:sctp_sched_prio_set(struct sctp_stream *stream, __u16 sid, __u16 prio, gfp_t gfp)
net/sctp/stream_sched_prio.c:sctp_sched_prio_unsched(struct sctp_stream_out_ext *soute)
stream_sched_prio()
net/sctp/stream.c:sctp_chunk_lookup_strreset_param()
net/sctp/stream.c:sctp_process_strreset_addstrm_in()
net/sctp/stream.c:sctp_process_strreset_addstrm_out()
net/sctp/stream.c:sctp_process_strreset_inreq()
net/sctp/stream.c:sctp_process_strreset_outreq()
net/sctp/stream.c:sctp_process_strreset_resp()
net/sctp/stream.c:sctp_process_strreset_tsnreq()
net/sctp/stream.c:sctp_send_add_streams(struct sctp_association *asoc, struct sctp_add_streams *params)
net/sctp/stream.c:sctp_send_reset_streams(struct sctp_association *asoc, struct sctp_reset_streams *params)
net/sctp/stream.c:sctp_stream_clear(struct sctp_stream *stream)
net/sctp/stream.c:sctp_stream_init(struct sctp_stream *stream, __u16 outcnt, __u16 incnt, gfp_t gfp)
net/sctp/stream.c:sctp_stream_outq_is_empty(struct sctp_stream *stream, __u16 str_nums, __be16 *str_list)
net/sctp/stream.c:sctp_stream_outq_migrate(struct sctp_stream *stream, struct sctp_stream *new, __u16 outcnt)
net/sctp/stream.c:sctp_stream_shrink_out(struct sctp_stream *stream, __u16 outcnt)
net/sctp/stream.c:sctp_stream_update(struct sctp_stream *stream, struct sctp_stream *new)
net/sctp/socket.c:sctp_close(struct sock *sk, long timeout)
net/sctp/socket.c:sctp_getsockopt_scheduler(struct sock *sk, int len, char __user *optval, int __user *optlen)
net/sctp/socket.c:sctp_getsockopt_scheduler_value(struct sock *sk, int len, char __user *optval, int __user *optlen)
net/sctp/socket.c:sctp_init_sock(struct sock *sk)
net/sctp/stream_sched_prio.c:sctp_sched_prio_set(struct sctp_stream *stream, __u16 sid, __u16 prio, gfp_t gfp)
net/sctp/socket.c:sctp_sendmsg(struct sock *sk, struct msghdr *msg, size_t msg_len)
net/sctp/socket.c:sctp_sendmsg_check_sflags(struct sctp_association *asoc, __u16 sflags, struct msghdr *msg, size_t msg_len)
net/sctp/socket.c:sctp_sendmsg_new_asoc(struct sock *sk, __u16 sflags, struct sctp_cmsgs *cmsgs, union sctp_addr *daddr, struct sctp_transport **tp)
net/sctp/socket.c:sctp_sendmsg_parse(struct sock *sk, struct sctp_cmsgs *cmsgs, struct sctp_sndrcvinfo *srinfo, const struct msghdr *msg, size_t msg_len)
net/sctp/socket.c:sctp_sendmsg_to_asoc(struct sctp_association *asoc, struct msghdr *msg, size_t msg_len, struct sctp_transport *transport, struct sctp_sndrcvinfo *sinfo)
net/sctp/socket.c:sctp_sendmsg_update_sinfo(struct sctp_association *asoc, struct sctp_sndrcvinfo *sinfo, struct sctp_cmsgs *cmsgs)
net/sctp/socket.c:sctp_setsockopt(struct sock *sk, int level, int optname, sockptr_t optval, unsigned int optlen)
net/sctp/socket.c:sctp_setsockopt_default_send_param(struct sock *sk, struct sctp_sndrcvinfo *info, unsigned int optlen)
net/sctp/socket.c:sctp_setsockopt_initmsg(struct sock *sk, struct sctp_initmsg *sinit, unsigned int optlen)
net/sctp/socket.c:sctp_setsockopt_scheduler(struct sock *sk, struct sctp_assoc_value *params, unsigned int optlen)
net/sctp/socket.c:sctp_setsockopt_scheduler_value(struct sock *sk, struct sctp_stream_value *params, unsigned int optlen)
net/sctp/associola.c:sctp_assoc_add_peer()
net/sctp/associola.c:sctp_assoc_del_peer(struct sctp_association *asoc, const union sctp_addr *addr)
net/sctp/associola.c:sctp_assoc_migrate(struct sctp_association *assoc, struct sock *newsk)
net/sctp/associola.c:sctp_assoc_rm_peer(struct sctp_association *asoc, struct sctp_transport *peer)
net/sctp/associola.c:sctp_association_destroy(struct sctp_association *asoc)
net/sctp/associola.c:sctp_association_free(struct sctp_association *asoc)
net/sctp/associola.c:sctp_association_init()
net/sctp/associola.c:sctp_association_new()
net/sctp/output.c:__sctp_packet_append_chunk(struct sctp_packet *packet, struct sctp_chunk *chunk)
net/sctp/output.c:sctp_packet_append_chunk(struct sctp_packet *packet, struct sctp_chunk *chunk)
net/sctp/output.c:sctp_packet_append_data(struct sctp_packet *packet, struct sctp_chunk *chunk)
net/sctp/output.c:sctp_packet_config(struct sctp_packet *packet, __u32 vtag, int ecn_capable)
net/sctp/output.c:sctp_packet_init(struct sctp_packet *packet, struct sctp_transport *transport, __u16 sport, __u16 dport)
net/sctp/output.c:sctp_packet_pack(struct sctp_packet *packet, struct sk_buff *head, int gso, gfp_t gfp)
net/sctp/output.c:sctp_packet_transmit(struct sctp_packet *packet, gfp_t gfp)
net/sctp/output.c:sctp_packet_transmit_chunk(struct sctp_packet *packet, struct sctp_chunk *chunk, int one_packet, gfp_t gfp)
net/sctp/transport.c:sctp_transport_free(struct sctp_transport *transport)
net/sctp/transport.c:sctp_transport_immediate_rtx(struct sctp_transport *t)
net/sctp/transport.c:sctp_transport_init()
net/sctp/transport.c:sctp_transport_pl_recv(struct sctp_transport *t)
net/sctp/transport.c:sctp_transport_reset(struct sctp_transport *t)
net/sctp/transport.c:sctp_transport_route(struct sctp_transport *transport, union sctp_addr *saddr, struct sctp_sock *opt)
net/sctp/transport.c:sctp_transport_timeout(struct sctp_transport *trans)
net/sctp/transport.c:sctp_transport_update_pmtu(struct sctp_transport *t, u32 pmtu)
net/sctp/endpointola.c:sctp_endpoint_add_asoc(struct sctp_endpoint *ep, struct sctp_association *asoc)
net/sctp/endpointola.c:sctp_endpoint_destroy(struct sctp_endpoint *ep)
net/sctp/endpointola.c:sctp_endpoint_init()
net/sctp/endpointola.c:sctp_endpoint_is_match()
net/sctp/endpointola.c:sctp_endpoint_lookup_assoc()
net/sctp/endpointola.c:sctp_endpoint_new()
net/sctp/stream_interleave.c:sctp_intl_store_ordered(struct sctp_ulpq *ulpq, struct sctp_ulpevent *event)
net/sctp/stream_interleave.c:sctp_intl_store_reasm(struct sctp_ulpq *ulpq, struct sctp_ulpevent *event)
net/sctp/stream_interleave.c:sctp_intl_store_reasm_uo(struct sctp_ulpq *ulpq, struct sctp_ulpevent *event)
net/sctp/sm_statefuns.c:sctp_sf_do_5_1B_init(struct net *net, const struct sctp_endpoint *ep, const struct sctp_association *asoc, const union sctp_subtype type, void *arg, struct sctp_cmd_seq *commands)
net/sctp/sm_statefuns.c:sctp_sf_do_5_2_3_initack(struct net *net, const struct sctp_endpoint *ep, const struct sctp_association *asoc, const union sctp_subtype type, void *arg, struct sctp_cmd_seq *commands)
net/sctp/sm_statefuns.c:sctp_sf_do_unexpected_init(struct net *net, const struct sctp_endpoint *ep, const struct sctp_association *asoc, const union sctp_subtype type, void *arg, struct sctp_cmd_seq *commands)
SCTP_DEFAULT_SEND_PARAM()
SCTP_STREAM_SCHEDULER()
net/sctp/stream_sched_prio.c:sctp_sched_prio_set(struct sctp_stream *stream, __u16 sid, __u16 prio, gfp_t gfp)
sm_make_chunk()
func for case 6c4345574ac937d9ccc195fdadb44f7cc95a19f9
net/netfilter/nf_tables_api.c:nf_tables_addchain(struct nft_ctx *ctx, u8 family, u8 genmask, u8 policy, u32 flags, struct netlink_ext_ack *extack)
net/netfilter/nf_tables_api.c:nf_tables_chain_alloc_rules()
net/netfilter/nf_tables_api.c:nf_tables_chain_destroy(struct nft_ctx *ctx)
net/netfilter/nf_tables_api.c:nf_tables_chain_free_chain_rules(struct nft_chain *chain)
net/netfilter/nf_tables_api.c:nf_tables_newchain(struct sk_buff *skb, const struct nfnl_info *info, const struct nlattr * const nla[])
net/netfilter/nf_tables_api.c:nf_tables_parse_netdev_hooks(struct net *net, const struct nlattr *attr, struct list_head *hook_list)
net/netfilter/nf_tables_api.c:nft_basechain_hook_init(struct nf_hook_ops *ops, u8 family, const struct nft_chain_hook *hook, struct nft_chain *chain)
net/netfilter/nf_tables_api.c:nft_basechain_init(struct nft_base_chain *basechain, u8 family, struct nft_chain_hook *hook, u32 flags)
net/netfilter/nf_tables_api.c:nft_chain_parse_hook(struct net *net, const struct nlattr * const nla[], struct nft_chain_hook *hook, u8 family, struct netlink_ext_ack *extack, bool autoload)
net/netfilter/nf_tables_api.c:nft_chain_parse_netdev(struct net *net, struct nlattr *tb[], struct list_head *hook_list)
net/netfilter/nf_tables_api.c:nft_chain_release_hook(struct nft_chain_hook *hook)
net/netfilter/nf_tables_api.c:nft_chain_stats_replace(struct nft_trans *trans)
net/netfilter/nf_tables_api.c:nft_chain_validate_hooks(const struct nft_chain *chain, unsigned int hook_flags)
net/netfilter/nf_tables_api.c:nft_netdev_hook_alloc()
net/netfilter/nf_tables_api.c:nft_stats_alloc()
nf_tables()
net/netfilter/nfnetlink.c:nfnetlink_bind(struct net *net, int group)
net/netfilter/nfnetlink.c:nfnetlink_bind_event(struct net *net, unsigned int group)
net/netfilter/nfnetlink.c:nfnetlink_find_client()
net/netfilter/nfnetlink.c:nfnetlink_init(void)
net/netfilter/nfnetlink.c:nfnetlink_net_exit_batch(struct list_head *net_exit_list)
net/netfilter/nfnetlink.c:nfnetlink_net_init(struct net *net)
net/netfilter/nfnetlink.c:nfnetlink_rcv(struct sk_buff *skb)
net/netfilter/nfnetlink.c:nfnetlink_rcv_batch(struct sk_buff *skb, struct nlmsghdr *nlh, u16 subsys_id, u32 genid)
net/netfilter/nfnetlink.c:nfnetlink_rcv_msg(struct sk_buff *skb, struct nlmsghdr *nlh, struct netlink_ext_ack *extack)
net/netfilter/nfnetlink.c:nfnetlink_rcv_skb_batch(struct sk_buff *skb, struct nlmsghdr *nlh)
net/netfilter/nfnetlink.c:nfnetlink_subsys_register(const struct nfnetlink_subsystem *n)
net/netfilter/nfnetlink.c:nfnetlink_unbind(struct net *net, int group)
net/netfilter/nfnetlink.c:nfnl_err_add(struct list_head *list, struct nlmsghdr *nlh, int err, const struct netlink_ext_ack *extack)
net/netfilter/nfnetlink.c:nfnl_err_deliver(struct list_head *err_list, struct sk_buff *skb)
net/netfilter/nf_tables_core.c:__nft_trace_verdict(struct nft_traceinfo *info, const struct nft_chain *chain, const struct nft_regs *regs)
net/netfilter/nf_tables_core.c:expr_call_ops_eval(const struct nft_expr *expr, struct nft_regs *regs, struct nft_pktinfo *pkt)
nf_tables_api()
nf_tables_core()
net/netfilter/nf_tables_core.c:nft_bitwise_fast_eval(const struct nft_expr *expr, struct nft_regs *regs)
nft_chain()
net/netfilter/nf_tables_core.c:nft_cmp16_fast_eval(const struct nft_expr *expr, struct nft_regs *regs)
net/netfilter/nf_tables_core.c:nft_cmp_fast_eval(const struct nft_expr *expr, struct nft_regs *regs)
net/netfilter/nf_tables_core.c:nft_do_chain(struct nft_pktinfo *pkt, void *priv)
net/netfilter/nf_tables_api.c:nft_netdev_hook_alloc()
net/netfilter/nf_tables_core.c:nft_payload_fast_eval(const struct nft_expr *expr, struct nft_regs *regs, const struct nft_pktinfo *pkt)
net/netfilter/nf_tables_core.c:nft_trace_packet(const struct nft_pktinfo *pkt, struct nft_traceinfo *info, const struct nft_chain *chain, const struct nft_rule_dp *rule, enum nft_trace_types type)
net/netfilter/nf_tables_core.c:nft_update_chain_stats(const struct nft_chain *chain, const struct nft_pktinfo *pkt)
net/netfilter/nf_tables_offload.c:nft_flow_block_chain(struct nft_base_chain *basechain, const struct net_device *this_dev, enum flow_block_command cmd)
net/netfilter/nf_tables_offload.c:nft_flow_offload_chain(struct nft_chain *chain, u8 *ppolicy, enum flow_block_command cmd)
net/netfilter/nf_tables_offload.c:nft_flow_rule_alloc()
net/netfilter/nf_tables_offload.c:nft_flow_rule_create()
net/netfilter/nf_tables_offload.c:nft_flow_rule_offload_abort(struct net *net, struct nft_trans *trans)
net/netfilter/nf_tables_offload.c:nft_flow_rule_offload_commit(struct net *net)
net/netfilter/nf_tables_offload.c:nft_flow_rule_set_addr_type(struct nft_flow_rule *flow, enum flow_dissector_key_id addr_type)
net/netfilter/nf_tables_offload.c:nft_flow_rule_transfer_vlan(struct nft_offload_ctx *ctx, struct nft_flow_rule *flow)
af_netlink()
net/netlink/af_netlink.c:netlink_alloc_large_skb()
net/netlink/af_netlink.c:netlink_rcv_skb(struct sk_buff *skb, int (*cb)(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *))
net/netlink/af_netlink.c:netlink_recvmsg(struct socket *sock, struct msghdr *msg, size_t len, int flags)
net/netlink/af_netlink.c:netlink_sendmsg(struct socket *sock, struct msghdr *msg, size_t len)
net/netlink/af_netlink.c:netlink_skb_set_owner_r(struct sk_buff *skb, struct sock *sk)
net/netlink/af_netlink.c:netlink_trim()
net/netlink/af_netlink.c:netlink_unicast(struct sock *ssk, struct sk_buff *skb, u32 portid, int nonblock)
net/netlink/af_netlink.c:netlink_unicast_kernel(struct sock *sk, struct sk_buff *skb, struct sock *ssk)
sk_buffs()
net/socket.c:____sys_sendmsg(struct socket *sock, struct msghdr *msg_sys, unsigned int flags, struct used_address *used_address, unsigned int allowed_msghdr_flags)
net/socket.c:___sys_sendmsg(struct socket *sock, struct user_msghdr __user *msg, struct msghdr *msg_sys, unsigned int flags, struct used_address *used_address, unsigned int allowed_msghdr_flags)
net/socket.c:__sys_sendmsg(int fd, struct user_msghdr __user *msg, unsigned int flags, bool forbid_cmsg_compat)
nf_tables_api()
func for case 76c0afb6e24e6dc4093c36801d0b3a61b486ec4d
fs/nilfs2/segment.c:nilfs_segctor_abort_construction(struct nilfs_sc_info *sci, struct the_nilfs *nilfs, int err)
fs/nilfs2/segment.c:nilfs_segctor_add_file_block(struct nilfs_sc_info *sci, struct buffer_head *bh, struct inode *inode, unsigned int binfo_size)
fs/nilfs2/segment.c:nilfs_segctor_begin_construction(struct nilfs_sc_info *sci, struct the_nilfs *nilfs)
fs/nilfs2/segment.c:nilfs_segctor_collect(struct nilfs_sc_info *sci, struct the_nilfs *nilfs, int mode)
fs/nilfs2/segment.c:nilfs_segctor_collect_blocks(struct nilfs_sc_info *sci, int mode)
fs/nilfs2/segment.c:nilfs_segctor_complete_write(struct nilfs_sc_info *sci)
fs/nilfs2/segment.c:nilfs_segctor_construct(struct nilfs_sc_info *sci, int mode)
fs/nilfs2/segment.c:nilfs_segctor_do_construct(struct nilfs_sc_info *sci, int mode)
fs/nilfs2/segment.c:nilfs_segctor_extend_segments(struct nilfs_sc_info *sci, struct the_nilfs *nilfs, int nadd)
fs/nilfs2/segment.c:nilfs_segctor_feed_segment(struct nilfs_sc_info *sci)
fs/nilfs2/segment.c:nilfs_segctor_prepare_write(struct nilfs_sc_info *sci)
fs/nilfs2/segment.c:nilfs_segctor_reset_segment_buffer(struct nilfs_sc_info *sci)
fs/nilfs2/segment.c:nilfs_segctor_thread_construct(struct nilfs_sc_info *sci, int mode)
fs/nilfs2/segment.c:nilfs_segctor_truncate_segments(struct nilfs_sc_info *sci, struct nilfs_segment_buffer *last, struct inode *sufile)
fs/nilfs2/segment.c:nilfs_segctor_update_segusage(struct nilfs_sc_info *sci, struct inode *sufile)
do_cancel_free()
do_free()
do_scrap()
fs/nilfs2/sufile.c:nilfs_sufile_alloc(struct inode *sufile, __u64 *segnump)
fs/nilfs2/sufile.c:nilfs_sufile_do_cancel_free(struct inode *sufile, __u64 segnum, struct buffer_head *header_bh, struct buffer_head *su_bh)
fs/nilfs2/sufile.c:nilfs_sufile_do_free(struct inode *sufile, __u64 segnum, struct buffer_head *header_bh, struct buffer_head *su_bh)
fs/nilfs2/sufile.c:nilfs_sufile_do_scrap(struct inode *sufile, __u64 segnum, struct buffer_head *header_bh, struct buffer_head *su_bh)
fs/nilfs2/sufile.c:nilfs_sufile_get_stat(struct inode *sufile, struct nilfs_sustat *sustat)
fs/nilfs2/sufile.c:nilfs_sufile_get_suinfo(struct inode *sufile, __u64 segnum, void *buf, unsigned int sisz, size_t nsi)
fs/nilfs2/sufile.c:nilfs_sufile_mark_dirty(struct inode *sufile, __u64 segnum)
fs/nilfs2/sufile.c:nilfs_sufile_read(struct super_block *sb, size_t susize, struct nilfs_inode *raw_inode, struct inode **inodep)
fs/nilfs2/sufile.c:nilfs_sufile_resize(struct inode *sufile, __u64 newnsegs)
fs/nilfs2/sufile.c:nilfs_sufile_set_segment_usage(struct inode *sufile, __u64 segnum, unsigned long nblocks, time64_t modtime)
fs/nilfs2/sufile.c:nilfs_sufile_set_suinfo(struct inode *sufile, void *buf, unsigned int supsz, size_t nsup)
fs/nilfs2/sufile.c:nilfs_sufile_trim_fs(struct inode *sufile, struct fstrim_range *range)
fs/nilfs2/sufile.c:nilfs_sufile_truncate_range(struct inode *sufile, __u64 start, __u64 end)
fs/nilfs2/sufile.c:nilfs_sufile_update(struct inode *sufile, __u64 segnum, int create, void (*dofunc)(struct inode *, __u64, struct buffer_head *, struct buffer_head *))
fs/nilfs2/sufile.c:nilfs_sufile_updatev(struct inode *sufile, __u64 *segnumv, size_t nsegs, int create, size_t *ndone, void (*dofunc)(struct inode *, __u64, struct buffer_head *, struct buffer_head *))
set_segment_usage()
truncate_range()
fs/nilfs2/the_nilfs.c:alloc_nilfs()
fs/nilfs2/the_nilfs.c:init_nilfs(struct the_nilfs *nilfs, struct super_block *sb, char *data)
fs/nilfs2/the_nilfs.c:load_nilfs(struct the_nilfs *nilfs, struct super_block *sb)
fs/nilfs2/the_nilfs.c:nilfs_discard_segments(struct the_nilfs *nilfs, __u64 *segnump, size_t nsegs)
fs/nilfs2/the_nilfs.c:nilfs_fall_back_super_block(struct the_nilfs *nilfs)
fs/nilfs2/the_nilfs.c:nilfs_find_or_create_root()
fs/nilfs2/the_nilfs.c:nilfs_load_super_block(struct the_nilfs *nilfs, struct super_block *sb, int blocksize, struct nilfs_super_block **sbpp)
fs/nilfs2/the_nilfs.c:nilfs_load_super_root(struct the_nilfs *nilfs, struct super_block *sb, sector_t sr_block)
fs/nilfs2/the_nilfs.c:nilfs_lookup_root()
fs/nilfs2/the_nilfs.c:nilfs_put_root(struct nilfs_root *root)
fs/nilfs2/the_nilfs.c:nilfs_release_super_block(struct the_nilfs *nilfs)
fs/nilfs2/the_nilfs.c:nilfs_set_last_segment(struct the_nilfs *nilfs, sector_t start_blocknr, u64 seq, __u64 cno)
fs/nilfs2/the_nilfs.c:nilfs_store_disk_layout(struct the_nilfs *nilfs, struct nilfs_super_block *sbp)
fs/nilfs2/the_nilfs.c:nilfs_store_log_cursor(struct the_nilfs *nilfs, struct nilfs_super_block *sbp)
fs/nilfs2/the_nilfs.c:nilfs_swap_super_block(struct the_nilfs *nilfs)
the_nilfs()
fs/nilfs2/super.c:nilfs_attach_checkpoint(struct super_block *sb, __u64 cno, int curr_mnt, struct nilfs_root **rootp)
fs/nilfs2/super.c:nilfs_check_feature_compatibility(struct super_block *sb, struct nilfs_super_block *sbp)
fs/nilfs2/super.c:nilfs_commit_super(struct super_block *sb, int flag)
fs/nilfs2/super.c:nilfs_fill_super(struct super_block *sb, void *data, int silent)
fs/nilfs2/super.c:nilfs_put_super(struct super_block *sb)
fs/nilfs2/super.c:nilfs_read_super_block()
fs/nilfs2/super.c:nilfs_setup_super(struct super_block *sb, int is_mount)
fs/nilfs2/super.c:nilfs_store_magic_and_option(struct super_block *sb, struct nilfs_super_block *sbp, char *data)
fs/nilfs2/dat.c:nilfs_dat_commit_alloc(struct inode *dat, struct nilfs_palloc_req *req)
fs/nilfs2/dat.c:nilfs_dat_commit_free(struct inode *dat, struct nilfs_palloc_req *req)
fs/nilfs2/dat.c:nilfs_dat_commit_start(struct inode *dat, struct nilfs_palloc_req *req, sector_t blocknr)
fs/nilfs2/dat.c:nilfs_dat_get_vinfo(struct inode *dat, void *buf, unsigned int visz, size_t nvi)
fs/nilfs2/dat.c:nilfs_dat_move(struct inode *dat, __u64 vblocknr, sector_t blocknr)
fs/nilfs2/dat.c:nilfs_dat_prepare_entry(struct inode *dat, struct nilfs_palloc_req *req, int create)
fs/nilfs2/dat.c:nilfs_dat_read(struct super_block *sb, size_t entry_size, struct nilfs_inode *raw_inode, struct inode **inodep)
fs/nilfs2/dat.c:nilfs_dat_translate(struct inode *dat, __u64 vblocknr, sector_t *blocknrp)
fs/nilfs2/gcinode.c:nilfs_gccache_submit_read_data(struct inode *inode, sector_t blkoff, sector_t pbn, __u64 vbn, struct buffer_head **out_bh)
fs/nilfs2/gcinode.c:nilfs_gccache_submit_read_node(struct inode *inode, sector_t pbn, __u64 vbn, struct buffer_head **out_bh)
fs/nilfs2/gcinode.c:nilfs_gccache_wait_and_mark_dirty(struct buffer_head *bh)
fs/nilfs2/gcinode.c:nilfs_remove_all_gcinodes(struct the_nilfs *nilfs)
fs/nilfs2/cpfile.c:nilfs_cpfile_block_init(struct inode *cpfile, struct buffer_head *bh, void *kaddr)
fs/nilfs2/cpfile.c:nilfs_cpfile_change_cpmode(struct inode *cpfile, __u64 cno, int mode)
fs/nilfs2/cpfile.c:nilfs_cpfile_clear_snapshot(struct inode *cpfile, __u64 cno)
fs/nilfs2/cpfile.c:nilfs_cpfile_delete_checkpoint(struct inode *cpfile, __u64 cno)
fs/nilfs2/cpfile.c:nilfs_cpfile_delete_checkpoints(struct inode *cpfile, __u64 start, __u64 end)
fs/nilfs2/cpfile.c:nilfs_cpfile_find_checkpoint_block(struct inode *cpfile, __u64 start_cno, __u64 end_cno, __u64 *cnop, struct buffer_head **bhp)
fs/nilfs2/cpfile.c:nilfs_cpfile_get_checkpoint(struct inode *cpfile, __u64 cno, int create, struct nilfs_checkpoint **cpp, struct buffer_head **bhp)
fs/nilfs2/cpfile.c:nilfs_cpfile_set_snapshot(struct inode *cpfile, __u64 cno)
nilfs_segctor_()
fs/nilfs2/mdt.c:nilfs_mdt_get_block(struct inode *inode, unsigned long blkoff, int create, void (*init_block)(struct inode *, struct buffer_head *, void *), struct buffer_head **out_bh)
fs/nilfs2/mdt.c:nilfs_mdt_read_block(struct inode *inode, unsigned long block, int readahead, struct buffer_head **out_bh)
fs/nilfs2/mdt.c:nilfs_mdt_submit_block(struct inode *inode, unsigned long blkoff, blk_opf_t opf, struct buffer_head **out_bh)
fs/nilfs2/inode.c:nilfs_evict_inode(struct inode *inode)
fs/nilfs2/inode.c:nilfs_truncate(struct inode *inode)
fs/nilfs2/inode.c:nilfs_truncate_bmap(struct nilfs_inode_info *ii, unsigned long from)
func for case 7c512c7b421b211e4408a4bc7ac759e3a3eb0d44
net/qrtr/qrtr.c:__qrtr_bind(struct socket *sock, const struct sockaddr_qrtr *addr, int zapped)
net/qrtr/qrtr.c:qrtr_autobind(struct socket *sock)
net/qrtr/qrtr.c:qrtr_bind(struct socket *sock, struct sockaddr *saddr, int len)
net/qrtr/qrtr.c:qrtr_connect(struct socket *sock, struct sockaddr *saddr, int len, int flags)
net/qrtr/qrtr.c:qrtr_create(struct net *net, struct socket *sock, int protocol, int kern)
net/qrtr/qrtr.c:qrtr_endpoint_register(struct qrtr_endpoint *ep, unsigned int nid)
net/qrtr/qrtr.c:qrtr_endpoint_unregister(struct qrtr_endpoint *ep)
net/qrtr/qrtr.c:qrtr_local_enqueue(struct qrtr_node *node, struct sk_buff *skb, int type, struct sockaddr_qrtr *from, struct sockaddr_qrtr *to)
net/qrtr/qrtr.c:qrtr_node_enqueue(struct qrtr_node *node, struct sk_buff *skb, int type, struct sockaddr_qrtr *from, struct sockaddr_qrtr *to)
net/qrtr/qrtr.c:qrtr_port_assign(struct qrtr_sock *ipc, int *port)
net/qrtr/qrtr.c:qrtr_port_remove(struct qrtr_sock *ipc)
net/qrtr/qrtr.c:qrtr_recvmsg(struct socket *sock, struct msghdr *msg, size_t size, int flags)
net/qrtr/qrtr.c:qrtr_release(struct socket *sock)
net/qrtr/qrtr.c:qrtr_sendmsg(struct socket *sock, struct msghdr *msg, size_t len)
net/qrtr/qrtr.c:qrtr_tx_resume(struct qrtr_node *node, struct sk_buff *skb)
sk_buff()
net/core/sock.c:__sk_destruct(struct rcu_head *head)
net/core/sock.c:__sk_free(struct sock *sk)
_destruct()
_free()
net/core/sock.c:sk_alloc()
net/core/sock.c:sk_clone_lock()
net/core/sock.c:sk_destruct(struct sock *sk)
net/core/sock.c:sk_free(struct sock *sk)
net/core/sock.c:sk_free_unlock_clone(struct sock *sk)
net/core/sock.c:sk_init_common(struct sock *sk)
net/core/sock.c:sk_prot_alloc()
net/core/sock.c:sk_prot_free(struct proto *prot, struct sock *sk)
net/core/sock.c:sk_setup_caps(struct sock *sk, struct dst_entry *dst)
net/core/sock.c:sock_alloc_send_pskb()
net/core/sock.c:sock_copy(struct sock *nsk, const struct sock *osk)
net/core/sock.c:sock_init_data(struct socket *sock, struct sock *sk)
net/core/sock.c:sock_kmalloc()
net/socket.c:__sock_create(struct net *net, int family, int type, int protocol, struct socket **res, int kern)
net/socket.c:__sock_release(struct socket *sock, struct inode *inode)
net/socket.c:__sys_connect(int fd, struct sockaddr __user *uservaddr, int addrlen)
net/socket.c:__sys_socket(int family, int type, int protocol)
net/socket.c:sock_alloc()
net/socket.c:sock_alloc_file()
net/socket.c:sock_alloc_inode()
net/socket.c:sock_map_fd(struct socket *sock, int flags)
net/qrtr/tun.c:qrtr_tun_open(struct inode *inode, struct file *filp)
net/qrtr/tun.c:qrtr_tun_poll(struct file *filp, poll_table *wait)
net/qrtr/tun.c:qrtr_tun_read_iter(struct kiocb *iocb, struct iov_iter *to)
net/qrtr/tun.c:qrtr_tun_send(struct qrtr_endpoint *ep, struct sk_buff *skb)
net/qrtr/tun.c:qrtr_tun_write_iter(struct kiocb *iocb, struct iov_iter *from)
sk_buff()
net/qrtr/mhi.c:qcom_mhi_qrtr_dl_callback(struct mhi_device *mhi_dev, struct mhi_result *mhi_res)
net/qrtr/mhi.c:qcom_mhi_qrtr_probe(struct mhi_device *mhi_dev, const struct mhi_device_id *id)
net/qrtr/mhi.c:qcom_mhi_qrtr_remove(struct mhi_device *mhi_dev)
net/qrtr/mhi.c:qcom_mhi_qrtr_send(struct qrtr_endpoint *ep, struct sk_buff *skb)
sk_buff()
net/core/sock_diag.c:__sock_diag_cmd(struct sk_buff *skb, struct nlmsghdr *nlh)
net/core/sock_diag.c:sock_diag_broadcast_destroy(struct sock *sk)
net/core/sock_diag.c:sock_diag_broadcast_destroy_work(struct work_struct *work)
net/core/sock_diag.c:sock_diag_check_cookie(struct sock *sk, const __u32 *cookie)
net/core/sock_diag.c:sock_diag_destroy(struct sock *sk, int err)
net/core/sock_diag.c:sock_diag_put_filterinfo(bool may_report_filterinfo, struct sock *sk, struct sk_buff *skb, int attrtype)
net/core/sock_diag.c:sock_diag_rcv_msg(struct sk_buff *skb, struct nlmsghdr *nlh, struct netlink_ext_ack *extack)
net/qrtr/qrtr.c:qrtr_create(struct net *net, struct socket *sock, int protocol, int kern)
net/core/sock.c:sk_alloc()
net/core/sock.c:sk_prot_alloc()
AF_QIPCRTR()
SOCK_DGRAM()
binfmt_script()
fs/binfmt_script.c:load_script(struct linux_binprm *bprm))
fs/binfmt_script.c:next_terminator()
net/qrtr/qrtr.c:qrtr_create(struct net *net, struct socket *sock, int protocol, int kern)
net/core/sock.c:sk_alloc()
net/core/sock.c:sk_prot_alloc()
arch/x86/entry/common.c:do_syscall_64(unsigned long nr, struct pt_regs *regs)
net/qrtr/qrtr.c:qrtr_create(struct net *net, struct socket *sock, int protocol, int kern)
net/core/sock.c:sk_alloc()
net/core/sock.c:sk_prot_alloc()
func for case 7d3c28ba3d4bf4b26e89ed1f1ca146e0223a2d36
security/keys/keyctl.c:keyctl_describe_key(key_serial_t keyid, char __user *buffer, size_t buflen)
security/keys/keyctl.c:keyctl_get_security(key_serial_t keyid, char __user *buffer, size_t buflen)
keyctl_instantiate_key_()
security/keys/keyctl.c:keyctl_instantiate_key_common(key_serial_t id, struct iov_iter *from, key_serial_t ringid)
security/keys/keyctl.c:keyctl_instantiate_key_iov(key_serial_t id, const struct iovec __user *_payload_iov, unsigned ioc, key_serial_t ringid)
security/keys/keyctl.c:keyctl_invalidate_key(key_serial_t id)
security/keys/keyctl.c:keyctl_join_session_keyring(const char __user *_name)
security/keys/keyctl.c:keyctl_keyring_clear(key_serial_t ringid)
security/keys/keyctl.c:keyctl_keyring_search(key_serial_t ringid, const char __user *_type, const char __user *_description, key_serial_t destringid)
security/keys/keyctl.c:keyctl_keyring_unlink(key_serial_t id, key_serial_t ringid)
security/keys/keyctl.c:keyctl_read_key(key_serial_t keyid, char __user *buffer, size_t buflen)
security/keys/keyctl.c:keyctl_restrict_keyring(key_serial_t id, const char __user *_type, const char __user *_restriction)
security/keys/keyctl.c:keyctl_revoke_key(key_serial_t id)
security/keys/keyctl.c:keyctl_set_timeout(key_serial_t id, unsigned timeout)
security/keys/keyctl.c:keyctl_update_key(key_serial_t id, const void __user *_payload, size_t plen)
security/keys/keyctl.c:keyctl_watch_key(key_serial_t id, int watch_queue_fd, int watch_id)
kernel/watch_queue.c:__post_watch_notification(struct watch_list *wlist, struct watch_notification *n, const struct cred *cred, u64 id)
kernel/watch_queue.c:__put_watch_queue(struct kref *kref)
kernel/watch_queue.c:add_watch_to_object(struct watch *watch, struct watch_list *wlist)
kernel/watch_queue.c:filter_watch_notification(const struct watch_filter *wf, const struct watch_notification *n)
kernel/watch_queue.c:get_watch_queue()
security/keys/keyctl.c:keyctl_watch_key(key_serial_t id, int watch_queue_fd, int watch_id)
kernel/watch_queue.c:post_one_notification(struct watch_queue *wqueue, struct watch_notification *n)
kernel/watch_queue.c:remove_watch_from_object(struct watch_list *wlist, struct watch_queue *wq, u64 id, bool all)
kernel/watch_queue.c:watch_queue_clear(struct watch_queue *wqueue)
kernel/watch_queue.c:watch_queue_pipe_buf_release(struct pipe_inode_info *pipe, struct pipe_buffer *buf)
kernel/watch_queue.c:watch_queue_set_filter(struct pipe_inode_info *pipe, struct watch_notification_filter __user *_filter)
kernel/watch_queue.c:watch_queue_set_size(struct pipe_inode_info *pipe, unsigned int nr_notes)
security/keys/key.c:__key_instantiate_and_link(struct key *key, struct key_preparsed_payload *prep, struct key *keyring, struct key *authkey, struct assoc_array_edit **_edit)
security/keys/key.c:__key_update(key_ref_t key_ref, struct key_preparsed_payload *prep)
security/keys/key.c:generic_key_instantiate(struct key *key, struct key_preparsed_payload *prep)
security/keys/key.c:key_alloc()
security/keys/key.c:key_alloc_serial(struct key *key)
security/keys/key.c:key_create_or_update(key_ref_t keyring_ref, const char *type, const char *description, const void *payload, size_t plen, key_perm_t perm, unsigned long flags)
security/keys/key.c:key_instantiate_and_link(struct key *key, const void *data, size_t datalen, struct key *keyring, struct key *authkey)
security/keys/key.c:key_lookup()
security/keys/key.c:key_payload_reserve(struct key *key, size_t datalen)
security/keys/key.c:key_reject_and_link(struct key *key, unsigned timeout, unsigned error, struct key *keyring, struct key *authkey)
security/keys/key.c:key_revoke(struct key *key)
security/keys/key.c:key_set_timeout(struct key *key, unsigned timeout)
security/keys/key.c:key_type_lookup()
security/keys/key.c:key_update(key_ref_t key_ref, const void *payload, size_t plen)
security/keys/key.c:register_key_type(struct key_type *ktype)
watch_queue()
security/keys/keyring.c:key_link(struct key *keyring, struct key *key)
security/keys/keyring.c:key_unlink(struct key *keyring, struct key *key)
security/keys/keyctl.c:keyctl_watch_key(key_serial_t id, int watch_queue_fd, int watch_id)
security/keys/keyring.c:keyring_alloc()
security/keys/keyring.c:keyring_clear(struct key *keyring)
security/keys/keyring.c:keyring_destroy(struct key *keyring)
security/keys/keyring.c:keyring_gc(struct key *keyring, time64_t limit)
security/keys/keyring.c:keyring_restriction_gc(struct key *keyring, struct key_type *dead_type)
security/keys/keyring.c:keyring_revoke(struct key *keyring)
fs/pipe.c:alloc_pipe_info()
fs/pipe.c:anon_pipe_buf_release(struct pipe_inode_info *pipe, struct pipe_buffer *buf)
fs/pipe.c:create_pipe_files(struct file **res, int flags)
fs/pipe.c:free_pipe_info(struct pipe_inode_info *pipe)
fs/pipe.c:pipe_read(struct kiocb *iocb, struct iov_iter *to)
fs/pipe.c:pipe_release(struct inode *inode, struct file *file)
fs/pipe.c:pipe_write(struct kiocb *iocb, struct iov_iter *from)
fs/pipe.c:put_pipe_info(struct inode *inode, struct pipe_inode_info *pipe)
watch_key()
__do_sys_keyctl()
security/keys/keyctl.c:keyctl_watch_key(key_serial_t id, int watch_queue_fd, int watch_id)
security/keys/internal.h:notify_key(struct key *key, enum key_notification_subtype subtype, u32 aux)
security/keys/process_keys.c:install_session_keyring(struct key *keyring)
security/keys/process_keys.c:install_session_keyring_to_cred(struct cred *cred, struct key *keyring)
security/keys/process_keys.c:join_session_keyring(const char *name)
security/keys/process_keys.c:key_change_session_keyring(struct callback_head *twork)
security/keys/process_keys.c:look_up_user_keyrings(struct key **_user_keyring, struct key **_user_session_keyring)
security/keys/process_keys.c:lookup_user_key(key_serial_t id, unsigned long lflags, enum key_need_perm need_perm)
security/keys/process_keys.c:search_cred_keyrings_rcu(struct keyring_search_context *ctx)
security/keys/process_keys.c:search_process_keyrings_rcu(struct keyring_search_context *ctx)
security/keys/gc.c:key_garbage_collector(struct work_struct *work)
security/keys/gc.c:key_gc_unused_keys(struct list_head *keys)
security/keys/gc.c:key_schedule_gc(time64_t gc_at)
security/keys/keyctl.c:keyctl_watch_key(key_serial_t id, int watch_queue_fd, int watch_id)
security/keys/keyctl.c:keyctl_watch_key(key_serial_t id, int watch_queue_fd, int watch_id)
include/linux/slab.h:kmalloc_type(gfp_t flags)
security/keys/keyctl.c:keyctl_watch_key(key_serial_t id, int watch_queue_fd, int watch_id)
request_key()
func for case 802aba2422de4218ad0c01b46c9525cc9d4e4aa3
__nft_release_()
net/netfilter/nf_tables_api.c:__nft_release_table(struct net *net, struct nft_table *table)
net/netfilter/nf_tables_api.c:__nft_release_tables(struct net *net)
_destroy()
net/netfilter/nf_tables_api.c:nf_tables_chain_destroy(struct nft_ctx *ctx)
net/netfilter/nf_tables_api.c:nf_tables_delchain(struct sk_buff *skb, const struct nfnl_info *info, const struct nlattr * const nla[])
net/netfilter/nf_tables_api.c:nf_tables_delrule(struct sk_buff *skb, const struct nfnl_info *info, const struct nlattr * const nla[])
net/netfilter/nf_tables_api.c:nf_tables_delset(struct sk_buff *skb, const struct nfnl_info *info, const struct nlattr * const nla[])
net/netfilter/nf_tables_api.c:nf_tables_deltable(struct sk_buff *skb, const struct nfnl_info *info, const struct nlattr * const nla[])
net/netfilter/nf_tables_api.c:nf_tables_exit_net(struct net *net)
net/netfilter/nf_tables_api.c:nf_tables_rule_destroy(const struct nft_ctx *ctx, struct nft_rule *rule)
nf_tables_set_destroy()
net/netfilter/nf_tables_api.c:nf_tables_table_destroy(struct nft_ctx *ctx)
net/netfilter/nf_tables_api.c:nft_chain_release_hook(struct nft_chain_hook *hook)
net/netfilter/nf_tables_api.c:nft_netdev_unregister_hooks(struct net *net, struct list_head *hook_list, bool release_netdev)
net/netfilter/nf_tables_api.c:nft_set_elem_destroy(const struct nft_set *set, void *elem, bool destroy_expr)
net/netfilter/nf_tables_api.c:nft_trans_alloc_gfp()
net/core/net_namespace.c:__peernet2id(const struct net *net, struct net *peer)
net/core/net_namespace.c:__unregister_pernet_operations(struct pernet_operations *ops)
net/core/net_namespace.c:alloc_netid(struct net *net, struct net *peer, int reqid)
net/core/net_namespace.c:cleanup_net(struct work_struct *work)
net/core/net_namespace.c:copy_net_ns()
net/core/net_namespace.c:get_net_ns_by_id()
net/core/net_namespace.c:net_alloc()
net/core/net_namespace.c:net_drop_ns(void *p)
net/core/net_namespace.c:ops_exit_list(const struct pernet_operations *ops, struct list_head *net_exit_list)
net/core/net_namespace.c:ops_free_list(const struct pernet_operations *ops, struct list_head *net_exit_list)
net/core/net_namespace.c:ops_pre_exit_list(const struct pernet_operations *ops, struct list_head *net_exit_list)
net/core/net_namespace.c:peernet2id_alloc(struct net *net, struct net *peer, gfp_t gfp)
net/core/net_namespace.c:register_pernet_device(struct pernet_operations *ops)
net/core/net_namespace.c:setup_net(struct net *net, struct user_namespace *user_ns)
net/core/net_namespace.c:unhash_nsid(struct net *net, struct net *last)
net_exit_batch()
net_init()
net/netfilter/nfnetlink.c:nfnetlink_bind(struct net *net, int group)
net/netfilter/nfnetlink.c:nfnetlink_bind_event(struct net *net, unsigned int group)
net/netfilter/nfnetlink.c:nfnetlink_init(void)
net/netfilter/nfnetlink.c:nfnetlink_net_exit_batch(struct list_head *net_exit_list)
net/netfilter/nfnetlink.c:nfnetlink_net_init(struct net *net)
net/netfilter/nfnetlink.c:nfnetlink_rcv(struct sk_buff *skb)
net/netfilter/nfnetlink.c:nfnetlink_rcv_batch(struct sk_buff *skb, struct nlmsghdr *nlh, u16 subsys_id, u32 genid)
net/netfilter/nfnetlink.c:nfnetlink_rcv_msg(struct sk_buff *skb, struct nlmsghdr *nlh, struct netlink_ext_ack *extack)
net/netfilter/nfnetlink.c:nfnetlink_rcv_skb_batch(struct sk_buff *skb, struct nlmsghdr *nlh)
net/netfilter/nfnetlink.c:nfnetlink_subsys_register(const struct nfnetlink_subsystem *n)
net/netfilter/nfnetlink.c:nfnetlink_unbind(struct net *net, int group)
net/netfilter/nfnetlink.c:nfnl_err_add(struct list_head *list, struct nlmsghdr *nlh, int err, const struct netlink_ext_ack *extack)
net/netfilter/nfnetlink.c:nfnl_err_deliver(struct list_head *err_list, struct sk_buff *skb)
net/netfilter/nfnetlink.c:nfnl_err_reset(struct list_head *err_list)
net/core/net_namespace.c:cleanup_net(struct work_struct *work)
kernel/workqueue.c:create_worker()
kernel/workqueue.c:destroy_worker(struct worker *worker)
kernel/workqueue.c:destroy_workqueue(struct workqueue_struct *wq)
flush_workqueue()
net/core/net_namespace.c:ops_exit_list(const struct pernet_operations *ops, struct list_head *net_exit_list)
process_one_work()
kernel/workqueue.c:worker_thread(void *__worker)
net/netfilter/nf_tables_core.c:__nft_trace_verdict(struct nft_traceinfo *info, const struct nft_chain *chain, const struct nft_regs *regs)
net/netfilter/nf_tables_core.c:expr_call_ops_eval(const struct nft_expr *expr, struct nft_regs *regs, struct nft_pktinfo *pkt)
nf_tables_core()
net/netfilter/nf_tables_core.c:nft_bitwise_fast_eval(const struct nft_expr *expr, struct nft_regs *regs)
net/netfilter/nf_tables_core.c:nft_cmp_fast_eval(const struct nft_expr *expr, struct nft_regs *regs)
net/netfilter/nf_tables_core.c:nft_do_chain(struct nft_pktinfo *pkt, void *priv)
net/netfilter/nf_tables_core.c:nft_payload_fast_eval(const struct nft_expr *expr, struct nft_regs *regs, const struct nft_pktinfo *pkt)
net/netfilter/nf_tables_core.c:nft_trace_packet(const struct nft_pktinfo *pkt, struct nft_traceinfo *info, const struct nft_chain *chain, const struct nft_rule_dp *rule, enum nft_trace_types type)
net/netfilter/nf_tables_core.c:nft_update_chain_stats(const struct nft_chain *chain, const struct nft_pktinfo *pkt)
NFT_BATCH()
af_netlink()
net/netlink/af_netlink.c:netlink_alloc_large_skb()
net/netlink/af_netlink.c:netlink_create(struct net *net, struct socket *sock, int protocol, int kern)
net/netlink/af_netlink.c:netlink_getsockbyportid()
net/netlink/af_netlink.c:netlink_insert(struct sock *sk, u32 portid)
net/netlink/af_netlink.c:netlink_rcv_skb(struct sk_buff *skb, int (*cb)(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *))
net/netlink/af_netlink.c:netlink_release(struct socket *sock)
net/netlink/af_netlink.c:netlink_sendmsg(struct socket *sock, struct msghdr *msg, size_t len)
net/netlink/af_netlink.c:netlink_unicast(struct sock *ssk, struct sk_buff *skb, u32 portid, int nonblock)
net/netfilter/nft_limit.c:nft_limit_eval(struct nft_limit_priv *priv, u64 cost)
net/netfilter/nft_limit.c:nft_limit_init(struct nft_limit_priv *priv, const struct nlattr * const tb[], bool pkts)
net/netfilter/nft_limit.c:nft_limit_pkts_init(const struct nft_ctx *ctx, const struct nft_expr *expr, const struct nlattr * const tb[])
kernel/nsproxy.c:copy_namespaces(unsigned long flags, struct task_struct *tsk)
kernel/nsproxy.c:create_new_namespaces()
kernel/nsproxy.c:unshare_nsproxy_namespaces(unsigned long unshare_flags, struct nsproxy **new_nsp, struct cred *new_cred, struct fs_struct *new_fs)
net/socket.c:kernel_sendmsg_locked(struct sock *sk, struct msghdr *msg, struct kvec *vec, size_t num, size_t size)
net/socket.c:sock_sendmsg(struct socket *sock, struct msghdr *msg)
net/socket.c:sock_sendmsg_nosec(struct socket *sock, struct msghdr *msg)
func for case 95277dbea9484baea60662d0243a93011a21ceb5
net/bridge/netfilter/ebtables.c:__ebt_unregister_table(struct net *net, struct ebt_table *table))
net/bridge/netfilter/ebtables.c:check_chainloops(const struct ebt_entries *chain, struct ebt_cl_stack *cl_s, unsigned int udc_cnt, unsigned int hooknr, char *base)
net/bridge/netfilter/ebtables.c:compat_copy_entries(unsigned char *data, unsigned int size_user, struct ebt_entries_buf_state *state))
net/bridge/netfilter/ebtables.c:compat_do_replace(struct net *net, sockptr_t arg, unsigned int len))
net/bridge/netfilter/ebtables.c:do_replace(struct net *net, sockptr_t arg, unsigned int len))
net/bridge/netfilter/ebtables.c:do_replace_finish(struct net *net, struct ebt_replace *repl, struct ebt_table_info *newinfo))
net/bridge/netfilter/ebtables.c:ebt_buf_add(struct ebt_entries_buf_state *state, const void *data, unsigned int sz))
net/bridge/netfilter/ebtables.c:ebt_check_entry(struct ebt_entry *e, struct net *net, const struct ebt_table_info *newinfo, const char *name, unsigned int *cnt, struct ebt_cl_stack *cl_s, unsigned int udc_cnt)
net/bridge/netfilter/ebtables.c:ebt_check_entry_size_and_hooks(const struct ebt_entry *e, const struct ebt_table_info *newinfo, unsigned int *n, unsigned int *cnt, unsigned int *totalcnt, unsigned int *udc_cnt)
net/bridge/netfilter/ebtables.c:ebt_cleanup_entry(struct ebt_entry *e, struct net *net, unsigned int *cnt)
net/bridge/netfilter/ebtables.c:ebt_get_udc_positions(struct ebt_entry *e, struct ebt_table_info *newinfo, unsigned int *n, struct ebt_cl_stack *udc)
net/bridge/netfilter/ebtables.c:ebt_register_table(struct net *net, const struct ebt_table *input_table, const struct nf_hook_ops *template_ops))
net/bridge/netfilter/ebtables.c:ebt_size_mwt(const struct compat_ebt_entry_mwt *match32, unsigned int size_left, enum compat_mwt type, struct ebt_entries_buf_state *state, const void *base))
net/bridge/netfilter/ebtables.c:ebt_verify_pointers(const struct ebt_replace *repl, struct ebt_table_info *newinfo)
net/bridge/netfilter/ebtables.c:translate_table(struct net *net, const char *name, struct ebt_table_info *newinfo)
net/core/net_namespace.c:__peernet2id(const struct net *net, struct net *peer)
net/core/net_namespace.c:alloc_netid(struct net *net, struct net *peer, int reqid)
net/core/net_namespace.c:cleanup_net(struct work_struct *work)
net/core/net_namespace.c:copy_net_ns()
net/core/net_namespace.c:get_net_ns_by_id()
net/core/net_namespace.c:net_alloc()
net/core/net_namespace.c:net_alloc_generic()
net/core/net_namespace.c:net_assign_generic(struct net *net, unsigned int id, void *data)
net/core/net_namespace.c:net_free(struct net *net)
net/core/net_namespace.c:ops_exit_list(const struct pernet_operations *ops, struct list_head *net_exit_list)
net/core/net_namespace.c:ops_free_list(const struct pernet_operations *ops, struct list_head *net_exit_list)
net/core/net_namespace.c:ops_pre_exit_list(const struct pernet_operations *ops, struct list_head *net_exit_list)
net/core/net_namespace.c:peernet2id_alloc(struct net *net, struct net *peer, gfp_t gfp)
net/core/net_namespace.c:setup_net(struct net *net, struct user_namespace *user_ns)
net/core/net_namespace.c:unhash_nsid(struct net *net, struct net *last)
mm/mmap.c:__vm_munmap(unsigned long start, size_t len, bool downgrade)
mm/mmap.c:do_brk_flags(struct ma_state *mas, struct vm_area_struct *vma, unsigned long addr, unsigned long len, unsigned long flags)
mm/mmap.c:do_mas_munmap(struct ma_state *mas, struct mm_struct *mm, unsigned long start, size_t len, struct list_head *uf, bool downgrade)
mm/mmap.c:do_mmap(struct file *file, unsigned long addr, unsigned long len, unsigned long prot, unsigned long flags, unsigned long pgoff, unsigned long *populate, struct list_head *uf)
mm/mmap.c:insert_vm_struct(struct mm_struct *mm, struct vm_area_struct *vma)
mm/mmap.c:mmap_region(struct file *file, unsigned long addr, unsigned long len, vm_flags_t vm_flags, unsigned long pgoff, struct list_head *uf)
mm/mmap.c:unmap_region(struct mm_struct *mm, struct maple_tree *mt, struct vm_area_struct *vma, struct vm_area_struct *prev, struct vm_area_struct *next, unsigned long start, unsigned long end)
mm/mmap.c:vm_brk_flags(unsigned long addr, unsigned long request, unsigned long flags)
EBT_SO_SET_ENTRIES()
net/socket.c:__sock_create(struct net *net, int family, int type, int protocol, struct socket **res, int kern)
net/socket.c:__sys_setsockopt(int fd, int level, int optname, char __user *user_optval, int optlen)
net/socket.c:move_addr_to_kernel(void __user *uaddr, int ulen, struct sockaddr_storage *kaddr)
net/socket.c:move_addr_to_user(struct sockaddr_storage *kaddr, int klen, void __user *uaddr, int __user *ulen)
net/socket.c:sock_alloc_file()
net/socket.c:sock_do_ioctl(struct net *net, struct socket *sock, unsigned int cmd, unsigned long arg)
net/socket.c:sock_ioctl(struct file *file, unsigned cmd, unsigned long arg)
net/socket.c:sockfd_lookup()
net/core/net_namespace.c:cleanup_net(struct work_struct *work)
kernel/workqueue.c:destroy_workqueue(struct workqueue_struct *wq)
kernel/workqueue.c:flush_workqueue_prep_pwqs(struct workqueue_struct *wq, int flush_color, int work_color)
kernel/workqueue.c:insert_wq_barrier(struct pool_workqueue *pwq, struct wq_barrier *barr, struct work_struct *target, struct worker *worker)
net/core/net_namespace.c:ops_exit_list(const struct pernet_operations *ops, struct list_head *net_exit_list)
process_one_work()
kernel/workqueue.c:put_unbound_pool(struct worker_pool *pool)
kernel/workqueue.c:worker_thread(void *__worker)
mm/kasan/report.c:kasan_report(unsigned long addr, size_t size, bool is_write, unsigned long ip)
mm/kasan/report.c:print_address_description(void *addr, u8 tag, struct kasan_report_info *info)
mm/kasan/report.c:print_report(struct kasan_report_info *info)
net/bridge/netfilter/ebtables.c:__ebt_unregister_table(struct net *net, struct ebt_table *table))
dump_stack()
lib/dump_stack.c:dump_stack_print_info(const char *log_lvl)
lib/dump_stack.c:dump_stack_set_arch_desc(const char *fmt, ...)
net/bridge/netfilter/ebtables.c:__ebt_unregister_table(struct net *net, struct ebt_table *table))
entry_64()
func for case a1a049fcf154a2c466232111c09a030ac656a833
drivers/net/wireguard/send.c:calculate_skb_padding(struct sk_buff *skb)
drivers/net/wireguard/send.c:encrypt_packet(struct sk_buff *skb, struct noise_keypair *keypair)
drivers/net/wireguard/send.c:keep_key_fresh(struct wg_peer *peer)
drivers/net/wireguard/send.c:wg_packet_create_data(struct sk_buff *first)
drivers/net/wireguard/send.c:wg_packet_create_data_done(struct sk_buff *first, struct wg_peer *peer)
drivers/net/wireguard/send.c:wg_packet_encrypt_worker(struct work_struct *work)
drivers/net/wireguard/send.c:wg_packet_send_handshake_initiation(struct wg_peer *peer)
drivers/net/wireguard/send.c:wg_packet_send_handshake_response(struct wg_peer *peer)
drivers/net/wireguard/send.c:wg_packet_send_keepalive(struct wg_peer *peer)
drivers/net/wireguard/send.c:wg_packet_send_queued_handshake_initiation(struct wg_peer *peer, bool is_retry)
drivers/net/wireguard/send.c:wg_packet_send_staged_packets(struct wg_peer *peer)
drivers/net/wireguard/send.c:wg_packet_tx_worker(struct work_struct *work)
drivers/net/wireguard/device.c:wg_destruct(struct net_device *dev)
drivers/net/wireguard/device.c:wg_netdevice_notification(struct notifier_block *nb, unsigned long action, void *data)
drivers/net/wireguard/device.c:wg_newlink(struct net *src_net, struct net_device *dev, struct nlattr *tb[], struct nlattr *data[], struct netlink_ext_ack *extack)
drivers/net/wireguard/device.c:wg_open(struct net_device *dev)
drivers/net/wireguard/device.c:wg_pm_notification(struct notifier_block *nb, unsigned long action, void *data)
drivers/net/wireguard/device.c:wg_setup(struct net_device *dev)
drivers/net/wireguard/device.c:wg_stop(struct net_device *dev)
drivers/net/wireguard/device.c:wg_xmit(struct sk_buff *skb, struct net_device *dev)
net/core/rtnetlink.c:__rtnl_link_register(struct rtnl_link_ops *ops)
net/core/rtnetlink.c:do_setlink(const struct sk_buff *skb, struct net_device *dev, struct ifinfomsg *ifm, struct netlink_ext_ack *extack, struct nlattr **tb, char *ifname, int status)
net/core/rtnetlink.c:rtnetlink_send(struct sk_buff *skb, struct net *net, u32 pid, unsigned int group, int echo)
net/core/rtnetlink.c:rtnl_configure_link(struct net_device *dev, const struct ifinfomsg *ifm)
net/core/rtnetlink.c:rtnl_create_link()
net/core/rtnetlink.c:rtnl_delete_link(struct net_device *dev)
net/core/rtnetlink.c:rtnl_dellink(struct sk_buff *skb, struct nlmsghdr *nlh, struct netlink_ext_ack *extack)
net/core/rtnetlink.c:rtnl_fdb_add(struct sk_buff *skb, struct nlmsghdr *nlh, struct netlink_ext_ack *extack)
net/core/rtnetlink.c:rtnl_fdb_del(struct sk_buff *skb, struct nlmsghdr *nlh, struct netlink_ext_ack *extack)
net/core/rtnetlink.c:rtnl_fdb_notify(struct net_device *dev, u8 *addr, u16 vid, int type, u16 ndm_state)
net/core/rtnetlink.c:rtnl_fill_ifinfo(struct sk_buff *skb, struct net_device *dev, struct net *src_net, int type, u32 pid, u32 seq, u32 change, unsigned int flags, u32 ext_filter_mask, u32 event, int *new_nsid, int new_ifindex, int tgt_netnsid, gfp_t gfp)
net/core/rtnetlink.c:rtnl_link_fill(struct sk_buff *skb, const struct net_device *dev)
net/core/rtnetlink.c:rtnl_link_register(struct rtnl_link_ops *ops)
net/core/rtnetlink.c:rtnl_notify(struct sk_buff *skb, struct net *net, u32 pid, u32 group, struct nlmsghdr *nlh, gfp_t flags)
net/core/rtnetlink.c:rtnl_setlink(struct sk_buff *skb, struct nlmsghdr *nlh, struct netlink_ext_ack *extack)
net/core/skbuff.c:pskb_expand_head(struct sk_buff *skb, int nhead, int ntail, gfp_t gfp_mask)
net/core/skbuff.c:skb_copy_bits(const struct sk_buff *skb, int offset, void *to, int len)
net/core/skbuff.c:skb_copy_expand()
net/core/skbuff.c:skb_cow_data(struct sk_buff *skb, int tailbits, struct sk_buff **trailer)
net/core/skbuff.c:skb_shift(struct sk_buff *tgt, struct sk_buff *skb, int shiftlen)
net/core/skbuff.c:skb_split(struct sk_buff *skb, struct sk_buff *skb1, const u32 len)
net/core/skbuff.c:skb_store_bits(struct sk_buff *skb, int offset, const void *from, int len)
net/core/skbuff.c:skb_zerocopy(struct sk_buff *to, struct sk_buff *from, int len, int hlen)
kernel/workqueue.c:__queue_work(int cpu, struct workqueue_struct *wq, struct work_struct *work)
kernel/workqueue.c:create_worker()
kernel/workqueue.c:destroy_worker(struct worker *worker)
kernel/workqueue.c:insert_work(struct pool_workqueue *pwq, struct work_struct *work, struct list_head *head, unsigned int extra_flags)
process_one_work()
kernel/workqueue.c:process_scheduled_works(struct worker *worker)
kernel/workqueue.c:worker_set_flags(struct worker *worker, unsigned int flags)
kernel/workqueue.c:worker_thread(void *__worker)
drivers/net/wireguard/queueing.c:wg_packet_percpu_multicore_worker_alloc()
drivers/net/wireguard/queueing.c:wg_packet_queue_init(struct crypt_queue *queue, work_func_t function, bool multicore, unsigned int len)
net/core/dev.c:__netif_receive_skb_core(struct sk_buff *skb, bool pfmemalloc, struct packet_type **ppt_prev)
net/core/dev.c:dev_gro_receive(struct napi_struct *napi, struct sk_buff *skb)
net/core/dev.c:dev_hard_start_xmit()
net/core/dev.c:dev_queue_xmit_nit(struct sk_buff *skb, struct net_device *dev)
net/core/dev.c:napi_gro_receive(struct napi_struct *napi, struct sk_buff *skb)
net/core/dev.c:netif_receive_skb_internal(struct sk_buff *skb)
net/core/dev.c:netif_rx_internal(struct sk_buff *skb)
net/core/dev.c:netif_set_real_num_tx_queues(struct net_device *dev, unsigned int txq)
net/socket.c:____sys_sendmsg(struct socket *sock, struct msghdr *msg_sys, unsigned int flags, struct used_address *used_address, unsigned int allowed_msghdr_flags)
net/socket.c:___sys_sendmsg(struct socket *sock, struct user_msghdr __user *msg, struct msghdr *msg_sys, unsigned int flags, struct used_address *used_address, unsigned int allowed_msghdr_flags)
net/socket.c:__sys_sendmsg(int fd, struct user_msghdr __user *msg, unsigned int flags, bool forbid_cmsg_compat)
drivers/net/wireguard/send.c:calculate_skb_padding(struct sk_buff *skb)
drivers/net/wireguard/send.c:encrypt_packet(struct sk_buff *skb, struct noise_keypair *keypair)
drivers/net/wireguard/send.c:wg_packet_encrypt_worker(struct work_struct *work)
func for case ab98490c0e3b48a71b7c203ee51366c99ceeda84
NFT_MSG_NEWFLOWTABLE()
net/netfilter/nf_tables_api.c:nf_tables_chain_destroy(struct nft_ctx *ctx)
net/netfilter/nf_tables_api.c:nf_tables_expr_destroy(const struct nft_ctx *ctx, struct nft_expr *expr)
net/netfilter/nf_tables_api.c:nf_tables_flowtable_destroy(struct nft_flowtable *flowtable)
net/netfilter/nf_tables_api.c:nf_tables_flowtable_parse_hook(const struct nft_ctx *ctx, const struct nlattr *attr, struct nft_flowtable *flowtable)
net/netfilter/nf_tables_api.c:nf_tables_newflowtable(struct net *net, struct sock *nlsk, struct sk_buff *skb, const struct nlmsghdr *nlh, const struct nlattr * const nla[], struct netlink_ext_ack *extack)
net/netfilter/nf_tables_api.c:nf_tables_parse_netdev_hooks(struct net *net, const struct nlattr *attr, struct list_head *hook_list)
net/netfilter/nf_tables_api.c:nf_tables_rule_destroy(const struct nft_ctx *ctx, struct nft_rule *rule)
net/netfilter/nf_tables_api.c:nft_chain_parse_hook(struct net *net, const struct nlattr * const nla[], struct nft_chain_hook *hook, u8 family, bool autoload)
net/netfilter/nf_tables_api.c:nft_chain_parse_netdev(struct net *net, struct nlattr *tb[], struct list_head *hook_list)
net/netfilter/nf_tables_api.c:nft_flowtable_event(unsigned long event, struct net_device *dev, struct nft_flowtable *flowtable)
net/netfilter/nf_tables_api.c:nft_netdev_hook_alloc()
net/netfilter/nf_tables_api.c:nft_obj_destroy(const struct nft_ctx *ctx, struct nft_object *obj)
net/netfilter/nf_tables_api.c:nft_register_flowtable_net_hooks(struct net *net, struct nft_table *table, struct nft_flowtable *flowtable)
net/netfilter/nf_tables_api.c:nft_set_destroy(struct nft_set *set)
net/netfilter/nf_tables_api.c:nft_trans_flowtable_add(struct nft_ctx *ctx, int msg_type, struct nft_flowtable *flowtable)
net/netfilter/nfnetlink.c:nfnetlink_bind(struct net *net, int group)
net/netfilter/nfnetlink.c:nfnetlink_find_client()
net/netfilter/nfnetlink.c:nfnetlink_init(void)
net/netfilter/nfnetlink.c:nfnetlink_net_exit_batch(struct list_head *net_exit_list)
net/netfilter/nfnetlink.c:nfnetlink_net_init(struct net *net)
net/netfilter/nfnetlink.c:nfnetlink_rcv(struct sk_buff *skb)
net/netfilter/nfnetlink.c:nfnetlink_rcv_batch(struct sk_buff *skb, struct nlmsghdr *nlh, u16 subsys_id, u32 genid)
net/netfilter/nfnetlink.c:nfnetlink_rcv_msg(struct sk_buff *skb, struct nlmsghdr *nlh, struct netlink_ext_ack *extack)
net/netfilter/nfnetlink.c:nfnetlink_rcv_skb_batch(struct sk_buff *skb, struct nlmsghdr *nlh)
net/netfilter/nfnetlink.c:nfnetlink_subsys_register(const struct nfnetlink_subsystem *n)
nfnl_err_()
net/netfilter/nfnetlink.c:nfnl_err_add(struct list_head *list, struct nlmsghdr *nlh, int err, const struct netlink_ext_ack *extack)
net/netfilter/nfnetlink.c:nfnl_err_deliver(struct list_head *err_list, struct sk_buff *skb)
rcv_batch()
NFT_MSG_NEWFLOWTABLE()
nft_flow_offload()
net/netfilter/nft_flow_offload.c:nft_flow_offload_eval(const struct nft_expr *expr, struct nft_regs *regs, const struct nft_pktinfo *pkt)
net/netfilter/nft_flow_offload.c:nft_flow_offload_init(const struct nft_ctx *ctx, const struct nft_expr *expr, const struct nlattr * const tb[])
net/netfilter/nft_flow_offload.c:nft_flow_offload_module_init(void)
net/netfilter/nft_flow_offload.c:nft_flow_offload_skip(struct sk_buff *skb, int family)
net/netfilter/nft_flow_offload.c:nft_flow_route(const struct nft_pktinfo *pkt, const struct nf_conn *ct, struct nf_flow_route *route, enum ip_conntrack_dir dir)
net/netfilter/nf_tables_core.c:expr_call_ops_eval(const struct nft_expr *expr, struct nft_regs *regs, struct nft_pktinfo *pkt)
nf_tables_api()
nf_tables_core()
net/netfilter/nf_tables_core.c:nf_tables_core_module_exit(void)
net/netfilter/nf_tables_core.c:nf_tables_core_module_init(void)
net/netfilter/nf_tables_core.c:nft_cmp_fast_eval(const struct nft_expr *expr, struct nft_regs *regs)
net/netfilter/nf_tables_core.c:nft_do_chain(struct nft_pktinfo *pkt, void *priv)
net/netfilter/nf_tables_core.c:nft_payload_fast_eval(const struct nft_expr *expr, struct nft_regs *regs, const struct nft_pktinfo *pkt)
net/netfilter/nf_tables_core.c:nft_update_chain_stats(const struct nft_chain *chain, const struct nft_pktinfo *pkt)
nf_tables()
nf_tables_api()
include/net/netfilter/nf_tables.h:nft_set_elem_mark_busy(struct nft_set_ext *ext)
include/net/netfilter/nf_tables.h:nft_set_ext_add_length(struct nft_set_ext_tmpl *tmpl, u8 id, unsigned int len)
include/net/netfilter/nf_tables.h:nft_set_gc_batch_check()
net/netfilter/nf_tables_api.c:nf_tables_flowtable_parse_hook(const struct nft_ctx *ctx, const struct nlattr *attr, struct nft_flowtable *flowtable)
net/netfilter/nf_tables_api.c:nf_tables_newflowtable(struct net *net, struct sock *nlsk, struct sk_buff *skb, const struct nlmsghdr *nlh, const struct nlattr * const nla[], struct netlink_ext_ack *extack)
net/netfilter/nf_tables_api.c:nf_tables_parse_netdev_hooks(struct net *net, const struct nlattr *attr, struct list_head *hook_list)
net/netfilter/nfnetlink.c:nfnetlink_rcv(struct sk_buff *skb)
net/netfilter/nfnetlink.c:nfnetlink_rcv_batch(struct sk_buff *skb, struct nlmsghdr *nlh, u16 subsys_id, u32 genid)
net/netfilter/nfnetlink.c:nfnetlink_rcv_skb_batch(struct sk_buff *skb, struct nlmsghdr *nlh)
nft_flowtable_hook_destroy()
net/netfilter/nf_tables_api.c:nft_netdev_hook_alloc()
net/netlink/af_netlink.c:__netlink_sendskb(struct sock *sk, struct sk_buff *skb)
af_netlink()
net/netlink/af_netlink.c:netlink_alloc_large_skb()
net/netlink/af_netlink.c:netlink_attachskb(struct sock *sk, struct sk_buff *skb, long *timeo, struct sock *ssk)
net/netlink/af_netlink.c:netlink_rcv_skb(struct sk_buff *skb, int (*cb)(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *))
net/netlink/af_netlink.c:netlink_sendmsg(struct socket *sock, struct msghdr *msg, size_t len)
net/netlink/af_netlink.c:netlink_trim()
net/netlink/af_netlink.c:netlink_unicast(struct sock *ssk, struct sk_buff *skb, u32 portid, int nonblock)
net/netlink/af_netlink.c:netlink_unicast_kernel(struct sock *sk, struct sk_buff *skb, struct sock *ssk)
nf_tables()
nf_tables_api()
nft_compat()
net/netfilter/nf_tables_api.c:nft_netdev_hook_alloc()
nf_tables()
nf_tables_api()
nft_meta()
net/netfilter/nf_tables_api.c:nft_netdev_hook_alloc()
nf_tables()
nf_tables_api()
net/netfilter/nf_tables_api.c:nf_tables_newflowtable(struct net *net, struct sock *nlsk, struct sk_buff *skb, const struct nlmsghdr *nlh, const struct nlattr * const nla[], struct netlink_ext_ack *extack)
nft_nat()
net/netfilter/nf_tables_api.c:nft_netdev_hook_alloc()
func for case bf3e592d3ed61b8f86b8ffba072adcde5485a5f6
fs/notify/fanotify/fanotify.c:fanotify_alloc_error_event()
fs/notify/fanotify/fanotify.c:fanotify_alloc_event()
fs/notify/fanotify/fanotify.c:fanotify_alloc_fid_event()
fs/notify/fanotify/fanotify.c:fanotify_alloc_name_event()
fs/notify/fanotify/fanotify.c:fanotify_alloc_path_event()
fs/notify/fanotify/fanotify.c:fanotify_alloc_perm_event()
fs/notify/fanotify/fanotify.c:fanotify_encode_fh(struct fanotify_fh *fh, struct inode *inode, unsigned int fh_len, unsigned int *hash, gfp_t gfp)
fs/notify/fanotify/fanotify.c:fanotify_free_event(struct fsnotify_group *group, struct fsnotify_event *fsn_event)
fs/notify/fanotify/fanotify.c:fanotify_free_group_priv(struct fsnotify_group *group)
fs/notify/fanotify/fanotify.c:fanotify_get_response(struct fsnotify_group *group, struct fanotify_perm_event *event, struct fsnotify_iter_info *iter_info)
fs/notify/fanotify/fanotify.c:fanotify_group_event_mask(struct fsnotify_group *group, struct fsnotify_iter_info *iter_info, u32 *match_mask, u32 event_mask, const void *data, int data_type, struct inode *dir)
fs/notify/fanotify/fanotify.c:fanotify_handle_event(struct fsnotify_group *group, u32 mask, const void *data, int data_type, struct inode *dir, const struct qstr *file_name, u32 cookie, struct fsnotify_iter_info *iter_info)
fs/notify/fanotify/fanotify.c:fanotify_insert_event(struct fsnotify_group *group, struct fsnotify_event *fsn_event)
fs/notify/fanotify/fanotify.c:fanotify_merge(struct fsnotify_group *group, struct fsnotify_event *event)
fs/notify/fanotify/fanotify.c:fanotify_should_merge(struct fanotify_event *old, struct fanotify_event *new)
mm/slab.c:___cache_free(struct kmem_cache *cachep, void *objp, unsigned long caller)
mm/slab.c:__cache_free(struct kmem_cache *cachep, void *objp, unsigned long caller)
mm/slab.c:cache_alloc_refill()
mm/slab.c:cache_flusharray(struct kmem_cache *cachep, struct array_cache *ac)
mm/slab.c:cache_grow_begin()
mm/slab.c:cache_grow_end(struct kmem_cache *cachep, struct slab *slab)
mm/slab.c:drain_array(struct kmem_cache *cachep, struct kmem_cache_node *n, struct array_cache *ac, int node)
mm/slab.c:enable_cpucache(struct kmem_cache *cachep, gfp_t gfp)
mm/slab.c:free_block(struct kmem_cache *cachep, void **objpp, int nr_objects, int node, struct list_head *list)
kmem_cache_alloc()
mm/slab.c:kmem_cache_free(struct kmem_cache *cachep, void *objp)
mm/slab.c:kmem_freepages(struct kmem_cache *cachep, struct slab *slab)
mm/slab.c:kmem_getpages()
mm/slab.c:setup_cpu_cache(struct kmem_cache *cachep, gfp_t gfp)
mm/slab.c:slab_alloc()
kernel/sched/core.c:__might_resched(const char *file, int line, unsigned int offsets)
kernel/sched/core.c:__might_sleep(const char *file, int line)
kernel/sched/core.c:__schedule(unsigned int sched_mode)
kernel/sched/core.c:context_switch()
include/linux/sched/mm.h:might_alloc(gfp_t gfp_mask)
kernel/sched/core.c:preempt_schedule_irq(void)
kernel/sched/core.c:try_to_wake_up(struct task_struct *p, unsigned int state, int wake_flags)
fs/notify/fsnotify.c:__fsnotify_parent(struct dentry *dentry, __u32 mask, const void *data, int data_type)
fs/notify/fsnotify.c:__fsnotify_update_child_dentry_flags(struct inode *inode)
fs/notify/fsnotify.c:fsnotify_handle_event(struct fsnotify_group *group, __u32 mask, const void *data, int data_type, struct inode *dir, const struct qstr *name, u32 cookie, struct fsnotify_iter_info *iter_info)
fs/notify/fsnotify.c:fsnotify_handle_inode_event(struct fsnotify_group *group, struct fsnotify_mark *inode_mark, u32 mask, const void *data, int data_type, struct inode *dir, const struct qstr *name, u32 cookie)
fsnotify_iter_()
fs/notify/fsnotify.c:fsnotify_iter_next(struct fsnotify_iter_info *iter_info)
fs/notify/fsnotify.c:fsnotify_iter_select_report_types(struct fsnotify_iter_info *iter_info)
fs/notify/fsnotify.c:fsnotify_unmount_inodes(struct super_block *sb)
fs/notify/fsnotify.c:send_to_group(__u32 mask, const void *data, int data_type, struct inode *dir, const struct qstr *file_name, u32 cookie, struct fsnotify_iter_info *iter_info)
fs/iomap/direct-io.c:__iomap_dio_rw()
fs/iomap/direct-io.c:iomap_dio_bio_end_io(struct bio *bio)
fs/iomap/direct-io.c:iomap_dio_bio_iter(const struct iomap_iter *iter, struct iomap_dio *dio)
fs/iomap/direct-io.c:iomap_dio_complete(struct iomap_dio *dio)
fs/iomap/direct-io.c:iomap_dio_complete_work(struct work_struct *work)
fs/iomap/direct-io.c:iomap_dio_iter(const struct iomap_iter *iter, struct iomap_dio *dio)
fs/iomap/direct-io.c:iomap_dio_submit_bio(const struct iomap_iter *iter, struct iomap_dio *dio, struct bio *bio, loff_t pos)
fs/iomap/direct-io.c:iomap_dio_zero(const struct iomap_iter *iter, struct iomap_dio *dio, loff_t pos, unsigned len)
kernel/signal.c:complete_signal(int sig, struct task_struct *p, enum pid_type type)
kernel/signal.c:do_notify_parent_cldstop(struct task_struct *tsk, bool for_ptracer, int why)
kernel/signal.c:flush_sigqueue(struct sigpending *queue)
kernel/signal.c:prepare_signal(int sig, struct task_struct *p, bool force)
kernel/signal.c:ptrace_do_notify(int signr, int exit_code, int why, unsigned long message)
ptrace_stop()
kernel/signal.c:send_signal_locked(int sig, struct kernel_siginfo *info, struct task_struct *t, enum pid_type type)
kernel/signal.c:signal_wake_up_state(struct task_struct *t, unsigned int state)
kernel/locking/lockdep.c:mark_lock_irq(struct task_struct *curr, struct held_lock *this, enum lock_usage_bit new_bit)
kernel/locking/lockdep.c:print_usage_bug(struct task_struct *curr, struct held_lock *this, enum lock_usage_bit prev_bit, enum lock_usage_bit new_bit)
kernel/locking/lockdep.c:valid_state(struct task_struct *curr, struct held_lock *this, enum lock_usage_bit new_bit, enum lock_usage_bit bad_bit)
include/linux/sched/mm.h:current_gfp_context(gfp_t flags)
fs_reclaim()
include/linux/sched/mm.h:memalloc_retry_wait(gfp_t gfp_flags)
include/linux/sched/mm.h:might_alloc(gfp_t gfp_mask)
mm/memory.c:__handle_mm_fault(struct vm_area_struct *vma, unsigned long address, unsigned int flags)
mm/memory.c:do_fault(struct vm_fault *vmf)
fs_reclaim()
mm/memory.c:handle_mm_fault(struct vm_area_struct *vma, unsigned long address, unsigned int flags, struct pt_regs *regs)
func for case cd95cb722bfa1234ac4c78345c8953ee2e7170d0
fs/ext4/extents.c:ext4_ext_binsearch_idx(struct inode *inode, struct ext4_ext_path *path, ext4_lblk_t block)
fs/ext4/extents.c:ext4_ext_convert_to_initialized(handle_t *handle, struct inode *inode, struct ext4_map_blocks *map, struct ext4_ext_path **ppath, int flags)
fs/ext4/extents.c:ext4_ext_correct_indexes(handle_t *handle, struct inode *inode, struct ext4_ext_path *path)
fs/ext4/extents.c:ext4_ext_create_new_leaf(handle_t *handle, struct inode *inode, unsigned int mb_flags, unsigned int gb_flags, struct ext4_ext_path **ppath, struct ext4_extent *newext)
fs/ext4/extents.c:ext4_ext_grow_indepth(handle_t *handle, struct inode *inode, unsigned int flags)
fs/ext4/extents.c:ext4_ext_handle_unwritten_extents(handle_t *handle, struct inode *inode, struct ext4_map_blocks *map, struct ext4_ext_path **ppath, int flags, unsigned int allocated, ext4_fsblk_t newblock)
fs/ext4/extents.c:ext4_ext_insert_extent(handle_t *handle, struct inode *inode, struct ext4_ext_path **ppath, struct ext4_extent *newext, int gb_flags)
fs/ext4/extents.c:ext4_ext_map_blocks(handle_t *handle, struct inode *inode, struct ext4_map_blocks *map, int flags)
fs/ext4/extents.c:ext4_ext_remove_space(struct inode *inode, ext4_lblk_t start, ext4_lblk_t end)
fs/ext4/extents.c:ext4_ext_rm_leaf(handle_t *handle, struct inode *inode, struct ext4_ext_path *path, struct partial_cluster *partial, ext4_lblk_t start, ext4_lblk_t end)
fs/ext4/extents.c:ext4_ext_search_left(struct inode *inode, struct ext4_ext_path *path, ext4_lblk_t *logical, ext4_fsblk_t *phys)
fs/ext4/extents.c:ext4_ext_search_right(struct inode *inode, struct ext4_ext_path *path, ext4_lblk_t *logical, ext4_fsblk_t *phys, struct ext4_extent *ret_ex)
fs/ext4/extents.c:ext4_ext_split(handle_t *handle, struct inode *inode, unsigned int flags, struct ext4_ext_path *path, struct ext4_extent *newext, int at)
fs/ext4/extents.c:ext4_ext_try_to_merge(handle_t *handle, struct inode *inode, struct ext4_ext_path *path, struct ext4_extent *ex)
fs/ext4/extents.c:ext4_find_extent()
fs/ext4/inode.c:_ext4_get_block(struct inode *inode, sector_t iblock, struct buffer_head *bh, int flags)
fs/ext4/inode.c:ext4_block_write_begin(struct page *page, loff_t pos, unsigned len, get_block_t *get_block)
fs/ext4/inode.c:ext4_da_get_block_prep(struct inode *inode, sector_t iblock, struct buffer_head *bh, int create)
fs/ext4/inode.c:ext4_da_map_blocks(struct inode *inode, sector_t iblock, struct ext4_map_blocks *map, struct buffer_head *bh)
fs/ext4/inode.c:ext4_da_write_begin(struct file *file, struct address_space *mapping, loff_t pos, unsigned len, struct page **pagep, void **fsdata)
fs/ext4/inode.c:ext4_da_write_end(struct file *file, struct address_space *mapping, loff_t pos, unsigned len, unsigned copied, struct page *page, void *fsdata)
fs/ext4/inode.c:ext4_do_writepages(struct mpage_da_data *mpd)
fs/ext4/extents.c:ext4_ext_binsearch_idx(struct inode *inode, struct ext4_ext_path *path, ext4_lblk_t block)
fs/ext4/extents.c:ext4_find_extent()
fs/ext4/inode.c:ext4_insert_delayed_block(struct inode *inode, ext4_lblk_t lblk)
fs/ext4/inode.c:ext4_iomap_alloc(struct inode *inode, struct ext4_map_blocks *map, unsigned int flags)
fs/ext4/inode.c:ext4_iomap_begin(struct inode *inode, loff_t offset, loff_t length, unsigned flags, struct iomap *iomap, struct iomap *srcmap)
fs/ext4/inode.c:ext4_map_blocks(handle_t *handle, struct inode *inode, struct ext4_map_blocks *map, int flags)
fs/ext4/inode.c:ext4_set_iomap(struct inode *inode, struct iomap *iomap, struct ext4_map_blocks *map, loff_t offset, loff_t length, unsigned int flags)
fs/ext4/inode.c:ext4_write_begin(struct file *file, struct address_space *mapping, loff_t pos, unsigned len, struct page **pagep, void **fsdata)
fs/ext4/inode.c:ext4_write_end(struct file *file, struct address_space *mapping, loff_t pos, unsigned len, unsigned copied, struct page *page, void *fsdata)
fs/ext4/inode.c:mpage_map_one_extent(handle_t *handle, struct mpage_da_data *mpd)
fs/ext4/file.c:ext4_buffered_write_iter(struct kiocb *iocb, struct iov_iter *from)
fs/ext4/file.c:ext4_dax_huge_fault(struct vm_fault *vmf, enum page_entry_size pe_size)
fs/ext4/file.c:ext4_dax_write_iter(struct kiocb *iocb, struct iov_iter *from)
fs/ext4/file.c:ext4_dio_write_checks(struct kiocb *iocb, struct iov_iter *from, bool *ilock_shared, bool *extend)
fs/ext4/file.c:ext4_dio_write_end_io(struct kiocb *iocb, ssize_t size, int error, unsigned int flags)
fs/ext4/file.c:ext4_dio_write_iter(struct kiocb *iocb, struct iov_iter *from)
fs/ext4/file.c:ext4_file_mmap(struct file *file, struct vm_area_struct *vma)
fs/ext4/file.c:ext4_file_open(struct inode *inode, struct file *filp)
fs/ext4/file.c:ext4_file_write_iter(struct kiocb *iocb, struct iov_iter *from)
fs/ext4/extents.c:ext4_find_extent()
fs/ext4/file.c:ext4_generic_write_checks(struct kiocb *iocb, struct iov_iter *from)
fs/ext4/file.c:ext4_handle_inode_extension(struct inode *inode, loff_t offset, ssize_t written, size_t count)
fs/ext4/file.c:ext4_llseek(struct file *file, loff_t offset, int whence)
fs/ext4/file.c:ext4_overwrite_io(struct inode *inode, loff_t pos, loff_t len)
fs/ext4/file.c:ext4_release_file(struct inode *inode, struct file *filp)
fs/ext4/file.c:ext4_sample_last_mounted(struct super_block *sb, struct vfsmount *mnt)
handle_inode_extension()
release_file()
fs/ext4/super.c:__ext4_fill_super(struct fs_context *fc, struct super_block *sb)
fs/ext4/super.c:ext4_clear_inode(struct inode *inode)
fs/ext4/super.c:ext4_commit_super(struct super_block *sb)
fs/ext4/super.c:ext4_fill_super(struct super_block *sb, struct fs_context *fc)
fs/ext4/super.c:ext4_handle_error(struct super_block *sb, bool force_ro, int error, __u32 ino, __u64 block, const char *func, unsigned int line)
fs/ext4/super.c:ext4_load_and_init_journal(struct super_block *sb, struct ext4_super_block *es, struct ext4_fs_context *ctx)
fs/ext4/super.c:ext4_load_super(struct super_block *sb, ext4_fsblk_t *lsb, int silent)
fs/ext4/super.c:ext4_update_super(struct super_block *sb)
mm/page_alloc.c:__alloc_contig_migrate_range(struct compact_control *cc, unsigned long start, unsigned long end)
mm/page_alloc.c:__free_one_page(struct page *page, unsigned long pfn, struct zone *zone, unsigned int order, int migratetype, fpi_t fpi_flags)
mm/page_alloc.c:alloc_contig_pages()
mm/page_alloc.c:alloc_contig_range(unsigned long start, unsigned long end, unsigned migratetype, gfp_t gfp_mask)
mm/page_alloc.c:free_contig_range(unsigned long pfn, unsigned long nr_pages)
mm/page_alloc.c:free_one_page(struct zone *zone, struct page *page, unsigned long pfn, unsigned int order, int migratetype, fpi_t fpi_flags)
mm/page_alloc.c:free_pages_prepare(struct page *page, unsigned int order, bool check_free, fpi_t fpi_flags)
page_alloc()
mm/page_alloc.c:split_free_page(struct page *free_page, unsigned int order, unsigned long split_pfn_offset)
fs/ext4/mballoc.c:ext4_free_blocks(handle_t *handle, struct inode *inode, struct buffer_head *bh, ext4_fsblk_t block, unsigned long count, int flags)
fs/ext4/mballoc.c:ext4_mb_clear_bb(handle_t *handle, struct inode *inode, ext4_fsblk_t block, unsigned long count, int flags)
fs/ext4/mballoc.c:ext4_mb_discard_preallocations(struct super_block *sb, int needed)
fs/ext4/mballoc.c:ext4_mb_mark_diskspace_used(struct ext4_allocation_context *ac, handle_t *handle, unsigned int reserv_clstrs)
fs/ext4/mballoc.c:ext4_mb_new_blocks(handle_t *handle, struct ext4_allocation_request *ar, int *errp)
fs/ext4/mballoc.c:ext4_mb_release_group_pa(struct ext4_buddy *e4b, struct ext4_prealloc_space *pa)
fs/ext4/mballoc.c:ext4_mb_release_inode_pa(struct ext4_buddy *e4b, struct buffer_head *bitmap_bh, struct ext4_prealloc_space *pa)
fs/ext4/mballoc.c:ext4_mb_use_preallocated(struct ext4_allocation_context *ac)
fs/ext4/balloc.c:ext4_get_group_desc()
fs/ext4/balloc.c:ext4_has_free_clusters(struct ext4_sb_info *sbi, s64 nclusters, unsigned int flags)
fs/ext4/balloc.c:ext4_init_block_bitmap(struct super_block *sb, struct buffer_head *bh, ext4_group_t block_group, struct ext4_group_desc *gdp)
fs/ext4/balloc.c:ext4_new_meta_blocks(handle_t *handle, struct inode *inode, ext4_fsblk_t goal, unsigned int flags, unsigned long *count, int *errp)
fs/ext4/balloc.c:ext4_read_block_bitmap()
fs/ext4/balloc.c:ext4_read_block_bitmap_nowait()
fs/ext4/balloc.c:ext4_valid_block_bitmap(struct super_block *sb, struct ext4_group_desc *desc, ext4_group_t block_group, struct buffer_head *bh)
fs/ext4/balloc.c:ext4_validate_block_bitmap(struct super_block *sb, struct ext4_group_desc *desc, ext4_group_t block_group, struct buffer_head *bh)
mm/filemap.c:__generic_file_write_iter(struct kiocb *iocb, struct iov_iter *from)
mm/filemap.c:generic_file_write_iter(struct kiocb *iocb, struct iov_iter *from)
mm/filemap.c:generic_perform_write(struct kiocb *iocb, struct iov_iter *i)
fs/read_write.c:__kernel_write_iter(struct file *file, struct iov_iter *from, loff_t *pos)
fs/read_write.c:new_sync_write(struct file *filp, const char __user *buf, size_t len, loff_t *ppos)
fs/read_write.c:vfs_write(struct file *file, const char __user *buf, size_t count, loff_t *pos)
fs/ext4/xattr.c:ext4_xattr_block_set(handle_t *handle, struct inode *inode, struct ext4_xattr_info *i, struct ext4_xattr_block_find *bs)
fs/ext4/xattr.c:ext4_xattr_set_entry(struct ext4_xattr_info *i, struct ext4_xattr_search *s, handle_t *handle, struct inode *inode, bool is_block)
fs/ext4/xattr.c:ext4_xattr_set_handle(handle_t *handle, struct inode *inode, int name_index, const char *name, const void *value, size_t value_len, int flags)
func for case cfec079d55325bc20e929c60cc2dca149448f9b1
kernel/watch_queue.c:__post_watch_notification(struct watch_list *wlist, struct watch_notification *n, const struct cred *cred, u64 id)
kernel/watch_queue.c:__put_watch_queue(struct kref *kref)
kernel/watch_queue.c:add_watch_to_object(struct watch *watch, struct watch_list *wlist)
kernel/watch_queue.c:filter_watch_notification(const struct watch_filter *wf, const struct watch_notification *n)
kernel/watch_queue.c:get_watch_queue()
kernel/watch_queue.c:post_one_notification(struct watch_queue *wqueue, struct watch_notification *n)
kernel/watch_queue.c:remove_watch_from_object(struct watch_list *wlist, struct watch_queue *wq, u64 id, bool all)
kernel/watch_queue.c:watch_queue_clear(struct watch_queue *wqueue)
kernel/watch_queue.c:watch_queue_pipe_buf_release(struct pipe_inode_info *pipe, struct pipe_buffer *buf)
kernel/watch_queue.c:watch_queue_set_filter(struct pipe_inode_info *pipe, struct watch_notification_filter __user *_filter)
kernel/watch_queue.c:watch_queue_set_size(struct pipe_inode_info *pipe, unsigned int nr_notes)
_alloc()
_clear()
_destroy()
_disable()
_enable()
_free()
_init()
kmalloc_array()
fs/pipe.c:pipe_ioctl(struct file *filp, unsigned int cmd, unsigned long arg)
watch_queue()
watch_queue_alloc()
kernel/watch_queue.c:watch_queue_clear(struct watch_queue *wqueue)
watch_queue_destroy()
watch_queue_disable()
watch_queue_enable()
watch_queue_event()
watch_queue_filter()
watch_queue_free()
watch_queue_get()
kernel/watch_queue.c:watch_queue_init(struct pipe_inode_info *pipe)
watch_queue_notify()
watch_queue_pipe_ioctl()
watch_queue_pipe_release()
watch_queue_put()
kernel/watch_queue.c:watch_queue_set_size(struct pipe_inode_info *pipe, unsigned int nr_notes)
fs/pipe.c:alloc_pipe_info()
fs/pipe.c:create_pipe_files(struct file **res, int flags)
fs/pipe.c:free_pipe_info(struct pipe_inode_info *pipe)
fs/pipe.c:pipe_ioctl(struct file *filp, unsigned int cmd, unsigned long arg)
fs/pipe.c:pipe_release(struct inode *inode, struct file *file)
fs/pipe.c:pipe_resize_ring(struct pipe_inode_info *pipe, unsigned int nr_slots)
fs/pipe.c:pipe_set_size(struct pipe_inode_info *pipe, unsigned long arg)
fs/pipe.c:put_pipe_info(struct inode *inode, struct pipe_inode_info *pipe)
fs/ioctl.c:do_vfs_ioctl(struct file *filp, unsigned int fd, unsigned int cmd, unsigned long arg)
fs/ioctl.c:fileattr_set_prepare(struct inode *inode, const struct fileattr *old_ma, struct fileattr *fa)
fs/ioctl.c:ioctl_file_dedupe_range(struct file *file, struct file_dedupe_range __user *argp)
fs/ioctl.c:ioctl_fsfreeze(struct file *filp)
fs/ioctl.c:ioctl_fssetxattr(struct file *file, void __user *argp)
fs/ioctl.c:ioctl_fsthaw(struct file *filp)
fs/ioctl.c:ioctl_setflags(struct file *file, unsigned int __user *argp)
fs/ioctl.c:vfs_fileattr_set(struct user_namespace *mnt_userns, struct dentry *dentry, struct fileattr *fa)
include/linux/slab.h:__kmalloc_index(size_t size, bool size_is_constant)
kmalloc_array()
include/linux/slab.h:kmalloc_type(gfp_t flags)
include/linux/slab.h:kmem_cache_alloc_node_trace()
watch_queue()
mm/slab.c:cache_alloc_refill()
mm/slab.c:cache_free_debugcheck()
mm/slab.c:cache_grow_end(struct kmem_cache *cachep, struct slab *slab)
mm/slab.c:drain_array(struct kmem_cache *cachep, struct kmem_cache_node *n, struct array_cache *ac, int node)
mm/slab.c:kmem_cache_alloc_bulk(struct kmem_cache *s, gfp_t flags, size_t size, void **p)
include/linux/slab.h:kmem_cache_alloc_node_trace()
mm/slab.c:kmem_cache_alloc_trace()
mm/slab.c:kmem_cache_free(struct kmem_cache *cachep, void *objp)
mm/slab_common.c:create_kmalloc_cache()
mm/slab_common.c:kmalloc_order()
mm/slab_common.c:kmalloc_slab()
arch/x86/entry/common.c:do_syscall_64(struct pt_regs *regs, int nr)
fs/pipe.c:pipe_ioctl(struct file *filp, unsigned int cmd, unsigned long arg)
watch_queue()
kernel/watch_queue.c:watch_queue_set_size(struct pipe_inode_info *pipe, unsigned int nr_notes)
fs/file_table.c:alloc_file()
fs/file_table.c:alloc_file_clone()
fs/file_table.c:alloc_file_pseudo()
fs/file_table.c:file_free(struct file *f)
fs/pipe.c:pipe_ioctl(struct file *filp, unsigned int cmd, unsigned long arg)
watch_queue()
kernel/watch_queue.c:watch_queue_set_size(struct pipe_inode_info *pipe, unsigned int nr_notes)
